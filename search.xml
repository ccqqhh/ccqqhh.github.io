<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>1.1.p.3 参考文章</title>
      <link href="/2022/04/29/1.1.p-can-kao-wen-xian/1.1.p.3-can-kao-wen-zhang/"/>
      <url>/2022/04/29/1.1.p-can-kao-wen-xian/1.1.p.3-can-kao-wen-zhang/</url>
      
        <content type="html"><![CDATA[<h2 id="参考文章">参考文章</h2><h3 id="参考文章链接">参考文章链接</h3><ul><li><p>作者：<a href="https://blog.csdn.net/weixin_45073562">喵酱向前冲</a>，内容：mathjax语法渲染错误，https://blog.csdn.net/weixin_45073562/article/details/120289648</p></li><li><p>作者：<a href="https://blog.csdn.net/Serena_tz">Serena_tz</a>，内容：用 gitee搭建博客，https://blog.csdn.net/serena_tz/article/details/115482336</p></li><li><p>作者：<a href="https://blog.csdn.net/weixin_36401046">乔小乔jojo</a>，内容：hexod ERROR Deployer not found:git，https://blog.csdn.net/weixin_36401046/article/details/52940313</p></li><li><p>提问：如何搭建个人网站，有关网站：</p><p>https://www.zhihu.com/question/22197688</p><p>https://hexo.io/zh-cn/docs/configuration</p><p>https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</p></li><li><p>作者：闪烁之狐，内容：Hexo 博客主题之 hexo-theme-matery的介绍，https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/</p></li><li><p>作者：<a href="https://blog.csdn.net/qq_41297896">MorKANA</a>，内容：时间复杂度，https://blog.csdn.net/qq_41297896/article/details/104223612</p></li><li><p>作者：<a href="https://blog.csdn.net/weixin_43288201">看见代码就想敲</a>，内容：shell脚本语法，https://blog.csdn.net/weixin_43288201/article/details/105643692</p></li><li><p>作者：<a href="https://jingyan.baidu.com/user/npublic?uid=e826f430e5e30adccccfdf6c">我真的不知道的啦</a>，内容：极限符号，https://jingyan.baidu.com/article/414eccf6be0a6d6b431f0ae0.html</p></li><li><p>作者：<a href="https://home.cnblogs.com/u/nickchen121/">二十三岁的有德</a>，内容：本地自动发布文章到博客园，https://www.cnblogs.com/nickchen121/p/11132957.html</p></li><li><p>作者：<a href="https://www.cnblogs.com/nickchen121">二十三岁的有德</a>，内容：Python从入门到放弃，https://www.cnblogs.com/nickchen121/p/10718112.html</p></li><li><p>作者：lightzhan，内容：Joplin网页剪辑，https://lightzhan.xyz/index.php/2020/03/18/joplin-web-clipper-tutorial/</p></li><li><p>来源：互联网，内容：查看博客园的 MetaWebLogAPI，https://www.icode9.com/content-4-664692.html</p></li><li><p>作者：<a href="https://blog.csdn.net/qq_21808961">蓝蓝223</a>，内容：双击可以执行jar包，https://blog.csdn.net/qq_21808961/article/details/78442858</p></li><li><p>作者：<a href="https://blog.csdn.net/weixin_44678104">故里江添_</a>，内容：使用exe4j 将 jar 包打包成 exe命令，https://blog.csdn.net/weixin_44678104/article/details/101015065</p></li><li><p>作者：知乎用户，内容：GB2312、GBK、GB18030这几种字符集的主要区别是什么，https://www.zhihu.com/question/19677619</p></li><li><p>作者：<a href="https://www.zhihu.com/people/zhang-jun-zhao-60">张大昭</a>，内容：为什么计算机能读懂1 和 0，https://www.zhihu.com/question/20112194</p></li><li><p>作者：热心网友，内容：ASCII码是几位二进制码，https://wenwen.sogou.com/z/q657498179.htm</p></li><li><p>作者：<a href="https://home.cnblogs.com/u/malecrab/">malecrab</a>，内容：ANSI是什么编码，https://www.cnblogs.com/malecrab/p/5300486.html</p></li><li><p>转载：<a href="https://blog.csdn.net/imxiangzi">imxiangzi</a>，内容：ANSI是什么编码，https://blog.csdn.net/imxiangzi/article/details/77370160</p></li><li><p>作者：<a href="https://cloud.tencent.com/developer/user/3541135">黑泽君</a>，内容：如何查看Windows操作系统的默认编码，https://cloud.tencent.com/developer/article/1353937</p></li><li><p>作者：<a href="https://blog.csdn.net/shenwansan_gz">沈万三gz</a>，内容：什么是JIT，https://blog.csdn.net/shenwansangz/article/details/95601232</p></li><li><p>作者：<a href="https://www.jianshu.com/u/a00b505c83fb">猪_队友</a>，内容：什么是多态，https://www.jianshu.com/p/68ddb5484ca2</p></li><li><p>作者：<a href="https://blog.csdn.net/qq_42937522">Duktig丶</a>，内容：方法的重载是多态性吗，https://blog.csdn.net/qq_42937522/article/details/106563188</p></li><li><p>提问：为什么数组长度不可变，https://www.thinbug.com/q/20007600</p></li><li><p>作者：<a href="https://blog.csdn.net/chunzhilianxue">springinwinter_4all</a>，内容：Java8Instant时间戳，https://blog.csdn.net/chunzhilianxue/article/details/80974202</p></li><li><p>作者：<a href="https://blog.csdn.net/xingxiupaioxue">树上的疯子^</a>，内容：ThreadLocalRandom，https://blog.csdn.net/xingxiupaioxue/article/details/104796276/</p></li><li><p>作者：<a href="https://home.cnblogs.com/u/xfeiyun/">流浪的雨</a>，内容：集合概述，https://www.cnblogs.com/xfeiyun/p/15837566.html</p></li><li><p>作者：<a href="https://blog.csdn.net/u011138533">pNull</a>，内容：IntelliJ IDEA单元测试入门，https://blog.csdn.net/u011138533/article/details/52165577</p></li><li><p>作者：<a href="https://home.cnblogs.com/u/tangshun100/">Town125</a>，内容：boolean类型数据到底占有几个字节，https://www.cnblogs.com/tangshun100/p/13173006.html</p></li><li><p>作者：<a href="https://blog.csdn.net/weixiaodedao">微笑的小小刀</a>，内容：一篇文章搞清楚boolean到底占几个字节，https://blog.csdn.net/weixiaodedao/article/details/109506667</p></li><li><p>作者：<a href="https://blog.csdn.net/qq_17231297">公众号-老炮说Java</a>，内容：Java中 boolean类型占多少字节，https://blog.csdn.net/qq_17231297/article/details/106621963</p></li><li><p>作者：<a href="https://www.jianshu.com/u/cca22173a13f">冬天里的懒喵</a>，内容：在java中boolean 类型占多少字节，https://www.jianshu.com/p/4d0ae2bac610</p></li></ul><h3 id="引用文章原句">引用文章原句</h3><ul><li><p>作者：<a href="https://blog.csdn.net/zolalad">zolalad</a>，内容：时间复杂度与空间复杂度，https://blog.csdn.net/zolalad/article/details/11848739</p></li><li><p>作者：<a href="https://www.zhihu.com/people/xia_2">夏2同学</a>，内容：Typora中使用图床，https://zhuanlan.zhihu.com/p/137310314</p></li><li><p>作者：<a href="https://zhidao.baidu.com/usercenter?uid=c2334069236f25705e7938ad&amp;role=newteam">陌上花开luckly</a>，内容：Java用途，https://zhidao.baidu.com/question/138993898.html</p></li><li><p>作者：百度百科，内容：eclipse，https://baike.baidu.com/item/eclipse/61703</p></li><li><p>作者：廖雪峰，内容：Java教程，https://www.liaoxuefeng.com/wiki/1252599548343744</p></li><li><p>作者：<a href="https://blog.csdn.net/qq_42245219">Jackson蜜蜂</a>，内容：什么是JavaBean，https://blog.csdn.net/qq_42245219/article/details/82748460</p></li><li><p>作者：<a href="https://blog.csdn.net/bengxu">公众号/头条号：技术很有趣</a>，内容：数组下标为什么从0 开始，https://blog.csdn.net/bengxu/article/details/83477690</p></li><li><p>作者：<a href="https://blog.csdn.net/weichi7549">渣一个</a>，内容：数组下标索引为什么从0开始，https://blog.csdn.net/weichi7549/article/details/108064848</p></li><li><p>作者：<a href="https://blog.csdn.net/qq_40670946">陆顺治</a>，内容：数组下标为什么从0开始，https://blog.csdn.net/qq_40670946/article/details/83061993</p></li><li><p>提问：JavaScript 中的 Date 对象取值 month 为什么是从 0开始的，https://www.zhihu.com/question/263804983</p></li><li><p>作者：<a href="https://github.com/cenalulu">卢钧轶</a>，内容：什么是字符编码、字符集，http://cenalulu.github.io/linux/character-encoding/</p></li><li><p>作者：<a href="https://hernsong.blog.csdn.net/">Hern（宋兆恒）</a>，内容：Unicode与 UTF-8的区别，https://blog.csdn.net/qq_36761831/article/details/82291166</p></li><li><p>作者：<a href="https://blog.csdn.net/weixin_45025727">老马达</a>，内容：含 BOM 的UTF-8 与不含的区别，https://blog.csdn.net/weixin_45025727/article/details/106799649</p></li><li><p>作者：<a href="https://blog.csdn.net/u012373281">金麟十三少</a>，内容：BOM是什么意思，https://blog.csdn.net/u012373281/article/details/91410698</p></li><li><p>作者：<a href="https://blog.csdn.net/lili13897741554">DreamTech1113</a>，内容：ASCII及其它编码，https://blog.csdn.net/lili13897741554/article/details/82053351</p></li><li><p>作者： <a href="https://home.cnblogs.com/u/zwbg/">zwbg</a>，内容：类的加载时机，https://www.cnblogs.com/zwbg/p/5903527.html</p></li><li><p>作者：<a href="https://blog.csdn.net/weixin_40304387">不断前行的菜鸟_</a>，内容：字符串常量池深入解析，https://blog.csdn.net/weixin_40304387/article/details/81071816</p></li><li><p>作者：<a href="https://www.jianshu.com/u/1b9d18270e91">你想要怎样的未来</a>，内容：字符串常量池，https://www.jianshu.com/p/039d6df30fea</p></li><li><p>作者： <a href="https://home.cnblogs.com/u/gxyandwmm/">小勇DW3</a>，内容：字符串常量池，https://www.cnblogs.com/gxyandwmm/p/9495923.html</p></li><li><p>来源：互联网，内容：String Pool的实现，https://www.isolves.com/it/cxkf/yy/JAVA/2019-12-23/10492.html</p></li><li><p>作者： <a href="https://home.cnblogs.com/u/cosmos-wong/">cosmoswong</a>，内容：字符串常量池和运行时常量池在哪，https://www.cnblogs.com/cosmos-wong/p/12925299.html</p></li><li><p>作者：<a href="https://home.cnblogs.com/u/syp172654682/">小奔的早晨</a>，内容：深入浅出Java常量池，https://www.cnblogs.com/syp172654682/p/8082625.html</p></li><li><p>作者：<a href="https://blog.csdn.net/weixin_44765605">懒杰</a>，内容：JDK 8中字符串常量池在哪，https://blog.csdn.net/weixin_44765605/article/details/110737251</p></li><li><p>作者： <a href="https://home.cnblogs.com/u/skyvalley/">人菜话多帅瓜皮</a>，内容：字符串常量池处在JVM的堆中，那么是在堆的哪个部分呢，https://www.cnblogs.com/skyvalley/p/13818240.html</p></li><li><p>作者：manDD_HH，内容：还搞不定方法区、常量池、字符串常量池吗，https://www.it610.com/article/1292596715873968128.htm</p></li><li><p>作者：<a href="https://blog.csdn.net/TomAndersen">TomAndersen</a>，内容：Java字符串字面量是何时进入到字符串常量池中的，https://blog.csdn.net/TomAndersen/article/details/107147344</p></li><li><p>作者： <a href="https://home.cnblogs.com/u/holos/">holos</a>，内容：Java中几种常量池的区分，https://www.cnblogs.com/holos/p/6603379.html</p></li><li><p>作者： <a href="https://home.cnblogs.com/u/byqin/">Aj小菜</a>，内容：JVM中的堆的新生代、老年代、永久代详解，https://www.cnblogs.com/byqin/p/12512528.html</p></li><li><p>作者：<a href="https://www.zhihu.com/people/mo-ting-yu-95">剑客手中拿把刀</a>，内容：类加载过程：三大阶段，https://zhuanlan.zhihu.com/p/346333194</p></li><li><p>作者：<a href="https://home.cnblogs.com/u/yuexiaoyun/">跃小云</a>，内容：41. JVM方法区的内部结构（方法区中存储的是什么），https://www.cnblogs.com/yuexiaoyun/articles/14001254.html</p></li><li><p>作者：<a href="https://www.jianshu.com/u/bd316610ac77">笨比乔治</a>，内容：对方法区和永久代的理解，https://www.jianshu.com/p/797ec081a4aa</p></li><li><p>作者：<a href="https://home.cnblogs.com/u/chenpt/">不二尘</a>，内容：JVM类的加载机制，https://www.cnblogs.com/chenpt/p/9777367.html</p></li><li><p>作者：<a href="https://home.cnblogs.com/u/chenpt/">不二尘</a>，内容：JVM运行时数据区，https://www.cnblogs.com/chenpt/p/8953435.html</p></li><li><p>作者：<a href="https://blog.csdn.net/weixin_38719347">vanlyy</a>，内容：关于常量池，字符串常量池的整理，https://blog.csdn.net/weixin_38719347/article/details/80907944</p></li><li><p>作者：sdky，内容：JavaSE 基础，https://sdky.gitee.io/</p></li><li><p>作者：<a href="https://blog.csdn.net/feiyanaffection">phial03</a>，内容：Java集合超详解，https://blog.csdn.net/feiyanaffection/article/details/81394745</p></li><li><p>作者：<a href="https://thinkwon.blog.csdn.net/">ThinkWon</a>，内容：Java知识体系最强总结（2021版），https://blog.csdn.net/ThinkWon/article/details/103592572</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 1.1.p 参考文献 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.7.3 希尔排序</title>
      <link href="/2022/04/29/1.1.7-pai-xu-you-hua/1.1.7.3-xi-er-pai-xu/"/>
      <url>/2022/04/29/1.1.7-pai-xu-you-hua/1.1.7.3-xi-er-pai-xu/</url>
      
        <content type="html"><![CDATA[<h3 id="希尔排序">6.3.6 希尔排序</h3><p>插入排序中在逆序的情况下，每次都需要将新元素都移动到最前面，那么有没有一种办法，让大数基本在后面，小数基本在前面，这样使用insert sort 时就无需比较、交换太多次。</p><p>Shell Sort 也称缩小增量排序（diminishing increment sort），是对insert sort 的一种优化；在相距增量个元素中进行比较、交换，试图达到insert sort 中的最好情况（小的在前大的在后），再使用 insert sort完成排序。</p><p>让我们试下最糟糕的情况：逆序。</p><p>第一轮：10，9，8，7，6，5，4，3，2，1</p><p>设增量初始值为 length，每次都除以 3 + 1，第一轮时的元素间隔为 10 / 3+ 1 = 4。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">arr[4] 与 arr[0] 比较，6 &lt; 10，需要交换：(6)，9，8，7，(10)，5，4，3，2，16，10 有序arr[5] 与 arr[1] 比较，5 &lt; 9，需要交换：6，(5)，8，7，10，(9)，4，3，2，15，9 有序arr[6] 与 arr[2] 比较，4 &lt; 8，需要交换：6，5，(4)，7，10，9，(8)，3，2，14，8 有序arr[7] 与 arr[3] 比较，3 &lt; 7，需要交换：6，5，4，(3)，10，9，8，(7)，2，13，7 有序arr[8] 与 arr[4] 比较，2 &lt; 10，需要交换：6，5，4，3，(2)，9，8，7，(10)，1arr[4] 与 arr[0] 比较，2 &lt; 6，需要交换：(2)，5，4，3，(6)，9，8，7，10，12，6，10 有序备注：如果 arr[8] &gt; arr[4]，不会交换，就无需比较 arr[4]、arr[0]因为之前已经比较过了arr[9] 与 arr[5] 比较，1 &lt; 9，需要交换：2，5，4，3，6，(1)，8，7，10，(9)arr[5] 与 arr[1] 比较，1 &lt; 5，需要交换：2，(1)，4，3，6，(5)，8，7，10，91，5，9 有序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/14/b7EVM4QmeYhAytF.png" alt="未命名文件 (7)"><figcaption aria-hidden="true">未命名文件 (7)</figcaption></figure><p>第一轮交换 8 次、比较 8 次；4 种颜色。</p><p>第二轮：2，1，4，3，6，5，8，7，10，9</p><p>元素间隔（增量）为 4 / 3 + 1 = 2。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">arr[2] 与 arr[0] 比较，4 &gt; 2，无需交换2，4，8 有序arr[3] 与 arr[1] 比较，3 &gt; 1，无需交换1，3，7 有序arr[4] 与 arr[2] 比较，6 &gt; 4，无需交换无需比较 arr[2] 与 arr[0]2，4，6，10 有序arr[5] 与 arr[3] 比较，5 &gt; 3，无需交换1，3，5，9 有序arr[6] 与 arr[4] 比较，8 &gt; 6，无需交换2，4，6，8 有序arr[7] 与 arr[5] 比较，7 &gt; 5，无需交换1，3，5，7 有序arr[8] 与 arr[6] 比较，10 &gt; 6，无需交换2，4，6，8，10 有序arr[9] 与 arr[7] 比较，9 &gt; 7，无需交换1，3，5，7，9 有序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/14/8ZvGV67M4QAhXD3.png" alt="未命名文件 (9)"><figcaption aria-hidden="true">未命名文件 (9)</figcaption></figure><p>有人可能会疑惑，为什么颜色一直在变？以倒数第 3行为例，arr[0]、arr[2]、arr[4]、arr[8]（2、4、6、10）有序，所以统一使用粉色标识；当arr[6] &gt; arr[4] 时，可以证明arr[0]、arr[2]、arr[4]、arr[6]（2、4、6、8）有序，但无法证明 arr[6]一定小于 arr[8]，所以倒数第 2 行，2、4、6、8使用了浅绿，而不是粉色。</p><p>第二轮没有一次交换，因为整个排序在第一轮跳跃式的交换下已经基本有序；比较8 次；2 种颜色。</p><p>第三轮：2，1，4，3，6，5，8，7，10，9</p><p>元素间隔为 2 / 3 + 1 = 1，那么就等同于 insert sort。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">arr[1] 与 arr[0] 比较，1 &lt; 2，逆序，需要交换，交换后：(1)，(2)，4，3，6，5，8，7，10，9arr[2] 与 arr[1] 比较，4 &gt; 2，顺序，不需要交换arr[3] 与 arr[2] 比较，3 &lt; 4，交换后：1，2，(3)，(4)，6，5，8，7，10，9arr[2] 与 arr[1] 比较，3 &gt; 2，不需要交换arr[4] 与 arr[3] 比较，6 &gt; 4，不需要交换arr[5] 与 arr[4] 比较，5 &lt; 6，交换后：1，2，3，4，(5)，(6)，8，7，10，9arr[4] 与 arr[3] 比较，5 &gt; 4，不需要交换arr[6] 与 arr[5] 比较，8 &gt; 6，不需要交换arr[7] 与 arr[6] 比较，7 &lt; 8，交换后：1，2，3，4，5，6，(7)，(8)，10，9arr[6] 与 arr[5] 比较，7 &gt; 6，不需要交换arr[8] 与 arr[7] 比较，10 &gt; 8，不需要交换arr[9] 与 arr[8] 比较，9 &lt; 10，交换后：1，2，3，4，5，6，7，8，(9)，(10)arr[8] 与 arr[7] 比较，9 &gt; 8，不需要交换<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里就不画图了；</p><p>本轮交换了 5 次，比较 13 次。</p><p>统计，交换次数：13，比较次数：29。</p><p>直接用 insert sort，交换次数：45，比较次数：45。</p><p>代码实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 设 gap 初始值为 arr.length：10</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 第一轮，gap = gap / 3 + 1 = 4</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 第二轮，gap = gap / 3 + 1 = 2</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 第三轮，当元素间隔为 1 时，就是 insert sort，可以对比以前，发现有什么不同吗？</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>合并：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> gap <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    gap <span class="token operator">=</span> gap <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> gap <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>gap <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解释为何使用 do while：如果使用 while 或 for，判断条件为 gap &gt;1，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> gap <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> gap <span class="token operator">=</span> gap <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> gap <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当第二轮结束，gap = 1 时，判断条件为false，进行不了第三轮排序（最后一轮元素间隔必须为 1）；如果判断条件为gap &gt;= 1，第三轮结束，执行更新表达式 gap = 1 / 3 + 1 = 1，判断条件为true，继续第四轮、第五轮...排序，无限循环。</p><p>如果先执行后判断，第二轮结束时，gap = 2，满足条件继续第三轮循环，gap= 1，执行完后判断条件为 false，退出循环。</p><p>关于增量的取值，至今也没有个说道，我一般常用的为 gap = gap / 2、gap =gap / 3 + 1、gap = gap / 4 + 1;</p><p>当选用 gap = gap / 4 +1 时，时间复杂度我求不出来，几次尝试大概在O(n<sup>1.2</sup>) ~ O(n<sup>1.5</sup>)左右。</p><p>变体：这里按 insert sort 的第二种实现，照猫画虎。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> gap <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    gap <span class="token operator">=</span> gap <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> insertIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">int</span> insertVal <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> gap <span class="token operator">&amp;&amp;</span> insertVal <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>            insertIndex <span class="token operator">=</span> j <span class="token operator">-</span> gap<span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> insertIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>insertIndex<span class="token punctuation">]</span> <span class="token operator">=</span> insertVal<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>gap <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 1.1.7 排序优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.n.2 第六到十章</title>
      <link href="/2022/04/29/1.1.n-can-kao-da-an/1.1.n.2-di-liu-dao-shi-zhang/"/>
      <url>/2022/04/29/1.1.n-can-kao-da-an/1.1.n.2-di-liu-dao-shi-zhang/</url>
      
        <content type="html"><![CDATA[<h2 id="第六到十章">第六到十章</h2><h3 id="第六章答案">第六章答案</h3><p>6.1 编写方法用于拷贝数组。</p><p>思路：创建一个新的数组实例，长度为源数组的长度，然后遍历得到源数组的每个元素，同时将值拷贝到新的数组。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr1<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr2<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意我们并不是拷贝地址，如 int[] arr2 =arr1，而是重新创建新的实例，如现在调用此方法传入的数组为 {1，2，6}：</p><figure><img src="https://s2.loli.net/2022/04/24/OJH28CFR4ypgl5Y.png" alt="两个不同实例"><figcaption aria-hidden="true">两个不同实例</figcaption></figure><p>JDK 已提供现成的方法供我们调用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*    将 arr1 数组的元素拷贝到 arr2 中；从下标 0 开始拷贝，从 arr2 下标 0 开始放；    一共拷贝 arr1.length 个元素*/</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*    创建新的长度为 arr1.length 的数组，同时将 arr1 数组中 arr1.length     个元素拷贝到新的数组中，并返回此数组。*/</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>6.2 编写方法用于反转数组，例：{12，25，67，2} -----&gt;{2，67，25，12}。</p><p>方法 1：创建新的数组接收值。</p><p>arr2[length - 1] 是 arr1[0]</p><p>arr2[length - 2] 是 arr1[1]</p><p>...</p><p>可以发现和为 length - 1，所以得到 arr2[i] 对应 arr1[length - i -1]。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr2<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法 2：自身的元素交换位置。</p><p>以 {1，2，3，4，5，6，7，8，9，10} 为例：1、10 交换，2、9交换，一直到 arr[length / 2 - 1] 与 arr[length / 2] 交换，即 5、6交换；一共 length / 2 次交换。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>6.3 编写一个类，有成员变量 int size、int[] arr；</p><ul><li>编写方法使用 arr 添加元素，要求：能够自动扩容，而不会越界。</li><li>可以通过 size 获取已添加元素的个数。</li><li>编写方法删除元素，要求：数组长度同时也跟着缩减。示例：{42, 26, 6, 4,9, 97} 删除 6 后，得到 {42, 26, 4, 9, 97}。</li></ul><p>1）add 方法添加元素</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">数组初始容量设为 10每次添加元素之前判断 size + 1 是否大于数组容量若大于数组容量则扩容为原来的 1.5 倍<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">IntList</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INIT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">IntList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>INIT_CAPACITY<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&gt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arr <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）编写 remove 方法删除元素</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">顺序查找元素的下标如果存在，则让此元素的后面所有元素前移一位，size--    使用 JDK 自带的 arraycopy 方法，让下标 index + 1 及之后的元素从下标 index 开始放置，    这样就覆盖了原来的下标为 index 的元素不存在返回 false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>            index <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">,</span> index<span class="token punctuation">,</span> size <span class="token operator">-</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将最后一个元素归 0，因为上一步中已被前移一位</span>        arr<span class="token punctuation">[</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3） 遍历</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foreach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 为了去掉逗号但不在循环中每次都判断是不是最后一个元素的做法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>6.4 创建一个任意类型的一维数组，不手动赋值，元素的默认值为？</p><p>数组动态初始化后，如果没有赋值，不同类型的数组中的元素有默认值，如下：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">short byte int long 类型的数组默认值是 0float double 是0.0char 是空 ，对应 16 进制是 0x0000；即 char c = '\u0000' 或 char c = '\0';boolean 是 falseString 和其它引用类型是 null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我尝试复制那个符号，却发现就是空，通过混合运算自动升级成 int类型的特性，才知道它在字库表中的序号是 0，而不是空格 32：</p><figure><img src="https://s2.loli.net/2022/04/28/7RVC35yYGaHehSL.png" alt="显示不出的符号"><figcaption aria-hidden="true">显示不出的符号</figcaption></figure><hr><p>6.5 输出如下图形：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">    1   1 1  1 2 1 1 3 3 11 4 6 4 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先考虑打印如下图形：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">11 11 2 11 3 3 11 4 6 4 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>观察规律：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">1. 开头和结尾都是 12. 第 i 行有 i 个数3. 从第 3 行开始，中间的数 = 上一行同列的数 + 上一行列数减一的数将其看做二维数组，以第 4 行为例，arr[3][1] = arr[2][1] + arr[2][0]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>考虑：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">（1）定义长度为 5 的二维数组 arr 保存这些值（2）由于一维数组长度在变，使用动态初始化（3）遍历二维数组，i 从 0 开始，则 arr[i].length 为 i + 1（4）遍历一维数组，开头与结尾都赋值 1，中间的元素为 arr[i][j] = arr[i - 1][j] + arr[i - 1][j - 1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 一维数组的长度为 i + 1</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 开头与结尾都为 1</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 中间的元素</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设 arr.length = 5；</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">    1   1 1  1 2 1 1 3 3 11 4 6 4 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第 1 行前面有 4 个空格，输出 arr[0] 前先输出 arr.length - 1个空格；</p><p>第 2 行前面有 3 个空格，输出 arr[1] 前先输出 arr.length - 2个空格；</p><p>...</p><p>第 i + 1 行前面有 arr.length -（i + 1）个空格，输出 arr[i] 前先输出arr.length - i - 1 个空格。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>6.6 x 是二维数组，y 是一维数组。以下语句能够通过编译的有：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">a) x[0] = y;b) x[0][0] = y[0];c) x = y[0];d) x[0][0] = y;e) x = y;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>能通过编译的有：a、b </p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">c 报错误: 不兼容的类型: int 无法转换为 int[][]d 报错误: 不兼容的类型: int[] 无法转换为 inte 报错误: 不兼容的类型: int[] 无法转换为 int[][]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p></p>]]></content>
      
      
      <categories>
          
          <category> 1.1.n 参考答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.n.1 第一到五章</title>
      <link href="/2022/04/29/1.1.n-can-kao-da-an/1.1.n.1-di-yi-dao-wu-zhang/"/>
      <url>/2022/04/29/1.1.n-can-kao-da-an/1.1.n.1-di-yi-dao-wu-zhang/</url>
      
        <content type="html"><![CDATA[<h2 id="第一到五章">第一到五章</h2><h3 id="第一章答案">第一章答案</h3><p>1.1 JDK 和 JRE 的区别？</p><p>JVM（Java Virtual Machine）Java 虚拟机，Java程序需要运行在虚拟机上，根据不同平台的虚拟机，能够实现跨平台的功能。（编译一次，生成的字节码文件可以在不同平台运行）</p><p>JDK（Java Development Kit）Java开发工具包，包含了 JRE和<mark>开发工具</mark>（javac.exe、javadoc.exe、javap.exe等），不仅可以运行 Java 程序，也可以开发 Java 程序。</p><p>JRE（Java Runtime Environment）Java运行环境，包括JVM、<mark>核心类库</mark>（常用类）等。</p><p>JDK 中包含 JRE，如果只想运行 class 文件，JRE 就足够。</p><p>JDK &gt; JRE &gt; JVM</p><hr><p>1.2 什么是编程？</p><p>编程：解决某个问题而使用某种编程语言编写程序代码控制电脑得到结果的过程。</p><p>使用高级语言编写的源代码需要进行编译或解释，能够让操作系统识别，理解你的意图，接收一系列的指令去一步步操纵硬件工作，最终解决某个问题。</p><hr><p>1.3 Swing 组件是什么？</p><p>Swing包含了构建图形界面（GUI）的各种组件，如按钮、标签、窗口、面板、文本框等组件。你现在看到的QQ、微信等软件就是一个图形界面，里面是各种类型的组件组成。</p><hr><p>1.4 JAR 包是什么？</p><p>jar 包也称类库。源码编译后生成对应的 .class字节码文件，为了完成某些功能通常需要多个 .class 文件的配合。jar包主要对多个 .class 文件打包，类似 zip 压缩格式的文件，但不同的是 jar多了 META-INF/MANIFEST.MF 文件，里面有 jar包的创建人、版本等信息；若是可执行的 jar 包（有 main 方法），会包含Main-Class 属性，表示 main 方法在哪个类中。</p><hr><p>1.5 软件与程序指的是什么？</p><p>软件可以完成特定的功能，可以理解为应用程序的集合。而应用程序是软件的一个组成部分，它是软件的必要元素。简单来说，软件= 程序 + 文档 = 数据结构 + 算法 + 文档。</p><p>程序指计算机执行某些操作或解决某个问题而编写的一系列有序指令的集合。</p><hr><p>1.6 什么是编译型语言和解释型语言？</p><p>使用计算机语言（一大串二进制数）或汇编语言，一个指令只能对应一个操作中的一个细微的动作，太繁琐，不利于记忆，容易出错，开发效率极低。计算机语言能够被计算机直接识别，执行效率最高。（面向机器）</p><p>后来生成了高级语言，方便让人类理解，开发效率高。但是编写的源代码不能被机器识别，需要翻译成机器可以识别的语言，请看下答的<strong>平台无关性</strong>。</p><hr><p>1.7 Java 语言特性？</p><p><strong>1）面向对象</strong></p><p>面向对象虽然执行效率没有面向过程高，但是以类的方式管理大量代码时（一个类中有变量、方法、代码块、内部类），更加方便程序员组织和管理代码，思路更清晰不易出错。</p><p>由此才有了对象、继承、封装、多态等概念。</p><p>①对象：使用类为模板指定参数创建的实例，通过实例可以调用类中定义的方法、访问类中的字段，不会混乱。</p><p>②继承：解决多个类中重复出现的代码，只要继承了一个类，自动拥有这个类的全部字段和方法。(私有、构造器、静态、final除外)</p><p>③封装：为了保护数据，不被错误的修改；在类、字段、方法上添加访问权限修饰符，如private，只允许在本类中访问，再提供公开的 set 与 get方法以供别人修改（在方法中可以添加判断逻辑来决定是否赋值）或访问本类的字段。此外还有包机制可以管理大量的类，可以区分两个同名类、将类似功能的类放在同一个包下...</p><p>④多态：子类继承了父类，但不满意父类的方法实现，可以重写此方法，表面是父类型，但可能底层为子类实例，调用的方法是子类重写后的方法，展现了不同的结果。</p><p>①对象：把自己当作上帝，想要创建一只狗，想一想狗的特征、行为有哪些，在类中定义字段用以保存狗的颜色、大小、品种信息，定义方法体现狗的行为。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    <span class="token comment">//private私有化，防止坏人直接修改狗的年龄</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">//定义age变量用以保存年龄</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//name保存姓名</span>    <span class="token comment">//方便别人访问狗的年龄，但不允许修改就不提供set方法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">//狗吃饭时的表现</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"开心地摇起了尾巴！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//有参构造器略</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后使用 new 关键字创建狗，同时指定狗的初始属性值。</p><p><code>new Dog(3, "土狗");</code></p><p>② 继承：想一想子女能够继承父母的财产吧。</p><p>③ 封装：父母可不能什么都让你访问，总要有自己私人的东西吧。</p><p>④多态：你老爸有事不能去了，你可以代替老爸，以他的身份参加这次宴席，你要是不满意老爸继承给你的如何为人处事的方法，可以使用自己的方法应对这些客人。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Father</span> huYingJun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>huYingJun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 您好啊，真高兴见到你。</span><span class="token class-name">Father</span> huTuTu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>huTuTu<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 我会动耳神功，你要看吗？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然你如果不想使用面向对象，嫌麻烦还要设计字段、方法，也可以把所有变量、方法都塞进一个类中，只是看着乱糟糟的，不好维护。（代码量很少时，没有必要使用面向对象）</p><p><strong>2）平台无关性</strong></p><p>编写出的代码不可直接被机器识别，需要工具进行转换。</p><p>先讲编译器与解释器的区别：</p><p>①编译器将源代码一次性全部翻译，生成一个二进制码文件，这个文件可以直接被机器识别，执行效率高。如果源代码改动需要重新编译生成新的二进制码文件。</p><p>②解释器将源代码逐行解释成特定平台的机器码，解释一行执行一行。每次执行都需要翻译，跨平台性好。</p><p>Java 的做法：</p><p>③ Java源代码会被编译成字节码文件，这个字节码文件是与任何平台都无关的中间代码，由JVM启动解释器翻译成对应平台上的机器码，所以一份字节码可以在任何平台上运行。前提：不同平台上要安装对应的JVM，JVM 不跨平台。</p><p>之所以这么做，是 Java既想保持解释语言的跨平台性（可移植性），又想解决解释语言执行效率低的问题。</p><p>但效率还是不如编译性语言。为了避免解释型语言带来的执行效率低的问题，Java设计者制作了 JIT（just in timecompilation）实时编译程序，将运行频率很高的字节码直接编译为机器指令执行来提高性能。</p><p>①给一个英语文件，你看不懂，有人直接将英语文件翻译成汉文，将翻译的结果保存在一本书中，给你发过去；这样你每次就直接看这本翻译后的书即可，缺点是原著改了，你又需要请他翻译一下。</p><p>②有人跟在你身边，你看一句，他就说一句这是什么意思；即使你换了一本英语书，他照样解释给你听，只不过效率低。</p><p>③有的人没有直接翻译成汉文，而是记录了源文件的重要信息、文章主题、中心思想、具体脉络等，再以后看到这份批注，能够迅速理解原文含义，get到这个点，能够不假思索说给你听。</p><p>后来发现也挺麻烦，他干脆挑出你最喜欢、频繁看的部分，将这部分先翻译好了，等你需要看别的地方时，再请教他。</p><p>所以不要纠结这个语言究竟是编译执行、还是解释执行，没有多大意义。</p><p><strong>3）支持多线程</strong></p><p><strong>a）线程与进程</strong></p><p>① 进程：每个运行的程序都会开启一个独立的进程，如QQ、酷狗音乐；操作系统为进程分配内存空间。</p><p>②线程：由线程创建，是线程的最小执行单位，一个进程至少有一个线程，用以完成任务。比如迅雷同时下载多个文件、QQ打开多个窗口等，多个任务同时执行。</p><p>单线程：一个进程同一时刻只有一个线程。</p><p>多线程：同一时刻有多个线程用以完成任务。</p><p><strong>b）CPU 处理线程的方式</strong></p><p>① 并行：同一个时刻，多个任务同时执行（多个 CPU）</p><p>② 并发：同一个时刻，多个任务交替执行（单个 CPU），通过 CPU调度，速度十分快，造成貌似同时执行的错觉。</p><p>③串行：按先后顺序依次执行任务，一次只做一件事。后面的任务想要执行，必须等前面的任务执行完毕。</p><p>①并行：吃饭时来了电话，你叫老婆接，自己吃饭；接电话与吃饭同时执行。</p><p>②并发：吃饭时来了电话，边吃饭边接电话，感觉像是同时，但是不可能真正在同一个时刻做到吃饭和说话，这样会呛到鼻子去。</p><p>③ 串行：吃饭时来了电话，先吃完饭，再打电话。</p><p>并发和并行可以同时存在，比如两个 CPU，一个 CPU 在处理 QQ 线程，另一个CPU 来回切换处理浏览器和音乐播放器。</p><p><strong>c）线程之间的关系</strong></p><p>①同步：一个线程需要等待另一个线程执行完毕，返回了消息，才能继续往下运行。</p><p>② 异步：一个线程 A 对另一个线程 B 发起请求，可以不用等待 B返回消息，因为 B线程执行完后会通知你，你直接去干别的事情了；等到接受通知后，再处理。</p><p><strong>d）单个线程的状态</strong></p><p>① 阻塞：一个线程在等待的过程啥也不干。</p><p>② 非阻塞：没必要一直等待，可以干别的事。</p><p>同步阻塞：快递员给你打电话，说楼下有你的快递；当你没拿之前，他就一直在原地等你，不能走开，啥也干不了。</p><p>同步非阻塞：快递员给你打电话，说楼下有你的快递；当你没拿之前，他觉得一直在原地等你很无聊，决定跑下步、玩手机、时不时观察你下来了没有、直接上楼...</p><p>异步非阻塞：快递员给你发短信，说快递放到菜鸟驿站了；随后没有等你来拿，直接把短信继续发给下一个人。直到你签收后，他那边才接收到消息，然后做相应处理。</p><p>异步阻塞：别人拿完快递后，自然会有信息通知你，你完全可以做其他事情，却还在那傻等。</p><p><strong>4）安全性</strong></p><p>双亲委派机制可以防止恶意加载同名字节码。</p><p><strong>5）健壮性</strong></p><p>异常处理机制：对可能出现异常的代码实现进行预先处理，防止遇见问题时，程序直接挂掉。</p><p>垃圾回收机制：自动清除长时间没使用的对象，防止内存泄漏（内存满了），这也算是简单性吧。</p><p><strong>6）简单性</strong></p><ul><li>封装、继承、多态很贴近生活。</li><li>没有指针这复杂的概念。</li><li>只支持类的单继承，多继承可以使用接口实现。</li><li>垃圾回收机制，不需要手动释放内存。</li></ul><hr><p>1.8 能说下 JavaSE、JavaEE、JavaME 吗？</p><p>JavaSE标准版，包含核心类库。主要用来开发桌面应用，允许在桌面、服务器开发和部署Java 应用程序。</p><p>JavaEE 企业版，帮助企业开发和部署可移植、可伸缩且安全的服务端 Java应用程序，包括 Web 网页后台开发等。</p><p>JavaME微型版，专门为在移动设备和嵌入设备上运行的应用程序提供一个健壮且灵活的环境。</p><h3 id="第二章答案">第二章答案</h3><p>2.1 为什么 Java 代码可以做到一次编译，到处运行？</p><p>编译生成的 .class 文件与具体平台、系统无关。</p><p>JVM 虚拟机是关键。程序运行时，由 JVM 负责解释执行 .class文件，将其翻译成不同平台下的机器码并运行。需要注意的是，.class文件是与操作系统平台无关的中间代码，不能直接运行。</p><p>JVM 不跨平台，不同平台需要安装不同的 JVM。</p><p>这么做的目的，在可移植的同时兼顾执行效率。此外还加入了 JIT（just intime）编译器，把运行频繁的代码直接编译成与本地平台相关的机器码，需要时直接使用，不用再次翻译。</p><hr><p>2.2 一个源文件可以生成多个 class 文件吗？</p><p>可以，源文件只要按规则定义了多个类，编译后会生成多个对应的 class文件。</p><hr><p>2.3 Java 源文件定义的类名必须与文件名一致吗？</p><p>不是，只有被 public 修饰的类名必须与源文件名一致。</p><h3 id="第三章答案">第三章答案</h3><p>3.1 下面语句能够通过编译吗？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>b <span class="token operator">=</span> b <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">10L</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不能，从 long 转换到 byte 可能会有损失。</p><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">float</span> f <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2.22</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不能，从 double 转换到 float 可能会有损失。（2.22 默认被当作 double处理）</p><p>3）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">231</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">3.23</span><span class="token punctuation">;</span><span class="token keyword">long</span> l2 <span class="token operator">=</span> i <span class="token operator">+</span> l <span class="token operator">+</span> d<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不能，从 double 转换到 long 可能会有损失。</p><p>4）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">3.14</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">6.2</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不能，从 double 转换到 int可能会有损失。（强转符号只针对最近的操作数有效，只是把 3.14 转成了 int类型，可以使用小括号提升优先级）</p><p>5）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">34</span><span class="token punctuation">;</span><span class="token keyword">short</span> s2 <span class="token operator">=</span> s1 <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不能，从 int 转换到 short 可能会有损失。</p><p>6）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以。</p><p>7）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> b1 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">short</span> s <span class="token operator">=</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不能，第 2 行报从 int 转换到 byte 可能会有损失；第 4 行报从 int转换到 short 可能会有损失。</p><p>8）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>d <span class="token operator">+</span> <span class="token number">.234F</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以。</p><p>9）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">3L</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token number">3.24F</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以。</p><hr><p>3.2 下面输出结果？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">3.14</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 69</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3.14</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">6.2</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 71</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>先算小括号里，得出结果再强转成 int。</p><hr><p>3.3 想在控制台上输出 \，怎么写？</p><p><code>System.out.println("\\");</code></p><hr><p>3.4 想在控制台上输出如下，怎么写？</p><figure><img src="https://s2.loli.net/2022/04/24/XRSwDZ49Jkiyou5.png" alt="特别厉害的那个迦"><figcaption aria-hidden="true">特别厉害的那个迦</figcaption></figure><p><code>System.out.println("动漫名称\t编剧\t价格\t销量\n微笑超人\t坂本\t1000\t0001");</code></p><h3 id="第四章答案">第四章答案</h3><p>4.1 求 i 的值。</p><p><code>double i = 5 / 2;</code> 中的 i 的值为 2.0。</p><hr><p>4.2 输出什么？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 张三6b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">++</span>x <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先++，x = 6，再判断，输出 <code>false</code>；先判断，输出<code>true</code>，再++，y = 6，输出 <code>6</code>。</p><p>3）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>a = 10 + 10 = 20，x++ 后为 11；b = 11 + 12 = 23，x 为12。输出20、23、12。</p><p>4）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">34</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token operator">--</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>j = 34，i = 33；i = 32，z = 32。输出 32、34、32。</p><p>5）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>j = 2 + 2 = 4，随后 i 自加一为 3，输出 3、4.</p><p>6）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这道题，不是那么好讲，使用 javap -c反编译（先弹出栈顶的数）看看就行，不用了解，没有人会这么用的。</p><p>什么是栈顶，就是容器最上面的一个元素。打个比方，一个空羽毛球筒，现在放入羽毛球a（称为入栈），此时栈顶是羽毛球 a；现在又放入一个羽毛球 b，b 把 a压住了，b 在 a 的上面，此时 b 就是栈顶；想要拿出 a，必须先拿出b（称为弹栈，把最上面的元素取出来)，这就是<strong>后进先出</strong>、<strong>先进后出</strong>。</p><figure><img src="https://s2.loli.net/2022/04/24/9Bd8zm3AExbwKCj.png" alt="人拿羽毛球"><figcaption aria-hidden="true">人拿羽毛球</figcaption></figure><p>对代码进行反汇编，反编译后得到的结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Code</span><span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> aload_0       <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object."&lt;init&gt;":()V</span>       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Code</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span> bipush        <span class="token number">10</span> <span class="token comment">// 将 10 压入操作数栈中，此时栈顶为 10</span><span class="token number">2</span><span class="token operator">:</span> istore_1 <span class="token comment">// 从操作数栈中弹出一个数也就是 10 赋给第 1 个局部变量 i</span><span class="token number">3</span><span class="token operator">:</span> iinc          <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">// 对第 1 个局部变量 i 自增 1，i = 11</span><span class="token number">6</span><span class="token operator">:</span> iload_1 <span class="token comment">// 将第 1 个局部变量的值 11 压入操作数栈，栈顶为 11</span><span class="token number">7</span><span class="token operator">:</span> istore_1 <span class="token comment">// 从栈中弹出一个 11 赋给第 1 个变量 i</span><span class="token number">8</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><span class="token number">11</span><span class="token operator">:</span> iload_1<span class="token number">12</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token comment">// Method java/io/PrintStream.println:(I)V</span><span class="token number">15</span><span class="token operator">:</span> <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据 JVM指令手册翻译：https://blog.csdn.net/qq_40109475/article/details/117134802</p><p>人话就是：将 10 赋给变量 i，i 自增一为 11，将 11 赋给 i。</p><p>7）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>反编译部分节选：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0</span><span class="token operator">:</span> bipush        <span class="token number">10</span><span class="token comment">// 将 10 压入栈</span><span class="token number">2</span><span class="token operator">:</span> istore_1<span class="token comment">// 将 10 弹出赋给第 1 个变量 i</span><span class="token number">3</span><span class="token operator">:</span> iload_1<span class="token comment">// 将第 1 个变量 i 的值 10 压入栈</span><span class="token number">4</span><span class="token operator">:</span> iinc          <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token comment">// 对第 1 个变量 i 自增 1，i = 11</span><span class="token number">7</span><span class="token operator">:</span> istore_1<span class="token comment">// 将 10 弹出赋给第 1 个变量 i</span><span class="token number">8</span><span class="token operator">:</span> <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以 i 为 10。为了方便理解：首先 i = 10，有个临时变量 temp 保存 i的值，temp = 10；后 i++ 为11，再把 temp 的值赋给 i，i = 10。</p><p>8）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b1 <span class="token operator">=</span> b<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token operator">--</span>b<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反编译部分节选：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0</span><span class="token operator">:</span> iconst_1# 直接取常量（整数 <span class="token number">1</span>），压入栈中。（栈中从上至下的值：<span class="token number">1</span>）<span class="token number">1</span><span class="token operator">:</span> istore_1# 弹栈，赋给第 <span class="token number">1</span> 个变量 b，此时 b <span class="token operator">=</span> <span class="token number">1</span>。（空）<span class="token number">2</span><span class="token operator">:</span> iload_1# 将第 <span class="token number">1</span> 个变量 b 的值压入栈中。（<span class="token number">1</span>）<span class="token number">3</span><span class="token operator">:</span> iload_1# 将第 <span class="token number">1</span> 个变量 b 的值压入栈中。（<span class="token number">1</span>，<span class="token number">1</span>）<span class="token number">4</span><span class="token operator">:</span> iconst_1# 将 <span class="token number">1</span> 压入栈中。（<span class="token number">1</span>，<span class="token number">1</span>，<span class="token number">1</span>）<span class="token number">5</span><span class="token operator">:</span> iadd# 取出栈中最上面两个值相加，并将结果 <span class="token number">2</span> 压入栈中。（<span class="token number">2</span>，<span class="token number">1</span>）<span class="token number">6</span><span class="token operator">:</span> i2b# 将 <span class="token keyword">int</span> 类型的值转为 <span class="token keyword">byte</span>。<span class="token number">7</span><span class="token operator">:</span> istore_1# 弹栈，赋给第一个变量 b，此时 b <span class="token operator">=</span> <span class="token number">2</span>。（<span class="token number">1</span>）<span class="token number">8</span><span class="token operator">:</span> istore_2 # 弹栈，赋给第二个变量 b1，此时 b1 <span class="token operator">=</span> <span class="token number">1</span>。（空）<span class="token number">9</span><span class="token operator">:</span> iload_1# 将第 <span class="token number">1</span> 个变量 b 的值压入栈中。（<span class="token number">2</span>）<span class="token number">10</span><span class="token operator">:</span> iconst_1# 将 <span class="token keyword">int</span> 类型的常量 <span class="token number">1</span> 压入栈中。（<span class="token number">1</span>，<span class="token number">2</span>）<span class="token number">11</span><span class="token operator">:</span> isub# 取出栈中最上面两个值相减，并将结果 <span class="token number">1</span> 压入栈中。（<span class="token number">1</span>）<span class="token number">12</span><span class="token operator">:</span> i2b# 将 <span class="token keyword">int</span> 类型的值转为 <span class="token keyword">byte</span>。<span class="token number">13</span><span class="token operator">:</span> istore_1# 弹栈，赋给第 <span class="token number">1</span> 个变量，此时 b <span class="token operator">=</span> <span class="token number">1</span>。（空）<span class="token number">14</span><span class="token operator">:</span> iload_1# 将第 <span class="token number">1</span> 个变量 b 的值压入栈中。（<span class="token number">1</span>）<span class="token number">15</span><span class="token operator">:</span> istore_3# 弹栈，赋给第 <span class="token number">3</span> 个变量 b2，此时 b2 <span class="token operator">=</span> <span class="token number">1</span>。（空）<span class="token number">16</span><span class="token operator">:</span> <span class="token keyword">return</span># 结束。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于汇编语言太麻烦，很不好理解。还是按老法解释：b1 = 1，后 b++，b =2；--b，b = 1，b2 = 1，输出 1、1、1。</p><p>9）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>b = true，输出 b 的值，即 true。true 等于 false 为假，输出false。</p><p>10）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> x <span class="token operator">&lt;</span> y <span class="token operator">?</span> x <span class="token operator">+</span> y <span class="token operator">:</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9 &lt; 12 为 true，返回 x + y = 21，赋给 z，输出 21。</p><p>11）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a<span class="token operator">++</span> <span class="token operator">:</span> b<span class="token operator">--</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10 &gt; 99 为 false，返回 b--：先将 b 的值 99 赋给 result，后 b--，b= 98。输出 99、10、98。</p><hr><p>4.3 利用三目表达式求出三个数之间的最大数。</p><p>先定义三个变量保存数值，先让其中两数比较，返回大值赋给 max1；再让max1 与剩下的数比较返回大值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">241</span><span class="token punctuation">;</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">324</span><span class="token punctuation">;</span><span class="token keyword">int</span> n3 <span class="token operator">=</span> <span class="token number">242</span><span class="token punctuation">;</span><span class="token keyword">int</span> max1 <span class="token operator">=</span> n1 <span class="token operator">&gt;</span> n2 <span class="token operator">?</span> n1 <span class="token operator">:</span> n2<span class="token punctuation">;</span><span class="token keyword">int</span> max2 <span class="token operator">=</span> max1 <span class="token operator">&gt;</span> n3 <span class="token operator">?</span> max1 <span class="token operator">:</span> n3<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>4.4 利用所学知识求出 33 天是多少个星期零几天？</p><p>其实很简单，让 33 除以 7，商就是星期数，余数就是天数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span><span class="token keyword">int</span> week <span class="token operator">=</span> day <span class="token operator">/</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">RemainDay</span> <span class="token operator">=</span> day <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>day <span class="token operator">+</span> <span class="token string">"天是"</span> <span class="token operator">+</span> week<span class="token operator">+</span> <span class="token string">"个星期零"</span> <span class="token operator">+</span> <span class="token class-name">RemainDay</span> <span class="token operator">+</span> <span class="token string">"天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>4.5 求值。</p><p><code>3 / 9 * (242.2 - 100) = 0</code>。</p><p>因为 3 / 9 = 0，所以结果为 0；要想不偏离原意，请至少把其中一个数转为double 类型。</p><hr><p>4.6 下面代码输出什么？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> x <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> y <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">byte</span> num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">++</span>num <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有 <code>if ()</code> 中为 true，才会执行 {} 中的语句。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">直接快进到 if 语句num++ == 2：先判断 num 是否等于 2，为 true再自加一，num = 3；此时不能断定结果，继续看右边y = true：给 y 赋值为 true两边条件都为 true，&amp;&amp; 后的结果为 true，执行 num++num = 4接着看第 2 个 if 语句x = false：给 x 赋值 false既然 x 为假，不能断定结果，继续看第 2 个条件++num == 5：先自加一，num = 5再判断 num 是否等于 5，为 true两个条件一假一真，|| 后的结果为 true，执行 num++num = 6输出 6、false、true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">342</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">++</span>i <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>先 ++i，i = 343，再赋值：b = 343 + 343 = 686。</p><p>3）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">342</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> i<span class="token operator">++</span> <span class="token operator">+</span> <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">i++ + ++i先进行加法运算再自加一即 342 + ++(i)，此时 i++ 后，i = 343现在再看右边的 ++i，先自加一，即 i = 344，再运算int b = 342 + 344 = 686i = 344输出 344、656<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正好呢，之前有个类似的题，但反编译麻烦，试着使用韩老师教的 temp方法举例，再试试吧：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">342</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i<span class="token operator">++</span> <span class="token operator">+</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">先进行加法运算 342 + i++，后自加 1，i = 343先进行加法运算 342 + 343使用 temp 保存运算结果，即 685后 i 自加 1，i = 344i = temp，i = 685<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第 2 个例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">342</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i<span class="token operator">++</span> <span class="token operator">+</span> <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">先进行加法运算 342 + ++i，后自加 1，i = 343++i 先自加一，i = 344，再进行加法运算 342 + 344使用 temp 保存运算结果，即 686i = temp，i = 686<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第 3 个例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">342</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token operator">++</span>i <span class="token operator">+</span> <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">先自加一，i = 343，得到：343 + ++i先自加一，i = 344，得到：343 + 344使用 temp 保存运算结果，即 687i = temp，i= 686<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>像极了茴香豆的“茴”有几种写法，大家看个乐呵就行。</p><h3 id="第五章答案">第五章答案</h3><p>5.1 打印 [n，m] 之间的所有是 x 倍数的整数，统计个数及总和。</p><p>先考虑输出 [1，50] 之间所有是 5 的倍数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// （1）输出 1 ~ 50</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// （2）只有当 i 是 5 的倍数时，才输出</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// （3）定义变量保存统计个数、和</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总和："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是 5 的倍数的数的个数："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// （4）扩展到一般情况</span><span class="token comment">// 这里可以考虑接收键盘输入，得到整数值</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总和："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是 "</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">" 的倍数的数的个数："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>5.2 输出 1 + (n - 1）= n、2 + (n - 2）= n、...、50 + (n - 50）=n。</p><p>观察变的部分，1 ~ 50，将其提取出来，定义为 i：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" + (n - "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">") = n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><p>5.3 打印九九乘法口诀表。</p><p>效果如图：</p><figure><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.chusan.com%2Fupload%2F202011%2F20201114152325401.jpg&amp;refer=http%3A%2F%2Fimg.chusan.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1633171436&amp;t=87508049ff494c62857acb77d121f8e4" alt="九九乘法表"><figcaption aria-hidden="true">九九乘法表</figcaption></figure><p>由于我们是按行输出的，所以观察递增的部分：1 ~ 9；也就是乘号右边。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>观察乘号左边与 i 的关系</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">当 i = 1 时，输出 1i = 2 时，输出 1、2i = 3 时，输出 1、2、3...i = 8 时，输出 1、2、3、4、5、6、8i = 9 时，输出1、2、3、4、5、6、8、9可以发现输出的开始都是 1，结束都是 i定义一个变量 j，使用 for 循环输出这些值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开始组合 “j * i = 某值” 字符串：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token string">"x"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意同行显示的乘法口诀，别用 ln换行了；应该输出完这行所有的乘法口诀后，再换行。</p></blockquote><hr><p>5.4 打印一个 n 层的空心金字塔。例：当 n = 5 时，输出如下：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">    *   * *  *   * *     **********<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简化 1：打印实心金字塔</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">    *   ***  ***** ****************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简化 2：将星号前面空格去掉</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">*************************第 2 层是 1+2 = 2*2 - 1第 3 层是 1+2+2 = 2*3 - 1第 4 层是 1+2+2+2 = 2*4 - 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过观察，发现每层都比上层多 2 个星号，通过归纳得出第 i 层为 2 * i -1 个星号。</p><p>先打印 5 层。i 控制层数 1 ~ 5 层；j 控制每层的星号数，一共输出 2 * i- 1 个星号。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来观察简化 1：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">第 1 行前面有 4 个空格第 2 行前面有 3 个空格第 3 行前面有 2 个空格第 4 行前面有 1 个空格第 5 行前面有 0 个空格所以当第 i 行前面应该打印 5 - i 个空格后再打印 *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> z <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> z<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来观察最初的空心版本，除了最后一层，其它层除了开始的和结束的星号，都输出空格：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> z <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> z<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 不是最后一层，除了开始与结束输出星号，其它都输出空格</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> j <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后将 5 改为 n：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> z <span class="token operator">&lt;=</span> n <span class="token operator">-</span> i<span class="token punctuation">;</span> z<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> j <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>5.5 找出 3 位数的水仙花数，水仙花数是各位数的三次方之和等于此数，比如153 = 1<sup>3</sup> + 5<sup>3</sup> + 3<sup>3</sup> = 153。</p><p>首先需要得到各位上的数：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">设一个三位数的整数 i，把百位、十位、个位上的数得到百位 = i / 100十位 = i % 100 / 10或十位 = i / 10 % 10个位 = i % 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么从 100 ~ 999 范围内查找，当满足水仙花就输出：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> u <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">// 可用 Math 的 pow 方法求幂</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> h <span class="token operator">*</span> h <span class="token operator">*</span> h <span class="token operator">+</span> t <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">+</span> u <span class="token operator">*</span> u <span class="token operator">*</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>扩充内容：</p><p>得到四位数上的各位数，以 1234 为例</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">千 1234 / 1000    百 1234 % 1000 / 100 或 1234 / 100 % 10十 1234 % 100 / 10 或 1234 / 10 % 10个 1234 % 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p>5.6 计算 1 - 1/2 + 1/3 - 1/4 + ... - 1/100。</p><p>观察规律：</p><p>分子都为 1，分母以 1 递增到 100；设为 i，当 i为偶数时，符号为负。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> <span class="token operator">-</span><span class="token number">1.0</span> <span class="token operator">/</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> <span class="token number">1.0</span> <span class="token operator">/</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/*    double num = i % 2 == 0 ? -1.0 / i : 1.0 / i;    sum += num;    */</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0.688172179310195</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>分子的 1 必须写成小数，否则除了第一项其它式子的结果都为 0；sum 必须为double 类型，如果为 int 类型，+= 会被强转为整数，恰巧结果小于1，统统转成 0。</p></blockquote><hr><p>5.7 计算 1 + (1 + 2）+ (1 + 2 + 3）+ ... + (1 + 2 + 3 + 4 + ... +100）。</p><p>方法 1：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">一共有 100 个式子相加第 1 个式子是 1第 2 个式子是 1+2第 3 个式子是 1+2+3得出规律，当 i &gt; 1 时第 i 个式子是从 1 加到 i，想办法把 1 到 i 这几个数弄到手，累加定义 i 控制式子的个数，从 1 到 100定义 j 控制每个式子，从 1 加到 i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 171700</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法 2：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">第 1 个式子是 1 = 1第 2 个式子是 1+2 = 3第 3 个式子是 1+2+3 = 6得出规律，当 i &gt; 1 时第 i 个式子是第 i-1 个式子的结果 + ii 从 1 到 100考虑使用 formula 记录第 1 个式子的和，然后不停地累加 i。第一次循环，formula = 1第二次循环，formula + i = 1 + 2 = 3第三次循环，formula + i = 3 + 3 = 6...每个式子的和得到了，再定义 sum 变量将这些式子的和累加，即 sum += formula同时为了和谐，修正 formula = 0；第一次循环 formula + i = 0 + 1 = 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> formula <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    formula <span class="token operator">+=</span> i<span class="token punctuation">;</span>    sum <span class="token operator">+=</span> formula<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法 3：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">观察式子发现 1 出现了 100 次，2 出现了 98 次...100 出现了 1 次所以总和为 1 * 100 + 2 * 99 + ... + 100 * 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sum <span class="token operator">+=</span> i <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">101</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>扩展为一般情况：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sum <span class="token operator">+=</span> i <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 1.1.n 参考答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.p.1 参考视频</title>
      <link href="/2022/04/29/1.1.p-can-kao-wen-xian/1.1.p.1-can-kao-shi-pin/"/>
      <url>/2022/04/29/1.1.p-can-kao-wen-xian/1.1.p.1-can-kao-shi-pin/</url>
      
        <content type="html"><![CDATA[<h2 id="参考视频">参考视频</h2><h3 id="参考视频链接">参考视频链接</h3><ul><li>作者：<a href="https://space.bilibili.com/95256449">遇见狂神说</a>，内容：JavaSE基础，https://www.bilibili.com/video/BV12J41137hu</li></ul><h3 id="引用视频观点">引用视频观点</h3><ul><li><p>作者：<a href="https://space.bilibili.com/2630977">SchelleyYuki</a>，内容：前后端是做什么的，https://www.bilibili.com/video/BV1DV411B7v5</p></li><li><p>作者：<a href="https://space.bilibili.com/651245581">韩顺平</a>，内容：JavaSE基础，https://www.bilibili.com/video/BV1fh411y7R8</p></li><li><p>作者：<a href="https://space.bilibili.com/76542346">动力节点</a>，内容：JavaSE基础，https://www.bilibili.com/video/BV1Rx411876f</p></li><li><p>作者：<a href="https://space.bilibili.com/302417610">尚硅谷</a>，内容：JavaSE基础，https://www.bilibili.com/video/BV1Kb411W75N</p></li><li><p>作者：<a href="https://space.bilibili.com/302417610">尚硅谷</a>，内容：IDEA教程，https://www.bilibili.com/video/BV1PW411X75p</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 1.1.p 参考文献 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.p.2 参考书籍</title>
      <link href="/2022/04/29/1.1.p-can-kao-wen-xian/1.1.p.2-can-kao-shu-ji/"/>
      <url>/2022/04/29/1.1.p-can-kao-wen-xian/1.1.p.2-can-kao-shu-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="参考书籍">参考书籍</h2><h3 id="参考书籍观点">参考书籍观点</h3><ul><li>书名：《Think in Java》《Java编程思想》，作者：【美】BruceEckel，译者：陈昊鹏、绕若楠，出版社：机械工业出版社，时间：2003</li></ul><h3 id="引用书籍原句">引用书籍原句</h3><ul><li><p>书名：《大话数据结构》，作者：程杰，出版社：清华大学出版社，时间：2011.6</p></li><li><p>书名：《阿里巴巴Java开发手册》，发布者：<a href="https://github.com/gujin520">gujin520</a>，https://github.com/alibaba/p3c</p></li><li><p>书名：《Effective Java 第三版》，作者：【美】Joshua Bloch（约书亚· 布洛克），译者：俞黎敏，出版社：机械工业出版社，时间：2018</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 1.1.p 参考文献 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.o.1 网盘链接</title>
      <link href="/2022/04/29/1.1.o-zi-yuan-di-zhi/1.1.o.1-wang-pan-lian-jie/"/>
      <url>/2022/04/29/1.1.o-zi-yuan-di-zhi/1.1.o.1-wang-pan-lian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="网盘链接">网盘链接</h2><p>百度网盘太慢了，一百兆的文件隔了一天才下好，所以就弃用了。</p><h3 id="jdk-下载">JDK 下载</h3><p><strong>JDK8</strong></p><p>阿里云盘链接：https://www.aliyundrive.com/s/xu2ZbDSbf61</p><p>天翼云盘链接：（访问码：8qwi）https://cloud.189.cn/web/share?code=JR7rEbvI32mm</p><p>奶牛快传传输链接：打开【奶牛快传】cowtransfer.com使用传输口令：a7khbp 提取；或传输链接：https://cowtransfer.com/s/4370c88f111d4e</p><p><strong>JDK11</strong></p><p>阿里云盘链接：https://www.aliyundrive.com/s/XwaEENBMMs2</p><p>天翼云盘链接：（访问码：uw75）https://cloud.189.cn/web/share?code=YZJBRf77ZBzu</p><p><strong>JDK17</strong></p><p>阿里云盘链接：https://www.aliyundrive.com/s/uoYfGWEAknU</p><p>天翼云盘链接：（访问码：tcu5）https://cloud.189.cn/web/share?code=UzuuYbeEjUry</p><p>奶牛快传传输链接： 打开【奶牛快传】cowtransfer.com使用传输口令：zn46qi 提取；或传输链接：https://cowtransfer.com/s/ad936bbebca445</p><h3 id="ide-工具">IDE 工具</h3><p><strong>IDEA 下载</strong>：</p><p>阿里云盘链接：https://www.aliyundrive.com/s/TM9rvAjEeJu</p><p>天翼云盘链接：（访问码：4gn2）https://cloud.189.cn/web/share?code=VNFvqyE3YvMj</p><p>奶牛快传传输链接：打开【奶牛快传】cowtransfer.com使用传输口令：e63ydj 提取； 或传输链接：https://cowtransfer.com/s/6737a08627ee45</p><p><strong>Eclipse 下载</strong>：</p><p>天翼云盘链接：（访问码：upy6）https://cloud.189.cn/web/share?code=eIfAzqvYZrim</p><p>奶牛快传传输链接： 打开【奶牛快传】cowtransfer.com使用传输口令：xywy0y 提取；或传输链接：https://cowtransfer.com/s/9f126bbf83d242</p><h3 id="自己写的小玩意">自己写的小玩意</h3><p><strong>合并多个 md 文件为一个文件</strong></p><p>天翼云盘链接：（访问码：qg9y）https://cloud.189.cn/web/share?code=Un2iuamInI7z</p><p>奶牛快传传输链接： 打开【奶牛快传】cowtransfer.com使用传输口令：omy5y8 提取；或传输链接：https://cowtransfer.com/s/b995725decea4c</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.o 资源地址 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.o.2 工具网址</title>
      <link href="/2022/04/29/1.1.o-zi-yuan-di-zhi/1.1.o.2-gong-ju-wang-zhi/"/>
      <url>/2022/04/29/1.1.o-zi-yuan-di-zhi/1.1.o.2-gong-ju-wang-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="工具网址">工具网址</h2><p>书中源码地址：https://gitee.com/ccqqhh/java-se</p><h3 id="可能会使用到的在线工具网址">可能会使用到的在线工具网址</h3><ul><li>查看 IP 地址：http://ip111.cn</li><li>ioDraw 思维导图：https://www.iodraw.com/template</li><li>Process On思维导图：https://www.processon.com/diagrams/new#template</li><li>JDK 8 API文档：https://docs.oracle.com/javase/8/docs/api/index.html</li><li>JDK 8 中文文档：https://www.matools.com/api/java8</li><li>进制转换：https://tool.lu/hexconvert/</li><li>汉字编码查询：https://www.qqxiuzi.cn/bianma/zifuji.php</li><li>编程书籍：https://www.bookstack.cn/</li><li>集合符号：http://www.52unicode.com/not-a-subset-of-unicode</li><li>集合符号：http://www.fhdq.net/sx/95.html</li><li>Unicode 字符集：https://www.qqxiuzi.cn/zh/unicode-zifu.php</li><li>谷歌插件市场：https://zhuanlan.zhihu.com/p/76634823</li><li>生成 ico 图标：https://www.ico51.cn/</li><li>自动采集文章并发布：https://www.lmcjl.com/</li><li>自动构建文档：https://readthedocs.org/</li><li>一文多发：https://openwrite.cn/</li><li>PDF 转成 MD：https://pdf2md.morethan.io/</li></ul><h3 id="可能会使用到的工具下载链接">可能会使用到的工具下载链接</h3><ul><li>有道词典：https://dict.youdao.com/</li><li>搜狗五笔输入法：https://wubi.sogou.com/</li><li>Sublime Text：https://www.sublimetext.com/</li><li>谷歌浏览器：https://www.google.cn/intl/zh-CN/chrome/</li><li>Win RAR 解压缩：https://www.win-rar.com/download.html?&amp;L=0</li><li>Win RAR 中文版：https://www.winrar.com.cn/</li><li>比邻云盘：https://www.bilnn.com/</li><li>比邻云盘升级版：https://link.bilnn.com/</li></ul>]]></content>
      
      
      <categories>
          
          <category> 1.1.o 资源地址 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.7.2 堆排序</title>
      <link href="/2022/04/29/1.1.7-pai-xu-you-hua/1.1.7.2-dui-pai-xu/"/>
      <url>/2022/04/29/1.1.7-pai-xu-you-hua/1.1.7.2-dui-pai-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="堆排序">7.2 堆排序</h2><p>内容导视：</p><ul><li>树</li><li>二叉树</li><li>堆排序</li></ul><p>由于堆排序需要使用到树这种数据结构，所以简单过一下。</p><h3 id="树">7.2.1 树</h3><p>树（Tree）是 n 个结点的集合，n = 0 时称为空树；若不是空树，则树 T由被称作根 R 的结点以及 0 个或多个互不相交的非空子树T<sub>1</sub>、T<sub>2</sub>、...、T<sub>k</sub> 组成。</p><figure><img src="https://s2.loli.net/2022/04/15/V3YeQEDvWjPBsfg.png" alt="未命名文件 (10)"><figcaption aria-hidden="true">未命名文件 (10)</figcaption></figure><p>每棵子树的根被称作根 R 的<strong>子结点</strong>，而 R是每棵子树的根的<strong>父结点</strong>。</p><p>由于T<sub>1</sub>、T<sub>2</sub>...它们也是树，同样也是由根结点与若干个子树组成，举例：</p><figure><img src="https://s2.loli.net/2022/04/15/mzH3SLRo6GFOaU4.png" alt="未命名文件 (11)"><figcaption aria-hidden="true">未命名文件 (11)</figcaption></figure><p>A 的子结点有 D、E、F，G 的父结点有 C；那些没有子结点的结点，如D、E、F、B...称为<strong>树叶结点</strong>，也称叶子结点；有子结点的结点称为<strong>分支结点</strong>，除根结点R 外，分支节点也被称为<strong>内部结点</strong>。</p><p>树的层次：从根 R 为第一层开始算，R 的子结点 A、B、C 为第二层，A、B、C的子结点 D、E、F、G为第三层；最大层次称为树的<strong>高度</strong>。</p><h3 id="二叉树">7.2.2 二叉树</h3><p><strong>二叉树</strong>是一颗树，树中的每个结点最多只能有两个子结点，称为左结点、右结点。（每个结点的子节点有0 或 1 或 2 个）</p><p><strong>满二叉树</strong>的所有树叶节点都在最后一层，所有的分支节点都有两个子节点，此时结点总个数= 2<sup>k</sup> - 1。（k 为树的高度）如图：</p><figure><img src="https://s2.loli.net/2022/04/15/EsUc2p8dtjJPaK9.png" alt="未命名文件 (12)"><figcaption aria-hidden="true">未命名文件 (12)</figcaption></figure><p>此满二叉树的结点个数为 2<sup>4</sup> - 1 =15；同样高度的二叉树中，满二叉树的结点个数最多，树叶结点个数最多，每一层都是满的。</p><p><strong>完全二叉树</strong></p><p>对树中的 n 个结点按从上至下、从左到右的顺序进行编号，如果编号为 i（1<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.751ex" role="img" focusable="false" viewBox="0 -636 778 774"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g></g></g></svg></mjx-container></span> i <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.751ex" role="img" focusable="false" viewBox="0 -636 778 774"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g></g></g></svg></mjx-container></span>n）的结点与同样高度的满二叉树中编号为 i的结点在二叉树中的位置相同，则这棵二叉树称为完全二叉树，如下：</p><figure><img src="https://s2.loli.net/2022/04/15/PyRNEcVJzfDWFQG.png" alt="未命名文件 (13)"><figcaption aria-hidden="true">未命名文件 (13)</figcaption></figure><p>可以画出同样高度的满二叉树，编下号，看看两个二叉树的编号是否对应上了。</p><p>从图像上看，必须从左至右将每层铺满，才能继续在下一层放置结点；如下就不是完全二叉树：</p><figure><img src="https://s2.loli.net/2022/04/17/3H7TRlihGkr9jpY.png" alt="未命名文件 (2)"><figcaption aria-hidden="true">未命名文件 (2)</figcaption></figure><p>第三层并没有放满，便开始在第四层放置结点，不是完全二叉树。</p><figure><img src="https://s2.loli.net/2022/04/17/VnZjJoaqkPxmGCb.png" alt="未命名文件 (3)"><figcaption aria-hidden="true">未命名文件 (3)</figcaption></figure><p>第四层并没有从最左边开始放置，前面还空了三个位置，不是完全二叉树。</p><p><strong>二叉树性质</strong></p><ol type="1"><li><p>在第 i 层最多有 2<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="2.784ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 1230.6 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"></g><g data-mml-node="TeXAtom" transform="translate(33,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></span>个结点。（1、2、4、8、16...）</p></li><li><p>高度为 k 的二叉树最多有 2<sup>k</sup> - 1个结点。（1、3、7、15、31...）</p></li><li><p>高度为 k 的完全二叉树至少有 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="4.197ex" height="1.932ex" role="img" focusable="false" viewBox="0 -853.7 1855.1 853.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></span> 个结点。（1、2、4、8...）</p><p>证明：最少结点的完全二叉树就是 (k - 1) 高度的满二叉树的结点个数 + 1 =<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="19.205ex" height="2.117ex" role="img" focusable="false" viewBox="0 -853.7 8488.6 935.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2077.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3077.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3799.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4800,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(5577.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(6633.5,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></span>。</p></li><li><p>树叶结点个数为 n<sub>0</sub>，有两个子树的结点个数为n<sub>2</sub>，有 n<sub>0</sub> = n<sub>2</sub> + 1。</p><p>证明：设一共 n个结点，每个结点都通过一条线连接着它的父结点，除了根结点，则一共有 n - 1条线。</p><p>定义 n<sub>1</sub> 为有一个子树的结点个数，有 n - 1 = n<sub>1</sub> +2 *n<sub>2</sub>；（一个结点有两个子树代表两条线，有一个子树代表一条线，把它们都加起来）</p><p>因为二叉树结点只包括这三种类型，所以有 n = n<sub>0</sub> +n<sub>1</sub> + n<sub>2</sub>，</p><p>n - 1 = n<sub>1</sub> + 2 * n<sub>2</sub> = n<sub>0</sub> +n<sub>1</sub> + n<sub>2</sub> - 1，整理得到 n<sub>2</sub> =n<sub>0</sub> - 1。</p></li><li><p>具有 n 个结点的完全二叉树的高度为 ⌊log<sub>2</sub>n⌋ + 1。</p><p>证明：设完全二叉树的高度为 k，n 一定小于 (k + 1)高度的完全二叉树的结点个数；根据性质 3 得：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex" xmlns="http://www.w3.org/2000/svg" width="13.741ex" height="2.244ex" role="img" focusable="false" viewBox="0 -853.7 6073.6 991.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2132.9,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(3188.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4066.4,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="msup" transform="translate(5122.2,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></svg></mjx-container></span>，两边取对数：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="17.484ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 7728.1 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(743.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1743.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2521.2,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(3577,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(3875,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(4360,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(5273.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6151.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(7207.1,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></svg></mjx-container></span>，整理得：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="21.501ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 9503.7 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(1696.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2574.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(3630.1,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(4428.9,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(5484.7,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(5782.7,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(6267.7,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(7181.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(8003.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(9003.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span>，又因 k是整数，当 log<sub>2</sub>n 为整数时，k = log<sub>2</sub>n +1；不为整数时，k = ⌊log<sub>2</sub>n⌋ + 1。</p><p>综合 k = ⌊log<sub>2</sub>n⌋ + 1。</p><blockquote><p>⌊⌋ 是向下取整（floor），⌈⌉ 是向上取整（ceiling），如 ⌊3.5⌋ = 3。</p></blockquote></li></ol><h3 id="堆排序-1">7.2.3 堆排序</h3><p>Heap Sort 是对简单选择排序的改进，</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.7 排序优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.7.1 快速排序</title>
      <link href="/2022/04/29/1.1.7-pai-xu-you-hua/1.1.7.1-kuai-su-pai-xu/"/>
      <url>/2022/04/29/1.1.7-pai-xu-you-hua/1.1.7.1-kuai-su-pai-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="快速排序">7.1 快速排序</h2><p>内容导视：</p><ul><li>递归</li><li>快速排序</li><li>快速排序复杂度分析</li><li>快速排序优化</li><li>快速排序变体</li></ul><h3 id="递归">7.1.1 递归</h3><p>方法调用自身称为递归。将大问题拆解为与原问题相似且规模较小的问题，直到拆分到可以求解的规模，然后合并的过程。</p><p>一定要设置结束条件，否则会无限循环。（结束条件：即当满足某种条件时，不再调用方法）</p><p><strong>问题 1</strong>：<code>T(n) = T(n - 1) + (n - 1)</code>，n&gt; 1，其中 <code>T(0)</code>、<code>T(1)</code> 等于 1，求<code>T(100)</code>。</p><p>解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 这里通常写成 n &lt; 2</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token class-name">T</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4951</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4952</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法 <code>T(100)</code>，它返回的值应为<code>T(99) + 99</code>，但是需要先求出 <code>T(99)</code>后才能返回；</p><p>调用了方法 <code>T(99)</code>，它返回的值为<code>T(98) + 98</code>；</p><p>...</p><p>调用了 <code>T(2)</code>，它返回的值为 <code>T(1) + 1</code>；</p><p>调用 <code>T(1)</code>，满足 if 条件，返回 1，回到上一层；</p><p><code>T(2) = T(1) + 1 = 1 + 1 = 2</code>，返回 2，回到上一层；</p><p><code>T(3) = 2 + 2 = 4</code>，返回 4；</p><p>...</p><p><code>T(99) = 4754 + 98 = 4852</code>，返回 4852；回到最顶层；</p><p><code>T(100) = 4852 + 99 = 4951</code>，这就是调用<code>T(100)</code> 得到的结果。</p><p>注意了，这里的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>就是结束条件，可以想象如果没有这段代码，程序还会继续求<code>T(0) + 0</code>、<code>T(-1) -1</code>、... 一直到内存不够用，报java.lang.StackOverflowError 栈溢出错误。</p><p>当然如果 n 很大或者不往结束条件逼近，你在等待 <code>T(100)</code>返回结果，<code>T(100)</code> 在等待 <code>T(99)</code>返回结果，<code>T(99)</code> 等待 <code>T(98)</code> ...当等待个数过多时，也会内存不足；所以我们尽量使用循环代替递归。</p><hr><p>解法 2：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">T(n) = T(n - 1) + (n - 1)；T(n - 1) = T(n - 2) + (n - 2);...T(3) = T(2) + 2;T(2) = T(1) + 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上面方程相加： T(2) + T(3) + ... + T(n - 1) + T(n) = T(1) + T(2) +... + T(n - 2) + T(n - 1) + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.366ex" xmlns="http://www.w3.org/2000/svg" width="4.162ex" height="5.807ex" role="img" focusable="false" viewBox="0 -1520.9 1839.6 2566.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo" transform="translate(136,0)"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(90.2,-887.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(0,950) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1494.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span></p><p>整理得：T(n) = T(1) + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.366ex" xmlns="http://www.w3.org/2000/svg" width="4.162ex" height="5.807ex" role="img" focusable="false" viewBox="0 -1520.9 1839.6 2566.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo" transform="translate(136,0)"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(90.2,-887.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(0,950) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1494.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> = 1 + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="6.204ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 2742.3 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(989,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1589,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2367,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2867,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(1194.4,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="2502.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></p><p>将 100 代入得：1 + 4950 = 4951。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> n <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>问题 2</strong>：T(n) = 2 * T(n/2) + n，n 为 2的幂，T(0)、T(1) = 1，求 T(1024)。</p><p>解：</p><p>T(n) = 2 * T(n/2) + n；</p><p>第 1 个式子：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex" xmlns="http://www.w3.org/2000/svg" width="4.326ex" height="3.167ex" role="img" focusable="false" viewBox="0 -1047.1 1912.2 1399.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mi" transform="translate(744,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1672.2" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> =<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.238ex" xmlns="http://www.w3.org/2000/svg" width="5.926ex" height="3.607ex" role="img" focusable="false" viewBox="0 -1047.1 2619.3 1594.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1693,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(2193,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(744,-370.3) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(600,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(1100,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><rect width="2379.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + 1；</p><p>第 2 个式子：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.238ex" xmlns="http://www.w3.org/2000/svg" width="5.926ex" height="3.607ex" role="img" focusable="false" viewBox="0 -1047.1 2619.3 1594.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1693,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(2193,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(744,-370.3) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(600,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(1100,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><rect width="2379.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>= <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.238ex" xmlns="http://www.w3.org/2000/svg" width="5.926ex" height="3.607ex" role="img" focusable="false" viewBox="0 -1047.1 2619.3 1594.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1693,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(2193,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(2693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(744,-370.3) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(600,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(1100,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><rect width="2379.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + 1；</p><p>第 3 个式子：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.238ex" xmlns="http://www.w3.org/2000/svg" width="5.926ex" height="3.607ex" role="img" focusable="false" viewBox="0 -1047.1 2619.3 1594.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1693,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(2193,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(2693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(744,-370.3) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(600,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(1100,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><rect width="2379.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>= <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.238ex" xmlns="http://www.w3.org/2000/svg" width="5.926ex" height="3.607ex" role="img" focusable="false" viewBox="0 -1047.1 2619.3 1594.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1693,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(2193,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mo" transform="translate(2693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(744,-370.3) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(600,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(1100,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g><rect width="2379.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + 1；</p><p>...</p><p>第 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="9.093ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 4019 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(1696.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2518.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3519,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span> 个式子：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="4.166ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 1841.5 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(744,-345) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><rect width="1601.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="4.166ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 1841.5 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(744,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="1601.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + 1；</p><p>第 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="5.196ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 2296.6 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(1696.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> 个式子：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="4.166ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 1841.5 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(744,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="1601.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="4.166ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 1841.5 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(744,-345) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><rect width="1601.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + 1；</p><p>上式相加得：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex" xmlns="http://www.w3.org/2000/svg" width="4.326ex" height="3.167ex" role="img" focusable="false" viewBox="0 -1047.1 1912.2 1399.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mi" transform="translate(744,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1672.2" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> =<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="4.166ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 1841.5 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(744,-345) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><rect width="1601.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="5.196ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 2296.6 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(1696.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> * 1 = 1 + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="5.196ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 2296.6 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(1696.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>。</p><p>整理得：T(n) = n * (1 + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="5.196ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 2296.6 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(1696.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>)；</p><p>T(1024) = 1024 * (1 + 10) = 11264</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token class-name">T</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一共多少个式子的求法</p></blockquote><p>第 i 个式子：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.254ex" xmlns="http://www.w3.org/2000/svg" width="7.895ex" height="3.757ex" role="img" focusable="false" viewBox="0 -1106.5 3489.5 1660.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1693,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="msup" transform="translate(2193,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3923.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(744,-377.4) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(600,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="msup" transform="translate(1100,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><rect width="3249.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.248ex" xmlns="http://www.w3.org/2000/svg" width="6.449ex" height="3.746ex" role="img" focusable="false" viewBox="0 -1104 2850.5 1655.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1693,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="msup" transform="translate(2193,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3020,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(744,-374.9) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(600,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="msup" transform="translate(1100,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g><rect width="2610.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + 1;</p><p>令 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.404ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2830.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(600,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="msup" transform="translate(1100,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></span> = 2，求得 i = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="5.196ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 2296.6 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(1696.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span></p><h3 id="快速排序-1">7.1.2 快速排序</h3><p>Quick Sort是对冒泡排序的一种改良，不再是相邻元素之间的比较交换，并采用了分而治之（divideand conquer）的思想。</p><p>算法思路：将数组分割（partition）为独立的两部分，保证左边部分的所有元素都小于右边部分的所有元素；然后对这两部分元素的集合继续分割，如此反复操作，直到无法分割（待分割的元素个数为0、1 时）。</p><p><strong>如何分割？</strong></p><p>在待分割的集合中选择一个基准数，使得左边的元素都比基准数小，右边的元素都比基准数大，这就是左右两部分了；下面的代码，只是为了更好理解分而治之的思想：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 只有保存的元素个数大于 1 时才能进入，才能分割</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 选择中间的元素为基准数</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> middle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 得到每一个元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> item <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 大于 base 的元素放入 left 中</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&lt;</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>                left<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等于 base 的元素放入 middle 中                </span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">==</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>                middle<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 大于 base 的元素放入 right 中                      </span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&gt;</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>                right<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 对 left、right 集合重复上述操作</span>        <span class="token function">sort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 清空传入集合保存的元素</span>        items<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 添加 left、middle、right 集合的所有元素</span>        items<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        items<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>middle<span class="token punctuation">)</span><span class="token punctuation">;</span>        items<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//System.out.println(items);</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以 {51，4，2，20，7，12} 为例，基准数为 20，调用 sort方法后被分为三块空间（小于基准数的元素放进 left 中、大于基准数的元素放进right 中）：left{4，2，7，12}、middle{20}、right{51}；</p><p>调用方法 sort(left)，对 left 进行上述操作，此时 left 中基准数为 7，把left 分为三块空间：left{4，2}、middle{7}、right{12}...</p><figure><img src="https://s2.loli.net/2022/04/16/Miazjs1AhSB9CEr.png" alt="未命名文件 (1)"><figcaption aria-hidden="true">未命名文件 (1)</figcaption></figure><p>到此已经不可再分，再将其合并；先把第二层的 left 清空，添加第三层的left、middle、right 所有的元素，则第二层的 left 为 {2，4}，同理第一层的left 为 {2，4，7，12}；最终得到 {2，4，7，12，20，51}。</p><hr><p><strong>在数组中如何分割</strong></p><p>以 8，4，7，5，6，10，2，3，11 为例，选择基准数arr[0]：8，我们需要把小于 8 的放在左边，大于 8 的放在右边。</p><p>所以从待分割的集合两端开始向中间找，直到交汇：从==右往左负责找到小于8 的数==，然后交换到左边；从==左往右负责找到大于 8的数==，然后交换到右边；每次交换后，换另一个队伍来。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">先定义 base 变量，保存基准数 8从右往左找比较 arr[8] 与 8，11 &gt; 8，继续比较 arr[7] 与 8，3 &lt; 8，停下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个 3 该交换到左边的哪？</p><p>与最左边的基准数交换吧，反正我们定义了变量保存着它，不怕它不见。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">arr[7] 与 arr[0] 交换，交换后：(3)，4，7，5，6，10，2，(8)，11然后从左往右找比较 arr[0] 与 8，3 &lt; 8，继续（多余的比较）比较 arr[1] 与 8，4 &lt; 8，继续比较 arr[2] 与 8，7 &lt; 8，继续比较 arr[3] 与 8，5 &lt; 8，继续比较 arr[4] 与 8，6 &lt; 8，继续比较 arr[5] 与 8，10 &gt; 8，停下将它与 8 交换即 arr[5] 与 arr[7] 交换，交换后：3，4，7，5，6，(8)，2，(10)，11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">从右往左找，上一次是 arr[7]，这次接着往左找比较 arr[6] 与 8，2 &lt; 8，停下arr[6] 与 arr[5] 交换，交换后：3，4，7，5，6，(2)，(8)，10，11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">从左往右找，上一次是 arr[5]，这次接着往右找比较 arr[6] 与 8，...等等，这已经比较过了，不能继续了，否则就越界了交汇处为 arr[6]，下标记为 pivot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>至此 3，4，7，5，6，2，(8)，10，11。</p><p>8 之前元素的都是小于 8 的，之后的元素都是大于 8的，这就是两部分了：{3，4，7，5，6，2}、{10，11}</p><p>然后对这两部分重复以上操作。</p><p><strong>代码实现</strong></p><p>由于待分割的不只是整个数组（头尾下标分别为 0、length -1），为了方便两个队伍寻找，需要使用变量 start、end指定待分割集合的头尾下标，那么先选头为基准数，再定义两个变量 i =start、j = end，队伍 1 每找一个就 i++，队伍 2 每找一个就j--，找到了就停下，此刻的 i、j 就是待交换元素的下标。</p><p>分割过程中，两个队伍寻找的范围不能越界，即保证 i &lt; j。</p><p>分割后的两部分的范围：[start，pivot - 1]、[pivot +1，end]，直到分无可分，也就是待分割的集合的元素个数为 0 或 1。</p><p>同时可以观察到 base 的位置一直在变：基准数下标默认为start，在最左边；</p><p>从右往左找到了小数，交换元素位置，记为 swap(j，start)，由于 i初始值为 start，可以替换为 swap(j，i)，此时基准数的下标为 j；</p><p>从左往右找到了大数，下标为i，与基准数交换位置，swap(i，j)，此时基准数下标为 i...如此循环反复。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 一开始分割整个数组时的头尾分别为：0、length - 1</span>    <span class="token function">qSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">qSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/*    只有元素个数大于 1，才有必要分割；    end = start，如 [0，0] 有 1 个元素，且下标为 1，没必要分    end &gt; start，如 [3，4] 有 2 个元素，下标为 3、4，需要分割*/</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&gt;</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 头为基准数</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> end<span class="token punctuation">;</span>        <span class="token keyword">int</span> temp<span class="token punctuation">;</span>        <span class="token comment">// 左、右队伍轮流找</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 从右往左找，如果找到小于 base 的数，循环会终止</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 小数放左边</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 从左往右找，找到大于 base 的数</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 大数放右边</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 到这里，说明 i = j，也就是交汇处，那么 i 之前的部分与 i 之后的部分，再继续以上操作</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速排序复杂度分析">7.1.3 快速排序复杂度分析</h3><p><strong>最差情况</strong></p><p>待排序的数组为逆序或顺序时，为最差情况；每次分割后得到的其中一个集合总是为空，如{1，2，3，4，5，6，...，n}，因为我们默认选用最左边的 1作为基准数，得到的两部分为 {}、{2，3，4，5，...，n}；</p><p>空集与个数为 1 的集合无法分割所以不计入，另一个部分选取基准数为2，继续分为两部分：{}、{3，4，5，...，n}...</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">第 1 次分割 {1，2，3，...，n}第 2 次分割 {2，3，...，n}...第 n - 1 次分割 {n - 1，n}    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里只谈与基准数比较的次数，以顺序为例。（逆序比较次数会比顺序多1）</p><p>第 1 次分割：先从右往左找，arr[n - 1] 与 1 比较、arr[n - 2] 与 1 比较... arr[1] 与 1 比较时，2 &gt; 1，进入循环 j--，j 为 0，下次循环时 i&lt; j 为 false，退出循环；一共比较了 n - 1 次；然后调用方法qSort(arr，1，n - 1) 进行第二次分割；</p><p>第 2 次分割：从右往左，arr[n - 1] 与 2 比较 ... arr[2] 与 2 比较时，3&gt; 2，进入循环 j--，j 为 1，下次循环时 i &lt; j 为false，退出循环；一共比较了 n - 2 次；</p><p>...</p><p>第 n - 1 次分割：一共比较 1 次。</p><p>一共比较了 1 + 2 + ... + (n - 1) = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="6.204ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 2742.3 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(989,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1589,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2367,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2867,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(1194.4,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="2502.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> 次，时间复杂度为O(n<sup>2</sup>)；其中每次分割时需要定义 4 个变量存放值，空间复杂度为O(n)，然而很可能却什么都没干。</p><p><strong>最好情况</strong></p><p>最好情况，每次都是对半分，当然这还是过高估计了，选中间元素作为基准数，如偶数个集合{1，2，3，4} 分为{1，2}、{4}，其中一个少于一半；只是为了简化运算而已，结果不算精确。</p><p>先以小见大，{1，2，3，4，5} 选取中间的 3 作为基准数，从右往左，arr[4]与 3 比较、arr[3] 与 3 比较，arr[2] 与 3 比较、arr[1] 与 3比较，停下；从左往右 ，arr[0] 与 3 比较，已到交汇处，停下；一共 5次。</p><p>j 先移动，当比较结果为 true 时，j 往左移；比较结果为 false 时，换 i往右移 ... 换着来，直到 i 与 j 移动的次数正好将整个待分割的集合覆盖（i =j），比较次数即为总移动次数，为待分割集合元素的个数。</p><hr><p>第 1 次分割 {1，2，3，...，n}，比较 n 次 第 2 次分割{1，2，...，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.955ex" height="2.379ex" role="img" focusable="false" viewBox="0 -706.5 864.3 1051.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(220,394) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(255.4,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>} * 2，比较n / 2 * 2 = n 次 第 3 次分割 {1，2，...，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.955ex" height="2.379ex" role="img" focusable="false" viewBox="0 -706.5 864.3 1051.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(220,394) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(255.4,-345) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>} * 4，比较 n / 4 * 4 = n 次第 4 次分割 {1，2，...，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex" xmlns="http://www.w3.org/2000/svg" width="1.955ex" height="2.414ex" role="img" focusable="false" viewBox="0 -706.5 864.3 1067.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(220,394) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(255.4,-345) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>} * 8，比较 n / 8 * 8 = n 次...</p><p>第 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="5.196ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 2296.6 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(1696.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> 次分割 {1，2} * <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="7.038ex" height="1.932ex" role="img" focusable="false" viewBox="0 -853.7 3110.6 853.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(1696.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2296.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3074.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></span>，比较 2 * <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="7.038ex" height="1.932ex" role="img" focusable="false" viewBox="0 -853.7 3110.6 853.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(1696.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2296.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3074.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></span> = n 次</p><p>一共 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="6.553ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 2896.6 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(898,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(1383,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(2296.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> 次。时间复杂度为O(<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="6.587ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 2911.4 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(898,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(1383,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mi" transform="translate(2311.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>)，空间复杂度为 O(<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="6.587ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 2911.4 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(898,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(1383,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mi" transform="translate(2311.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>)。</p><hr><blockquote><p>第二次分割的分别是 {1，2，...，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.955ex" height="2.379ex" role="img" focusable="false" viewBox="0 -706.5 864.3 1051.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(220,394) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(255.4,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>}、{<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.955ex" height="2.379ex" role="img" focusable="false" viewBox="0 -706.5 864.3 1051.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(220,394) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(255.4,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>，...，n}，只是问题规模相同，于是就相当于2 个 {1，2，...，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.955ex" height="2.379ex" role="img" focusable="false" viewBox="0 -706.5 864.3 1051.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(220,394) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(255.4,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>}。</p><p>第 i 次分割 {1，2，...，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.854ex" xmlns="http://www.w3.org/2000/svg" width="3.764ex" height="2.452ex" role="img" focusable="false" viewBox="0 -706.5 1663.7 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(619.7,394) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msup" transform="translate(220,-377.4) scale(0.707)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><rect width="1423.7" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>} * <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="3.915ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 1730.6 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></span>，令最后一项等于2，就是最后一次分割，然后求 i 即可。</p></blockquote><p><strong>平均复杂度</strong></p><p>T(n) 为本次分割时的比较次数 + 继续分割两部分时的比较次数；k为左部分元素的个数，则另一部分元素个数为 n - k -1；有 T(n) = n + T(k) +T(n - 1 - k)；其中 T(0)、T(1) 无法分割，记为 1。</p><p>分割后的两部分元素个数有如下 n 种情况：</p><p>(0，n - 1)、(1，n - 2)、...、(n - 2，1)、(n - 1，0)；</p><p>每种情况出现的概率为 1/n；把所有情况累加，除以 n 算出平均值。</p><hr><p>左部分求和 T(0) + T(1) + T(2) + ... + T(n - 2) + T(n - 1) = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.561ex" xmlns="http://www.w3.org/2000/svg" width="7.667ex" height="6.003ex" role="img" focusable="false" viewBox="0 -1520.9 3388.6 2653.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo" transform="translate(136,0)"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(66.5,-887.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(0,950) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1494.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(2198.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2587.6,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2999.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>左部分的平均值：(1/n) * <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.561ex" xmlns="http://www.w3.org/2000/svg" width="7.667ex" height="6.003ex" role="img" focusable="false" viewBox="0 -1520.9 3388.6 2653.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo" transform="translate(136,0)"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(66.5,-887.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(0,950) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1494.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(2198.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2587.6,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2999.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>；</p><p>右部分的平均值：(1/n) * <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.561ex" xmlns="http://www.w3.org/2000/svg" width="7.667ex" height="6.003ex" role="img" focusable="false" viewBox="0 -1520.9 3388.6 2653.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo" transform="translate(136,0)"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(66.5,-887.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(0,950) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1494.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(2198.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2587.6,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2999.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>；</p><p>所以 T(n) = n + (2/n) * <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.561ex" xmlns="http://www.w3.org/2000/svg" width="7.667ex" height="6.003ex" role="img" focusable="false" viewBox="0 -1520.9 3388.6 2653.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo" transform="translate(136,0)"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(66.5,-887.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(0,950) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1494.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(2198.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2587.6,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2999.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>；</p><p>等式两边乘以 n 得：n * T(n) = n<sup>2</sup> + 2 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.561ex" xmlns="http://www.w3.org/2000/svg" width="7.667ex" height="6.003ex" role="img" focusable="false" viewBox="0 -1520.9 3388.6 2653.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo" transform="translate(136,0)"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(66.5,-887.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(0,950) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1494.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(2198.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2587.6,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2999.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>；</p><p>将 n-1 代入式子得：(n-1) * T(n-1) = (n-1)<sup>2</sup> + 2 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.561ex" xmlns="http://www.w3.org/2000/svg" width="7.667ex" height="6.003ex" role="img" focusable="false" viewBox="0 -1520.9 3388.6 2653.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo" transform="translate(136,0)"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(66.5,-887.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(0,950) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1494.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(2198.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2587.6,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2999.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>；</p><p>两个式子相减得：n * T(n) - (n-1) * T(n-1) = 2n - 1 + 2 * T(n-1)</p><p>略去常数：n * T(n) = 2n + (n+1) * T(n-1)</p><p>等式两边同时除以 n(n+1) 得：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="4.326ex" height="3.281ex" role="img" focusable="false" viewBox="0 -1047.1 1912.2 1450.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(292.1,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1672.2" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex" xmlns="http://www.w3.org/2000/svg" width="6.371ex" height="3.167ex" role="img" focusable="false" viewBox="0 -1047.1 2815.9 1399.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2471,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2971,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mi" transform="translate(1195.8,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="2575.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="4ex" height="2.869ex" role="img" focusable="false" viewBox="0 -864.9 1767.9 1267.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(707.2,394) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1527.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> ①</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex" xmlns="http://www.w3.org/2000/svg" width="6.371ex" height="3.167ex" role="img" focusable="false" viewBox="0 -1047.1 2815.9 1399.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2471,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2971,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mi" transform="translate(1195.8,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="2575.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="6.371ex" height="3.281ex" role="img" focusable="false" viewBox="0 -1047.1 2815.9 1450.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2471,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2971,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(744,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="2575.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex" xmlns="http://www.w3.org/2000/svg" width="1.955ex" height="2.755ex" role="img" focusable="false" viewBox="0 -864.9 864.3 1217.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(255.4,394) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="6.371ex" height="3.281ex" role="img" focusable="false" viewBox="0 -1047.1 2815.9 1450.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2471,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2971,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(744,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="2575.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="6.371ex" height="3.281ex" role="img" focusable="false" viewBox="0 -1047.1 2815.9 1450.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2471,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(2971,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(744,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><rect width="2575.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="4ex" height="2.869ex" role="img" focusable="false" viewBox="0 -864.9 1767.9 1267.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(707.2,394) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1527.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></p><p>...</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="4.166ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 1841.5 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(744,-345) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><rect width="1601.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex" xmlns="http://www.w3.org/2000/svg" width="4.166ex" height="3.185ex" role="img" focusable="false" viewBox="0 -1047.1 1841.5 1407.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(744,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><rect width="1601.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex" xmlns="http://www.w3.org/2000/svg" width="4.166ex" height="3.185ex" role="img" focusable="false" viewBox="0 -1047.1 1841.5 1407.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(744,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><rect width="1601.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="4.166ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 1841.5 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(744,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="1601.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.773ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1225.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> ②</p><p>① 到 ② 的式子相加得：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="4.326ex" height="3.281ex" role="img" focusable="false" viewBox="0 -1047.1 1912.2 1450.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(292.1,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1672.2" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="4.166ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 1841.5 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(744,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="1601.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + 2 * (<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="21.616ex" height="2.869ex" role="img" focusable="false" viewBox="0 -864.9 9554.2 1267.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1015.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(2016,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(2809.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(3587.6,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4032.2,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4476.9,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4921.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(5699.6,0)"><g data-mml-node="mn" transform="translate(255.4,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(6786,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(7786.3,0)"><g data-mml-node="mn" transform="translate(707.2,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1527.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>)</p><p>=<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + 2 * (<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="30.074ex" height="2.869ex" role="img" focusable="false" viewBox="0 -864.9 13292.6 1267.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(1722.4,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(2738.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(3738.4,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(4754.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(5754.4,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(6548,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(7326,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(7770.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(8215.3,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(8660,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(9438,0)"><g data-mml-node="mn" transform="translate(255.4,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(10524.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(11524.7,0)"><g data-mml-node="mn" transform="translate(707.2,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1527.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>)- 2 - 1</p><p>= 2 * (<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="30.074ex" height="2.869ex" role="img" focusable="false" viewBox="0 -864.9 13292.6 1267.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(1722.4,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(2738.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(3738.4,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(4754.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(5754.4,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(6548,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(7326,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(7770.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(8215.3,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(8660,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(9438,0)"><g data-mml-node="mn" transform="translate(255.4,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(10524.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(11524.7,0)"><g data-mml-node="mn" transform="translate(707.2,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1527.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>)- <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></p><p>其中 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.601ex" xmlns="http://www.w3.org/2000/svg" width="4.159ex" height="3.171ex" role="img" focusable="false" viewBox="0 -694 1838.5 1401.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munder"><g data-mml-node="mo" transform="translate(224.7,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(278,0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(556,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(0,-600) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1600,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></g></g></svg></mjx-container></span>(1+ <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.773ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1225.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + ... + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex" xmlns="http://www.w3.org/2000/svg" width="1.955ex" height="2.755ex" role="img" focusable="false" viewBox="0 -864.9 864.3 1217.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(255.4,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>) = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="3.621ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 1600.7 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(834,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(1000.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex" xmlns="http://www.w3.org/2000/svg" width="1.229ex" height="1.486ex" role="img" focusable="false" viewBox="0 -441 543 657"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FE" d="M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z"></path></g></g></g></svg></mjx-container></span>（证明在扩充内容中，但我没学调和级数，只能证明极限存在）</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="24.765ex" height="3.281ex" role="img" focusable="false" viewBox="0 -1047.1 10946.1 1450.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(292.1,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1672.2" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(2190,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="mn" transform="translate(3245.8,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(3968,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mo" transform="translate(4690.2,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(4968.2,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(5802.2,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(5802.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6191.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(7013.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(8013.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8513.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(9124.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(10125.1,0)"><path data-c="1D6FE" d="M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z"></path></g><g data-mml-node="mo" transform="translate(10668.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>- <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></p><p>略去系数：</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="16.059ex" height="3.281ex" role="img" focusable="false" viewBox="0 -1047.1 7098.2 1450.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(292.1,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1672.2" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(2190,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3245.8,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(4008.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4397.8,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(4695.8,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(5180.8,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(510,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mi" transform="translate(6109.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6709.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="17.801ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7868 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2359.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3415.6,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(4178.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4567.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5167.6,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(5465.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(5950.6,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mi" transform="translate(6879,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(7479,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><p>所以时间、空间复杂度都为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="10.073ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4452.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1752,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(2050,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(2535,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mi" transform="translate(3463.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4063.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>。</p><blockquote><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex" xmlns="http://www.w3.org/2000/svg" width="1.229ex" height="1.486ex" role="img" focusable="false" viewBox="0 -441 543 657"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FE" d="M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z"></path></g></g></g></svg></mjx-container></span> 称为 Euler常数（欧拉常数），约等于 0.57721566490...</p></blockquote><hr><p>是不稳定排序。</p><h3 id="快速排序优化">7.1.4 快速排序优化</h3><p><strong>优化不必要的交换</strong></p><p>以之前的数组分割为例：</p><figure><img src="https://s2.loli.net/2022/04/18/tWv6q3XBz1sPNIp.png" alt="未命名文件 (4)"><figcaption aria-hidden="true">未命名文件 (4)</figcaption></figure><p>可以看到 8 就像个沙包一样被扔来扔去，但最终的位置是 pivot 处（i = j处）；干脆舍弃掉这个中转站，让队伍 2 找到的小数与队伍 1找到的大数进行交换...最后再把 8 与 pivot处元素交换，这样简化了很多不必要的交换。</p><p>上图等同如下：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">基准数 与 3 交换10 与 基准数 交换...基准数 与 arr[pivot] 交换<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以简化为：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">10 与 3 交换...基准数 与 arr[pivot] 交换<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到的结果稍许不同，但大致上令人满意，改动原来的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>        j<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 让队伍 1 与队伍 2 找到的数（arr[i]、arr[j]）进行交换</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 基准数与 arr[pivot] 交换</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 递归中...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>关于基准数的选择</strong></p><p>如果选用第一个元素为基准数，当待排序的数组为逆序或有序时，基准数是最大或最小的元素，分割的其中一部分总是为空，时间复杂度为O(n<sup>2</sup>)，之前已经论证过，所以最好避免这种策略。</p><p>更常见的做法是在待分割的集合中取 k个数，在里面选择一个中间数作为基准数。</p><p>以 3 个数为例，取 arr[start]、arr[(start+end)/2]、arr[end]</p><p>我们需要做的就是让中间数移动到 start 处，然后我们还是以 arr[start]作为基准数。</p><p>假如我们取出的三个数为：arr[0]、arr[5]、arr[10] 分别对应a、b、c；这里不探究相等的情况。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">如果 arr[0] &gt; arr[10]，a &gt; c让它们交换位置：c、b、a，保证 arr[0] &lt; arr[10]当然如果不满足条件，不用交换，也保证了 arr[0] &lt; arr[10]如果 arr[5] &gt; arr[10]，b &gt; a交换：c、a、b，保证 arr[5] &lt; arr[10]如果 arr[0] &lt; arr[5]，c &lt; a交换：a、c、b，保证 arr[0] &gt; arr[5]结合：arr[5] &lt; arr[0] &lt; arr[10]arr[0] 为中间数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 保证 arr[start] &lt; arr[end]</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> m<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 保证 arr[m] &lt; arr[end]</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 保证 arr[start] &gt; arr[m]</span><span class="token punctuation">}</span><span class="token comment">/*arr[m] &lt; arr[start] &lt; arr[end]所以 arr[start] 为中间数*/</span><span class="token keyword">int</span> base <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 剩下照旧</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当数组长度过大时，为了避免越界，使用 start+(end-start)/2 或start+((end-start)&gt;&gt;1) 代替 (start+end)/2。</p></blockquote><p><strong>使用循环代替递归</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">qSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 将 if 改成循环</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>end <span class="token operator">&gt;</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 略...</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        start <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对左部分排好序后，接着执行 start = i + 1，开始下一次循环，int base =arr[i + 1]，相当于调用方法 qSort(arr，i +1，end)；然后对右部分排序。</p><h3 id="快速排序变体">7.1.5 快速排序变体</h3><p>我们之前只选择第一个元素作为基准数，你有没有想过这是为什么？</p><p>以 1、9、10、3、7、8、9 为例，使用优化后的排序，假设以 3为基准数：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">i = 0;j = 6;队伍 2 开始向左找一个小于 3 的数：略...比较 arr[1] 与 基准数，9 &gt; 3 继续循环，j--，j = 0，进入下一次循环此时 i &lt; j 为 false，退出循环队伍 1 开始寻找，也被迫退出循环此时 i、j 相等都是 0，不用交换最后 3 与交汇处的元素交换：3、9、10、1、7、8、9分割的前部分：{}后部分：9、10、1、7、8、9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一次失败的分割，原因是因为队伍 2 探测的元素都是大于等于 3的，最后还未来得及探测第一个元素，就被 i &lt; j这个条件驳回了，之前我们选用第 1个元素作为基准数，遇见这种情况时，交汇处正是基准数所在位置，右边都是大于等于基准数的元素，左边为空，所以不用担心；既然现在要使用其它位置的元素作为基准数，不妨大胆一点，去掉这个条件。</p><p>但可能会导致下标越界，请看代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>    j<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果待分割的元素都 &gt;= base，j不停地减减，直至变为负数，会导致越界；不妨将等号去掉，使用基准数限制住它的移动，这样当j 移动到基准数处时，arr[j] = base，直接退出循环。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 现在等于 base 也会终止循环</span>        j<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是随之又产生了新的问题，如果数组中存在多个与基准数相等的元素，当队伍2、1 由于这个原因都停下时，此时 arr[i] = arr[j] = base，然后arr[i]、arr[j] 交换，进入下一次循环；</p><p>队伍 2 寻找时，此时 arr[j] 还是等于 base，直接退出循环，队伍 1也是如此，程序就进入无限循环。</p><p>可能还有人不明白我在说什么，以 3、4、4、5 为例，取基准数为 4；</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">队伍 2 的 j = 2 时，arr[2] = 4，不满足条件退出循环，没有执行 j--队伍 1 的 i = 1 时，arr[1] = 4，同样退出循环i &lt; j，arr[1]、arr[2] 交换位置，交换后：3、4、4、5进入下一次循环，注意此时 i = 1、j = 2队伍 2，arr[2] = 4，不满足条件退出循环，没有执行 j--队伍 1，arr[1] = 4，同样退出循环i &lt; j，arr[1]、arr[2] 交换位置，交换后：3、4、4、5...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于 i 、j都不移动，所以造成了无限循环。常见的做法是交换位置后，如果某个队伍所在位置上的元素等于基准数，就让另一个队伍下标移动。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>为什么不移动自己队伍的下标，如上面代码改为 j-- 可不可以？</p><p>不可以，因为 j 可能指向的是基准数，一移动正好错开了。以 3、1、3、1、2为例验证 j-- 的可行性：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">基准数：3队伍2 找 &lt;= 3 的数，j = 4，arr[4] &lt; 3，停下队伍1 找 &gt;= 3 的数，i = 0，arr[0] = 3，停下swap(arr, 0, 4)后：2、1、3、1、3此时 arr[4] = 3，满足条件，进入 if 语句，执行 j-- 后 j = 3队伍 2 继续向左找，j = 3，arr[3] &lt; 3，停下队伍 1 向右找，i = 2，arr[2] = 3，停下swap(arr, 2, 3)后：2、1、1、3、3此时 arr[3] = 3，满足条件，j-- 后 j = 2i、j 都是 2，退出循环前部分：{2，1}分割点：1后部分：{3，3}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本来 j 不移动，就会被 arr[j] &gt; base 条件卡住，j不会越界，但是现在使用了 j--，让 j 成功越过 base，现在 i、j 指向的元素为1，1 成为了 pivot 点，失败的分割。</p><p>所以应让另一个队伍移动。由于满足 i &lt; j 条件才能进来，此时的 j如果指向的元素是基准数，即使移动了一步，也最多只是让 i = j而已，不会越界，两个队伍都指向基准数，并以此作为分割点。</p><p>qSort 方法修改后代码如下：</p><p>注意基准数所在下标能够确定在 [start、end] 范围内，若设 base = end -10，是不被允许的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>end <span class="token operator">&gt;</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> base <span class="token operator">=</span> arr<span class="token punctuation">[</span>start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> end<span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> base<span class="token punctuation">)</span><span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 此时 i = j 相等且都指向 pivot 处，i、j 可以随意替换</span>    <span class="token function">qSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    start <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 1.1.7 排序优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.5.1 输入与输出</title>
      <link href="/2022/04/29/1.1.5-liu-cheng-kong-zhi-yu-ju/1.1.5.1-shu-ru-yu-shu-chu/"/>
      <url>/2022/04/29/1.1.5-liu-cheng-kong-zhi-yu-ju/1.1.5.1-shu-ru-yu-shu-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="输入与输出">5.1 输入与输出</h2><p>内容导视：</p><ul><li>接收输入</li><li>普通输出</li><li>格式化输出</li></ul><h3 id="接收输入">5.1.1 接收输入</h3><p>我们需要用到 java.util 包下的 Scanner 类，非 lang包下的类需要导入，在首行加 import：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建一个扫描仪实例，扫描指定输入流产生的值</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"等待你的输入，请按下任意键："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 等待输入字符串，使用 String 类型的变量 name 接收</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你输入的字符串为："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"等待你输入整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 等待输入整数，使用 int 类型的变量 num 接收</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你输入的整数为："</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">/*scanner.nextDouble()是接收小数        scanner.next().charAt(0)是接收字符        */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不想输入，请按 Ctrl + C 结束程序。</p><p>注意，让你输入整数时，你却输入了其它字符，会报java.util.InputMismatchException 输入不匹配异常。</p><p>可以使用如下方法避免：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"等待输入中："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果输入的是整数，就返回 true，执行上面的分支</span><span class="token keyword">if</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你输入的是个整数："</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你输入的不是整数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="普通输出">5.1.2 普通输出</h3><p>输出与打印是一个意思，就是在控制台上显示一些文本信息。</p><p><code>System.out.println("向控制台输出一些内容");</code></p><p>println 是 printline，即打印并换行：如果接着打印，内容会在下一行显示；如果想下次打印时，文本在同一行，去掉ln。</p><h3 id="格式化输出">5.1.3 格式化输出</h3><p>就是把数据按指定格式输出，使用 printf 配合占位符%，先把地方占着，再接收数据填充上去；</p><p>由于没有 ln，需要使用转义字符 <code>\n</code>手动换行，<code>%d</code>是给整数占位置，<code>%s</code>是给字符串占位置。占位后，需要传入值，从左至右，顺序不可颠倒，数据类型必须要对应上。</p><p>下面是常用的占位符：</p><table><thead><tr class="header"><th style="text-align: center;">占位符</th><th style="text-align: center;">解释</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">%d</td><td style="text-align: center;">给整数占位</td></tr><tr class="even"><td style="text-align: center;">%x</td><td style="text-align: center;">给整数占位，输出的整数以十六进制显示</td></tr><tr class="odd"><td style="text-align: center;">%f</td><td style="text-align: center;">给小数占位</td></tr><tr class="even"><td style="text-align: center;">%e</td><td style="text-align: center;">给小数占位，输出的小数以科学计数法显示</td></tr><tr class="odd"><td style="text-align: center;">%s</td><td style="text-align: center;">给字符串占位</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> ln <span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"班级人员详情："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"序号：%d，姓名：%s"</span> <span class="token operator">+</span> ln<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">"猛男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">"武丑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token number">3.14256</span><span class="token punctuation">;</span><span class="token keyword">double</span> num2 <span class="token operator">=</span> <span class="token number">100123450.0</span><span class="token punctuation">;</span><span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数字测试："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"这是小数：%f"</span> <span class="token operator">+</span> ln<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f 保留 2 位小数：%.2f"</span> <span class="token operator">+</span> ln<span class="token punctuation">,</span> num<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f 的科学计数法显示：%e"</span> <span class="token operator">+</span> ln<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d 对应的十六进制：%x"</span> <span class="token operator">+</span> ln<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 1.1.5 流程控制语句 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.5.3 循环控制语句</title>
      <link href="/2022/04/29/1.1.5-liu-cheng-kong-zhi-yu-ju/1.1.5.3-xun-huan-kong-zhi-yu-ju/"/>
      <url>/2022/04/29/1.1.5-liu-cheng-kong-zhi-yu-ju/1.1.5.3-xun-huan-kong-zhi-yu-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="循环控制语句">5.3 循环控制语句</h2><p>内容导视：</p><ul><li>for</li><li>while</li></ul><p>有些时候，我们需要重复执行某些事情...</p><h3 id="for">5.3.1 for</h3><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>初始化表达式<span class="token punctuation">;</span> 布尔值（循环条件）<span class="token punctuation">;</span> 更新表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    循环体中的语句<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行顺序：</p><p>先执行初始化表达式，如果循环条件为 true，执行循环体中的语句；</p><p>执行完后，执行更新表达式，如果循环条件为true，执行循环体中的语句...</p><p>直到循环条件为 false，退出 for 语句。</p><figure><img src="https://s2.loli.net/2022/04/24/NznJZOBY8G7T2kK.png" alt="for 循环"><figcaption aria-hidden="true">for 循环</figcaption></figure><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"两指夫人"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>分析：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">i --&gt; 0；此时 i 小于 2，为 true，执行循环体中的语句，输出：两指夫人0执行更新表达式 i++i --&gt; 1；此时 i 小于 2，为 true，执行循环体中的语句，输出：两指夫人1执行更新表达式 i++i --&gt; 2；此时 i 小于 2 为 false，退出循环<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小技巧：</p><p>1）由于定义在 <code>for ()</code> 中的变量的作用域仅在 for循环体内：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">Hello.java<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span> 错误<span class="token punctuation">:</span> 找不到符号<span class="token keyword">System</span>.<span class="token keyword">out</span>.println<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为了能够在其它地方能够访问到此变量，可以将其提取出来。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2）初始化语句与更新表达式可以有多个，使用 <code>,</code> 隔开。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i："</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"，j："</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>分析：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">i --&gt; 1，j --&gt; 2i &lt; 4 &amp;&amp; j &lt; 6 为 true，执行循环体，输出：i：1，j：2执行更新表达式：i++、j += 2i --&gt; 2，j --&gt; 4i &lt; 4 &amp;&amp; j &lt; 6 为 true，执行循环体，输出：i：2，j：4执行更新表达式：i++、j += 2i --&gt; 3，j --&gt; 6i &lt; 4 &amp;&amp; j &lt; 6 为 false，结束 for 循环<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="while">5.3.2 while</h3><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>布尔值（循环条件）<span class="token punctuation">)</span> <span class="token punctuation">{</span>    循环体中的语句<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果布尔值为 true，执行循环体；执行结束后再判断布尔值...直到布尔值为false，退出循环。</p><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出 0、1、2</p><p><strong>do while</strong></p><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">do</span> <span class="token punctuation">{</span>    循环体中的语句<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>布尔值<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>先执行循环体，执行结束后判断布尔值，如果为true，执行循环体，再判断布尔值...直到布尔值为 false，退出循环。</p><p>与 while 不同的是，do while 是先执行再判断，所以一定会执行一次。</p><figure><img src="https://s2.loli.net/2022/04/24/FHM9JISPdl41jrQ.png" alt="do while"><figcaption aria-hidden="true">do while</figcaption></figure><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出 0、1、2</p><p><strong>嵌套循环</strong></p><p>以 for循环为例。之前先讲过嵌套，你就理解为套娃就行了，看到阿衰他妈给阿衰做了一笼包子，结果大脸妹打开包子一看，包子里有多个小包子，继续打开，更小的包子...无穷尽也，很影响食欲。嵌套最好不要超过三层，怕人发昏。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">当 i = 0 时，执行循环体输出 0、1、2，当 j = 3 时，不满足条件，结束内层 for 循环当 i = 1 时，执行循环体输出 0、1、2...当 i = 2 时，执行循环体输出 0、1、2...当 i = 3 时，不满足循环条件，退出外层 for 循环<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>外层的 for 一共循环执行 3 次；每次外层循环时，内层的 for 会循环执行 3次；也就是内层的循环体中的语句一共执行 3 * 3 = 9 次。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.5 流程控制语句 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.5.2 分支控制语句</title>
      <link href="/2022/04/29/1.1.5-liu-cheng-kong-zhi-yu-ju/1.1.5.2-fen-zhi-kong-zhi-yu-ju/"/>
      <url>/2022/04/29/1.1.5-liu-cheng-kong-zhi-yu-ju/1.1.5.2-fen-zhi-kong-zhi-yu-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="分支控制语句">5.2 分支控制语句</h2><p>分支控制语句也称选择语句。</p><p>内容导视：</p><ul><li>if else</li><li>switch case</li></ul><p>程序一般自上而下，逐行执行，但是有时也需要特殊操作；比如根据条件选择性地执行某段代码、循环执行某段代码...</p><h3 id="if-else">5.2.1 if else</h3><p>if else语句最多只会执行一条分支，类似走路遇见岔路，只能选一条通过。先从最简单的if 讲起。</p><p><strong>单条分支</strong></p><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>布尔类型的值<span class="token punctuation">)</span> <span class="token punctuation">{</span>    java 语句<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当布尔类型的值为 true 时，才会执行 {} 中的 java 语句，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> age1 <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token keyword">int</span> age2 <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age1 <span class="token operator">&gt;</span> age2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我比你大"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此句话会输出</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 {} 中只有一条语句时，可以省略{}；但是最好不要那么做，以免别人误解。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>age1 <span class="token operator">&gt;</span> age2<span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我比你大"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>if else</strong></p><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>布尔类型的值<span class="token punctuation">)</span> <span class="token punctuation">{</span>    分支一<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    分支二<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>布尔类型的值为 true，执行第一条分支；为 false，执行第二条分支。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> sex <span class="token operator">=</span> <span class="token char">'1'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sex <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此句会输出</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>多条分支</strong></p><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    分支一<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>值<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    分支二<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>值<span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    分支三<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上至下，只执行第一个值为 true 的分支；else if 可以无限追加。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> scope <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的成绩不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的成绩一般"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的成绩良好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的成绩优秀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的分支都不会执行，因为从上至下，没有布尔表达式为 true 的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"未成年人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">35</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"青年人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此句将会输出</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中年人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行第二条分支。</p><p><strong>if else if ... else</strong></p><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    分支一<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>值<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    分支二<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>值<span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    分支三<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    最后的分支<span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当所有分支括号里的值都为 false 时，执行最后的分支。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">888</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"未成年人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">35</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"青年人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此句将会输出</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中年人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老年人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"妖怪吧！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 由于上面分支都不满足，执行此条分支</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>嵌套分支</strong></p><p>if 语句中有 if 语句。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> scope <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> scope <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 语句块 1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的成绩不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的成绩一般"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的成绩良好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的成绩优秀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// 语句块 2</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是人能考出的成绩？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*只有分数在 [0 ~ 100] 之间才会执行语句块 1，否则执行语句块 2*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>嵌套最好不要超过三层，否则人容易迷惑，可读性太差。</p><h3 id="switch-case">5.2.2 switch case</h3><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span> <span class="token punctuation">(</span>值<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> 字面量<span class="token number">1</span><span class="token operator">:</span>语句块<span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> 字面量<span class="token number">2</span><span class="token operator">:</span>    语句块<span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> 字面量<span class="token number">3</span><span class="token operator">:</span>    语句块<span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">default</span><span class="token operator">:</span>    语句块<span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上至下，执行字面量等于 switch 括号中的值的 case 分支语句，遇见break 结束 switch 语句。</p><p>default 如同 else一样，可以不写；当没有一个匹配上，就执行此分支的语句。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> key <span class="token operator">=</span> <span class="token char">'s'</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token char">'w'</span> <span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token char">'s'</span> <span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此条将会被输出</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> <span class="token char">'a'</span> <span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"左"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token char">'d'</span> <span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"右"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"其它"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：</p><ol type="1"><li>case 后的字面量对应的数据类型必须与 switch括号中的值的类型一致，或者可以自动转成此类型。</li><li>case 后的字面量值不能重复。</li><li>switch 括号中的值的数据类型只能是int、String、Enum。（能够自动转换为这三种类型的也算）</li><li>case 后的值不能是变量，只能是字面量与常量。</li></ol><p><strong>case 穿透现象</strong></p><p>当执行某条 case 分支的语句时，如果没有 break语句结尾，直接顺序执行之下的所有 case、default分支的语句；因为只有执行了 break，才会退出 switch 语句。</p><p>看清楚了，我把 每条分支的 break 都略去了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> weather <span class="token operator">=</span> <span class="token string">"sunny"</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>weather<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"cloudy"</span> <span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"阴天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"sunny"</span> <span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"晴天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"rain"</span> <span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"雨天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"其它天气"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当输出 “晴天” 时，由于没有遇到 break 语句，继续执行之下语句，输出“雨天”、“其它天气”。</p><p>打个比方吧：</p><p>在一个神奇的小区，房子一排排却单向连通，一旦进入其中一家，便可以由内部通道去往下一家。有的住户觉得很不安全，偷偷做了防范措施。</p><p>一个小偷捡到了一把锁，尝试着用它开启一户户门，从巷头走到巷尾。诶，有一扇门开了，进去拿了东西，但是主人安了警报铃，小偷马上GG了。另一个小偷也来了，也打开扇门，恰好主人家忽视了防护，小偷偷完这家后，直接顺着通道前往下一家，居然都没防范措施，直接全部偷完。<img src="https://s2.loli.net/2022/03/30/HvCiWIS3DGKPrak.png" alt="小偷溜滑梯"> <strong>case 合并</strong></p><p>如果多个 case 分支执行的是相同的语句，可以将其合并：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> sex <span class="token operator">=</span> <span class="token char">'男'</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token char">'0'</span> <span class="token operator">:</span> <span class="token keyword">case</span> <span class="token char">'女'</span> <span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我有四个蛋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token char">'1'</span> <span class="token operator">:</span> <span class="token keyword">case</span> <span class="token char">'男'</span> <span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"咖喱？什么咖喱？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"快还给我！这是我的！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"只想守护你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 sex 等于 '0' 或 '女' 时，执行第一条分支；sex 等于 '1' 或 '男'执行第二条分支；都不满足执行默认分支。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.5 流程控制语句 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.5.4 转向控制语句</title>
      <link href="/2022/04/29/1.1.5-liu-cheng-kong-zhi-yu-ju/1.1.5.4-zhuan-xiang-kong-zhi-yu-ju/"/>
      <url>/2022/04/29/1.1.5-liu-cheng-kong-zhi-yu-ju/1.1.5.4-zhuan-xiang-kong-zhi-yu-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="转向控制语句">5.4 转向控制语句</h2><p>内容导视：</p><ul><li>break</li><li>continue</li><li>return</li></ul><p>终止或跳过循环...</p><h3 id="break">5.4.1 break</h3><p>break 代表终止语句块的执行（不再执行），一般用于 switchcase、for、while 中。</p><p>举例：当 i = 2 时，终止循环。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"终止了循环"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出 0、1；当 i 等于 2 时，执行 if 语句，输出 “终止了循环”，接着执行break 终止 for 循环。</p><p>当 break 用在嵌套循环中，默认终止最近的循环体。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">当 i = 0 时，输出 0当 i = 1 时，输出 0当 i = 2 时，输出 0因为当 j = 1 时，满足了 if 条件，执行了 break，终止了里层的 for 循环。（只是代表里层的循环执行结束，但外层循环还在继续执行）当 i = 3 时，不满足条件，退出外层循环。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以自定义标签，终止标签对应的循环。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">key1<span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    key2<span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token keyword">break</span> key1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出 0；当 j = 1 时，执行了 break，终止 key1 对应的 for 语句。</p><h3 id="continue">5.4.2 continue</h3><p>跳过本次循环。（提前结束本次循环）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 i = 3 时，执行了continue，跳过本次循环，没有执行输出语句，直接进入下一次循环。所以输出1、2、4、5、6。</p><p>需要注意的是，此时我把 “i++” 放在了前面；因为 i++ 如果在 continue后，当 i = 3 时，跳过本次循环，没有执行 i++，下次循环 i 还是3，一直跳过，无限循环，永远执行不到 i++。</p><h3 id="return">5.4.3 return</h3><p>当方法没有返回值（void）时，使用 return; 代表结束当前方法。（在 main方法中使用，代表结束程序）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// for</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment">// 其它语句</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出 0、1、2、3、4 后，当 i = 4 时，执行 if 语句中的 return，结束main 方法的执行。</p><p>如果把 return 换成 break，只结束了 for 循环，接着还会输出“代码块”。</p><p>return以后讲方法返回值时还会用到，现在只需了解它能够终止方法执行即可。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.5 流程控制语句 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.5.x 总结回顾</title>
      <link href="/2022/04/29/1.1.5-liu-cheng-kong-zhi-yu-ju/1.1.5.x-zong-jie-hui-gu/"/>
      <url>/2022/04/29/1.1.5-liu-cheng-kong-zhi-yu-ju/1.1.5.x-zong-jie-hui-gu/</url>
      
        <content type="html"><![CDATA[<h2 id="x-总结回顾">5.x 总结回顾</h2><p>switch case 语句注意 break 不可省略，以免出现 case 穿透现象。</p><p>for 与 while 循环注意控制循环结束条件，防止布尔值一直为true，避免无限循环。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.5 流程控制语句 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.5.y 掀起波澜</title>
      <link href="/2022/04/29/1.1.5-liu-cheng-kong-zhi-yu-ju/1.1.5.y-xian-qi-bo-lan/"/>
      <url>/2022/04/29/1.1.5-liu-cheng-kong-zhi-yu-ju/1.1.5.y-xian-qi-bo-lan/</url>
      
        <content type="html"><![CDATA[<h2 id="y-掀起波澜">5.y 掀起波澜</h2><p>5.1 打印 [n，m] 之间的所有是 x 倍数的整数，统计个数及总和。</p><p>5.2 输出 1 + (n - 1）= n、2 + (n - 2）= n、...、50 + (n - 50）=n。</p><p>5.3 打印九九乘法口诀表。</p><p>5.4 打印一个 n 层的空心金字塔。例：当 n = 5 时，输出如下：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">    *   * *  *   * *     **********<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.5 找出 3 位数的水仙花数，水仙花数是各位数的三次方之和等于此数，比如153 = 1<sup>3</sup> + 5<sup>3</sup> + 3<sup>3</sup> = 153。</p><p>5.6 计算 1 - 1/2 + 1/3 - 1/4 + ... - 1/100。</p><p>5.7 计算 1 + (1 + 2）+ (1 + 2 + 3）+ ... + (1 + 2 + 3 + 4 + ... +100）。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.5 流程控制语句 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.4.y 实战演练</title>
      <link href="/2022/04/29/1.1.4-yun-suan-fu/1.1.4.y-shi-zhan-yan-lian/"/>
      <url>/2022/04/29/1.1.4-yun-suan-fu/1.1.4.y-shi-zhan-yan-lian/</url>
      
        <content type="html"><![CDATA[<h2 id="y-实战演练">4.y 实战演练</h2><p>4.1 <code>double i = 5 / 2;</code> 中的 i 的值为？</p><p>4.2 输出什么？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">++</span>x <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">34</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token operator">--</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>6）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>7）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>8）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b1 <span class="token operator">=</span> b<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token operator">--</span>b<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>10）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> x <span class="token operator">&lt;</span> y <span class="token operator">?</span> x <span class="token operator">+</span> y <span class="token operator">:</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a<span class="token operator">++</span> <span class="token operator">:</span> b<span class="token operator">--</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.3 利用三目表达式求出三个数之间的最大数。</p><p>4.4 利用所学知识求出 33 天是多少个星期零几天？</p><p>4.5 <code>3 / 9 * (242.2 - 100)</code> 的结果是什么？</p><p>4.6 下面代码输出什么？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> x <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> y <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">byte</span> num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">++</span>num <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">342</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">++</span>i <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">342</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> i<span class="token operator">++</span> <span class="token operator">+</span> <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 1.1.4 运算符 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.3.x 总结回顾</title>
      <link href="/2022/04/29/1.1.3-bian-liang/1.1.3.x-zong-jie-hui-gu/"/>
      <url>/2022/04/29/1.1.3-bian-liang/1.1.3.x-zong-jie-hui-gu/</url>
      
        <content type="html"><![CDATA[<h2 id="x-总结回顾">3.x 总结回顾</h2><p><strong>变量</strong></p><p><code>数据类型 变量名 = 值;</code> 先声明后访问。</p><p><strong>数据类型</strong></p><p>分为基本数据类型（byte、short、int、long、float、double、char、boolean）与引用数据类型（类、接口、数组）。</p><p>不能直接以双等号判断两个浮点类型的值。应该让两数相减得到差值，如果差值在设定的精度范围内就认为它们相等。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.3 变量 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.3.y 脑海练习</title>
      <link href="/2022/04/29/1.1.3-bian-liang/1.1.3.y-nao-hai-lian-xi/"/>
      <url>/2022/04/29/1.1.3-bian-liang/1.1.3.y-nao-hai-lian-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="y-脑海练习">3.y 脑海练习</h2><p>3.1 下面语句能够通过编译吗？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>b <span class="token operator">=</span> b <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">10L</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">float</span> f <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2.22</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">231</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">3.23</span><span class="token punctuation">;</span><span class="token keyword">long</span> l2 <span class="token operator">=</span> i <span class="token operator">+</span> l <span class="token operator">+</span> d<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">3.14</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">6.2</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">34</span><span class="token punctuation">;</span><span class="token keyword">short</span> s2 <span class="token operator">=</span> s1 <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>7）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> b1 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">short</span> s <span class="token operator">=</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>8）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>d <span class="token operator">+</span> <span class="token number">.234F</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>9）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">3L</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token number">3.24F</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.2 下面输出结果？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">3.14</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3.14</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">6.2</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.3 想在控制台上输出 \，怎么写？</p><p>3.4 想在控制台上输出如下，怎么写？</p><figure><img src="https://s2.loli.net/2022/04/24/XRSwDZ49Jkiyou5.png" alt="特别厉害的那个迦"><figcaption aria-hidden="true">特别厉害的那个迦</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> 1.1.3 变量 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.4.1 算术运算符</title>
      <link href="/2022/04/29/1.1.4-yun-suan-fu/1.1.4.1-suan-zhu-yun-suan-fu/"/>
      <url>/2022/04/29/1.1.4-yun-suan-fu/1.1.4.1-suan-zhu-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<h2 id="算术运算符">4.1 算术运算符</h2><p>内容导视：</p><ul><li>四则运算：+、-、*、/</li><li>求余数：%</li><li>++、--</li></ul><h3 id="四则运算加减乘除">4.1.1 四则运算：加减乘除</h3><p>这个不用过多介绍，与初等数学一致，直接使用即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> add <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token keyword">int</span> sub <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token keyword">int</span> mult <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token keyword">int</span> divide <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7、3、10、2；注意 int 类型只能保存整数，会被削去小数部分。</p><p>此外 “+” 除了能够计算加法，还能拼接字符串，之前已经说过：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"字符串"</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>“102字符串24”；从左至右，遇到字符串就拼接，拼接后还是字符串；记得乘法优先。</p><h3 id="求余数">4.1.2 求余数：%</h3><p>求余数也称取模。得到的余数一定小于除数。</p><p>如 10 % 3 = 1、11 % 3 = 2、12 % 3 = 0；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">11</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>11 除以 4，商为 2，余数为 3；所以 i = 3。</p><p><strong>% 的本质</strong></p><p>a % b = a - a / b * b</p><p>知道了上面的式子，自己试着算一下吧：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>计算结果如下：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">-10 % 3 = -10 - (-10) / 3 * 3        = -10 - (-3) * 3        = -1        10 % -3 = 10 - 10 / (-3) * (-3)        = 10 - (-3) * (-3)        = 1        -10 % -3 = -10 - (-10) / (-3) * (-3)         = -10 - 3 * (-3)         = -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="section">4.1.3 ++、--</h3><p>++ 是让变量保存的值，自加一。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// i = 11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// i = 11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>++ 放在变量前后的区别</strong></p><p>++ 放在变量前：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// j = 11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>等价于</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 先自加一，后赋值</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// j = 11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>++ 放在变量后：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// j = 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">// 先赋值，后自加一</span>i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// j = 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结论：</p><p>当 ++ 出现在<mark>变量前，先自加一，再赋值</mark>；所以 i 自加一等于11，再赋值给 j 为 11；</p><p>当 ++ 出现在<mark>变量后，会先赋值，再自加一</mark>；把 i 赋值给 j 即10，再 i 自加 1。</p><p>反正 i 一定是 11；使用 ++ 或 --时，<mark>不会改变运算结果类型</mark>。</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>b <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>会报错从 int 转成 byte 可能会有损失</p><p>换成如下就可以了，但是要注意别超了 byte的取值范围，否则强转后会有精度损失。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>b<span class="token operator">++</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>-- 同理：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">// i = 3</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">// j = 3、i = 2</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token operator">--</span>j<span class="token punctuation">;</span><span class="token comment">// j = 2、z = 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>i = 2、j = 2、z = 2。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.4 运算符 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.4.2 赋值运算符</title>
      <link href="/2022/04/29/1.1.4-yun-suan-fu/1.1.4.2-fu-zhi-yun-suan-fu/"/>
      <url>/2022/04/29/1.1.4-yun-suan-fu/1.1.4.2-fu-zhi-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<h2 id="赋值运算符">4.2 赋值运算符</h2><p>内容导视：</p><ul><li>基本赋值运算符：=</li><li>扩展赋值运算符：+=、-=、*=、/=、%=</li></ul><h3 id="基本赋值运算符">4.2.1 基本赋值运算符：=</h3><p>之前用过很多次了，通过 “=” 把字面量赋给变量、完成值传递。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// 10 被赋给了 int 类型的 a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token comment">// j 保存的 10 被赋给了 int 类型的 i</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="扩展赋值运算符-">4.2.2 扩展赋值运算符：+=、-=、*=、/=、%=</h3><p>只要学会了 +=，其它触类旁通。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>x <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// x = 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>相当于将自保存的值加 2：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// x = 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用扩展运算符，不会改变运算结果类型，与 ++ 一样。</p><p>看看下面的 i 的值为多少？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> i <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>i <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>i = (byte)(i * 2) = 16。</code></p>]]></content>
      
      
      <categories>
          
          <category> 1.1.4 运算符 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.4.4 逻辑运算符</title>
      <link href="/2022/04/29/1.1.4-yun-suan-fu/1.1.4.4-luo-ji-yun-suan-fu/"/>
      <url>/2022/04/29/1.1.4-yun-suan-fu/1.1.4.4-luo-ji-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<h2 id="逻辑运算符">4.4 逻辑运算符</h2><p>就是与或非逻辑，<mark>逻辑运算符的两边要求都是布尔类型，且最终的结果也是布尔类型</mark>，下面是我高中时记的口诀：</p><p>与（&amp;）：一假为假</p><p>或（|）：一真为真</p><p>非（!）：真即假，假即真</p><p>异或（^）：不同为真，相同为假</p><p>上面的符号还是位运算符，由于不常用，略去用法。</p><h3 id="section">4.4.1 &amp;</h3><p>a &amp; b：当 a 和 b 同时为 true 时，结果才为真，否则为 false。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> b2 <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1 <span class="token operator">&amp;</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>翻译成人话：5 大于 3 且 8 小于 9，命题为真。</p><p>需要注意的是，不同的运算符优先级不同，优先级高的先运算。之前通过乘法与加法的混合运算中就能看出来乘法优先。</p><p>思考如下输出结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> b2 <span class="token operator">=</span> <span class="token number">79</span> <span class="token operator">&gt;</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> b3 <span class="token operator">=</span> <span class="token string">"我"</span> <span class="token operator">!=</span> <span class="token string">"我"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1 <span class="token operator">&amp;</span> b2 <span class="token operator">==</span> b3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>b1、b2、b3 都为 false；b1 &amp; b2 为 false，false 等于b3，所以结果为 true？</p><p>但你没有想到 “==” 的优先级高于 “&amp;”，所以是 b2 == b3 先运算为true，b1 &amp; true，结果为 false。</p><p>上面的一句相当于：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1 <span class="token operator">&amp;</span> <span class="token punctuation">(</span>b2 <span class="token operator">==</span> b3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那该怎么办？扭曲了原意！可以加小括号提升优先级：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b1 <span class="token operator">&amp;</span> b2<span class="token punctuation">)</span> <span class="token operator">==</span> b3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>短路与：&amp;&amp;</strong></p><p>&amp;&amp;相比于逻辑与，效率更高：如果整个表达式结果已经确定，剩下式子不再执行与判断。</p><p>什么意思？</p><p>一假为假，当左边的值为false，还需要去执行去判断右边吗？完全可以推出结果为 false。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">++</span>x <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">++</span>x <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>x &lt; 2 为 false，那么整个式子已经可以确定为false，不需要再判断。通过上面的例子可以看出，短路与并没有去执行++x，所以 x 的结果不变，还是为 3.</p><h3 id="section-1">4.4.2 |</h3><p>a | b：当 a 和 b 同时为 false 时，结果才为 false，否则为 true。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">9</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命题：8 小于 1 或者 9 大于 3，命题为真。</p><p>与 &amp; 一样的是，| 也有对应的短路或。</p><p><strong>||</strong></p><p>如果整个表达式的结果已经确定，后面不再执行判断。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">&lt;</span> <span class="token number">9</span> <span class="token operator">|</span> <span class="token operator">++</span>x <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">&lt;</span> <span class="token number">9</span> <span class="token operator">||</span> <span class="token operator">++</span>x <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一般我们使用的是短路与和短路或，我几乎没有看见单个的，除非你想把所有的式子都执行一遍。</p><h3 id="section-2">4.4.3 !</h3><p>!a：对 a 取反；a 为 true，结果为 false；a 为 false，结果为 true。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3 &lt; 5 为 true，再取反为 false。</p><h3 id="section-3">4.4.4 ^</h3><p>a ^ b：当 a 不等于 b，结果为 true，否则为 false。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">&lt;</span> <span class="token number">9</span> <span class="token operator">^</span> <span class="token number">9</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8 &lt; 9 为 true，9 &gt; 3 为 true，它们相等，所以为 false。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.4 运算符 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.4.5 条件运算符</title>
      <link href="/2022/04/29/1.1.4-yun-suan-fu/1.1.4.5-tiao-jian-yun-suan-fu/"/>
      <url>/2022/04/29/1.1.4-yun-suan-fu/1.1.4.5-tiao-jian-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<h2 id="条件运算符">4.5 条件运算符</h2><p>算是条件语句的简化版吧，可以根据表达式的真假返回不同的值。</p><h3 id="三目运算符">4.5.1 三目运算符</h3><p>语法：布尔值 ? 值1 : 值2</p><p>当布尔值为 true，返回值1；为 false，返回值2。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> isBoy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">char</span> zhangSan <span class="token operator">=</span> isBoy <span class="token operator">?</span> <span class="token char">'男'</span> <span class="token operator">:</span> <span class="token char">'女'</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zhangSan<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 男</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> scope <span class="token operator">=</span> <span class="token number">99.5</span><span class="token punctuation">;</span><span class="token class-name">String</span> evaluate <span class="token operator">=</span> scope <span class="token operator">&lt;</span> <span class="token number">60</span> <span class="token operator">?</span> <span class="token string">"不及格"</span> <span class="token operator">:</span> <span class="token string">"及格"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>evaluate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 及格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>很明显 scope 小于 60 为 false，所以返回值2：“及格”。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.4 运算符 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.4.3 关系运算符</title>
      <link href="/2022/04/29/1.1.4-yun-suan-fu/1.1.4.3-guan-xi-yun-suan-fu/"/>
      <url>/2022/04/29/1.1.4-yun-suan-fu/1.1.4.3-guan-xi-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<h2 id="关系运算符">4.3 关系运算符</h2><p>就是判断对错。判断结果为真： true，假：false。</p><p>使用的符号都是英文半角符号，字符之间没有空格。</p><p><code>！=</code> <code>！＝</code> <code>! =</code> 都错。</p><h3 id="section">4.3.1 &gt;、&lt;、&lt;=、&gt;=</h3><p>大于号、小于号...如同初等数学使用即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> result1 <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> result2 <span class="token operator">=</span> <span class="token number">79</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="section-1">4.3.2 ==</h3><p>双等号 “==” 是判断保存的值是否相等。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token string">"你好"</span> <span class="token operator">==</span> <span class="token string">"你好"</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> b2 <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span> <span class="token operator">==</span> <span class="token string">"你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意别把 “==” 与 “=” 混用了。我知道在日常生活中，使用 “=”判断是否相等，但是在程序里 “=” 是用来赋值的，“==”才是用来判断是否相等。</p><p>我举个例子，if 旁边的括号中的值只允许为 boolean 类型，当值为 true时，才会执行 if {} 中的语句。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>假如你的原意是想 i 等于 5 时，就输出“Hello”，但是由于你使用的是单等号，代表赋值，此时的 i =5，所以原意成了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 Java 中，正好 boolean类型不能参与转换，所以编译时直接报错，你可以及时发现，但不是次次都是这么好运气。</p><p>如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Hello</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原意是当 b1 等于 true 时，输出“Hello”，但是你的意图被扭曲了，这只是你不小心丢了一个等号而已。原意如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b1 <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说了这么多，只为说一句：判断两个值是否相等，请用 “==”。但是我私底下或写注释时，还是习惯用单等号代表两个值相等。</p><h3 id="section-2">4.3.3 !=</h3><p>判断两个值是否不相等。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span> <span class="token operator">!=</span> <span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5 的确不等于 4，判断为真，所以为 true。</p><p>之所以把 “==”、“!=” 单独拿出来，是因为它们与 “&lt;”、“&gt;=”之类的符号不大一样，“!=” 与 “==”不仅可以判断数值是否相等，还可以比较引用类型是否相等。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hel"</span> <span class="token operator">!=</span> <span class="token string">"hell"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"u"</span> <span class="token operator">==</span> <span class="token string">"u"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"u"</span> <span class="token operator">&lt;</span> <span class="token string">"u"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 报错，&lt; 的两边只能为数值，如整数、小数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>这里不得不提：'a' &lt; 'b' 为什么可以编译通过，因为这是 char类型，可以转成 int 类型，比较大小。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 1.1.4 运算符 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.4.6 运算符优先级</title>
      <link href="/2022/04/29/1.1.4-yun-suan-fu/1.1.4.6-yun-suan-fu-you-xian-ji/"/>
      <url>/2022/04/29/1.1.4-yun-suan-fu/1.1.4.6-yun-suan-fu-you-xian-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="运算符优先级">4.6 运算符优先级</h2><p>优先级高的先运算。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">优先级从高到低. ()++ -- ~ !单目运算符* / %算术运算符+ -&lt;&lt; &gt;&gt; &gt;&gt;&gt;位移运算符&lt; &gt; &lt;= &gt;= instanceof比较运算符== !=逻辑运算符&amp;^|&amp;&amp;||? :三目运算符= *= /= %=赋值运算符+= -= &lt;&lt;= &gt;&gt;=&gt;&gt;&gt;= &amp;= ^= |=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如：<code>int a = 1 + 2 * 1;</code>先算乘法，接着加法，最后赋值。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.4 运算符 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.4.x 总结回顾</title>
      <link href="/2022/04/29/1.1.4-yun-suan-fu/1.1.4.x-zong-jie-hui-gu/"/>
      <url>/2022/04/29/1.1.4-yun-suan-fu/1.1.4.x-zong-jie-hui-gu/</url>
      
        <content type="html"><![CDATA[<h2 id="x-总结回顾">4.x 总结回顾</h2><p>++、+= 等赋值运算符不会改变运算结果类型。（使用了强制转换运算符）</p><p>判断两个值是否相等请用 “==”。</p><p>逻辑运算符中一般使用短路与、短路或。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.4 运算符 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.2.3 注释</title>
      <link href="/2022/04/29/1.1.2-bian-xie-di-yi-ge-cheng-xu/1.1.2.3-zhu-shi/"/>
      <url>/2022/04/29/1.1.2-bian-xie-di-yi-ge-cheng-xu/1.1.2.3-zhu-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="注释">2.3 注释</h2><p>内容导视：</p><ul><li>单行注释</li><li>多行注释</li><li>文档注释</li><li>IDEA 工具自动快捷键添加注释</li><li>使用 javac 命令编译时出现的"错误: 编码 GBK 的不可映射字符"</li><li>浅入编码</li><li>查看系统编码</li><li>使用 API 文档</li></ul><p>注释是对代码的解释说明，方便理解代码的含义，提高代码的可读性。注释不是编程语句，因此被编译器忽略。如果不写注释，时间久了或代码过长本人也看不懂，所以编写注释是一个良好的习惯。</p><p>注释有三种，依次介绍。</p><h3 id="单行注释">2.3.1 单行注释</h3><p>使用双斜杠 //，// 后的就是注释（仅一行），不会被编译器当成 java语句。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 打印()中的话到控制台上，这个()中的字面量(数据)如果是字符串类型，需要用""包裹起来</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多行注释">2.3.2 多行注释</h3><p>对于很多内容，单行放不下，可以使用多行注释，在 /**/里内写下内容，星号别省略。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*System 是类，通过类名.调用 out 这个静态变量，这个静态变量保存的是堆内存中的对象地址，被称为对象引用再通过对象引用，调用对象的 println 方法*/</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文档注释">2.3.3 文档注释</h3><blockquote><p>下面看看就行，以后使用开发工具 IDE 自动生成，没必要手动敲。</p></blockquote><p>文档注释可以被 javadoc 命令解析，生成以网页形式（html）显示的 API文档。（Application Programming Interface：应用程序编程接口）。</p><p>当类又多又杂，一个个找类、看注释很麻烦，于是提取出来生成网页。</p><p>用来说明类、成员变量和方法的功能。不用在一个一个 java文件中查看注释，直接打开 html 查看想要的方法。</p><p>javadoc 默认只提取 public、protected修饰的部分，<code>javadoc -help</code> 查看可加的选项。</p><p>文档注释必须写在类、接口、方法、构造器、成员字段前面，写在其他位置无效。</p><p>文档注释中可以识别的标签如下：</p><table><thead><tr class="header"><th style="text-align: center;">标签</th><th style="text-align: center;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><span class="citation" data-cites="version">@version</span></td><td style="text-align: center;">指定类的版本，用于类上</td></tr><tr class="even"><td style="text-align: center;"><span class="citation" data-cites="author">@author</span></td><td style="text-align: center;">标注类的作者</td></tr><tr class="odd"><td style="text-align: center;"><span class="citation" data-cites="since">@since</span></td><td style="text-align: center;">从哪个版本起有了这个方法</td></tr><tr class="even"><td style="text-align: center;"><span class="citation" data-cites="param">@param</span></td><td style="text-align: center;">参数详细信息</td></tr><tr class="odd"><td style="text-align: center;"><span class="citation" data-cites="return">@return</span></td><td style="text-align: center;">说明返回值</td></tr><tr class="even"><td style="text-align: center;"><span class="citation" data-cites="throws">@throws</span></td><td style="text-align: center;">可能抛出的异常</td></tr><tr class="odd"><td style="text-align: center;"><span class="citation" data-cites="deprecated">@deprecated</span></td><td style="text-align: center;">表示不建议使用</td></tr><tr class="even"><td style="text-align: center;"><span class="citation" data-cites="see">@see</span></td><td style="text-align: center;">另请参阅</td></tr></tbody></table><p>文档注释的标签区分大小写，别写错了，也可以看看源码上的注释是怎么写的。（别省略* 号，注意观察下面的格式）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author 是在座的每一个人 * @version 2.0.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token comment">/** * 这个方法用来求两数之和 *     * @param  num1第一个参数 * @param  num2第二个参数     * @return 返回两个数的和     * @throws 测试用而抛出的异常     * @since  1.8.2     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>javadoc 命令只能提取文档注释</strong>。让我们试试吧。</p><figure><img src="https://s2.loli.net/2022/04/23/Vmq9BOYSg1XcKMe.png" alt="javadoc"><figcaption aria-hidden="true">javadoc</figcaption></figure><p><code>javadoc Hello.java -encoding UTF-8 -version -author -private -charset UTF-8 -docencoding GBK</code></p><p>当前目录会生成 index.html文件，双击此文件，交给浏览器解析（会自动打开浏览器），右键查看页面源代码，API文档里的信息是读取 Hello.java 文件得来的。</p><p>使用此命令还可以追加其他 java源文件的文档注释，例：<code>javadoc -encoding UTF-8 Hello.java H.java</code></p><figure><img src="https://s2.loli.net/2022/04/23/BrojKC98D2QiScA.png" alt="API 文档"><figcaption aria-hidden="true">API 文档</figcaption></figure><p><strong>javadoc 命令中的参数说明</strong></p><hr><p>-encoding 是告知 java 源代码所用的字符编码； -version、-author是显示版本和作者； -private 是显示所有类和成员；（包括显示私有，一般显示protected 以上级别就行，可以不加此选项）</p><p>-charset 是告知浏览器此文件采用什么编码方式读取这个文件； 即 html文件生成<code>&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</code></p><p>-docencoding 是指定生成的 html 文件的字符编码，不写此选项，默认UTF-8。</p><hr><p>由于文件被保存时的编码和读取时采用的编码不一致会出现乱码，所以别掉坑。咳咳，你知道自己的文件编码吗？在哪如何查看？编码是什么？你可以先了解下相关知识，或者你之前已经掉坑了，不知道满屏的GBK 不可映射是啥意思，后面再讲好吗？</p><p><strong>指定文档生成的位置</strong></p><p>使用 <code>-d</code> 指定文件在 <code>E:\a\b\c</code>下生成，很抱歉让你的桌面生了一大堆 html 文件。</p><p><code>javadoc Hello.java -d E:\a\b\c -version -author</code></p><p>代码一改，注释说明也得跟着改；为了避免无用功，代码中给标识符命名，见名知意，最好让所有人看到这段代码就知道它是干什么的，避免冗余无效注释。</p><p>下面不用看，我怕你晕：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">ReadableByteChannel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">CharsetDecoder</span></span><span class="token punctuation">;</span><span class="token comment">/** * 这是测试如何制作 API 文档的类 * * &lt;p&gt; p 标签包围的文字代表一段，ul 和 li 标签是无序列表&lt;/p&gt; * &lt;ul&gt; * &lt;li&gt;呵呵 {@code test} 呵呵&lt;/li&gt; * &lt;li&gt;呵呵 &lt;code&gt;test&lt;/code&gt; 呵呵&lt;/li&gt; * &lt;li&gt;被上面 code 标签包裹的内容会更显眼，更细，一般用于标识符&lt;/li&gt; * &lt;li&gt;see 标签另请参阅，格式：引用类的全类名#方法名(形参类型, 形参类型...) *     java.lang 包下的类可以省略包名。如果引用的类在 API 文档上，点击后会自动跳转 *     这个 H 类我也打包到了此文档&lt;/li&gt; * &lt;/ul&gt; * * @author  cqh * @author  作者甲 * @version 1.0.0 * @see     Object#wait(long) * @see     Object#toString() * @see     StringBuffer * @see     H#hh() * @since   0.8.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 介绍属性的作用     *     * @see java.util.Scanner#makeReadable(ReadableByteChannel, CharsetDecoder)     * @since 0.8.1     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> name<span class="token punctuation">;</span>    <span class="token comment">/**     * 说明方法的作用     *     * @param name 这个name是 {@code String} 类型     *          see参阅本类中其它方法省略类名。link如     *             {@link #getAge(int, int)}也可以跳转,例     *             {@link H#hh()}，{@link H}     * @return 返回一个人名     * @throws ArrayIndexOutOfBoundsException 下标越界抛出此异常     * @see #getAge(int, int)     * @see H     * @since 0.8.1     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 另一种格式,把解释放到下一行 {@link java.lang.Object#notify()} 你好     *     * @param age     *        这是人的年龄     *     * @param count     *        总个数             *     * @throws IndexOutOfBoundsException     *         如果满足如下几种条件之一就抛出该异常     *         &lt;ul&gt;     *           &lt;li&gt; {@code age} 不是整数     *           &lt;li&gt; {@code age} 没有填入     *           &lt;li&gt; {@code age+(end-begin)} 超过了      *                {@code name.length}     *         &lt;/ul&gt;     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="idea-工具自动快捷键添加普通注释">2.3.4 IDEA工具自动快捷键添加普通注释</h3><p>以后有了 IDEA 工具再试，现在不用看，直接跳过；放心 IDEA工具中会更详细地说明。</p><p><strong>在 IDEA 中每创建一个类时，自动在类上加注释</strong></p><p>左上角 File/Settings/Editor/File and Code Templates，includes/FileHeader</p><p>里面粘贴</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 现在北京时间：${YEAR}/${MONTH}/${DAY} ${TIME} * 本类用于某某某 * * @author  作者 * @version 版本 * @see     另请参阅 * @since   从哪个版本有的 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击 apply 和 OK。</p><figure><img src="https://s2.loli.net/2022/03/22/e1OmcdqDisgkb5I.png" alt="文件头"><figcaption aria-hidden="true">文件头</figcaption></figure><p><strong>在方法上加注释</strong></p><p>左上角 File/Settings/Editor/Live Templates</p><p>点击加号 Template Group 自己创建个组后，再选择你刚刚创建的组点击加号Live Template。</p><p>解释:</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">Abbreviation：**Description：解释快捷键的描述，自己填写OptionsExpand with EnterTemplate text:** * * @param   $param$ * @return   * @throws */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当输入 Abbreviation 所写内容"<code>**</code>"时，按下 Enter 就把<code>**</code> 转成 Template text 中的内容</p><p>被 <code>$$</code> 包围的变量需要点击 Edit vaiables 设置。</p><figure><img src="https://s2.loli.net/2022/04/23/SAtu63x8Xdofgc7.png" alt="自定义变量"><figcaption aria-hidden="true">自定义变量</figcaption></figure><p>选择 Define 勾选 Java，就可以定义此模板只有在编写 java文件才能使用。</p><figure><img src="https://s2.loli.net/2022/04/23/MnIXTgorbGyQhzP.png" alt="创建模板"><figcaption aria-hidden="true">创建模板</figcaption></figure><p>点击 apply 和 OK。</p><p>然后我又定义了一个方法模板，缩写词：psvt；设置好后 OK 返回。</p><figure><img src="https://s2.loli.net/2022/03/22/EpdhFjGQTIBCbMS.png" alt="psvt 模板"><figcaption aria-hidden="true">psvt 模板</figcaption></figure><p>在 java 文件输入 psvt 后按下 Tab 键，光标停在 <code>$VAR$</code>等我们输入；按下回车，光标到了 <code>$END$</code> 处。</p><figure><img src="https://s2.loli.net/2022/03/22/yTHUiwmGV1ocdez.png" alt="缩写"><figcaption aria-hidden="true">缩写</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/22/qXHSVBuJG4tQi8U.png" alt="生成模板"><figcaption aria-hidden="true">生成模板</figcaption></figure><h3 id="使用-javac-命令编译时出现的错误-编码-gbk-的不可映射字符">2.3.5使用 javac 命令编译时出现的"错误: 编码 GBK 的不可映射字符"</h3><p>内容如下：</p><ul><li>解决 GBK 乱码问题</li><li>普及编码格式知识</li></ul><p>本节片段提取：</p><blockquote><p>友情提示，先复制文本，转换后直接粘贴。目的是避免转换编码后造成中文乱码，又得一个个改。</p></blockquote><p>有 2 种方式解决：</p><p>1）文件/另存为副本，更改编码为 ANSI。（如果使用的是notepad++，就在上方的工具栏的编码，转成 ANSI 编码）</p><figure><img src="https://s2.loli.net/2022/03/22/w1hiP8XALOBranp.png" alt="使用 ANSI 编码"><figcaption aria-hidden="true">使用 ANSI 编码</figcaption></figure><p>2）指定使用的编码格式。（编码格式在文本编辑器的右下方）<code>-encoding UTF-8</code>是指定文件编码格式是 UTF-8。</p><figure><img src="https://s2.loli.net/2022/03/22/dWScbjuPqLGNnH6.png" alt="查看当前编码"><figcaption aria-hidden="true">查看当前编码</figcaption></figure><p>正文如下：</p><p>可能编译时由于代码（包括注释里面）中有中文，编译时说什么含有 GBK的不可映射字符，不让通过。我相信新手的第一道关就卡在这，有人就干脆不写中文了。</p><figure><img src="https://s2.loli.net/2022/04/23/JRu3cxwP6LN1rZW.png" alt="GBK 的不可映射字符"><figcaption aria-hidden="true">GBK 的不可映射字符</figcaption></figure><p><strong>为何报错</strong></p><p>计算机只认得二进制数，也就是 0 和1，存储和读取数据时都要使用二进制数表示。</p><p>0 和 1 可以有很多的组合，如 011、1001010等等。可以用它们表示不同的数据，字符编码就是人为定义的一套转换表，规定一系列文字与二进制的映射关系。</p><p>（这里未区分字符集与字符编码的概念）</p><p>有多种字符编码，比如 ASCII 码，一般是 8 位二进制表示一个字符，如字符'a' 对应 01100001，这个二进制码转为十进制是 96；</p><p>学过概率的知道，8 位数，每位是 0 或 1，最多可以表示 2 ^ 8 = 256个字符，应对 26 个英文字母绰绰有余。这 8 位称为 1个字节（byte），单个位称为 bit。</p><blockquote><p>2 ^ 8 即 2 的 8 次方，只是为了方便表达。</p></blockquote><p>ASCII是美国人定义的，没有考虑其它国家。但我们国家用的不是英文，有很多字符是ASCII 码没有的，1个字节也表示不了那么多的汉字，于是国人粗略规定了GB2312，使用 2 个字节（16位）表示一个汉字。</p><p>如在 GB2312 编码中 "中国" 对应的二进制数 11010110 11010000 1011100111111010，要是系统采用 ASCII码读取这段二进制，由于它们定义的字符的映射关系都不一样，ASCII编码也不可能有中文对应的二进制码，所以解码不可能正确，解析不出来就会乱码。</p><blockquote><p>这里二进制数每 8位隔开，只是方便你们观看，实际使用时还是合在一起。</p></blockquote><p>来，我们使用记事本试试看。此处文件编码为 ANSI，使用 ANSI编码读取文件，没有乱码，显示 “天下”。</p><blockquote><p>ANSI 代表系统默认编码方式，在中国是 GBK，放心 GBK 兼容 GB2312，使用GBK 可以解析 GB2312。</p><p>举个例子，如果 ASCII 中所有字符对应的二进制码，在 GBK中，对应关系也同样如此，就说明 GBK 兼容 ASCII 码。说人话就是 01100001 在ASCII 中表示 'a'，在 GBK 中也表示 'a'。那么使用 GBK 编码读取 ASCII文件没有问题，反过来则不一定，因为 GBK 还多了 ASCII 中没有的汉字。</p></blockquote><figure><img src="https://s2.loli.net/2022/03/22/JfDWbUXBpAVs9xt.png" alt="ANSI 编码"><figcaption aria-hidden="true">ANSI 编码</figcaption></figure><p>让我们把文件编码转成 ISO-8859-1，也使用此编码读取文件。</p><figure><img src="https://s2.loli.net/2022/03/22/QYTyXjtpLWVoeS2.png" alt="ISO-8859-1 编码"><figcaption aria-hidden="true">ISO-8859-1 编码</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/22/3kF2fSKUtN1wAup.png" alt="乱码"><figcaption aria-hidden="true">乱码</figcaption></figure><p>现在再看看，这不就乱码了吗？</p><p>所以<mark>解码和编码都要使用同一套字符编码规则</mark>，notapad++可以使用不同的编码方式解析，你测试哪些编码是兼容的，不会乱码。</p><blockquote><p>编码：字符 -&gt; 二进制码</p><p>解码：二进制码 -&gt; 字符</p><p>底层存储的实际是二进制码。</p></blockquote><p><strong>使用 javac 命令编译时，如果不指定 -encoding选项，一般默认采用操作系统的字符编码方式</strong>，我们是 GBK。</p><p>在编写代码时，文本编辑器的右下角会显示当前文件的编码格式。编译时，若与系统当前编码不一致，不是同一套字符编码规则，解析不出来，就会报错；以后讲char类型时还会深入，现在讲的很浅显，看不明白很正常，不是你的原因。（我移到扩充内容中了）</p><p><strong>两种方式解决</strong></p><ul><li><p>告知此文件的编码方式。 例：当前文件的编码格式是 UTF-8，文件是Hello.java，编译时添加 -encoding参数指定文件编码<code>javac Hello.java -encoding UTF-8</code></p></li><li><p>修改文件编码方式为 ANSI，文件另存时可以看到编码。（notepad++在工具栏/编码/转为...记得先全选复制，改编码后再粘贴，否则乱码没法撤回）</p></li><li><p>所有文件使用统一的编码方式，如 UTF-8，新建环境变量<code>JAVA_TOOL_OPTIONS</code>，值为<code>-Dfile.encoding=UTF-8</code>，不建议，以后使用 IDE 工具统一使用UTF-8 编码，不需要自己在外面配。</p></li><li><p>我不写中文了，不建议，你是中国人，要不是英文通不过编译，我还真想全部使用中文符号。</p></li></ul><h3 id="查看与修改系统编码">2.3.6 查看与修改系统编码</h3><p><strong>通过 java 代码查看</strong></p><p>执行以下代码查看系统默认编码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> encoding <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"file.encoding"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/23/GCeZb6OtRisJN1x.png" alt="查看系统默认编码"><figcaption aria-hidden="true">查看系统默认编码</figcaption></figure><p><strong>通过 DOS 窗口查看</strong></p><p>打开 DOS 窗口（Windows + R，输入 cmd 回车），点击左上角图标/属性</p><figure><img src="https://s2.loli.net/2022/04/23/zcuRfbO3pvN59Ch.png" alt="当前代码页 936"><figcaption aria-hidden="true">当前代码页 936</figcaption></figure><p>看到了没有，我没有画圈哦。当前代码页是 936，对应简体中文编码GBK。</p><p><strong>代码页</strong>是字符集编码的别名，也称内码表，下面是代码页与编码的对应关系：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">代码页       国家(地区)或语言 437          美国 708          阿拉伯文(ASMO 708)720          阿拉伯文(DOS)850          多语言(拉丁文 I) 852          中欧(DOS) - 斯拉夫语(拉丁文 II) 855          西里尔文(俄语) 857          土耳其语 860          葡萄牙语 861          冰岛语 862          希伯来文(DOS)863          加拿大 - 法语 865          日耳曼语 866          俄语 - 西里尔文(DOS) 869          现代希腊语874          泰文(Windows)932          日文(Shift-JIS)936          中国 - 简体中文(GB2312)现在是 GBK 了，GBK 是在国家标准 GB2312 基础上扩容后兼容 GB2312 的标准。949          韩文950          繁体中文(Big5)1200         Unicode        1201         Unicode (Big-Endian)1250         中欧(Windows)1251         西里尔文(Windows)1252         西欧(Windows)1253         希腊文(Windows)1254         土耳其文(Windows)1255         希伯来文(Windows)1256         阿拉伯文(Windows)1257         波罗的海文(Windows)1258         越南文(Windows)20866        西里尔文(KOI8-R)21866        西里尔文(KOI8-U)28592        中欧(ISO)28593        拉丁文 3 (ISO)28594        波罗的海文(ISO)28595        西里尔文(ISO)28596        阿拉伯文(ISO)28597        希腊文(ISO)28598        希伯来文(ISO-Visual)38598        希伯来文(ISO-Logical)50000        用户定义的50001        自动选择50220        日文(JIS)50221        日文(JIS-允许一个字节的片假名)50222        日文(JIS-允许一个字节的片假名 - SO/SI)50225        韩文(ISO)50932        日文(自动选择)50949        韩文(自动选择)51932        日文(EUC)51949        韩文(EUC)52936        简体中文(HZ)65000        Unicode (UTF-7)65001        Unicode (UTF-8)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可通过 DOS 命令查看当前编码：<code>chcp</code>。</p><p>修改当前 DOS窗口的编码：<code>chcp 对应编码的代码页</code>，如<code>chcp 936</code>，当控制台不支持中文时，可以试试。（重新打开DOS 窗口时会失效，恢复原来默认编码）</p><p><strong>修改系统编码</strong></p><p>如果是 Windows10，打开设置（Windows +i），时间和语言/语言/管理语言设置/更改系统区域设置，</p><p>老版本的使用控制面板/时钟和区域/区域/管理/更改系统区域设置。</p><figure><img src="https://s2.loli.net/2022/04/23/vUxFNpnrDA7CeEW.png" alt="更改语言"><figcaption aria-hidden="true">更改语言</figcaption></figure><p>下面还有 beta 版（即测试版），使用 UTF-8编码提供全球语言支持；但有些地方莫名其妙的乱码，不建议尝试，还是 GBK靠谱。</p><p>作者：<a href="https://blog.csdn.net/gulang03">「已注销」</a>，内容：修改 cmd控制台默认代码页编码的几种方法【GBK、UTF-8】，https://blog.csdn.net/gulang03/article/details/81771343</p><h3 id="使用-api-文档">2.3.7 使用 API 文档</h3><p>解决了中文乱码后，来看看 rt.jar包中的类、方法、字段上的文档注释生成的 API 文档。</p><p>JDK17API文档：https://docs.oracle.com/en/java/javase/17/docs/api/index.html</p><p>JDK8 API文档：https://docs.oracle.com/javase/8/docs/api/</p><p>JDK8 API中文文档：https://www.matools.com/api/java8</p><p>就是记不住方法名怎么办，翻阅 API文档查看方法的作用，你得首先记住哪个类好像有这个方法。</p><p>Java 语言提供了大量可供使用的基础类，Oracle 为这些类提供了对应的 API文档，告诉开发者如何使用此类，以及方法。</p><p>通过包名 -&gt; 类名 -&gt; 方法这样的方式寻找。</p><p>以 JDK8 为例，哦，对了，将最上面的广告关掉。</p><p>如果不知道类在哪个包下，点击最上方的索引（INDEX）</p><p>如我要用 Math 类的求绝对值的方法，如果事先知道它在 java.lang下（第一横线处下翻），找到后点击java.lang，继续下翻（第二个横线处）；找到后点击Math，再看右边的页面，下翻；点击 abs方法，就可以看到此方法的详细说明。</p><figure><img src="https://s2.loli.net/2022/04/23/JxVEoXQOiagyBA3.png" alt="Math"><figcaption aria-hidden="true">Math</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/18/q6kK8btGr3hY1Zo.png" alt="abs"><figcaption aria-hidden="true">abs</figcaption></figure><p>打开 rt.jar（jre 的 lib 下） 也可以看到Math.class。（使如果你没有软件可以打开 zip，win-rar解压缩软件下载地址在资源地址中）</p><figure><img src="https://s2.loli.net/2022/03/18/bRJwDctCMSPzAlG.png" alt="rt.jar"><figcaption aria-hidden="true">rt.jar</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/18/trnWLXTMgcDpNoa.png" alt="lang"><figcaption aria-hidden="true">lang</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/18/HpP4ADMw72eigRd.png" alt="Math.class"><figcaption aria-hidden="true">Math.class</figcaption></figure><p>你说这是字节码文件，根本看不懂，要看源码上的文档注释。好吧，在 JDK安装目录下，打开 <code>src.zip\java\lang\Math.java</code>。</p><figure><img src="https://s2.loli.net/2022/03/18/TMUPwIgujQvV7cr.png" alt="Math.java"><figcaption aria-hidden="true">Math.java</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/18/IL5dWg2mvGiTSza.png" alt="文档注释"><figcaption aria-hidden="true">文档注释</figcaption></figure><p>以这种方式，的确没有 API文档访问方便不是吗？（养成在方法上写文档注释的好习惯，这样方便提取出来）</p><p>这是谷歌翻译：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">返回 {@code float} 值的绝对值。* 如果参数不是负数，则返回参数。* 如果参数是否定的，则返回参数的否定。* 特别案例：* &lt;ul&gt;&lt;li&gt;如果参数是正零或负零，则* 结果为正零。* &lt;li&gt;如果参数为无穷大，则结果为正无穷大。* &lt;li&gt;如果参数为 NaN，则结果为 NaN。&lt;/ul&gt;* 换句话说，结果与表达式的值相同：* &lt;p&gt;{@code Float.intBitsToFloat(0x7fffffff &amp; Float.floatToIntBits(a))}** @param a 要确定其绝对值的参数* @return 参数的绝对值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 1.1.2 编写第一个程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.3.1 变量</title>
      <link href="/2022/04/29/1.1.3-bian-liang/1.1.3.1-bian-liang/"/>
      <url>/2022/04/29/1.1.3-bian-liang/1.1.3.1-bian-liang/</url>
      
        <content type="html"><![CDATA[<h2 id="变量">3.1 变量</h2><p>内容导视：</p><ul><li>字面量</li><li>变量</li></ul><h3 id="字面量">3.1.1 字面量</h3><p>值（数据）被称为字面量，一眼就能看到值的量。如 3 是整数型字面量，'a'是字符型字面量；有些人把它叫做常量，无可非议。</p><p>字面量类型如下：</p><p>1）整数类型：如 1、2、3...这些整数。</p><p>2）浮点类型：如 22.4、3.2...这些小数。</p><p>3）布尔类型：只有两个值，true、false 分别代表真和假。</p><p>4）字符类型：'a'、'b'、'c'...用英文单引号括起来的<mark>单个字符</mark>。</p><p>5）字符串类型："abc"、"b"、"北京欢迎你"...用英文双引号括起来的是字符串。</p><h3 id="变量-1">3.1.2 变量</h3><p>使用如下方式，也不是不可以，但是你不怕一个个复制粘贴不小心漏了吗？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">327501510</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">327501510</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我们的花园真漂亮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我们的花园真漂亮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>为了使字面量得到重复利用，下面使用变量保存这些值。</p><p>内容如下：</p><ul><li>变量的声明</li><li>变量含义</li><li>变量按声明位置分类</li></ul><p><strong>变量声明</strong></p><p>每个变量都需要先声明（定义）自己将要保存的数据的类型，后再给变量赋值。（放心，数据类型之后有讲，现在先看看，别管int、String 是什么）</p><p>例：想要保存整数类型的值，需要先声明整数类型的变量，假如取名为i：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再给变量赋一个整数值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用等号（赋值运算符）把等号右边的字面量赋给左边的变量</span>i <span class="token operator">=</span> <span class="token number">327501510</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以访问这个变量保存的值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此时 i 为 327501510</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以重新给 i 变量赋值，把之前保存的值覆盖。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">i <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">// 把 6 赋给 i</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此时 i 为 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>两者结合，在声明的同时，赋值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">327501510</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么就可以把开头的例子转变了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">327501510</span><span class="token punctuation">;</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"我们的花园真漂亮"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>num1、num2、str是变量名，作为标识符，我们有权力命名，只要符合命名规则就行。</p><p>很明显通过以上例子看到变量有三个要素：</p><ul><li>变量的数据类型，如 int</li><li>变量名，如 num1</li><li>变量值，如 327501510</li></ul><p><code>数据类型 变量名 = 字面量;</code></p><p>如果不考虑类型转换，那么变量的数据类型必须与字面量类型一致。</p><p>比如整数型的 int类型不能保存浮点型的字面量，<code>int i = 3.23;</code>是错误的写法。由于现在还没有讲数据类型，听着迷惑很正常。</p><p><strong>变量含义</strong></p><p>变量是内存中存储数据的最基本的单元，任何变量都有数据类型，不同的数据类型在内存中分配的空间大小不同。</p><p>如 <code>int a = 3;</code> 在内存里分配 4 个字节空间，空间存放着 3，a就代表这个空间。</p><p>变量相当于内存中的一小块数据存储空间，通过变量名可以访问到这个区域。可以把a 理解成你家的门牌号，通过门牌号定位你家。</p><figure><img src="https://s2.loli.net/2022/04/24/nPrVmXNaKjF7Zsy.png" alt="a 变量"><figcaption aria-hidden="true">a 变量</figcaption></figure><p>int 类型会被分配 4 个字节大小的空间，1 个字节（byte）= 8个比特位（bit）</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">1 TB = 1024 GB1 GB = 1024 MB1 MB = 1024 KB1 KB = 1024 Byte1 Byte = 8 Bit1 Bit = 0 或 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用 0 和 1的不同的组合代表各式各样的数据，等学了进制之间的转换、原码补码就明白了，但你也可以跳过，节省时间。</p><p><strong>变量按声明位置分类</strong></p><p>分为成员变量与局部变量。之间说过类名 Hello 后跟的 {} 是类体，方法名main 后跟的 {} 是方法体。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token comment">// 方法体外、类体中声明的变量是成员变量</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 方法体中声明的变量是局部变量</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>值得注意的地方</strong></p><p>1）局部变量必须赋值后才能访问，错误示范：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你得先给 i 赋值，比如 <code>int i = 10;</code> 后再访问。</p><p>2）同一个域中，局部变量不能重复声明。</p><blockquote><p>域：{} 包起来的范围。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 错误示范</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你得换个名字，以免冲突。比如把后面改成 <code>int j = 6;</code></p><p>3）变量需要先声明，后访问，错误示范：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你应该把它俩的顺序换过来，毕竟 java 语句是自上而下逐行执行的。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.3 变量 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.2.x 总结回顾</title>
      <link href="/2022/04/29/1.1.2-bian-xie-di-yi-ge-cheng-xu/1.1.2.x-zong-jie-hui-gu/"/>
      <url>/2022/04/29/1.1.2-bian-xie-di-yi-ge-cheng-xu/1.1.2.x-zong-jie-hui-gu/</url>
      
        <content type="html"><![CDATA[<h2 id="x-总结回顾">2.x 总结回顾</h2><p><strong>编译与运行</strong></p><p>先编译成 .class 文件，后运行此类的 main 方法。</p><p>运行期类加载器（Class Loader）将 class 文件加载到 JVM 中，JVM启动解释器对 class 文件解释，生成的机器码在内存中，由操作系统执行。</p><p>class 文件是与平台无关的中间代码。下载对应平台的JVM，由它自带的解释器，将 class文件翻译成当前操作系统可以执行的机器码，做到一次编写，可以在不同的平台上运行。但JVM 不跨平台。</p><p>程序员可以命名的单词是标识符，如类名、方法名、变量名、接口名、常量名。</p><p><strong>命名规则</strong></p><ul><li>只能由数字、字母、_、$组成。</li><li>不能以数字开头。</li><li>不能以关键字作为标识符。</li></ul><p><strong>命名规范</strong></p><ul><li>类名、接口名首字母大写，之后每个单词首字母大写。</li><li>方法名、变量名首字母小写，之后每个单词首字母大写。</li></ul><p><strong>注释</strong></p><p>合理使用注释，解释代码含义，方便他人阅读。</p><ul><li>类和方法上的注释，使用文档注释。</li><li>类中、代码块中使用多行或单行注释，对难以理解的地方进行说明。</li><li>不同逻辑的代码之间空行隔开。</li></ul><p><strong>编码</strong></p><p>使用 UTF-8 格式编写源文件更通用。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.2 编写第一个程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.2.y 脑海练习</title>
      <link href="/2022/04/29/1.1.2-bian-xie-di-yi-ge-cheng-xu/1.1.2.y-nao-hai-lian-xi/"/>
      <url>/2022/04/29/1.1.2-bian-xie-di-yi-ge-cheng-xu/1.1.2.y-nao-hai-lian-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="y-脑海练习">2.y 脑海练习</h2><p>2.1 为什么 Java 代码可以做到一次编译，到处运行？</p><p>2.2 一个源文件可以生成多个 class 文件吗？</p><p>2.3 Java 源文件定义的类名必须与文件名一致吗？</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.2 编写第一个程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.3.3 类型转换</title>
      <link href="/2022/04/29/1.1.3-bian-liang/1.1.3.3-lei-xing-zhuan-huan/"/>
      <url>/2022/04/29/1.1.3-bian-liang/1.1.3.3-lei-xing-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<h2 id="类型转换">3.3 类型转换</h2><p>内容导视：</p><ul><li>基本数据类型转换</li><li>基本数据类型与 String 类型的转换</li></ul><h3 id="基本数据类型转换">3.3.1 基本数据类型转换</h3><p>缘起</p><p><code>double d = 3;</code> 唉呀，字面量 3 不是被当作 int类型处理吗？怎么就可以赋给 double 类型的d？别急，看完以下实验就明白规则了。</p><p>boolean 除外，不同类型容量（取值范围）按从小到大排列：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> <span class="token operator">-&gt;</span> <span class="token keyword">short</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span> <span class="token operator">-&gt;</span> <span class="token keyword">long</span> <span class="token operator">-&gt;</span> <span class="token keyword">float</span> <span class="token operator">-&gt;</span> <span class="token keyword">double</span><span class="token keyword">char</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span> <span class="token operator">-&gt;</span> <span class="token keyword">long</span> <span class="token operator">-&gt;</span> <span class="token keyword">float</span> <span class="token operator">-&gt;</span> <span class="token keyword">double</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>基本数据类型的转换规则</strong></p><p>前提：基本数据类型</p><p>当所赋值的字面量类型与变量的数据类型不一致时，会发生数据类型转换，从一种数据类型转成另一种数据类型。分为<strong>自动类型转换</strong>、<strong>强制类型转换</strong>。除了boolean 类型不能参与转换，其他基本数据类型可以互相转换。</p><p>小容量赋给大容量，会发生自动类型转型，如 int 类型自动转为 long类型：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// int 类型自动转换为 long</span><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">// long 类型自动转为 float</span><span class="token keyword">float</span> d <span class="token operator">=</span> <span class="token number">3L</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3.0</span><span class="token comment">// char 自动转 int</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token char">'中'</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 20013</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>'中'在 Unicode 字库的序号是 4E2D，使用 UTF-16 编码存储的二进制码为0100111000101101，即 20013。</p></blockquote><p>大容量赋给小容量，自动转换无法进行：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 错误: 不兼容的类型: 从 double 转换到 int 可能会有损失</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3.13</span><span class="token punctuation">;</span><span class="token comment">// 错误: 不兼容的类型: 从 long 转换到 int 可能会有损失</span>i <span class="token operator">=</span> <span class="token number">3L</span><span class="token punctuation">;</span><span class="token comment">// 错误: 不兼容的类型: 从 int 转换到 byte 可能会有损失</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">532</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时就需要强制转换符()，但可能会有精度损失。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 强制把 double 类型转成 int</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">3.13</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// i = 3</span><span class="token comment">// 强制把 long 类型转成 int</span>i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">3L</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// i = 3</span><span class="token comment">// 强制把 int 类型转成 byte</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">532</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// b = 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>补充细节</strong></p><p>1）如果字面量的值没有超出 byte、short、char的取值范围，可以直接赋值给它们。（除了被当作 long 类型处理的字面量）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span><span class="token comment">// 'a' 表示 97</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 超出 byte 的取值范围，从 char 转换到 byte 可能会有损失</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token char">'中'</span><span class="token punctuation">;</span><span class="token comment">// '中' 表示 20013</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>需要注意，我指的是以字面量形式赋值，而不是值传递，自己试试报什么错？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span><span class="token keyword">char</span> letter <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b <span class="token operator">=</span> i1<span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> i2<span class="token punctuation">;</span><span class="token keyword">byte</span> b1 <span class="token operator">=</span> letter<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之前有人问你怎么知道 'a' 代表的整数，我又不想了解 ASCII码，有什么简单的方法吗？这就是第 2 点，请看：</p><p>2）byte、short、char 类型的变量混算时，会自动升级到 int 类型。</p><p>怎么得出的这个结论？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b3 <span class="token operator">=</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">Hello.java<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> 错误<span class="token punctuation">:</span> 不兼容的类型<span class="token punctuation">:</span> 从 <span class="token function">int</span> 转换到 byte 可能会有损失byte b3 <span class="token operator">=</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>是吧，两个 byte 类型的变量相加，竟然升级了。那我可以利用这一点，让char 类型的变量升级成 int 变量，自然就知道该字符对应的整数了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'中'</span><span class="token punctuation">;</span><span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 20013</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token char">'1'</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 49</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）多种类型混算时，先把字面量转成容量大的那种数据类型，再进行计算。</p><p>如果你不知道这点，以后计算很容易吃亏。比如 10 / 4，你本来想得到2.5，但是这参与运算的数，容量最大的也只是 int 类型，而 int类型只能保存整数，所以 2.5 被削去了小数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// i = 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时就需要浮点类型的参与，改一下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> i <span class="token operator">=</span> <span class="token number">10.0</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// i = 2.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>思考如下语句可以通过编译吗？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>b <span class="token operator">=</span> b <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>b 保存的 10 对应 byte 类型，2 对应 int 类型，这就是混算；让 10 升级到int 类型，与 2 相乘，结果还是 int 类型，再赋给 byte 类型的变量，报错：从int 转换到 byte 可能会有损失</p><p>思考输出什么？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4.0</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有人说这不就是 1 吗？有什么难的？当然也有其他人看出来了：1 / 4 是两个int 类型的字面量参与运算，结果为 0；（你难道忘了 int类型只能保存整数吗？）接着算，0 * 4.0 = 0.0；</p><p>所以结果为 0.0。（忘记带小数，哪怕只是 .0，结果就完全不同）</p><p>你的原意可能是这：<code>double d = 1.0 / 4 * 4.0;</code></p><h3 id="基本数据类型与-string-类型的转换">3.3.2 基本数据类型与 String类型的转换</h3><p>没想到吧，"+"号除了能计算两数之和外，还能拼接字符串。哦，我好像之前已经用过了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"我"</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"和"</span><span class="token punctuation">;</span><span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">"你"</span><span class="token punctuation">;</span><span class="token class-name">String</span> str4 <span class="token operator">=</span> str1 <span class="token operator">+</span> str2 <span class="token operator">+</span> str3<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 我和你</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思考输出什么？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"2"</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4 + 6 = 10；10 + "2" = "102"；"102" + 25 = "10225"；</p><p>没看晕吧？从左至右，乘号优先；字符串加谁，谁就被拼接在一起。那么就利用这个"+"，将基本数据类型转成字符串吧。</p><p><strong>基本数据类型转成字符串</strong></p><blockquote><p>""代表空字符串。输出字符串时，是不会输出双引号的，这你应该早就知道了。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">3L</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'中'</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">3.243</span><span class="token punctuation">;</span><span class="token class-name">String</span> str1 <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token class-name">String</span> str3 <span class="token operator">=</span> c <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token class-name">String</span> str4 <span class="token operator">=</span> d <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 中</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3.243</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字符串转成基本数据类型</strong></p><p>别看，等到包装类时就懂了。（或者你会查 API 文档，它们在 java.lang包下）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span><span class="token keyword">byte</span> num1 <span class="token operator">=</span> <span class="token class-name">Byte</span><span class="token punctuation">.</span><span class="token function">parseByte</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">short</span> num2 <span class="token operator">=</span> <span class="token class-name">Short</span><span class="token punctuation">.</span><span class="token function">parseShort</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> num4 <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">float</span> num5 <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> num6 <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*    取下标为 0 的字符（得到 str 的第一个字符）下标是从 0 开始，以 1 递增，并不是从 1 开始哦*/</span><span class="token keyword">char</span> num7 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果解析不是"true"的字符串，那么返回结果是 false</span><span class="token keyword">boolean</span> num8 <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 123</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 123</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 123</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 123</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 123.0</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 123.0</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意不要想着把字符串 "abc" 转成整数，编译虽然可以通过，但运行时会报java.lang.NumberFormatException异常（数字格式化异常），程序会在抛出异常的位置终止执行。（异常中有讲）</p><p>编译时只是检查语法，并不会解析 "abc" 是否能够转成整数。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.3 变量 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.3.2 数据类型</title>
      <link href="/2022/04/29/1.1.3-bian-liang/1.1.3.2-shu-ju-lei-xing/"/>
      <url>/2022/04/29/1.1.3-bian-liang/1.1.3.2-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="数据类型">3.2 数据类型</h2><p>内容导视：</p><ul><li>整数类型</li><li>浮点类型</li><li>字符类型</li><li>布尔类型</li><li>基本数据类型转换</li><li>基本数据类型与 String 类型的转换</li></ul><p><code>数据类型 变量名 = 字面量;</code>...变量的数据类型必须与字面量类型一致？留个疑问。</p><p>字面量讲了，变量名你可以随便取，接下来该说一说数据类型了。</p><p>Java支持的数据类型有两种，<strong>基本数据类型</strong>与<strong>引用数据类型</strong>。</p><p>基本数据类型加上引用数据类型中的 String类，正好与我们之前讲的字面量类型一一对应。</p><p><strong>基本数据类型</strong></p><p>1）整数类型</p><ul><li>byte（字节）：在内存中分配 1 个字节的空间。（8 位）</li><li>short（短整型）：在内存中分配 2 个字节的空间。（16 位）</li><li>int（整型）：在内存中分配 4 个字节的空间。（32 位）</li><li>long（长整型）：在内存中分配 8 个字节的空间。（64 位）</li></ul><p>2）浮点类型</p><ul><li>float：在内存中分配 4 个字节的空间。</li><li>double：在内存中分配 8 个字节的空间。（double 精度比 float更高）</li></ul><p>3）布尔类型</p><ul><li>boolean：在内存中分配 1 个字节（数组中）或 4个字节的空间（单个定义时）。</li></ul><p>4）字符类型</p><ul><li>char：2 个字节。</li></ul><p><strong>引用数据类型</strong></p><p>1）类（class）包括枚举</p><ul><li>JDK 自带类库，如 java.lang.String、集合、包装类...</li><li>用户自定义的类型，如我们之前写的 class Hello...</li><li>第三方类库</li></ul><p>2）接口（interface）包括注解</p><p>3）数组（array）</p><p>对于基本数据类型，如定义 int类型的变量，就可以接收整数型的字面量：<code>int i = 4;</code>；定义 char类型的变量，可以接收字符型的字面量：<code>char c = '中';</code>；定义boolean 类型的变量可以接收 true 或false：<code>boolean b = true;</code>...</p><p>对于引用类型的 String，定义 String类型的变量，就可以接收字符串型的字面量：<code>String str = "我是什么样";</code>。</p><blockquote><p>正常情况下，占用字节空间越大，表示的数越多；如整数类型的 byte只占一个字节，只能表示 -128 ~ 127 内的整数，所以才需要int、long，用以存储更大的整数。当然存储的数很小时，没必要使用long，太浪费空间。</p></blockquote><p>引用类型可以赋值null，代表空、什么都没有；等面向对象时讲，现在先看基本数据类型：</p><h3 id="整数类型">3.2.1 整数类型</h3><p>整数类型用来存储整数类型的字面量。</p><p>以 1 个字节为例，1 个字节 8 位，每位是 0 或 1，那么就是有2<sup>8</sup> 种可能，即表示 256 个数。</p><p>下面是不同整数类型的取值范围：</p><table><colgroup><col style="width: 19%"><col style="width: 15%"><col style="width: 65%"></colgroup><thead><tr class="header"><th style="text-align: center;">类型</th><th style="text-align: center;">占用存储空间</th><th style="text-align: center;">取值范围</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">byte（字节）</td><td style="text-align: center;">1 个字节</td><td style="text-align: center;">[-128 ~ 127] 即 [-2<sup>7</sup> ~2<sup>7</sup> - 1]</td></tr><tr class="even"><td style="text-align: center;">short（短整型）</td><td style="text-align: center;">2 byte</td><td style="text-align: center;">[-32768 ~ 32767] 即 [-2<sup>15</sup> ~2<sup>15</sup> - 1]</td></tr><tr class="odd"><td style="text-align: center;">int（整型）</td><td style="text-align: center;">4 byte</td><td style="text-align: center;">[-2147483648 ~ 2147483647] 即[-2<sup>31</sup> ~ 2<sup>31</sup> - 1]</td></tr><tr class="even"><td style="text-align: center;">long（长整型）</td><td style="text-align: center;">8 byte</td><td style="text-align: center;">[-2<sup>63</sup> ~ 2<sup>63</sup> -1]</td></tr></tbody></table><hr><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">34</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>定义了 int 类型的变量，变量名为 i，保存的值为 3。</p><p>定义了 byte 类型的变量，变量名为 b，保存的值为 45。</p><figure><img src="https://s2.loli.net/2022/04/24/Ii1wBW4JuNTobCh.png" alt="两个变量"><figcaption aria-hidden="true">两个变量</figcaption></figure><p>把 34 赋给 b 变量，原来保存的 45 被修改了。</p><figure><img src="https://s2.loli.net/2022/04/24/xPgQpstVR2LUq1S.png" alt="赋值"><figcaption aria-hidden="true">赋值</figcaption></figure><p><code>System.out.println(i);</code>表示把 i保存的值输出到控制台（目前是 DOS 窗口）上。</p><blockquote><p>由于现在你们可能还不懂二进制，于是使用十进制表示，同时也是为了方便，避免写太多的0、1。</p></blockquote><hr><p>有人可能会问超过了整数类型的取值范围会怎么样？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">Hello.java<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span> 错误<span class="token punctuation">:</span> 不兼容的类型<span class="token punctuation">:</span> 从 <span class="token function">int</span> 转换到 byte 可能会有损失    byte b <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这下就更疑惑了，什么叫 int 转成 byte 会有损失？难道这个 128也就是整数型字面量默认被当作 int 类型处理吗？</p><p>让我们试一试：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> num1 <span class="token operator">=</span> <span class="token number">2147483648</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>推测：就算 long 类型可以保存这么大的数，但如果后面的 2147483648真的被当作 int 类型处理的话，那肯定由于超过 int 的范围，会报错。</p><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">Hello.java<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span> 错误<span class="token punctuation">:</span> 过大的整数<span class="token punctuation">:</span> <span class="token number">2147483648</span>    <span class="token keyword">long</span> num1 <span class="token operator">=</span> <span class="token number">2147483648</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>好的，大概明白了。得出结论：</p><ul><li>整数型字面量默认被当作 int 类型处理。</li><li>为了方便，当被当作 int类型处理的字面量的值没超过整数类型的范围时，可以直接赋值。如<code>byte b = 1;</code></li></ul><p>有人就问了，超出 int 范围的值？那能不能让整数型字面量被当作 long类型处理？</p><p>答：在声明整数型字面量时在其后加 l 或 L。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> num1 <span class="token operator">=</span> <span class="token number">2147483648L</span><span class="token punctuation">;</span><span class="token keyword">long</span> num2 <span class="token operator">=</span> <span class="token number">2147483648l</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是你也看见了，由于小写的 l 感觉就像1，为了避免混淆，统一使用大写表示。</p><p>这里插一条概念：</p><p>值传递：把变量保存的值重新复制一份，传递给另一个变量；而另一个变量修改自己保存的值，不会影响原来变量保存的值。&gt;值传递也称值拷贝</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">// 把 i1 保存的值 100 复制一份，传给 i2，此时 i2 保存的值为 100</span><span class="token keyword">int</span> i2 <span class="token operator">=</span> i1<span class="token punctuation">;</span><span class="token comment">// 修改 i2 保存的值，不会对 i1 有影响</span>i2 <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i1 = "</span> <span class="token operator">+</span> i1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// i1 = 100</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i2 = "</span> <span class="token operator">+</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// i2 = 55</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/24/mIileq4o5QkBX9N.png" alt="值传递"><figcaption aria-hidden="true">值传递</figcaption></figure><p>好，有了这个概念，让我们试着互换两个变量保存的值。</p><p>大家想一想，如果现在有两个杯子 a、b，都装满了水，该如何互换？</p><figure><img src="https://s2.loli.net/2022/03/24/jHI6xGWioZNRDkm.png" alt="三个杯子"><figcaption aria-hidden="true">三个杯子</figcaption></figure><p>是不是要准备第 3 个杯子 c，先把 a 倒进 c 中，然后把 b 倒进 a中，最后把 c 倒进 b 中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">433</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment">// c = 22</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token comment">// a = 433</span>b <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token comment">// b = 22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以不借助第三个变量 c 吗？</p><p>有聪明的小伙伴想到了：让 a 保存两值之和（a + b），让 b = 两值之和 - b= a；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">433</span><span class="token punctuation">;</span>a <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token comment">// a = 22 + 433</span>b <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token comment">// b = (22 + 433) - 433 = 22</span>a <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token comment">// a = (22 + 433) - 22 = 433</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浮点类型">3.2.2 浮点类型</h3><p>浮点类型的变量可以接收一个小数，如 6.2、32.2。</p><p>由于使用指数的形式表示值，表示的数比相同字节下的整数类型更大，但是精度有限，结果可能有误差，无法精确表示。</p><p>现在看看浮点类型的取值范围，的确比整数类型的取值范围大多了：</p><table><colgroup><col style="width: 8%"><col style="width: 10%"><col style="width: 80%"></colgroup><thead><tr class="header"><th style="text-align: center;">类型</th><th style="text-align: center;">占用空间</th><th style="text-align: center;">范围</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">float</td><td style="text-align: center;">4 个字节</td><td style="text-align: center;">[1.4E-45 ~ 3.4028235E38] 即[2<sup>-149</sup> ~ 2<sup>128</sup>]</td></tr><tr class="even"><td style="text-align: center;">double</td><td style="text-align: center;">8 个字节</td><td style="text-align: center;">[4.9E-324 ~ 1.7976931348623157E308] 即[2<sup>-1074</sup> ~ 2<sup>1024</sup>]</td></tr></tbody></table><p>以下内容可以不看：</p><hr><p><strong>科学计数法</strong></p><p>由于数太大了，为了更好表示数值不浪费空间，使用科学计数法表示。这个 E大写小写都可以。</p><p>1.4E-45 = 1.4 * 10<sup>-45</sup></p><p>3.4028235E38 = 3.4028235 * 10<sup>38</sup></p><blockquote><p>有人说为何使用科学计数法表示？以 2 的幂表示，如 2<sup>-149</sup>是不是更节省空间？</p><p>7777777 保留 2 位有效数字，使用科学计数法表示：7.78 *10<sup>6</sup>（7.78E6）；你此时可能还在算它是 2 的几次方吧？</p></blockquote><p>Java 中，当小数超出 [-9999999，9999999]范围时，会使用科学计数法表示。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10000000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>控制台上会输出 <code>-1.0E7</code>；</p><p>有聪明的伙伴可能注意到了两点，题干中的“小数”、字面量后的“.0”，注意啊这两个条件不能丢，否则会被当作int 类型处理。那么下面这道题就可能做错：</p><p>思考控制台输出什么结果？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">500e-2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>答：500e-2 = 500 * 10<sup>-2</sup> = 500 / 10<sup>2</sup> = 5.0</p><p>别说结果是 5 啊。</p><p>下面呢？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">500E-7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第 1 个明显不是小数，还是原样输出。第 2个你可能会觉得这既然超过上述所说的范围，那使用科学计数法表示，还是原样输出。</p><p>我留的坑啊，没有使用这种方式 <code>500E-7</code> 表示的，而是<code>5.0E-5</code>。</p><p>举个例子，a * 10<sup>n</sup>，那么 |a| 是 [1 ~ 10) 之间的数。</p><p>如 <code>-78937935.2</code>，一看超过了范围，用科学计数法表示：<code>-7.89379352E7</code>，<code>7.89379352</code>大于等于 1，小于10。你要是这样表示就错了：<code>-78.9379352E6</code>。</p><hr><p><strong>小数类型的字面量默认被当作什么类型处理？</strong></p><p>回过头来，小数类型的字面量又被当作什么类型处理？</p><p>做个实验：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">Hello.java<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span> 错误<span class="token punctuation">:</span> 不兼容的类型<span class="token punctuation">:</span> 从<span class="token keyword">double</span>转换到float可能会有损失   float f <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>看来默认被当作 double 类型处理。同样想要指定字面量被当作 float处理，需要在字面量后加上 f 或 F。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">3.14F</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同理，指定字面量被当作 double 类型处理。（其实 D、d去掉也可以，在基本类型的转换中有讲）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">5D</span><span class="token punctuation">;</span><span class="token keyword">double</span> d2 <span class="token operator">=</span> <span class="token number">3d</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有时候你会看见这种写法：<code>double d = .12;</code>不要疑惑，这等同于 <code>double d = 0.12</code> ，这个 0可以省略不写，但一般不要这么做，否则其他人可能会疑惑。</p><p><strong>精度</strong></p><p>浮点数存放形式：浮点数 = 符号位 + 指数位 +尾数位，尾数部分很可能会丢失，造成精度损失。（小数都是近似值）（有兴趣去扩充知识了解，这里不赘述）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0.11111111111111111111111111111F</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0.11111111111111111111111111111D</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic"><span class="token number">0.11111111</span><span class="token number">0.1111111111111111</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>大概可以这么理解：</p><p>float 的精度是保留 8 位有效数字。</p><p>double 的精度是保留 16 位有效数字。通常使用 double 类型。</p><blockquote><p>有效数字是一个数从左边第一个不为 0的数字起，直到末尾止的数字称为有效数字，如 0.009210，有效数字 4位：9、2、1、0。</p><p>保留两位有效数字：0.0092。</p></blockquote><p>由于浮点数运算得到的结果可能有误差，所以如下就成了错误做法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">9.9</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">double</span> d2 <span class="token operator">=</span> <span class="token number">3.3</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d1 <span class="token operator">==</span> d2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"它们相等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的意思是：如果 d1 等于 d2，就输出“它们相等”。</p><p>但试着运行，控制台什么都没有输出...</p><p>此时再试下访问 d1 的值：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3.3000000000000003</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到没有？9.9 / 3 不等于 3.3，而是十分接近 3.3 的小数。</p><p><mark>当对运算结果是小数的进行相等判断时，应该以两个数的差值的绝对值，在某个精度范围类判断</mark>。这个精度由自己决定，如人民币数值比较，人民币最低面额1 分 = 0.01 元，只要两数差值小于 0.01，就认为它们相等。</p><p>现在该改一下了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">9.9</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">double</span> d2 <span class="token operator">=</span> <span class="token number">3.3</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>d1 <span class="token operator">-</span> d2<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1.0E-2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"它们相等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>还记得如何查 API 文档吗？当导入 java.lang 包下的类时，可以不用import。哦，对了，你们还不懂，这节在面向对象的包机制中。</p><p>那我直接说含义，<code>Math.abs(a)</code>：求 a 的绝对值。当 d1 - d2的绝对值小于 0.01 时，我们姑且认为它们相等。</p></blockquote><p>现在收尾。我还是说说怎么找吧：</p><p>打开 JDK API 文档，如果知道 Math 在哪个包下，比如 Math 在 java.lang包下，点击 java.lang；</p><figure><img src="https://s2.loli.net/2022/04/24/TuBItjdzNgnQRZl.png" alt="java.lang.Math"><figcaption aria-hidden="true">java.lang.Math</figcaption></figure><p>如果不知道，点击索引找 M 开头的类：</p><figure><img src="https://s2.loli.net/2022/04/24/T1Kfi7wmnG5Ml2N.png" alt="索引查找 Math"><figcaption aria-hidden="true">索引查找 Math</figcaption></figure><p>找到后点击 Math，看看 abs 方法的介绍。</p><h3 id="字符类型">3.2.3 字符类型</h3><blockquote><p>输出、打印是一个意思。</p></blockquote><p>char 类型的变量可以保存单个字符，占用 2 个字节，取值范围：[0 ~ 65535]即 [0 ~ 2<sup>16</sup> - 1]。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">'中'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span><span class="token comment">// 字符类型可以直接存放数字，当输出 c2 时，会输出 97 代表的字符，扩充内容中有讲</span><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你们可能会在其他地方遇到如<code>char c = '\n';</code>，这叫<strong>转义字符</strong>；</p><p>一般使用 <code>\</code>开头，代表着将一个字符转义，本质还是单个字符。</p><hr><p><code>\n</code>：换行 <code>\t</code>：制表符 tab<code>\r</code>：回车 <code>\u</code>：把十六进制数转成对应的字符</p><hr><p>1）<code>\n</code>：</p><p>什么叫换行？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好\n我好\n大家好\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里不得不提一下 ln：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 代表换行</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic"><span class="token number">21</span><span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ln 表示当前行结束输出，如果要继续输出，就要移到下行。</p><p>回过头来，"你好"换行，"我好"换行，"大家好"换行，ln 代表换行。<code>System.out.println(c);</code>，c 是<code>'\n'</code>，代表换行，ln 代表换行。 结果如下：</p><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">你好我好大家好<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）<code>\t</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗\t猫\t鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">狗      猫      鱼<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到狗与猫、鱼之间隔了一个制表符的距离。</p><p>3）<code>\r</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是什么\r人呢"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>回车：回到行首，输出文本。由此产生分歧，有人认为一个 <code>\n</code>足以表示回车加换行，两个字符太浪费了，而 Windows系统中还保留原来概念，Enter键（我们通常叫回车键），实际用两个字符表示：<code>\r\n</code>；对应的ASCII 码用十进制表示分别为 13、10。</p><p>Windows 系统换行 Carriage return and linefeed（CRLF）：回车加换行</p><p>Linux 系统换行 Line feed（LF）：换行</p><p>回到这里，如果回车但不换行，<code>\r</code> 后的 “人呢”还在同行首个位置上输出，把 “我是” 覆盖，最后结果："人呢什么"。</p><p>4）<code>\u</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\u5929"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">天<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>16 进制的 5929对应的字符为天，有兴趣请在扩充内容中的字符编码了解。</p><p>这个 <code>\</code> 作用不止如此。</p><p>问想要使用 char 类型保存单个字符：英文单引号 <code>'</code>怎么做？</p><p><code>char c = ''';</code>这样？</p><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">Hello.java<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span> 错误<span class="token punctuation">:</span> 未结束的字符文字                char c <span class="token operator">=</span> '''<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>像这类具有特殊含义的字符，需要使用 <code>\</code>转成普通的字符，使其不再被认为是代表字符开始的单引号。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'\''</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同理，打印 <code>\</code>、" 等特殊符号，都需要在字符前加上<code>\</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">"\<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="布尔类型">3.2.4 布尔类型</h3><p>boolean 类型只有两个值：true 或 false，用于逻辑运算：2 &lt; 3 为true。</p><p>一般放在 if 、for 等语句的条件处，控制程序的流程，现在不用深究。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.3 变量 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.1.7 MarkText 使用</title>
      <link href="/2022/04/29/1.1.1-jdk-xia-zai-ji-zhun-bei-gong-zuo/1.1.1.7-marktext-shi-yong/"/>
      <url>/2022/04/29/1.1.1-jdk-xia-zai-ji-zhun-bei-gong-zuo/1.1.1.7-marktext-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="marktext-使用">1.7 MarkText 使用</h2><p>是 Typora 的同类型产品，开源免费。</p><p>下载地址：https://marktext.app/</p><p>有时候可能打不开，https://github.com/marktext/marktext/tags</p><p>选择版本后，Assets 下点击 exe 文件进行下载。</p><p>由于作者计划 v1.0.0以后支持其它语言（国际化），英语不好的，可以搜下汉化版。</p><p>如果 git 下载太慢：（慎用！！！）</p><p>作者：<a href="https://home.cnblogs.com/u/ziyue7575/">紫月java</a>，https://www.cnblogs.com/ziyue7575/p/14157952.html</p><ul><li><p>安装用户脚本管理器：https://greasyfork.org/zh-CN/help/installing-user-scripts</p></li><li><p>加速脚本：https://greasyfork.org/zh-CN/scripts/397419-fastgithub-%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AE-%E5%85%8B%E9%9A%86%E5%92%8C%E4%B8%8B%E8%BD%BD</p><figure><img src="https://s2.loli.net/2022/04/09/Lfp5RcKoQEYuAy7.png" alt="添加新脚本"><figcaption aria-hidden="true">添加新脚本</figcaption></figure><p>将 js 文件拖入其中，刷新页面，效果如图：</p></li></ul><figure><img src="https://s2.loli.net/2022/04/10/vxqZDl7ebO6IKoL.png" alt="使用加速"><figcaption aria-hidden="true">使用加速</figcaption></figure><p>随便点击，开始下载吧。</p><h3 id="编辑区域">1.7.1 编辑区域</h3><p><strong>查看源代码：Ctrl + E</strong></p><p><strong>整体布局</strong></p><figure><img src="https://s2.loli.net/2022/04/10/gkKYX3AGeqfNw28.png" alt="编辑区域"><figcaption aria-hidden="true">编辑区域</figcaption></figure><p>正上方是 md 文件的绝对路径；</p><p>左上角 A 是总字符个数；点击可以切换。</p><ul><li>Words：单词个数（一个汉字算一个单词）</li><li>Characters：可见字符个数</li><li>Paragraphs：段落个数</li></ul><p><strong>右键标签栏</strong></p><figure><img src="https://s2.loli.net/2022/04/10/4nlGS5CgtpUs3q1.png" alt="弹出的选项"><figcaption aria-hidden="true">弹出的选项</figcaption></figure><p>Close：关闭文件（未 Ctrl + S 保存会弹出提示）</p><p>Close others：关闭其它文件</p><p>Close saved tabs：关闭已保存的文件</p><p>Close all tabs：关闭所有文件</p><p>Rename：重命名文件</p><p>Copy path：复制文件的绝对路径</p><p>Show in folder：打开文件所在目录</p><p><strong>段落快捷操作</strong></p><p>当你每次移动光标时，当前段落对应的图标（最左边）就会显示，点击</p><figure><img src="https://s2.loli.net/2022/04/10/uodWe2zh1GfZsCQ.png" alt="段落快捷操作"><figcaption aria-hidden="true">段落快捷操作</figcaption></figure><p>Duplicate：向下复制当前段落</p><p>Turn Into：变成？</p><ul><li>Paragraph（Ctrl + 0）：段落</li><li>Header 1（Ctrl + 1）：h1 标题</li><li>Display Math（Alt + Ctrl + M）：内联公式块</li><li>HTML Block（Alt + Ctrl + J）：div 标签</li><li>Code Block（Alt + Ctrl + C）：代码块</li><li>Quote Block（Alt + Ctrl + Q）：引用</li><li>Order List（Alt + Ctrl + O）：有序列表</li><li>Bullet List（Alt + Ctrl + U）：无序列表</li><li>To-do List（Alt + Ctrl + X）：任务复选框</li></ul><p>New Paragraph：创建新的段落</p><p>Delete：删除当前段落</p><p><strong>选中文字</strong></p><figure><img src="https://s2.loli.net/2022/04/10/8gpyh2dRI3lqbVs.png" alt="格式变换"><figcaption aria-hidden="true">格式变换</figcaption></figure><p>从左至右依次是：粗（Ctrl + B）、斜（Ctrl + I）、下划线（Ctrl +U）、删除线（Ctrl + D）、高亮（Ctrl + H）、代码块（Ctrl +`）、内联公式（Ctrl + M）、超链接（Ctrl + L）、插入图片（Ctrl + Shift +I）、清除格式（Ctrl + Shift + R）</p><p><strong>插入表情</strong></p><p>Windows + 句号，或者 <code>:a:</code>，两个冒号跟一个字母</p><h3 id="偏好设置">1.7.2 偏好设置</h3><p>Ctrl + 逗号</p><p><strong>General</strong></p><p><strong>自动保存</strong></p><p>Auto Save：</p><ul><li>Automatically save document changes：更改时自动保存</li><li>Delay following document edit before automatically saving：延迟 ?ms后保存</li></ul><p><strong>更改菜单栏位置</strong></p><p>Window：</p><p>Title bar style：</p><ul><li>Custom：左上角</li><li>Native：正上方</li></ul><p><strong>Editor</strong></p><p><strong>字体样式</strong></p><p>Text editor settings：文本编辑设置</p><ul><li>Font size：字体大小</li><li>Line height：行距</li><li>Font family：字体样式</li><li>Maximum width of texteditor：编辑器最大宽度，单位有：ch、px、%，例：输入100px；输入错误会报红。</li></ul><p><strong>Markdown</strong></p><p><strong>支持上下标</strong></p><p>Markdown extensions：扩展语法</p><p>启用 Enable Pandoc-style superscript and subscript</p><ul><li><code>5^3^</code>：5<sup>3</sup></li><li><code>5~3~</code>：5<sub>3</sub></li></ul><p><strong>Spelling</strong></p><p>Enable spell checker：开启拼写检查</p><p>Default language for spell checker：检查器的默认语言</p><p><strong>Key Binding</strong></p><p><strong>更改操作的快捷键方式</strong></p><figure><img src="https://s2.loli.net/2022/04/10/4h3QWx2prdMOPen.png" alt="操作快捷方式"><figcaption aria-hidden="true">操作快捷方式</figcaption></figure><p>修改，重置，删除</p><p>每次修改后，需要翻到最下面保存</p><ul><li>Save：保存</li><li>Restore default key bindings：恢复默认快捷键</li></ul><h3 id="图片上传">1.7.3 图片上传</h3><p>偏好设置/Image,</p><figure><img src="https://s2.loli.net/2022/04/10/fsTA7yxPiUm632L.png" alt="图片上传"><figcaption aria-hidden="true">图片上传</figcaption></figure><p>Default action after an image is inserted from local folder orclipboard：插入图片后的操作（只支持 macOS 和 Windows 系统）</p><ul><li><p>Keep original location：保存在原位置</p></li><li><p>Copy image to designated relative assets or global localfolder：复制图片至指定位置（绝对或相对路径）</p></li><li><p>Upload image to cloud using selected uploader（must be configuredbelow）：上传至云端</p></li></ul><p>Global or relative image folder：指定图片保存的绝对路径</p><p>Prefer relative assets folder：...相对路径，开启后，图片会放在与 md文件的同级目录下</p><ul><li>Relative image folder name：目录名称，即图片会放在此目录下</li></ul><p>说一下历程吧。</p><p>之前不是使用 Typora 软件时下载了 <a href="https://github.com/Molunerfinn/PicGo/tags">PicGo app</a>嘛，但是提示检查不出来，说不存在；试着使用命令行方式吧（github方式将来会废弃），下拉列表切换为 Command line script，提示要安装PicGo-Core，于是先安装 <a href="https://nodejs.org/zh-cn/download/">Node.js</a>，打开 DOS窗口，输入 <code>npm install picgo -g</code>命令，安装位置：<code>C:\Users\自己的用户名\AppData\Roaming\npm\node_modules</code></p><p>在 <code>C:\Users\你的用户名\.picgo</code> 下创建了 config.json文件，复制了如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"picBed"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"uploader"</span><span class="token operator">:</span> <span class="token string">"smms"</span><span class="token punctuation">,</span> <span class="token comment">// 代表当前的默认上传图床为 SM.MS,</span>    <span class="token property">"smms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">""</span> <span class="token comment">// 从 https://sm.ms/home/apitoken 获取的 token</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"picgoPlugins"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 为插件预留</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PicGo-Core指南：https://picgo.github.io/PicGo-Core-Doc/zh/guide/config.html#%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90</p><p>用法：https://github.com/PicGo/PicGo-Core</p><p>如上传文件：<code>picgo upload 文件的绝对路径</code></p><p>于是学了一下 Shell脚本的语法，提示说输入的唯一参数是图片路径，要求输出图片的 url路径；于是上网搜，如何接收第一个参数、输出，分别是$1、echo；尝试过程中发现路径必须以 <code>/</code> 分隔，而不是<code>\</code>。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">export LANG="en_US.UTF-8"str=$(picgo upload $1)img=${str#*"[PicGo SUCCESS]: "}echo $img<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试中发现运行不了，需要环境，接着下载了 <a href="https://git-scm.com/download/win">git</a>，打开 bash 窗口使用./xxx.sh 命令运行此文件。</p><p>正以为大功告成，可 MarkText 保存不了此 Shell脚本的绝对路径。没有办法，下载了 v0.16.3 版本覆盖安装，偏好设置里 Image下多了一项 <code>Image Uploader</code>，</p><figure><img src="https://s2.loli.net/2022/04/10/ElkeQWOj1GNShs5.png" alt="旧版本"><figcaption aria-hidden="true">旧版本</figcaption></figure><p>选择，点击 Set as default，默认图片上传至 sm.ms。</p><p>然后下载新版本，再覆盖安装一次，打开</p><figure><img src="https://s2.loli.net/2022/04/10/L78OKNSv3G1HzQb.png" alt="新版本"><figcaption aria-hidden="true">新版本</figcaption></figure><p>下拉框改为 Picgo 即可。</p><p>拖入图片到窗口时，必须拖到当前段落（会显示一条绿线），才会成功。</p><figure><img src="https://s2.loli.net/2022/04/10/CfUobvlHAt7B4kR.png" alt="如何上传图片"><figcaption aria-hidden="true">如何上传图片</figcaption></figure><p>点击此图片，可以修改图片（查看是否为网络 URL）以及位置。</p><blockquote><p>脚本：解释性语言，且是文本格式。</p></blockquote><h3 id="file">1.7.4 File</h3><p>英语不好，又没有安装汉化版的...下面是菜单栏的各项，先从 File开始：</p><p>New Tab（Ctrl + T）：新建文件</p><p>New Window（Ctrl + N）：生成新窗口</p><p>Open File（Ctrl + O）：打开文件（可以直接将 md 文件拖入此窗口）</p><p>Open Folder（Ctrl + Shift + O）：打开目录（显示目录下的 md文件、查找、显示文章中的标题）</p><p>Open Recent：打开最近文件</p><ul><li>Clear Recently Used：清空最近文件（只是清除记录）</li></ul><p>Save（Ctrl + S）：保存</p><p>Save As（Ctrl + Shift + S）：另存</p><p>Auto Save：退出文件前自动保存</p><p>Move To：将文件移动至...</p><p>Rename：重命名</p><p>Export：导出为</p><p>HTML</p><ul><li><p>Page：设置页面标题（title 标签里的文本）</p></li><li><p>Style</p><ul><li><p>Overwrite theme font settings：更改字体样式、大小、行距</p></li><li><p>Auto numbering headings：自动为 h1 以下级别的标题编号</p></li><li><p>Show front matter：显示前言</p></li></ul></li><li><p>Theme：选择主题</p></li><li><p>Table of Contents：目录列表</p></li></ul><p>PDF</p><ul><li><p>Page</p><ul><li><p>Page size：设置纸张大小</p></li><li><p>Landscape orientation：是否横向</p></li><li><p>Page margin：页边距（毫米）</p><ul><li><p>Top/Bottom：上下边距</p></li><li><p>Left/Right：左右边距</p></li></ul></li><li><p>Header &amp; Footer：页眉页脚</p><ul><li><p>Header type：页眉类型</p><ul><li><p>Single cell：单（中间）</p></li><li><p>None：无</p></li><li><p>Three cells：三（左中右）</p></li></ul></li><li><p>Customize style：定制风格</p><ul><li>Header and footer font size：页眉页脚字体大小</li></ul></li></ul></li></ul></li><li><p>Preferences（Ctrl + 逗号）：偏好设置</p></li><li><p>Close Tab（Ctrl + W）：关闭文件</p></li><li><p>Close Window（Ctrl + Shift + W）：关闭窗口</p></li><li><p>Quit（Ctrl + Q）：关闭所有窗口</p></li></ul><p>导出时新增主题：https://github.com/marktext/marktext/blob/develop/docs/EXPORT_THEMES.md</p><h3 id="edit">1.7.5 Edit</h3><p>Undo（Ctrl + Z）：撤销</p><p>Redo（Ctrl + Shift + Z）：反撤销</p><p>Cut（Ctrl + X）：剪切</p><p>Copy（Ctrl + C）：复制</p><p>Paste（Ctrl + V）：粘贴</p><p>Copy as Markdown（Ctrl + Shift + C）：以 Markdown 形式复制</p><p>Copy as HTML：以 HTML 标签形式复制</p><p>Paste as Plain Text（Ctrl + Shift + V）：纯文本粘贴</p><p>Select All（Ctrl + A）：选中所有</p><p>Duplicate（Alt + Ctrl + D）：向下复制一行</p><p>Create Paragraph（Ctrl + Shift + N）：创建新的段落</p><p>Delete Paragraph（Ctrl + Shift + D）：删除当前段落</p><p>Find（Ctrl + F）：查找</p><ul><li>Case Sensitive：区分大小写</li><li>Select whole word：选择整个单词，如查找 a，不会出现包含 a 的单词如puba，而是只有单独的 a。</li><li>Use query as RegEx：使用正则表达式</li><li>Find Next（F3）：往下找</li><li>Find Previous（Shift + F3）：往上找</li></ul><p>Replace（Ctrl + R）：替换所有、一个个替换</p><p>Find in Folder（Ctrl + Shift + F）：在目录下的文件中查找（首先得 OpenFolder 打开目录）</p><p>Line Ending：换行方式</p><ul><li><p>Carriage return and line feed（CRLF）：Windows 换行方式，即<code>\r\n</code></p></li><li><p>Line feed（LF）：Linux换行方式，即 <code>\n</code></p></li></ul><h3 id="paragraph">1.7.6 Paragraph</h3><p>Heading 1、2、...、6 为 H1、H2、...、H6 标题</p><p>Promote Heading（Ctrl + Shift + =、Ctrl + 加号）：提升标题等级</p><p>Demote Heading（Ctrl + -）：降低标题等级</p><p>Table（Ctrl + Shift + T）：创建表格</p><p>Code Fences（Ctrl + Shift + K）：代码块</p><p>Quote Block（Ctrl + Shift + Q）：引用</p><p>Math Block（Alt + Ctrl + N）：内联公式块</p><p>HTML Block（Alt + Ctrl + H）：HTML 标签</p><p>Ordered List（Ctrl + G）：有序列表</p><p>Bullet List（Ctrl + H）：无序列表</p><p>Task List（Alt + Ctrl + X）：复选框</p><p>Loose List Item（Alt + Ctrl + L）：增加列表之间的距离</p><p>Paragraph（Ctrl + Shift + 0）：段落</p><p>Horizontal Rule（Ctrl + Shift + U）：分隔线</p><p>Front Matter（Alt + Ctrl + Y）：前言</p><h3 id="format">1.7.7 Format</h3><p>Bold（Ctrl + B）：粗体</p><p>Italic（Ctrl + I）：斜体</p><p>Underline（Ctrl + U）：下划线</p><p>Superscript：上标</p><p>Subscript：下标</p><p>Highlight（Ctrl + Shift + H）: 黄色高亮</p><p>Inline Code（Ctrl + `）：单行代码块</p><p>Inline Math（Ctrl + Shift + M）：单行内联公式</p><p>Strikethrough（Ctrl + D）：删除线</p><p>Hyperlink（Ctrl + L）：超链接</p><p>Image（Ctrl + Shift + I）：图片链接</p><p>Clear Formatting（Ctrl + Shift + R）：清除格式</p><h3 id="window">1.7.8 Window</h3><p>Minimize（Ctrl + M）：窗口最小化</p><p>Always on Top：总是显示在最上层</p><p>Zoom In：放大</p><p>Zoom Out：缩小</p><p>Show in Full Screen（F11）：全屏显示</p><h3 id="view">1.7.9 View</h3><p>Command Palette（Ctrl + Shift + P）：查看操作的快捷方式</p><p>Source Code Mode（Ctrl + E）：查看源代码</p><p>Typewriter Mode（Ctrl + Shift +G）：打字机模式，保证光标在屏幕中间</p><p>Focus Mode（Ctrl + Shift + J）：焦点模式，只关注当前输入行</p><p>Show Sidebar（Ctrl + J）：显示侧边栏（目录树、查找、文章标题）</p><p>Show Tab Bar（Ctrl + Shift + B）：显示标签栏（md 文件名）</p><p>Toggle Table of Contents（Ctrl + K）：跳转至对应的 H标题位置（点击左边侧边栏显示的标题）</p><p>Reload Images（F5）：重新加载图片</p><h3 id="help">1.7.10 Help</h3><p>Quick Start：<a href="https://github.com/marktext/marktext/blob/master/docs/README.md">快速开始</a></p><p>Markdown Reference：<a href="https://github.com/marktext/marktext/blob/master/docs/MARKDOWN_SYNTAX.md">Markdown语法</a></p><p>Changelog：<a href="https://github.com/marktext/marktext/blob/master/.github/CHANGELOG.md">更新日志</a></p><p><a href="https://opencollective.com/marktext">Donate via OpenCollective</a>：赞助</p><p>Feedback via Twitter：反馈（使用推特）</p><p>Report Issue or Request Feature：<a href="https://github.com/marktext/marktext/issues">报告问题或请求功能</a></p><p>Website：<a href="https://marktext.app/">网站</a></p><p>Watch on GitHub：<a href="https://marktext.app/">查看 Github项目</a></p><p>Follow us on GitHub：<a href="https://github.com/Jocs">关注我们（GitHub）</a></p><p>Follow us on Twitter：关注我们（Twitter）</p><p>License：<a href="https://github.com/marktext/marktext/blob/master/LICENSE">许可证</a></p><p>Check for updates：检查更新</p><p>About MarkText：关于 MarkText</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.1 JDK 下载及准备工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.1.x 总结回顾</title>
      <link href="/2022/04/29/1.1.1-jdk-xia-zai-ji-zhun-bei-gong-zuo/1.1.1.x-zong-jie-hui-gu/"/>
      <url>/2022/04/29/1.1.1-jdk-xia-zai-ji-zhun-bei-gong-zuo/1.1.1.x-zong-jie-hui-gu/</url>
      
        <content type="html"><![CDATA[<h2 id="x-总结回顾">1.x 总结回顾</h2><p>（不要惊讶怎么这么少，我说过别把大脑当成硬盘，记一个 cd命令就足够了，记得看完后休息一会，欲速则不达）</p><p><strong>Java 介绍与下载</strong></p><p>Java是最早由 SUN 公司的 James Gosling 开发的编程语言。</p><p>SUN 在 2009 年被 Oracle 收购；2014 年 3 月 19 日发布了 JDK8。</p><p><strong>常用的 DOS 命令</strong></p><p><code>cd 当前目录下的文件夹名</code> 进入目录</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.1 JDK 下载及准备工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.1.5 常用的 DOS 命令</title>
      <link href="/2022/04/29/1.1.1-jdk-xia-zai-ji-zhun-bei-gong-zuo/1.1.1.5-chang-yong-de-dos-ming-ling/"/>
      <url>/2022/04/29/1.1.1-jdk-xia-zai-ji-zhun-bei-gong-zuo/1.1.1.5-chang-yong-de-dos-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="常用的-dos-命令">1.5 常用的 DOS 命令</h2><p>内容导视：</p><ul><li><p>打开 DOS 窗口的几种方式</p></li><li><p>进入目录内：使用绝对路径与相对路径演示</p></li><li><p>常见的 DOS 命令</p></li></ul><p>写出来的 Java代码，需要在命令窗口中执行编译与运行命令，需要知道如何打开此黑窗口（DiskOperating System）。</p><h3 id="打开-dos-窗口的几种方式">1.5.1 打开 DOS 窗口的几种方式</h3><ol type="1"><li>屏幕最左下方，右击 <strong>Windows图标</strong>，点击 WindowsPowerShell，管理员权限更高，可以修改系统关键文件。</li><li>点击 Windows 图标，往下翻在所有程序中找到 Windows系统，<strong>点击命令提示符</strong>。（可以右键以管理员权限运行）</li><li><strong>Windows + R</strong> 输入 cmd回车。（<mark>最常用</mark>）</li><li>打开文件夹资源管理器，在地址栏输入 cmd回车。（<mark>其次常用</mark>）</li><li><strong>按住 Shift 别松，鼠标右击</strong>，在此处打开PowerShell（S）。</li></ol><p>作者：<a href="https://blog.csdn.net/gulang03">「已注销」</a>，内容：将 Windows10中的 WSL添加至右键菜单，https://blog.csdn.net/gulang03/article/details/79177500</p><h3 id="进入目录内使用绝对路径与相对路径演示">1.5.2进入目录内：使用绝对路径与相对路径演示</h3><blockquote><p>下面说的目录和文件夹是一个意思。 输入命令后按下回车才能执行，回车键是Enter。</p></blockquote><p>由于不是可视化界面，不能像之前一样，点到哪里就跳到哪个文件夹下，需要使用<strong>cd 命令</strong>，跳转到某路径下。</p><p>路径分为<mark>绝对路径</mark>和<mark>相对路径</mark>。</p><p>打开文件资源管理器（Windows +E），随便打开某盘下的文件夹，可以看到地址栏上的路径。假如以 D: 开头，D:称为盘符，显示的路径称为<strong>绝对路径</strong>，<code>D:\</code> 称为D 盘的根目录（最上一级，不能再上了）。</p><p><strong>绝对路径</strong>：从盘符开始的路径，能够完整的描述文件位置的路径就是绝对路径。（唯一确定资源位置）如路径 <code>D:\cqh_environment</code>，指向 D 盘下的<code>cqh_environment</code> 文件。</p><p>而<strong>相对路径</strong>，是以当前路径作为出发点的路径，比如进入当前路径的a 目录。</p><p>首先打开 DOS 窗口，切换盘符。</p><p>例：想要到 E 盘下，就输入 <code>E:</code> 后回车，输入<code>dir</code>回车查看当前路径下有那些子文件（没有就在该盘手动创建文件夹），使用<code>cd 文件夹名称</code> 进入此文件夹。</p><figure><img src="https://s2.loli.net/2022/04/23/lPRM3boTUG6IO85.png" alt="cd 命令"><figcaption aria-hidden="true">cd 命令</figcaption></figure><p>使用 <code>cd a</code> 时，单看这个a，鬼才知道这是哪个地方的文件夹，在哪里才能找到它，需要结合当前路径E:&nbsp;才能知道，原来是要到 E 盘下去找 a，那么这个 a 就是相对路径。</p><p>可以这么理解，我说北京市某某地址的小区，你马上理解了要在哪去找，这是绝对路径；但我说我家旁边的一家店，你必须先知道我家在哪，再根据我家的位置确定这家店的位置，这就是相对路径。</p><hr><p><code>..</code>：上级目录</p><p><code>.</code>：当前目录</p><p>现在回到上级目录，使用<code>cd ..</code>，现在演示一下绝对路径，<code>cd 绝对路径</code>，使用绝对路径时，必须是当前所在盘下的路径。</p><p>注意：<mark>路径必须存在</mark>，你需要把目录创建出来，才能使用 cd命令进去。</p><figure><img src="https://s2.loli.net/2022/04/23/uCz76JTDKiM1PYn.png" alt="返回上级目录"><figcaption aria-hidden="true">返回上级目录</figcaption></figure><p>如果使用相对路径，先切换到根目录，再执行<code>cd a\b\c\d</code>。</p><p>怎么回到根目录？使用 <code>cd E:\</code> 吗？或者<code>cd ..\..\..\..</code>?</p><p>还有一种简单的方式 <code>cd \</code> 即可</p><hr><p>一个 <code>cd ..</code> 是回到上级目录， <code>cd ..\..</code>是回到上上级目录。</p><hr><p>若文件名太长记不住，可以打出首字母，再按下 Tab键，也可上下键切换已经输入过的命令，或者你直接将文件拖入这个黑窗口，地址就出来了。</p><p>通过刚才的例子，发现跳转路径时，必须是当前盘下的路径，那么还不如使用相对路径，反正盘名写其它盘也没用。解决办法：加个参数/d 即可。</p><p>例：现在在 C 盘下，我要直接到 <code>E:\a\b\c\d</code>，输入<code>cd /d E:\a\b\c\d</code> 即可。</p><figure><img src="https://s2.loli.net/2022/04/23/PkW6SsAqno9XNGY.png" alt="更换盘目录"><figcaption aria-hidden="true">更换盘目录</figcaption></figure><h3 id="常用的-dos-命令-1">1.5.3 常用的 DOS 命令</h3><p>内容如下：</p><ul><li>进入目录、返回上级目录</li><li>打开常用的软件</li><li>清空屏幕</li><li>新建、删除文件</li><li>查看系统变量</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换盘符 C:</span><span class="token comment">#查看当前目录下的文件 dir</span><span class="token comment">#改变目录 cd /d C:\a\b\c</span><span class="token comment">#返回上一级 cd..</span><span class="token comment">#直接回到根目录 cd \</span><span class="token comment">#进入子目录 cd 文件夹名称</span><span class="token comment">#清空屏幕 cls</span><span class="token comment">#退出 exit</span><span class="token comment">#查看ip ipconfig</span><span class="token comment">#查看ip详细 ipconfig/all</span><span class="token comment">#打开软件</span><span class="token comment">#打开计算器 calc</span><span class="token comment">#打开绘图 mspaint</span><span class="token comment">#打开记事本 notepad</span><span class="token comment">#查看网络 ping www.baidu.com</span><span class="token comment">#网络诊断 ping www.baidu.com -t</span><span class="token comment">#终止 Ctrl + C</span><span class="token comment">#新建文件夹 md 文件夹名</span><span class="token comment">#新建文件 cd&gt;文件名.后缀</span><span class="token comment">#删除文件 del 文件名.后缀（可带*，*表示任意，小心别把所有东西删了）</span><span class="token comment">#删除文件夹 rd 文件夹名</span><span class="token comment">#打开文件 文件名.后缀</span><span class="token comment">#打包</span><span class="token comment">#把当前的路径下所有打包进a.jar</span>jar cvf a.jar <span class="token builtin class-name">.</span><span class="token comment">#把当前的路径下所有打包进b.war</span>jar cvf b.war <span class="token builtin class-name">.</span><span class="token comment">#可以使用绝对路径</span>jar cvf E:<span class="token punctuation">\</span>cqh<span class="token punctuation">\</span>b.war <span class="token builtin class-name">.</span><span class="token comment">#查看系统变量的值,如第一个是C:\Windows</span><span class="token builtin class-name">echo</span> %SystemRoot%<span class="token builtin class-name">echo</span> %ProgramFiles%<span class="token builtin class-name">echo</span> %Path%<span class="token comment">#咳咳，你打开环境变量（网上搜，下节也有），左边是变量，右边是值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 1.1.1 JDK 下载及准备工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.1.6 Jopin 使用</title>
      <link href="/2022/04/29/1.1.1-jdk-xia-zai-ji-zhun-bei-gong-zuo/1.1.1.6-jopin-shi-yong/"/>
      <url>/2022/04/29/1.1.1-jdk-xia-zai-ji-zhun-bei-gong-zuo/1.1.1.6-jopin-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="joplin-使用">1.6 Joplin 使用</h2><p>与其说是 Markdown编辑器，倒不如说它是一个同步小云盘、整理目录的大师，不与 Typora冲突。整个页面布局（左中上下）：目录树、笔记列表、笔记标题、笔记正文。</p><p>由于可以设置中文，只讲一点点。</p><p>菜单栏的 Tools/Options/General，右边的Language，下拉列表，选择中文（简体）。</p><p>Alt + ？打开对应的菜单栏：</p><hr><p>F：文件 E：编辑 V：视图 G：跳转 B：笔记笔记本 N：笔记 T：工具H：帮助</p><hr><p>Ctrl + Q：退出。</p><h3 id="下载地址">1.6.1 下载地址</h3><p>官网：https://joplinapp.org</p><p>github下载地址：https://github.com/laurent22/joplin/releases</p><p>往下翻，选择一个版本，点击 Assets 选择 exe 文件下载。</p><h3 id="常用设置">1.6.2 常用设置</h3><p><strong>导入 md 文件</strong></p><p>文件/导入，选择导入的是 Markdown文件还是目录。（不要选带文章前言的，导出时会自动在文章前面加标题、创建和修改日期、时间，即YAML Front matter）</p><p><strong>把文件同步到本地</strong></p><p>工具/选项，同步，同步目标设为 Filesystem，设置同步目录。（当然你也可以花钱存云）</p><p><strong>给同步目标上的备份文件加密</strong></p><p>工具/选项，加密，启动加密；这样的话，如果把同步文件上传到云端，也不怕别人偷看。</p><hr><p>如果删除了同步目标的文件，为了安全（故障保护默认开启），不会删除本地文件。</p><p>如果删除了本地文件，同步时间一到，同步目标的文件也会被删除。可以趁着这时间差，从同步目标导入数据到本地。</p><p>同步/显示高级选项，自己重新上传数据到同步目标或删除本地数据并从同步目标导入数据</p><hr><p>如果两个终端数据不一样（同时修改一个文件，为不同内容），会把冲突的文件移到新创建的"冲突"笔记本中，等你处理。</p><p><strong>使用外部 md 编辑器</strong></p><p>使用自己的 Markdown编辑器：工具/选项/通用选项，右边的文本编辑器命令，选一个能够打开 md文件的 exe 命令，如 Typora.exe。（你还记得此软件的安装目录吗？）</p><p>在 Joplin 上任意选一个笔记，按下 Ctrl +E，自动转用外部编辑器编写文件。</p><p><strong>自定义笔记本图标</strong></p><p>笔记本右击/编辑，图标/Select emoji，选一个表情。</p><p><strong>网页剪藏器</strong></p><p>知识太多了，短时间内是看不完的，如果收藏，也有链接失效的风险，需要将文章内容复制下来。</p><p>工具：Chrome 浏览器。</p><p>由于插件市场打不开，点击：https://www.extfans.com/</p><p>搜索 Joplin WebClipper，需要关注公众号，获取验证码后下载。下载后解压，里面有个 crx文件，打开谷歌浏览器，地址栏输入：chrome://extensions/</p><p>把 crx 文件直接拖入此页面，添加扩展程序</p><figure><img src="https://s2.loli.net/2022/04/09/MwmN2VxK58cqhYL.png" alt="扩展程序"><figcaption aria-hidden="true">扩展程序</figcaption></figure><p>Joplin 软件，工具/选项，网页剪辑器，启动网页剪辑器。</p><p>使用：</p><figure><img src="https://s2.loli.net/2022/04/09/xqWK95JUHmfcnpX.png" alt="网页剪藏"><figcaption aria-hidden="true">网页剪藏</figcaption></figure><p>Clip simplified page：简化后的页面</p><p>Clip complete page：完整页面</p><p>In notebook：保存在哪个笔记本</p><p>Title：文件名</p><p><strong>同步到手机</strong></p><p>真厉害啊！</p><p>把自己电脑当作服务器，同步到手机，教程：https://lightzhan.xyz/index.php/2020/11/15/joplin-webdav/</p><p>作者：lightzhan，密码：h3mu，WebDAV小秘：https://lightzhan.lanzoui.com/b015wjsri</p><figure><img src="https://s2.loli.net/2022/04/09/iAvsBPugMqKSHLQ.png" alt="WebDAV 小秘"><figcaption aria-hidden="true">WebDAV 小秘</figcaption></figure><p>打开 DOS 窗口，输入 ipconfig 命令，IPv4地址对应的就是主机地址；用户名与密码自己设置。</p><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">无线局域网适配器 WLAN<span class="token punctuation">:</span>   连接特定的 DNS 后缀 . . . . . . . <span class="token punctuation">:</span>   本地链接 IPv6 地址. . . . . . . . <span class="token punctuation">:</span> fe10<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">209</span>   IPv4 地址 . . . . . . . . . . . . <span class="token punctuation">:</span> <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.1</span>   子网掩码  . . . . . . . . . . . . <span class="token punctuation">:</span> <span class="token number">289.2</span><span class="token number">.52</span><span class="token number">.2</span>   默认网关. . . . . . . . . . . . . <span class="token punctuation">:</span> fu81<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">22</span>l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>手机上自己搜索 Joplin app吧，因为谷歌你们可能访问不了，我总不能把如何翻墙写在这吧。</p><figure><img src="https://s2.loli.net/2022/04/09/TAvnR3yqb47tdPm.png" alt="手机同步配置"><figcaption aria-hidden="true">手机同步配置</figcaption></figure><figure><img src="https://s2.loli.net/2022/04/09/sInLw32WZVMJGi1.png" alt="输入 URL"><figcaption aria-hidden="true">输入 URL</figcaption></figure><p>WebDAV URL：http://主机地址:端口号</p><p>填入自己电脑上设置的用户名与密码，然后检查同步配置，如果显示“成功！同步配置看起来没问题。”就OK。</p><p>如果成功后依然没有开始同步，一直转圈，退出软件重新进入。</p><p><strong>其他人的使用心得</strong></p><p>其他人的 Joplin 软件使用心得：https://www.zhihu.com/question/436251626/answer/1909305492</p><p>https://segmentfault.com/a/1190000038918737</p><p>打开扩展语法，在工具/选项/Markdown，根据需要勾选，详细请看：https://lightzhan.xyz/index.php/2020/03/31/joplin-extension-usage/</p><p>如勾选启用 typographer支持，让我试下：使用<code>(c)</code>，©著作权所有人</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.1 JDK 下载及准备工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.1.y 脑海练习</title>
      <link href="/2022/04/29/1.1.1-jdk-xia-zai-ji-zhun-bei-gong-zuo/1.1.1.y-nao-hai-lian-xi/"/>
      <url>/2022/04/29/1.1.1-jdk-xia-zai-ji-zhun-bei-gong-zuo/1.1.1.y-nao-hai-lian-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="y-脑海练习">1.y 脑海练习</h2><p>1.1 JDK 和 JRE 的区别？</p><p>1.2 什么是编程？</p><p>1.3 Swing 组件是什么？</p><p>1.4 JAR 包是什么？</p><p>1.5 软件与程序指的是什么？</p><p>1.6 什么是编译型语言和解释型语言？</p><p>1.7 Java 语言特性？</p><p>1.8 能说下 JavaSE、JavaEE、JavaME 吗？</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.1 JDK 下载及准备工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.2.1 编写源代码并运行</title>
      <link href="/2022/04/29/1.1.2-bian-xie-di-yi-ge-cheng-xu/1.1.2.1-bian-xie-yuan-dai-ma-bing-yun-xing/"/>
      <url>/2022/04/29/1.1.2-bian-xie-di-yi-ge-cheng-xu/1.1.2.1-bian-xie-yuan-dai-ma-bing-yun-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="编写源代码并运行">2.1 编写源代码并运行</h2><p>内容导视：</p><ul><li>创建 .java 文件编写源码</li><li>配置环境变量</li><li>查看命令使用帮助</li><li>解释代码含义</li><li>编译与运行</li></ul><h3 id="创建-.java-文件编写源码">2.1.1 创建 .java 文件编写源码</h3><p>我们要开始写源代码啦！但只是在 DOS 窗口中输出一句话而已...</p><p>创建以 .java 结尾的文件，如Hello.java。（以后统称为后缀或扩展名，打开文件资源管理器，查看，勾上文件扩展名）文件右击选择打开一种打开方式。（EditPlus或其他文本编辑器，找不到选择其它应用，然后选中“始终使用此应用打开此类型的文件”复选框）这样你以后双击.java 文件就可以直接使用此软件打开啦。</p><p>双击此文件，输入如下。还是直接复制、粘贴吧，记得保存。（Ctrl +S）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开 DOS 窗口，使用 <mark>cd 命令切换到此文件的所在目录</mark>。</p><p>（如果你在桌面上创建的文件，路径是<code>C:\Users\自己的用户名\Desktop</code>，你可以自己打开文件资源管理器，点击左边的桌面图标，在地址栏上输入cmd 后回车）</p><figure><img src="https://s2.loli.net/2022/03/22/WHQ2T35axDCckqX.png" alt="最方便的一种方法"><figcaption aria-hidden="true">最方便的一种方法</figcaption></figure><p>在 DOS 窗口中输入<code>javac Hello.java</code>，得到如下诡异的结果。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">'javac' 不是内部或外部命令，也不是可运行的程序或批处理文件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>你可能会疑惑？怎么没有找到这个命令，不是在 JDK 的安装路径/bin目录下有 <code>javac.exe</code> 命令吗？你说找不到？那为什么之前 DOS窗口查看 IP 时，也就是 <code>C:\Windows\System32</code> 下的<code>ipconfig</code> 命令就可以执行？</p><p>此电脑右键/属性/高级系统设置/环境变量/系统变量/Path 下看到了<code>%SystemRoot%\system32</code>，即<code>C:\Windows\System32</code>。</p><p>(如果桌面上没有此电脑图标)</p><ul><li>打开文件资源管理器，此电脑的图标在左边。</li><li>或者<code>Windows + i</code>打开设置，点击系统/关于，往下翻，相关设置/高级系统设置。</li><li>右键/个性化/主题/桌面图标设置，勾选计算机图标后点击应用和确定。</li></ul><p>猜想：难道系统只会在 Path指定的路径下寻找命令吗？我随手就删了它（别试，否则手动还原），确定保存刚刚的修改操作，重新打开DOS 窗口，再次执行 <code>ipconfig</code>，很明白了。</p><figure><img src="https://s2.loli.net/2022/04/23/OB7RyUQclzf8LSe.png" alt="ipconfig"><figcaption aria-hidden="true">ipconfig</figcaption></figure><p>得出结论：执行的程序<mark>如果在当前目录下不存在，系统会在名为 Path的环境变量指定的目录下查找</mark>。</p><p>好的，大概明白了，但我的电脑上有多个用户，那么为了不影响其他用户，我只配置用户变量的Path，优先级当然没有系统变量的高。（系统变量针对所有用户生效）</p><h3 id="配置环境变量">2.1.2 配置环境变量</h3><p>上节知道了 Path 变量的作用，现在该把命令地址添加到 Path 中了。</p><p>双击 Path，添加 javac 命令所在路径。（如果你还记得 JDK安装的位置，打开 bin 目录，复制地址栏上的地址）</p><figure><img src="https://s2.loli.net/2022/04/23/DIAuLwFzJY8pcyb.png" alt="Path"><figcaption aria-hidden="true">Path</figcaption></figure><p>如果这个 JDK安装目录，以后会重复使用（不用怀疑，肯定了）。为了方便，新建变量<code>JAVA_HOME</code> 保存 JDK 安装目录，供其它地方使用。</p><figure><img src="https://s2.loli.net/2022/04/23/aNjyxB49z12h6tO.png" alt="JAVA_HOME"><figcaption aria-hidden="true">JAVA_HOME</figcaption></figure><p>再把之前的 javac 命令所在路径替换成<code>%JAVA_HOME%\bin</code>。</p><figure><img src="https://s2.loli.net/2022/04/23/O1Y5IBdgSak4hD3.png" alt="Windows 10 下的变量"><figcaption aria-hidden="true">Windows 10 下的变量</figcaption></figure><p><code>%JAVA_HOME%</code> 代表变量 <code>JAVA_HOME</code>对应的值。以后 JavaEE、开发工具需要获取 JDK的安装目录，这样就不需要再手动设置了。</p><p>有的人可能版本较老，Path变量值在一行文本框上显示。那么添加路径时，注意<mark>路径与路径之前使用;分隔</mark>，注意这个分号是<mark>英文状态下</mark>的半角符号，你按下Shift，看看电脑右下角是否中英在切换。写成<code>；</code>就错了。以后如果不说明，统一使用英文状态下的符号。</p><p>例：<img src="https://s2.loli.net/2022/04/23/N1JWtzUi2RvqPjF.png" alt="老版本下的变量"></p><p>检查自己是否配置好了：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">打开 DOS 窗口，输入 java -version 和 javac 等命令如果显示版本信息，证明 java.exe 是可以用的再输入 echo %Path%查看刚刚配置的 JDK的家\bin 路径是否在其中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有的人可能有疑惑，明明自己没配环境变量，为什么 java.exe可以使用？</p><p>答：使用 exe 文件安装 JDK 后，会自动在系统变量 Path添加如下图路径：</p><p><code>C:\Program Files (x86)\Common Files\Oracle\Java\javapath</code></p><figure><img src="https://s2.loli.net/2022/04/23/dpQgis9RYVoCNqb.png" alt="其它的 java.exe"><figcaption aria-hidden="true">其它的 java.exe</figcaption></figure><p>所以没有手动配置环境变量时，java 命令可以用，但 javac 不行。</p><p><mark>每次改动，都需要重新打开 DOS 窗口，配置才能生效</mark>。输入<code>javac Hello.java</code>，如果你的语法正确，就会在当前路径下生成class（字节码）文件，再输入 <code>java Hello</code> ，此时别带后缀。</p><figure><img src="https://s2.loli.net/2022/04/23/R4OVLAEptcxUvik.png" alt="编译与运行"><figcaption aria-hidden="true">编译与运行</figcaption></figure><p>有人就说了，每次运行 class 文件，都要使用 cd命令进入此目录，再执行命令很麻烦。那么可以通过 classpath变量指定字节码文件所在位置。</p><p>新建环境变量 classpath：</p><figure><img src="https://s2.loli.net/2022/04/23/KYDAIMvPCJQrmpn.png" alt="classpath"><figcaption aria-hidden="true">classpath</figcaption></figure><p>.是英文输入的句号，代表<mark>当前路径</mark>，如果不写就不会从当前路径寻找class 文件。 由于我习惯把 class文件放在桌面上，于是新增了桌面的路径，路径和路径直接使用;分隔，<mark>别使用中文的分号</mark>。</p><p>这样不管在任何地方，输入 <code>java Hello</code> 就可以执行了。</p><p><strong>总结</strong></p><p><strong>Path 是 Windows 查找 .exe 文件的路径；classpath 是 JVM 查找.class 文件的路径</strong>；如果你以后学会了如何打 jar包，假如它的绝对路径为 <code>E:\a\c\d\Tool.jar</code>，如果想任何位置敲<code>java -jar Tool.jar</code> 让 jar 包执行，就可以把<code>E:\a\c\d\Tool.jar</code> 加到 classpath 变量值里。</p><h3 id="查看命令使用帮助">2.1.3 查看命令使用帮助</h3><p>也许你总是会忘记，此命令应该携带什么参数...</p><p><code>想要执行的命令 -help</code>，例举了可加的参数，如-encoding。（对不起，我要给你埋坑了，如果你事先不知道此参数的作用...）</p><p>如 <code>javadoc -help</code>、<code>javac -help</code>。（其实不加-help 也行)</p><p>看，这不就出来了：</p><figure><img src="https://s2.loli.net/2022/03/22/KnFd5U6Jv9R7TzS.png" alt="命令使用帮助"><figcaption aria-hidden="true">命令使用帮助</figcaption></figure><h3 id="解释代码含义">2.1.4 解释代码含义</h3><p>看不懂很正常，学完面向对象就懂了。突然遇到看不懂的不要怀疑自己智力有问题，只是还没到这步而已，大不了直接跳过。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token comment">// args 是变量名，可以根据标识符的命名规则取名</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从头开始说吧。</p><ul><li>关键字 public是访问修饰符，表明该类是一个公共类，可以控制其他对象对类成员的访问。</li><li>关键字 class 用于声明一个类，其后所跟的 Hello 是类名。</li><li>Hello 后跟的 {} 称为类体，包含了方法、字段...</li><li><code>public static void main(String[] args) {}</code>：这个是 main方法，由于被 JVM 调用，也被称为主方法、入口方法。所有 java代码都是最先从入口方法开始执行的。<ul><li>main 后的 {} 称为方法体，包含了 java 语句。</li><li>关键字 static表示该方法是一个静态方法，无须创建类的实例即可调用。</li><li>关键字 void 表示此方法没有返回值。</li><li>void 后面的是方法名 main。</li><li>main 后的括号包含一个形式参数，这个形参是 String类型的数组，参数名是 args。</li><li><code>System.out.println("");</code> 是 java语句，代表打印（输出）括号中的内容到控制台（DOS 窗口）。</li><li>"hello world!" 是一个字符串。</li><li>; 代表一条 java 语句的结束。</li></ul></li></ul><h3 id="编译与运行">2.1.5 编译与运行</h3><p>（字节码文件是 class 文件，由源代码中定义的 class 生成）</p><p>过程如下：</p><p>首先新建后缀为 java 的文件，编写出符合语法规则的代码。</p><p>编译：经过 <code>javac 源文件名.java</code>命令编译生成字节码文件；</p><p>运行：使用 <code>java 类名</code>命令在 JVM虚拟机上运行此字节码文件，JVM 会调用此类的 main 方法。</p><p>（补充：因为一个源文件可以定义多个类，编译后生成多个 class 文件，所以java 命令后面跟的不一定是源文件名）</p><figure><img src="https://s2.loli.net/2022/04/23/mTSKFjtJogrA2yX.png" alt="编译"><figcaption aria-hidden="true">编译</figcaption></figure><p><strong>编译</strong></p><p>.java 文件是 java的源文件，但是<strong>不能直接运行</strong>，必须先被编译成为 .class文件才能够执行。别问，问就是电脑太笨，看不懂。</p><p>class 文件也称为字节码文件，上面的 <code>javac 源文件名.java</code>就是编译的过程。</p><p>编译期将源码交给编译器，编译成可以被 JVM识别的字节码，如果源代码不符合语法规则，就会报错（错误提示很智能，可以根据报错信息相应找到原因，自己试试比如删除一个大括号、引号等，看看javac 命令给你报什么错）</p><p><strong>运行</strong></p><p>（当源文件修改后，<mark>必须重新编译</mark>才能生效）</p><p>编译后生成 class 字节码文件，使用 <code>java class文件名</code>运行，别加 .class 后缀。</p><p>运行期类加载器（Class Loader）找字节码文件（如果没有配classpath，默认从当前路径下找），找到了就<mark>加载字节码文件到 JVM虚拟机</mark>，JVM启动解释器对字节码文件进行解释，生成的二进制码读到内存中，由操作系统进行二进制码的执行。</p><p><mark>字节码文件是一种和任何具体机器环境及操作系统环境无关的中间代码</mark>，编程人员和计算机都无法直接读懂字节码文件。它是一种二进制文件，是Java 源文件由 Java 编译器编译后生成的目标代码文件。它必须由专用的 Java解释器来解释执行，因此 Java是一种在<mark>编译基础上进行解释运行</mark>的语言。</p><p>C 语言中文网下的解释，我觉得还行吧。我没玩过 C语言，说什么就先听着，之后再忘掉就 OK 了。</p><hr><p>1）<strong>将所有源代码一次性转换成二进制指令</strong>（也就是生成一个可执行程序，如Windows 下的 .exe） 的转换工具称为<strong>编译器</strong>。</p><p>比如 C 语言、C++ 的 GCC、Golang 的 GCC GO等，源代码改动需要重新编译一次。</p><p>2）翻译一句，执行一句，不会生成可执行程序。 比如 Python 的 CPython等，这种的转换工具称为解释器。</p><p>3）Java 和 C# 是一种比较特殊的存在。 如 java 有编译器javac，但编译后的 class 文件计算机无法执行，还需要 java解释器进行翻译。</p><p>它们的源代码需要先转换成一种中间文件（字节码文件），然后再将中间文件拿到虚拟机中执行。Java 引领了这种风潮，它的初衷是在跨平台的同时兼顾执行效率；</p><p>C# 是后来的跟随者，但是 C# 一直止步于 Windows平台，在其它平台鲜有作为。</p><hr><p><mark>Java解释器负责将字节码文件翻译成具体硬件环境和操作系统平台下的机器代码</mark>，以便执行。因此Java 程序不能直接运行在现有的操作系统平台上，它必须运行在被称为 Java虚拟机的软件平台之上。</p><p><mark>Java 虚拟机（JVM）是运行 Java 程序的软件环境，Java 解释器是Java 虚拟机的一部分</mark>。在运行 Java 程序时，首先会启动JVM，然后由它来负责解释执行 Java 的字节码程序，并且 Java字节码程序只能运行于 JVM 之上。这样利用 JVM 就可以把 Java字节码程序和具体的硬件平台以及操作系统环境分隔开来，只要在不同的计算机上安装了针对特定平台的JVM，Java程序就可以运行，而不用考虑当前具体的硬件平台及操作系统环境，也不用考虑字节码文件是在何种平台上生成的。</p><p>JVM把这种不同软、硬件平台的具体差别隐藏起来，从而实现了真正的二进制代码级的跨平台移植。<mark>JVM是 Java 平台架构的基础，Java 的跨平台特性正是通过在 JVM 中运行 Java程序实现的。</mark></p><p>Java语言这种“一次编写，到处运行”的方式，有效地解决了目前大多数高级程序设计语言需要针对不同系统来编译产生不同机器代码的问题，即硬件环境和操作平台的异构问题，大大降低了程序开发、维护和管理的开销。</p><p>提示：Java 程序通过 JVM 可以实现跨平台特性，但 JVM是不跨平台的。也就是说，<mark>不同操作系统之上的 JVM是不同的</mark>，Windows 平台之上的 JVM 不能用在 Linux平台，反之亦然。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.2 编写第一个程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.2.2 代码书写规范</title>
      <link href="/2022/04/29/1.1.2-bian-xie-di-yi-ge-cheng-xu/1.1.2.2-dai-ma-shu-xie-gui-fan/"/>
      <url>/2022/04/29/1.1.2-bian-xie-di-yi-ge-cheng-xu/1.1.2.2-dai-ma-shu-xie-gui-fan/</url>
      
        <content type="html"><![CDATA[<h2 id="代码书写规范">2.2 代码书写规范</h2><p>内容导视：</p><ul><li><p>代码细节</p></li><li><p>代码规范</p></li><li><p>标识符与关键字</p></li></ul><h3 id="代码书写细节">2.2.1 代码书写细节</h3><p>看不懂没关系，只挑能理解的。</p><p>1）<mark>字母严格区分大小写，如 class 不等于 Class。</mark></p><p>2）在 java 中任何有效的代码必须写在“类体”中，就是 public class Hello后的一对大括号 {} 中。</p><p>3）大括号必须要成对写，防止漏掉。</p><p>4）为了增加代码的可读性，大括号里的内容需要使用 tab 缩进，如 main方法就比 class Hello 低一个层次。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token comment">// 被 {} 包裹的部分选中，按下 tab</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 被 {} 包裹的部分选中，按下 tab</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 同理</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"为何"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）main 后的 {} 包裹的内容称为方法体，由一行行的 java语句构成，<mark>任何一条 java语句必须以分号结尾</mark>;。若无特别说明，默认为英文状态下的符号。</p><p>6）方法体中代码遵循<strong>自上而下</strong>的顺序依次逐行执行，不可随意颠倒顺序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行到这句时，还没有 i 变量</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>7）一个 java 源文件可以定义多个类。编译后，每一个类对应一个 class文件，如以下编译后会生成 A.class、B.class、C.class 三个字节码文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8）有 public 修饰的类可以没有，但如果有，<mark>被 public修饰的类名必须与源文件名一致</mark>。 例：源文件名为 Hello，则 publicclass 后的类名也应该为 Hello。</p><p>9）被 public修饰的类如果有，则最多只能有一个。类似一个家只有一个主人吧。</p><p>10）运行时，只会调用对应类的入口方法里面的内容，入口方法有固定的书写格式：</p><p><code>public static void main(String[] args) {}</code></p><p>那我偏不信邪，改下，再运行。</p><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">E<span class="token punctuation">:</span>\cqh_demo\<span class="token number">01</span><span class="token operator">-</span>JavaSE<span class="token operator">&gt;</span>java A错误<span class="token punctuation">:</span> 在类 A 中找不到 main 方法<span class="token punctuation">,</span> 请将 main 方法定义为<span class="token punctuation">:</span>   public <span class="token keyword">static</span> void main<span class="token punctuation">(</span><span class="token keyword">String</span>[] args<span class="token punctuation">)</span>否则 JavaFX 应用程序类必须扩展javafx.application.Application<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>好吧，再改回去了。</p><h3 id="代码规范">2.2.2 代码规范</h3><p>规范与规则不一样，不是必须遵守。但是如果你不遵守，代码可读性会很差。反例如下，虽然可以通过编译，但你看起来感觉如何？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span><span class="token class-name">Hello</span><span class="token punctuation">{</span><span class="token keyword">public</span>    <span class="token keyword">static</span><span class="token keyword">void</span>    main    <span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>       out<span class="token punctuation">.</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span>       <span class="token punctuation">;</span>     <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span>        <span class="token punctuation">;</span>    <span class="token keyword">if</span>                    <span class="token punctuation">(</span>i<span class="token operator">&gt;</span>                     <span class="token number">1</span><span class="token operator">&amp;&amp;</span>i                     <span class="token operator">&lt;</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1）类和方法上的注释，以 javadoc 的方式，方便生成文档注释。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 这个注释下节有讲，现在只是测试     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）非 javadoc注释，用于给代码的维护者和读者看。（为什么这么写，如何修改，注意事项）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 这就是注释，解释下面是将 10 赋给了 int 类型的变量 i；</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3）运算符如 &lt;、= 的两边使用空格与字符隔开，举出正反例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">20</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">&gt;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）代码编写使用次行风格或行尾风格。你可以理解为这就是对整齐风格的一种追求吧。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 行尾风格</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">333</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 次行风格</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span>    <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">333</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="标识符与关键字">2.2.3 标识符与关键字</h3><p>声明：由于每次使用 import、带上完整类、main方法比较繁琐。于是进行了简化，只提供关键部分，外面的类、方法等其它代码以后自己加吧，别直接复制代码，发现怎么跑不起来啊？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><mark>凡是程序员有权利命名的单词都是标识符</mark>。</p><p>比如：类名、方法名、参数名、变量名、接口名、常量名。（这些是什么，以后就知道了，现在只是看看）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// add 是方法名有权利命名</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// n 是变量名</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> num1<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以试试哪里可以修改，比如修改 public、int等单词，是否会报错。你就明白，你可以动的地方有哪些。可以动而不报错的那些单词就是标识符，不可以动的就是关键字。</p><hr><p>切换到英文输入，输出下划线、美元符号。</p><p>_：Shift 加 -</p><p>$：Shift + 4</p><hr><p><strong>命名规则</strong></p><ul><li>标识符只能由数字、字母、_、$ 组成。(标识符中不能有空格)</li><li>标识符不能以数字开头。</li><li>关键字和保留字不能做标识符。</li><li>标识符<mark>严格区分大小写</mark>，理论上没有长度限制。（如 Public与 public 不一样）</li></ul><p><strong>命名规范</strong></p><p>A）见名知意，如 day 代表天数。</p><p>1）别用拼音与英语混合，那样很难理解。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">反例：tianKongBlue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）杜绝完全不规范的英文缩写，避免望文不知义。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">反例：AbstractClass “缩写”成 AbsClass；condition “缩写”成 condi；Function “缩写”成 Fu；此类随意缩写严重降低了代码的可阅读性。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>B）驼峰命名，多个单词连在一起时，单词首字母大写，增加识别和可读性，下面是阿里巴巴开发手册（黄山版）详细：</p><p>1）<strong>类名使用 UpperCamelCase风格</strong>（首字母大写，后面每个单词首字母大写），以下情形例外：DO /PO / DTO / BO / VO / UID 等。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">正例：ForceCode / UserDO / HtmlDTO / XmlService / TcpUdpDeal / TaPromotion反例：forcecode / UserDo / HTMLDto / XMLService / TCPUDPDeal / TAPromotion<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2）<strong>方法名、参数名、成员变量、局部变量都统一使用lowerCamelCase 风格</strong>（首字母小写，后面每个单词首字母大写）。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">正例：localValue / getHttpMessage() / inputUserId<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>C）其它命名风格</p><p>1）常量名全部大写，单词间用_连接，力求语义表达完整，不要嫌名字长。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">正例：MAX_STOCK_COUNT / CACHE_EXPIRED_TIME反例：MAX_COUNT / EXPIRED_TIME<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>枚举成员实际上也是常量，名称需要全大写，单词间用_连接。</p></blockquote><p>2）抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception结尾；测试类命名以它要测试的类的名称开始，以 Test 结尾；枚举类名带上Enum 后缀。</p><p>3）接口和实现类的命名有两套规则：</p><ul><li><p>对于 Service 和 DAO 类，基于 SOA的理念，暴露出来的服务一定是接口，内部的实现类用 Impl的后缀与接口区别。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">正例：<span class="token class-name">CacheServiceImpl</span> 实现 <span class="token class-name">CacheService</span> 接口。 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果是形容能力的接口名称，取对应的形容词为接口名（通常是 –able结尾的形容词）。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">正例：AbstractTranslator 实现 Translatable 接口。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>4）在常量与变量命名时，表示类型的名词放在词尾，以提升辨识度。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">正例：startTime / workQueue / nameList / TERMINATED_THREAD_COUNT反例：startedAt / QueueOfWork / listName / COUNT_TERMINATED_THREAD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5）如果模块、接口、类、方法使用了设计模式，在命名时要体现出具体模式。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">正例： public class OrderFactory;public class LoginProxy;public class ResourceObserver;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。</p></blockquote><p>6）各层命名规约：</p><p>​ a）Service / DAO 层方法命名规约：</p><p>​ ① 获取单个对象的方法用 get 做前缀。</p><p>​ ② 获取多个对象的方法用 list 做前缀，复数结尾，如：listObjects</p><p>​ ③ 获取统计值的方法用 count 做前缀。</p><p>​ ④ 插入的方法用 save / insert 做前缀。</p><p>​ ⑤ 删除的方法用 remove / delete 做前缀。</p><p>​ ⑥ 修改的方法用 update 做前缀。</p><p>​ b）领域模型命名规约：</p><p>​ ① 数据对象：xxxDO，xxx 即为数据表名。</p><p>​ ② 数据传输对象：xxxDTO，xxx 为业务领域相关的名称。</p><p>​ ③ 展示对象：xxxVO，xxx 一般为网页名称。</p><p>​ ④ POJO 是 DO / DTO / BO / VO 的统称，禁止命名成 xxxPOJO。</p><p>7）POJO 类中定义的布尔类型的变量，不要加 is前缀，否则部分框架解析会引起序列化错误。</p><p>备注：POJO（Plain Ordinary Java Object）：普通的 Java 对象。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">反例：定义为基本数据类型 Boolean isDeleted 的属性，它的方法也是 isDeleted()。框架在反向解析时，“误以为”对应的属性名称是 deleted，导致属性获取不到，进而抛出异常。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>说明：本文 MySQL 规约中的建表约定第 1 条，表达是与否的变量采用 is_xxx的命名方式， 所以需要在<resultmap>设置从 is_xxx 到 xxx 的映射关系。</resultmap></p></blockquote><p>8）包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">正例：应用工具类包名为 com.alibaba.ei.kunlun.aap.util；类名为 MessageUtils（此规则参考 Spring 的框架结构）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>9）数组类型应与 [] 紧挨，以免看漏，认为是基本数据类型或 String类型。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">正例：定义整形数组 int[] arrayDemo。反例：在 main 参数中，使用 String args[] 来定义。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>10）避免在子父类的成员变量之间、或者不同代码块的局部变量之间采用完全相同的命名，使可理解性降低。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 反例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfusingName</span> <span class="token punctuation">{</span>     <span class="token keyword">protected</span> <span class="token keyword">int</span> stock<span class="token punctuation">;</span>     <span class="token keyword">protected</span> <span class="token class-name">String</span> alibaba<span class="token punctuation">;</span>    <span class="token comment">// 非 setter/getter 的参数名称，不允许与本类成员变量同名</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">access</span><span class="token punctuation">(</span><span class="token class-name">String</span> alibaba<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>            <span class="token comment">// ...</span>        <span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 在同一方法体中，不允许与其它代码块中的 money 命名相同</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token number">15978</span><span class="token punctuation">;</span>            <span class="token comment">// ...</span>        <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">ConfusingName</span> <span class="token punctuation">{</span>    <span class="token comment">// 不允许与父类的成员变量名称相同</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> stock<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说明：子类、父类成员变量名相同，即使是 public也是能够通过编译，而局部变量在同一方法内的不同代码块中同名也是合法的，但是要避免使用。对于非setter / getter 的参数名称也要避免与成员变量名称相同。</p></blockquote><p><strong>关键字</strong></p><p>Java 关键字是对 Java编译器有特殊含义的字符串，是编译器和程序员的一个约定，程序员利用关键字来告诉编译器其声明的变量类型、类、方法特性等信息。</p><p>关键字一律用小写字母标识，按其用途划分为如下几组。</p><p>1）用于数据类型的关键字有：</p><p>boolean、byte、char、 double、false、float、int、long、new、short、true、void、instanceof。</p><p>2）用于语句的关键字有：</p><p>break、case、 catch、 continue、 default 、do、else、 for、if、return、switch、try、 while、finally、 throw、this、 super。</p><p>3）用于修饰的关键字有：</p><p>abstract、final、native、private、protected、public、static、synchronized、transient、volatile。</p><p>4）用于方法、类、接口、包和异常的关键字有：</p><p>class、 extends、 implements、interface、package、import、throws。</p><p>5）保留字：</p><p>cat、 future、 generic、inner、 operator、outer、rest、var、goto、byValue、cast、const等都是Java尚未使用，但以后可能会作为关键字使用。</p><p>另外，Java还有3个保留字：true、false、null。它们不是关键字，而是文字，包含 Java定义的值。和关键字一样，它们也不可以作为标识符使用。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.2 编写第一个程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.1.2 JDK 下载</title>
      <link href="/2022/04/29/1.1.1-jdk-xia-zai-ji-zhun-bei-gong-zuo/1.1.1.2-jdk-xia-zai/"/>
      <url>/2022/04/29/1.1.1-jdk-xia-zai-ji-zhun-bei-gong-zuo/1.1.1.2-jdk-xia-zai/</url>
      
        <content type="html"><![CDATA[<h2 id="jdk-下载">1.2 JDK 下载</h2><p>内容导视：</p><ul><li>JDK 与 JRE 的区别</li><li>JDK 下载与安装</li><li>如何卸载</li><li>如何禁止 JDK 检查更新</li></ul><p>即使编写了 Java 源代码，系统也无法直接执行，需要 JDK 提供编译和运行Java 程序的环境，将代码解释为系统可识别的机器码。</p><h3 id="jdk-与-jre-的区别">1.2.1 JDK 与 JRE 的区别</h3><p><strong>JRE（Java Runtime Enviroment）</strong>：是 <mark>Java的运行环境</mark>。面向 Java 程序的使用者，而不是开发者。</p><p>如果你仅下载并安装了 JRE，那么你的系统只能运行 Java 程序。JRE 是运行Java 程序所必需环境的集合。它包括 JVM（虚拟机）、Java 平台核心类库（如rt.jar）和支持文件。它不包含开发工具（编译器、调试器等）。</p><p><strong>JVM（Java Virtual Machine）</strong>：Java 虚拟机。是整个Java 实现跨平台的最核心的部分，能够<mark>运行以 Java语言编写的程序。</mark>其中的虚拟机屏蔽了底层运行平台的差别。</p><p><strong>JDK（Java Development Kit）</strong>：是 <mark>Java开发工具包</mark>，它提供了 Java 的开发环境（提供了编译器 javac.exe等工具，用于将 java 文件编译为 class 文件）和运行环境（提供了 JVM 和rt.jar 即 Runtime 辅助包，用于解析 class 文件使其得到运行）。</p><p>如果你下载并安装了 JDK，那么你不仅可以开发 Java程序，也同时拥有了运行 Java 程序的平台。JDK 是整个 Java 的核心，包括了JRE 和 开发工具 jar 包，如 tools.jar。</p><p><strong>核心类库</strong>：主要是开发经常使用的类库，避免重复造轮子。如java.lang 下的 String、包装类等，已经被编译成了 .class文件，需要时直接拿来用，不用自己重新写一份。</p><p>JDK &gt; JRE &gt; JVM</p><p>如果你只是想运行 Java 程序，就只安装 JRE 即可。</p><h3 id="jdk-下载与安装">1.2.2 JDK 下载与安装</h3><p>JDK 下载地址：https://www.oracle.com/java/technologies/downloads/</p><p>有 JDK7、8、11，通常使用的是JDK8、11，因为它们是长期支持版本，一般的版本支持半年就不再显示。此时的你点开链接，说不定已经看不到JDK7 了。</p><figure><img src="https://s2.loli.net/2022/04/23/K7NTIMrtV8BWzH3.png" alt="不同版本有效期"><figcaption aria-hidden="true">不同版本有效期</figcaption></figure><p>LTS 代表长期支持的版本。</p><p>Oracle产品支持的三个策略：https://blog.csdn.net/iteye_21199/article/details/82305640</p><p>版本的有效时间：https://www.oracle.com/java/technologies/java-se-support-roadmap.html</p><p>JDK8 扩展支持到 2030 年，Oracle将每三年指定一个版本作为长期支持版本。</p><p><strong>查看自己电脑位数</strong></p><p>x86 是 32 位，x64 是 64 位。</p><p>打开文件资源管理器，右键此电脑属性查看系统类型是 64 位操作系统，还是32 位。</p><figure><img src="https://s2.loli.net/2022/04/23/J3ISzFERXyb5VvC.png" alt="系统类型"><figcaption aria-hidden="true">系统类型</figcaption></figure><p><strong>根据自己的系统、位数决定下哪个</strong></p><p>比如我的电脑是 windows 系统 64 位，我使用的是 JDK8，按图选。</p><figure><img src="https://s2.loli.net/2022/04/23/X79MWrfsvpUch8z.png" alt="JDK 下载地址"><figcaption aria-hidden="true">JDK 下载地址</figcaption></figure><figure><img src="https://s2.loli.net/2022/04/23/TzBiRGEIlNbhM95.jpg" alt="下载地址"><figcaption aria-hidden="true">下载地址</figcaption></figure><figure><img src="https://s2.loli.net/2022/04/23/4CIU72Lga8RzqvV.jpg" alt="下载地址"><figcaption aria-hidden="true">下载地址</figcaption></figure><p><strong>特别说明</strong></p><p>需要自己创建账户，若不想可在网上搜索 JDK8下载，或下载最新版本，此时是 JDK16，下载 zip 和 exe格式的都行。我将网盘链接放在了资源地址这章中，需要自取。</p><p><strong>安装</strong></p><p>如果下载的是 exe文件，直接双击，指定安装目录，一直下一步，就安装成功了；</p><p><img src="https://s2.loli.net/2022/04/23/tLz2j7aeiVskHnh.png" alt="安装界面"> <img src="https://s2.loli.net/2022/04/23/yWNGatjRwbnL841.png" alt="更改安装目录"></p><p>（安装后我又卸了，使用了 zip，所以地址前后不一致）</p><p>是 zip解压即可，点击解压后的文件夹，地址栏上显示的就是安装目录，要看到 bin和其它目录，如图：</p><p>认为安装目录是 D:\cqh_environment\Java 就错了。</p><figure><img src="https://s2.loli.net/2022/04/23/aCdcgU6QxFvOIkD.png" alt="JDK 的 家"><figcaption aria-hidden="true">JDK 的 家</figcaption></figure><p><strong>记住 JDK 的安装目录，配置环境变量要用</strong></p><p>安装好后，看看目录：</p><p>bin 目录存放命令，如常用的javac.exe、java.exe，用于编译，运行程序。</p><p>lib 存放着 jar 包，如 dt.jar 是运行环境类库，存放了 Swing组件；tools.jar 是工具类库，用来编译与运行 java 文件。</p><p>src.zip 存放着 Java 源代码压缩文件。</p><p>rt.jar 在 jre\lib 中。</p><p><strong>解释</strong></p><p>我们编写源代码使用的文件后缀为 .java，这种 .java 文件经过编译生成.class 文件，多个.class 打包放在 .jar 包中。</p><h3 id="卸载">1.2.3 卸载</h3><p>呃，这只是教你如何卸载，并不是现在让你卸载...</p><p>打开控制面板/卸载程序，找到 Java。</p><p>或者打开 Windows设置/应用/应用和功能，单击要删除的软件，会弹出卸载字样。</p><p>如果你不知道如何打开它们，请用百度搜索，如<code>如何打开 Windows 设置</code>；其实由很多问题都已经得到回答，没必要重复造轮子。学会使用搜索，对自学很有帮助。</p><p>卸载成功后，所有目录名带 Java、Sun、Oracle 的一律删掉，如：</p><p>删除安装 JDK 的目录、删除<code>C:\Program Files (x86)\Common Files</code> 和<code>C:\Program Files</code> 下的的 Java 和 Oracle目录、<code>C:\Users\用户名\AppData\LocalLow</code> 下的 Oracle 和 Sun目录、<code>C:\Users\用户名\AppData\Roaming\Sun</code>。</p><h3 id="禁止-jdk-检查更新">1.2.4 禁止 JDK 检查更新</h3><p>这是可选项，不是必须要做的，因为我觉得时不时弹出来像牛皮癣一样挺烦。</p><p>打开控制面板/程序/Java，取消勾选自动检查更新，不检查；</p><p>高级/应用程序安装/从不安装。</p><figure><img src="https://s2.loli.net/2022/04/23/rETIMBW29xaFncL.png" alt="Java 控制面板"><figcaption aria-hidden="true">Java 控制面板</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> 1.1.1 JDK 下载及准备工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.1.4 Typora 软件简单使用</title>
      <link href="/2022/04/29/1.1.1-jdk-xia-zai-ji-zhun-bei-gong-zuo/1.1.1.4-typora-ruan-jian-jian-dan-shi-yong/"/>
      <url>/2022/04/29/1.1.1-jdk-xia-zai-ji-zhun-bei-gong-zuo/1.1.1.4-typora-ruan-jian-jian-dan-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="typora-软件使用">1.4 Typora 软件使用</h2><p>简洁、功能强大、实时预览的 md 编辑器。</p><h3 id="下载与安装">1.4.1 下载与安装</h3><p>下载地址：https://www.typora.io</p><p>往下翻，点击 Windows（我的是 Windows 系统 64 位），点击 DonwloadBeta（x64），就会自动下载；</p><figure><img src="https://s2.loli.net/2022/04/23/vgrTx8u7R2FOVUD.png" alt="Typora 下载"><figcaption aria-hidden="true">Typora 下载</figcaption></figure><figure><img src="https://s2.loli.net/2022/04/23/8UVisvOaqYZx9LT.png" alt="目前 Typora 网站已访问不了"><figcaption aria-hidden="true">目前 Typora 网站已访问不了</figcaption></figure><p>双击下载好的 .exe，</p><figure><img src="https://s2.loli.net/2022/04/23/wboODYk1vLh3tAd.png" alt="Typora 安装界面"><figcaption aria-hidden="true">Typora 安装界面</figcaption></figure><p>指定安装位置，</p><figure><img src="https://s2.loli.net/2022/04/23/BpMjPLrACKWfTkI.png" alt="让电脑上所有用户共享此应用"><figcaption aria-hidden="true">让电脑上所有用户共享此应用</figcaption></figure><p>下一步 next，</p><figure><img src="https://s2.loli.net/2022/04/23/T1LbQk3WpEg9OMK.png" alt="指定安装目录"><figcaption aria-hidden="true">指定安装目录</figcaption></figure><p>选中复选框代表创建桌面快捷方式。</p><h3 id="如何创建-markdown-文件">1.4.2 如何创建 Markdown 文件</h3><p>创建以 .md 结尾的文件，如test.md，鼠标右键新建/文本文档，双击打开发现怎么还是记事本？</p><figure><img src="https://s2.loli.net/2022/04/23/jCGgFhSmf9BOabP.png" alt="记事本"><figcaption aria-hidden="true">记事本</figcaption></figure><p>打开文件资源管理器，把文件扩展名和隐藏的项目打上对勾，就可以看到隐藏的后缀和文件夹如AppData；</p><figure><img src="https://s2.loli.net/2022/04/23/TfGSN18zxAJKLyl.png" alt="被隐藏的文件扩展名"><figcaption aria-hidden="true">被隐藏的文件扩展名</figcaption></figure><p>此时刚刚创建的文件显露真身，原来还是 txt 文件；右键重命名，把 .txt去掉，再双击点进去。</p><figure><img src="https://s2.loli.net/2022/04/23/MBOFWSqbRuc851T.png" alt="显示的文件扩展名 .txt"><figcaption aria-hidden="true">显示的文件扩展名 .txt</figcaption></figure><h3 id="常用的-markdown-语法">1.4.3 常用的 Markdown 语法</h3><p>此软件使用的是 Markdown语法，一种纯文本格式的轻量级标记语言。通过简单的标记语法,它可以使普通文本内容具有一定的格式。</p><p>md 语法的出现不是为了替代 html，而是更方便书写。如果让我写那么多的&lt;&gt;，不停思索如何嵌套，写一大堆长长的 css，我会疯掉的。</p><p>这款软件它可以你更加关注内容，而不是注意怎么摆弄格式。Word是边写边在上面的边栏调字体大小、颜色、格式，很不方便。</p><p>内容如下：</p><ul><li>字体格式：如标题、斜体、加粗</li><li>跳转链接：如超链接与图片</li><li>内容排列：如表格、有序无序列表、各种图表、分割线</li></ul><p><strong>标题</strong></p><p>一个 # + 空格，跟上标题内容即可。（Ctrl + 1是一级标题，以此类推）</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex"># 我是什么人## 我是第2种人<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一个 # 是一级标题，两个 # 是二级标题，依此类推，直到 6级标题。（越来越小）</p><p><strong>复选框</strong></p><p>一个减号 + 空格 + [ ] + 空格</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">- [ ] 锻炼<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul class="task-list"><li><input type="checkbox" disabled="">锻炼，可以点击就能打上对勾。</li></ul><p><strong>粗、斜、斜加粗等字体</strong></p><p>1、被两个星号包裹的字自动变粗（Ctrl + B）；</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">**我是粗**<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>我是粗</strong></p><p>2、被一个星号包裹的字是斜体（Ctrl + i）；</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">*我是斜*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>我是斜</em></p><p>3、被 3 个星号包裹的字是粗斜；</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">***粗斜体***<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><em>粗斜体</em></strong></p><p>4、Tab 上面有一个键，按住 Shift，再按住它，可以打出 ~。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">~~废弃~~<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><del>废弃</del></p><p><strong>引用</strong></p><p>大于号 + 空格 + 内容</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">&gt; 摘抄自大文豪张三的一句话<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>摘抄自大文豪张三的一句话</p></blockquote><p><strong>键盘风格</strong></p><p>被成对的 kbd 标签的内容。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">&lt;kbd&gt;ctrl&lt;/kbd&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><kbd>ctrl</kbd>+<kbd>c</kbd>是复制</p><p><strong>超链接和图片</strong></p><p>这些地址就是网址。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">![图片名](图片地址)[超链接名](超链接地址)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="http://www.baidu.com">百度</a>（右击打开链接或按住Ctrl，再单击此链接）</p><p><strong>表格</strong></p><p>Ctrl + T 快捷键创建表格，Ctrl + Enter 添加新行，Shift + Ctrl + Del删除一行。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">名称|性别|生日--|--|--赵三|男|1213.2.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr class="header"><th>名称</th><th>性别</th><th>生日</th></tr></thead><tbody><tr class="odd"><td>赵三</td><td>男</td><td>1213.2.1</td></tr></tbody></table><p><strong>代码</strong></p><p>单行使用 `，多行三个 `，指定代码语言：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">`单行代码````java多行代码``````javascript//实际写法var foo = 'bar';```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>单行代码</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">多行代码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//实际写法var foo = 'bar';</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>列表</strong></p><p>1、无序列表</p><p>单个星号 + 空格 + 内容</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">* 语文* 数学* 英语<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>语文</li><li>数学</li><li>英语</li></ul><p>2、有序列表</p><p>数字. + 空格 + 内容</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">1. 起床2. 刷牙3. 吃饭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol type="1"><li>起床</li><li>刷牙</li><li>吃饭</li></ol><p>3、列表套列表</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">* 起床      * 睁开眼睛      * 我是沙福林* 刷牙<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>起床<ul><li>睁开眼睛</li><li>我是沙福林</li></ul></li><li>刷牙</li></ul><p><strong>大纲</strong></p><p>可以把标题列出来，即 # 后的内容。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">[TOC]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>分割线</strong></p><p>三个减号+回车（Enter）</p><hr><p>以下内容不需要了解，几乎不用。</p><p><strong>甘特图</strong></p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">```mermaidgantt        dateFormat  YYYY-MM-DD        title 这是标题，上面是日期格式年月日        section 计划表        准备行李（已完成）               :done,    des1, 2014-01-06,2014-01-08        买机票（进行中）               :active,  des2, 2014-01-09, 3d        拍照（计划）               :         des3, after des2, 5d```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">gantt</span>        dateFormat  YYYY-MM-DD        title 这是标题，上面是日期格式年月日        section 计划表        准备行李（已完成）               <span class="token operator">:</span>done,    des1, 2014-01-06,2014-01-08        买机票（进行中）               <span class="token operator">:</span>active,  des2, 2014-01-09, 3d        拍照（计划）               <span class="token operator">:</span>         des3, after des2, 5d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>UML图表</strong></p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">```mermaidsequenceDiagram张三-&gt;&gt; 李四: 你好！李四, 最近怎么样?李四--&gt;&gt;王五: 你最近怎么样，王五？李四--x 张三: 我很好，谢谢!李四-x 王五: 我很好，谢谢!李四--&gt;&gt;张三: 打量着王五...张三-&gt;&gt;王五: 很好... 王五, 你怎么样?王五-&gt;&gt;张三: 不好```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">sequenceDiagram</span>张三<span class="token arrow operator">-&gt;&gt;</span> 李四<span class="token operator">:</span> 你好！李四, 最近怎么样?李四<span class="token arrow operator">--&gt;&gt;</span>王五<span class="token operator">:</span> 你最近怎么样，王五？李四<span class="token arrow operator">--x</span> 张三<span class="token operator">:</span> 我很好，谢谢!李四<span class="token arrow operator">-x</span> 王五<span class="token operator">:</span> 我很好，谢谢!李四<span class="token arrow operator">--&gt;&gt;</span>张三<span class="token operator">:</span> 打量着王五...张三<span class="token arrow operator">-&gt;&gt;</span>王五<span class="token operator">:</span> 很好... 王五, 你怎么样?王五<span class="token arrow operator">-&gt;&gt;</span>张三<span class="token operator">:</span> 不好<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>流程图</strong></p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">```mermaidgraph LRA[长方形] -- 链接 --&gt; B((圆))A --&gt; C(圆角长方形)B --&gt; D{菱形}C --&gt; D```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LRA<span class="token text string">[长方形]</span> <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span> <span class="token label property">链接</span> <span class="token arrow operator">--&gt;</span></span> B<span class="token text string">((圆))</span>A <span class="token arrow operator">--&gt;</span> C<span class="token text string">(圆角长方形)</span>B <span class="token arrow operator">--&gt;</span> D<span class="token text string">{菱形}</span>C <span class="token arrow operator">--&gt;</span> D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用的设置">1.4.4 常用的设置</h3><p>内容如下：</p><ul><li>常用的快捷键：如加粗、标题、表格等</li><li>更改风格：如字体颜色、样式，显示代码行号</li><li>将笔记导入导出</li><li>支持数学符号</li></ul><p>因为都是中文，只讲一点点，剩下的自己在菜单栏上研究吧。</p><p><strong>快捷键</strong></p><p>直接点击菜单栏，查看快捷方式，如点击视图、段落，上面显示了快捷方式更方便触发；或者按住Alt + O，即可打开格式：如 Ctrl + B 是加粗的快捷键，Ctrl + \是清除样式，Ctrl + T 是创建表格的快捷方式，Ctrl + /是查看源代码，Windows + 句号是表情符号、视图放大、缩小...</p><figure><img src="https://s2.loli.net/2022/04/23/xj4LVWfCd8GJhya.png" alt="常见的快捷键"><figcaption aria-hidden="true">常见的快捷键</figcaption></figure><p>段落/YAML FrontMatter（前言），因为我暂时用不上，看看其他人写的文章吧：</p><p>https://zhuanlan.zhihu.com/p/78087948?from_voters_page=true</p><p>https://zhuanlan.zhihu.com/p/370113792</p><p>https://blog.csdn.net/weixin_46037781/article/details/118759174</p><p>https://blog.csdn.net/qq_43444349/article/details/105282118</p><p><strong>主题</strong></p><p>Alt + T 选择自己想要的主题。</p><p><strong>偏好设置</strong></p><p>Ctrl + ,</p><figure><img src="https://s2.loli.net/2022/04/23/7Azmlu26Iq1hRWU.png" alt="偏好设置"><figcaption aria-hidden="true">偏好设置</figcaption></figure><p>如通用的自动保存选上，每次修改自动保存，不用按下 Ctrl + S。</p><p>高级模式选中调试模式，关闭文件后重新打开，右键检查元素（或 Shift +F12），会发现此软件就是一个浏览器，（浏览器按住 F12键，会打开开发者模式，与这差不多）我们看到的笔记，实际是 md语法被解析后生成的 HTML 标签与 CSS 相配合展现的页面；现在你再看看 md语法到底有多方便了吧，这些标签要你自己写该多麻烦。</p><p><strong>代码块显示行号</strong></p><p>Markdown，将显示行号复选框勾选。</p><figure><img src="https://s2.loli.net/2022/04/23/brL3VMOp5lYkSTz.png" alt="代码块显示行号"><figcaption aria-hidden="true">代码块显示行号</figcaption></figure><pre class="line-numbers language-java" data-language="java"><code class="language-java">你看左边的<span class="token number">1</span>你看左边的<span class="token number">2</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>更换主题</strong></p><p>学了 CSS 后，再来。</p><figure><img src="https://s2.loli.net/2022/04/23/3RFCpSY2Zu4mhU9.png" alt="自定义主题"><figcaption aria-hidden="true">自定义主题</figcaption></figure><p>之前创建 md 文件时，给隐藏的项目了打上对勾，代表显示隐藏的项目。其中AppData 就是隐藏的项目，一般存放软件的配置文件。</p><p><code>C:\Users\你的用户名\AppData\Roaming\Typora\themes</code>下的几个 CSS 文件代表着不同的主题，如果不满意页面样式，可以修改对应主题CSS（记得留个备份）或自定义 CSS，重新打开笔记后，可以在主题中看到你的CSS，随便更换。</p><figure><img src="https://s2.loli.net/2022/04/23/U2VpxT7gjMSblfr.png" alt="选择主题"><figcaption aria-hidden="true">选择主题</figcaption></figure><p>补丁：蓝色背景下的 gif 动图字体会模糊，必须在纯色红或白色背景下，gif动图字体才会清晰，所以取消动图的使用。</p><figure><img src="https://s2.loli.net/2022/04/23/KgfDFMRZL8i4GbX.png" alt="不兼容 gif"><figcaption aria-hidden="true">不兼容 gif</figcaption></figure><p><strong>将笔记转成其他类型的文件</strong></p><figure><img src="https://s2.loli.net/2022/04/23/8CSAQgvRLEwdmna.png" alt="导出"><figcaption aria-hidden="true">导出</figcaption></figure><p>文件/导出，</p><p>PDF、HTML 等类型的都行，（without styles 是不带样式即没有 CSS修饰，自己试试就知道区别了)</p><p>或者打开浏览器，使用打印功能（Ctrl + P），无渲染与解析，很差劲。</p><p><strong>支持数学公式</strong></p><p>按下 <code>Ctrl + ,</code> 快捷键打开偏好设置/Markdown/Markdown扩展语法/勾选内联公式，再用 <code>$某字母$</code>显示常用的数学符号。（当内联公式过多，可以考虑使用<code>$$某字母$$</code>） </p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">$$\in$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p></p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.09ex" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewBox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g></g></g></svg></mjx-container></span></p><p>常用的的数学符号写法：</p><ul><li>作者：<a href="https://blog.csdn.net/happyday_d">DaneAI</a>，https://blog.csdn.net/happyday_d/article/details/83715440</li><li>作者：<a href="https://blog.csdn.net/qq_38228254">韩湘</a>，https://blog.csdn.net/qq_38228254/article/details/78515800</li><li>作者：<a href="https://blog.csdn.net/weixin_43444930">白白旧维</a>，https://www.cnblogs.com/1024th/p/11623258.html</li><li>作者：<a href="https://home.cnblogs.com/u/1024th/">樱花赞</a>，https://blog.csdn.net/weixin_43444930/article/details/119791074</li></ul><p><strong>恢复未保存的文件</strong></p><p>打开偏好设置，点击恢复未保存的草稿。</p><figure><img src="https://s2.loli.net/2022/03/14/GyEuv5d1MKLcHYa.png" alt="恢复未保存的草稿"><figcaption aria-hidden="true">恢复未保存的草稿</figcaption></figure><h3 id="官网打不开的原因">1.4.5 官网打不开的原因</h3><p>它升级到了 1.0 版本了！收费了。</p><p>不要惊讶，能够开源一定要有其它稳定的收入作为支撑；否则没钱，功能不会太强大，作者都快饿死了，当然没有功夫贡献自己的力量，进行频繁更新，跟上时代。</p><p>不能坚守本心的人会过的很苦：动摇，时刻怀疑自己的决定是否正确；后悔，要是当初如何...现在就...</p><p>Typora 代理商：https://typoraio.cn/</p><p>最后一个免费版，分享者：王炳明，https://wwe.lanzoui.com/i8PP3wzahrg</p><p>其实从来都没有说过免费，之前只是 Beta测试版，类似于游戏中的公测吧，也不知道免费版什么时候就“关服”了。</p><p>作为一个即时渲染，所见即所得，按下 Ctrl + /就可以看源码，简洁实用，早已习惯，离不开它了。其它的软件花里胡哨，什么功能都往里面加，试图想代替其它同类型的软件，结果搞得不伦不类，十分臃肿。</p><p>像其它 md编辑器，大部分都是双栏丑丑的大屏幕，十分占空间，并且滚动内容时，左右视图不一致，还得分心同时看两边，真的是种折磨。应该让软件配合人，而不是让人记住软件的用法，主次关系要分清；真希望以后能够统一，有个规范，其它软件实现就可以了。</p><p>如果下载的是收费版，记得打开偏好设置/通用，将 Typora服务器使用国内服务器复选框勾选一下，怕连不上服务器，激活不了此软件。</p><h3 id="自动上传图片">1.4.6 自动上传图片</h3><p>你如果使用久了，经常在网上发布文章，一定会遇见这个问题。</p><p>把写好的 md文件，复制粘贴到博客园中。结果你发现图片加载不出来，一看地址，<code>C:\Users\自己的用户名\AppData\Roaming\Typora\typora-user-images\xxx</code>。</p><p>这才知道原来图片被保存到了本地中，也难怪网上读取不到。那么你发现了，将图片直接拖拽到博客园的编辑页面，会自动生成网络上的URL，可以在全网都能访问到。</p><p>但是时间长了，一张、一张拖拽也不是事啊。这时就需要图床替我们自动保存图片。下面介绍两种方式；</p><p><strong>命令行上传图片</strong></p><p>打开偏好设置/图像，</p><figure><img src="https://s2.loli.net/2022/03/14/FXS7oTtjIQefqsL.png" alt="上传图片"><figcaption aria-hidden="true">上传图片</figcaption></figure><p>意思是当本地图片被你拖进 md 文件中，会自动上传图片。</p><p>点击下载或更新，下好了后会出现打开配置文件按钮，点击弹出 JSON文件，将以下代码粘贴到这个文件中。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"picBed"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"uploader"</span><span class="token operator">:</span> <span class="token string">"smms"</span><span class="token punctuation">,</span><span class="token comment">//代表当前的默认上传图床为 SM.MS</span>    <span class="token property">"smms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"LFJLSJljlfaoFJOLAF"</span><span class="token comment">//这里面的token换成自己生成的token，一定要换</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"picgoPlugins"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//为插件预留</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个 token 如何填？</p><p>打开 SM.MS 图床：https://sm.ms/register自己注册账号后，再登陆：https://sm.ms/login</p><p>点击 User/Dashboard/API Token，进入：https://sm.ms/home/apitoken</p><p>点击 Generate Secret Token 按钮生成 token，将其填入 JSON 文件。</p><figure><img src="https://s2.loli.net/2022/04/23/waFKojW8vVTbPrX.png" alt="smms Token"><figcaption aria-hidden="true">smms Token</figcaption></figure><p>填完后，保存 JSON 文件。将图片拖拽 md 文件时，如有 Uploading字样，就成功了。</p><p>在 Pictures 可以管理或删除这些文件，可惜根本没法根据 URL找到图片，时间长了，定位删除图片还是不方便。</p><p>说实话我很担心，手贱全删了，导致 md文件图片全部失效，还是放在博客园中保险些，真可惜我的硬盘不能作为服务器。</p><p><strong>PicGo app 上传图片</strong></p><p>下载地址：https://github.com/Molunerfinn/PicGo/tags</p><p>选择一个版本点击，下翻，在 Assets 中选择 exe文件下载，安装后直接运行。</p><p>但无论怎么双击就是不会显示窗口，看看电脑右下角，点击蓝色图标：<img src="https://s2.loli.net/2022/04/09/Wk8ix9tfAbFEDZr.png" alt="Windows 系统想要运行需要双击右下角的蓝色图标"></p><p>图片上传区：图片上传 - SM.MS</p><p>图床设置/SM.MS，填入 Token 后确定，设为默认图床。</p><p>Typora 软件，偏好/图像，按图设置</p><figure><img src="https://s2.loli.net/2022/04/09/shrWV5Rcq7YQePC.png" alt="上传服务选择 PicGO app"><figcaption aria-hidden="true">上传服务选择 PicGO app</figcaption></figure><p>在 PicGo 的安装目录下有个 PicGo.exe，PicGo 路径就选择此 exe的绝对路径。</p><p>格式/图像/上传所有本地图片</p><p><strong>Typora 在 Windows 下自动上传图片</strong></p><p>目前支持上传的方式有：自建服务器、腾讯云 COS、阿里云 OSS、七牛云、Github、Gitee（码云）...</p><p>作者：<a href="https://www.zhihu.com/people/thobian">thobian</a>，https://www.zhihu.com/question/56641227/answer/810364545</p><p><strong>阿里云</strong></p><p>作者：<a href="https://www.zhihu.com/people/xia_2">夏2同学</a>，https://zhuanlan.zhihu.com/p/138878534</p><p><strong>其它图床</strong></p><p>免费图床整理，https://withpinbox.com/explore/collection/332056</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.1 JDK 下载及准备工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.1.3 编写代码前的准备</title>
      <link href="/2022/04/29/1.1.1-jdk-xia-zai-ji-zhun-bei-gong-zuo/1.1.1.3-bian-xie-dai-ma-qian-de-zhun-bei/"/>
      <url>/2022/04/29/1.1.1-jdk-xia-zai-ji-zhun-bei-gong-zuo/1.1.1.3-bian-xie-dai-ma-qian-de-zhun-bei/</url>
      
        <content type="html"><![CDATA[<h2 id="编写代码前的准备工作">1.3 编写代码前的准备工作</h2><p>如果你是什么都不懂的新手，请别慌着写代码，还有如下几件事要做：</p><p>内容导视：</p><ul><li>为什么要写笔记</li><li>使用记事本编写源代码</li><li>如何学会双手打字</li><li>Windows 系统常用的快捷键</li><li>一点建议</li></ul><h3 id="为何要写笔记">1.3.1 为何要写笔记</h3><p>为了对抗遗忘，可以快速回顾、促进理解、加深记忆，将知识有条不紊地归类，提炼反思应用。</p><p>不建议使用纸质的笔记，记录麻烦，不方便携带，有老化被撕毁的风险，摘抄代码时不能Ctrl + C 快速复制粘贴。</p><p>推荐使用 Typora 软件、博客、等各大网站记录。</p><h3 id="编写源代码使用的记事本">1.3.2 编写源代码使用的记事本</h3><p>工欲善其事必先利其器，使用系统自带记事本编写程序，按下 Tab缩进一大节，逼得我每次使用 4个空格，回退也难；关键字没有颜色，不易于识别与查看。</p><p>下面介绍几个更好的工具，安装后，右键文件选择打开方式即可。</p><p><strong>EditPlus</strong></p><p>建议网上搜下汉化版的，下面是官方的收费的。</p><p>下载页面：https://www.editplus.com/download.html</p><figure><img src="https://s2.loli.net/2022/04/23/vLsiNpcyoReMr3C.png" alt="EditPlus 下载地址"><figcaption aria-hidden="true">EditPlus 下载地址</figcaption></figure><figure><img src="https://s2.loli.net/2022/04/23/tKSBio59jL2VlW6.png" alt="EditPuls 安装目录"><figcaption aria-hidden="true">EditPuls 安装目录</figcaption></figure><p>有 30 天的试用期，过后要购买许可证。</p><p><strong>Notepad++</strong></p><p>下载页面：https://notepad-plus.en.softonic.com/download</p><p>Download 就是下载的意思。</p><figure><img src="https://s2.loli.net/2022/04/23/PBeG64RorkOqQy5.png" alt="Notepad++ 下载地址"><figcaption aria-hidden="true">Notepad++ 下载地址</figcaption></figure><p><strong>如何设置主题</strong></p><p>设置/语言格式设置/选择主题，此外还可以根据不同语言设置样式。</p><figure><img src="https://s2.loli.net/2022/03/14/DObj5S6BtvImslz.png" alt="设置主题"><figcaption aria-hidden="true">设置主题</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/14/Qm2T5wYeRt8qIyr.png" alt="更改背景色"><figcaption aria-hidden="true">更改背景色</figcaption></figure><p><strong>Sublime Text</strong></p><p>官网：https://www.sublimetext.com/</p><p><strong>Visual Studio Code</strong></p><p>官网：https://code.visualstudio.com/</p><p><strong>Atom</strong></p><p>官网：https://atom.io/</p><p>不能指定安装目录；这种是以项目的方式管理文件。</p><figure><img src="https://s2.loli.net/2022/03/15/CxX2S7MvOWa9n3k.png" alt="Atom"><figcaption aria-hidden="true">Atom</figcaption></figure><p>也可以搜索一下其他的文本编辑器，看哪款适合你。</p><p><strong>编写代码</strong></p><p>打开刚刚下好的软件，输入源代码，最后 Ctrl + S 保存，另存为First.java。但是现在还不到写代码的时候，下一章好吗？</p><figure><img src="https://s2.loli.net/2022/04/23/2HmXhyMRKYSWsgl.png" alt="Hello World 代码"><figcaption aria-hidden="true">Hello World 代码</figcaption></figure><h3 id="练习双手打字">1.3.3 练习双手打字</h3><p>一个指头敲字，一边看键盘，一边看输入的代码，很容易出差错。</p><p>既然选择了在电脑上打字，就要提高自己的指法速度，敲代码和写笔记才会快，两只手共同配合。</p><p>不用担心，我也这么走过来的，虽然一开始没有单只手指头快，但坚持下来，不看键盘，手势正确，打字速度会有明显的提升。</p><p>推荐使用金山打字通。</p><p>下载页面：http://www.51dzt.com/</p><p>从第一步，跟着图中手势位置慢慢打，差不多跟着<strong>敲一个星期</strong>，就基本实现盲打了。</p><p>页面上有金山打字通的下载，点击下载。</p><p>下载好后，双击执行 exe文件，安装界面会跳出是否安装其它软件，根据自己需要确认是否勾选。</p><figure><img src="https://s2.loli.net/2022/04/23/TgHX5FkKAOUWLES.png" alt="金山打字通安装界面"><figcaption aria-hidden="true">金山打字通安装界面</figcaption></figure><p>安装好后点击新手入门，练到不用看键盘，打字速度超过 30 ~ 60字/分钟差不多够用了。（只需练习英文部分即可）</p><h3 id="windows10-系统常用快捷">1.3.4 Windows10 系统常用快捷</h3><p>掌握常用的快捷键，能够极大地提升效率，节省时间。</p><p>如果是有触摸板的笔记本电脑。单击是鼠标左键，双击是鼠标右键。</p><p>请打开 windows 设置/设备/触摸板查看：（Windows + i 打开设置）</p><figure><img src="https://s2.loli.net/2022/04/23/gNIUnjek17ECZBa.png" alt="笔记本触摸板"><figcaption aria-hidden="true">笔记本触摸板</figcaption></figure><p>下面是我总结的常用几个快捷键。如 Ctrl +A，在电脑键盘上找到这两个键，同时按下去即可触发全选操作。</p><p>如果打不出中文，怀疑是按 Caps Lock 开启了大写或者连续按下 Shift启动了粘滞键，再次按下此键即可恢复。</p><p>提前说明：</p><p>Ctrl + + 指同时按下 Ctrl、+ 这个键，别看见两个加号就懵了。</p><p><strong>文本相关</strong></p><p>先选中文字，Windows 键是 Alt 左边的<img src="https://s2.loli.net/2022/04/23/LpYG5sWHX9MqZf4.png" alt="Windows 键">。</p><p>内容如下：</p><ul><li>常用的粘贴、选中、删除文字的快捷键</li><li>翻页、浏览文字的快捷键</li><li>切换输入法、中英转换</li></ul><table><thead><tr class="header"><th>操作</th><th>快捷键</th></tr></thead><tbody><tr class="odd"><td>跳过单词</td><td>Ctrl + 左右箭头，可配合 Shift 使用选中文字</td></tr><tr class="even"><td>选中文字</td><td>Shift + 箭头、Shift + Home/End/Pgup/Pgdnd</td></tr><tr class="odd"><td>复制</td><td>Ctrl + C</td></tr><tr class="even"><td>粘贴</td><td>Ctrl + V</td></tr><tr class="odd"><td>全选</td><td>Ctrl + A</td></tr><tr class="even"><td>撤销</td><td>Ctrl + Z</td></tr><tr class="odd"><td>查找</td><td>Ctrl + F</td></tr><tr class="even"><td>替换</td><td>Ctrl + H</td></tr><tr class="odd"><td>删除文字</td><td>Del、Backspace</td></tr><tr class="even"><td>上翻</td><td>Pgup Pause</td></tr><tr class="odd"><td>下翻</td><td>Pgdn Break</td></tr><tr class="even"><td>行首</td><td>Home</td></tr><tr class="odd"><td>行尾</td><td>End</td></tr><tr class="even"><td>页首</td><td>Ctrl + Home</td></tr><tr class="odd"><td>页尾</td><td>Ctrl + End</td></tr><tr class="even"><td>切换当前语言下的输入法</td><td>Shift + Ctrl</td></tr><tr class="odd"><td>切换输入法</td><td>Windows + 空格</td></tr><tr class="even"><td>中英文切换</td><td>Shift、Ctrl + 空格</td></tr><tr class="odd"><td>切换语言</td><td>Shift + Alt</td></tr></tbody></table><p><strong>热键相关</strong></p><p>若桌面崩了，使用快捷键打开任务管理器，运行新任务，输入 explorer后回车。</p><p>内容如下：</p><ul><li>创建文件、查看文件属性</li><li>切换窗口，窗口最大化、最小化</li><li>切换桌面，查看桌面</li><li>截屏</li><li>放大镜</li><li>快捷方式打开应用、资源管理器</li></ul><p>有的快捷键按下去时讲究先后顺序。</p><p>例：如 Alt + Tab ，先按住 Alt 键不要松，再按Tab，有先后顺序（同时按也行），自己试试就知道我在讲什么了。</p><p>← 指的是左箭头。</p><p>说实话我向来很反感背知识，随用即取就行。但是那面试题人人都背，你不看看，万一被难倒了怎么办？算了不考虑这些，下面这些快捷键你只看看经常使用的即可。</p><table><colgroup><col style="width: 38%"><col style="width: 61%"></colgroup><thead><tr class="header"><th>操作</th><th>快捷键</th></tr></thead><tbody><tr class="odd"><td>改变桌面图标大小</td><td>按住 Ctrl + 鼠标滑轮滚动、触摸板两指缩放</td></tr><tr class="even"><td>将文件放入回收站</td><td>Ctrl + D 、 Del</td></tr><tr class="odd"><td>永久删除文件</td><td>Shift + Del</td></tr><tr class="even"><td>创建文件夹</td><td>Alt + 2</td></tr><tr class="odd"><td>查看当前文件属性</td><td>Alt + 1</td></tr><tr class="even"><td>所有窗口最小化</td><td>Windows + D 、 Windows + M 、三指下滑</td></tr><tr class="odd"><td>所有窗口最小化又还原</td><td>双击 Windows + D 、三指下滑又上滑</td></tr><tr class="even"><td>当前窗口最小化</td><td>Windows + ↓</td></tr><tr class="odd"><td>当前窗口还原、最大化</td><td>Windows + ↑</td></tr><tr class="even"><td>查找文件</td><td>Alt +空格</td></tr><tr class="odd"><td>浏览器打开新的标签页</td><td>Ctrl + T</td></tr><tr class="even"><td>浏览器查看下载文件</td><td>Ctrl + J</td></tr><tr class="odd"><td>浏览器当前页面静音</td><td>Ctrl + M</td></tr><tr class="even"><td>浏览器切换页面</td><td>Ctrl + 数字、 Ctrl + Tab +（Shift）、 Ctrl + Pgup 和 Pgdn</td></tr><tr class="odd"><td>打开新的窗口</td><td>Ctrl + N</td></tr><tr class="even"><td>使当前窗口失去焦点，图层置于底下</td><td>Alt + Esc</td></tr><tr class="odd"><td>打开任务管理器</td><td>Ctrl + Shift + Esc</td></tr><tr class="even"><td>锁屏</td><td>Windows + L</td></tr><tr class="odd"><td>关闭文件</td><td>Ctrl + W</td></tr><tr class="even"><td>强制关闭文件</td><td>Alt + F4</td></tr><tr class="odd"><td>关机</td><td>Alt + F4</td></tr><tr class="even"><td>打开文件资源管理器</td><td>Windows + E</td></tr><tr class="odd"><td>将焦点定位到地址栏</td><td>Alt + D 、 F4</td></tr><tr class="even"><td>后退</td><td>Alt + ←、 Backspace</td></tr><tr class="odd"><td>前进</td><td>Alt + →</td></tr><tr class="even"><td>返回上一级</td><td>Alt + ↑</td></tr><tr class="odd"><td>在窗格、功能区域之间切换</td><td>F6</td></tr><tr class="even"><td>重命名</td><td>F2</td></tr><tr class="odd"><td>切换至下一个，配合 F2 有奇效</td><td>Tab</td></tr><tr class="even"><td>有些快捷键再加上此键，实现逆向选择</td><td>如 Shift + Tab</td></tr><tr class="odd"><td>即时切换应用</td><td>按住 Alt 不要松开单击 Tab 、三指左右滑动</td></tr><tr class="even"><td>来回切换引用</td><td>同时按下 Alt + Tab</td></tr><tr class="odd"><td>切换应用</td><td>Alt + Ctrl + Tab 松开，单击 Tab 选择应用后回车</td></tr><tr class="even"><td>刷新</td><td>F5 、 Ctrl + R 、 Ctrl + F5</td></tr><tr class="odd"><td>同一应用不同窗口切换</td><td>Ctrl + Tab</td></tr><tr class="even"><td>浏览器不同窗口切换</td><td>Ctrl + Pgup Pause 、 Ctrl + Pgdn Break</td></tr><tr class="odd"><td>创建新桌面</td><td>Ctrl + Windows + D</td></tr><tr class="even"><td>关闭新桌面</td><td>Ctrl + Windows + F4</td></tr><tr class="odd"><td>查看已有桌面</td><td>Windows + Tab （再按还原）、三指上滑（下滑还原）</td></tr><tr class="even"><td>切换桌面</td><td>Windows + Ctrl + 左右箭头</td></tr><tr class="odd"><td>两个应用分屏</td><td>Windows + ←、 Windows + →</td></tr><tr class="even"><td>放大缩小屏幕</td><td>Windows 加 +/-</td></tr><tr class="odd"><td>浏览器放大缩小</td><td>Ctrl 加 +/-</td></tr><tr class="even"><td>打开/关闭管理通知</td><td>Windows + A</td></tr><tr class="odd"><td>打开 Windows 设置</td><td>Windows + i</td></tr><tr class="even"><td>锁定、切换用户、注销、打开任务管理器</td><td>Ctrl + Alt + Del</td></tr></tbody></table><p><strong>截屏</strong></p><p>1）快捷键打开截全屏的工具</p><p><code>Windows + W</code></p><p>2）区域截屏</p><p><code>Windows + Shift + S</code></p><p>若点击了截图，照片会在<code>C:\Users\你的用户名\AppData\Local\Packages\Microsoft.ScreenSketch_8wekyb3d8bbwe\TempState</code>下保存。</p><p>3）截全屏</p><p><code>Windows + PrtScSysRq</code></p><p>PrtScSysRq 键在 F12 右边，保存的图片在<code>C:\Users\自己的用户名\Pictures\Screenshots</code> 下。</p><p><code>PrtScSysRq</code></p><p>打开画图工具，Ctrl + V 将截屏捕捉。</p><p>4）截屏，范围限制在当前工作页面（得到焦点的页面）</p><p>解释，比如你打开了 QQ，正在使用它聊天，按下了这个快捷键，只会截 QQ界面。</p><p><code>Windows + Alt + PytScSysRq</code></p><p>5）录屏，范围限制在当前工作页面</p><p><code>Windows + Alt + R</code></p><p>捕获的图片和视频在 <code>C:\Users\用户名\Videos\Captures</code>里。</p><p>6）游戏栏工具</p><p><code>Windows + G</code></p><p><strong>Alt</strong></p><p>打开软件，按一下 Alt，会有字符提示，并且将焦点定位到菜单栏，此时可按左右键切换功能区，上下（不行就Enter 回车）键打开功能区。</p><p>字符提示会显示出功能的快捷键，例：文件功能区会显示出 F ，代表只需要Alt + F就可以打开此功能，弹出的下拉列表一般也有字母提示，按下对应字母即可。（有时需同时按下Alt ）</p><p>总结： Alt + 划下划线的字母，可以快速打开菜单。</p><p><strong>快速启动任务栏上的软件</strong></p><p>你看看你的任务栏（屏幕的最下方），打开应用后可以右击任务栏上的应用图标，将其固定到任务栏，下次直接单击此图标就可以打开应用。或者Windows键 + 数字，比如</p><figure><img src="https://s2.loli.net/2022/04/23/eOHtJ3dNf7vWkKC.png" alt="Windows 10 系统的任务栏"><figcaption aria-hidden="true">Windows 10 系统的任务栏</figcaption></figure><p>浏览器在任务栏的第 1 个位置，只需 Windows + 1 就可以打开。或者Windows + T，左右箭头选择后回车。</p><h3 id="给初学者的一点建议">1.3.5 给初学者的一点建议</h3><p>我希望你能后来居上，分享你的经验让我开开眼界。</p><p>下面是本人经过大量时间总结的经验，但你可以不看，因为没有什么规则可以量身定制。</p><p><strong>1、约束好奇心，停止收藏资源</strong></p><p>我直接说，你是学到死都学不完的。</p><p>资源无穷尽也。不要看到什么都想学，什么都想买，一直在搜，知识太多，你学不过来的。你先在网上搜索，比如后端的整套知识点，按顺序来，一心一意，<strong>一套教程为主，有疑惑的再去别的地方比对</strong>。不要没事就搜索一大堆资料收藏，又不开始，资料一定要精简，那些看上去有用的知识但短期用不上的，直接取消收藏（也包括我）。等你到了这步，再找资源，别做松鼠。</p><p>关于难度高的，可以先跳过，记录下来，后面再补上，比如数据结构、JVM底层、多线程与高并发、GUI等等...别把初学时间浪费在这上面，这些东西都是唬人放弃的。</p><p>不要背代码，要掌握原理，方法可以到 API文档上查。之前基本都是概念上的东西，理解就好了，但学到集合、IO、常用类如String，只背方法名一定会消灭你学习的兴趣。</p><p>这东西是一回生二回熟，第一遍不要想着要弄的多明白，简单过一下即可。下次复习的时候，无师自通，我敢说人就是最强的智能机器人。</p><p>至于看视频还是阅读书籍，我感悟如下：</p><p>视频时间看完所需时间更长，但可以一步步来，如果章节内容划分合理，每个视频时长合适，学习者更轻松完成每个目标，掌握自己的进度。适合初学者。</p><p>书籍花费时间较少，但经常有断节之处，初学者搞不明白缺少哪一个环节，看着晦涩难懂的文字，翻不了几页就草草放弃，适合耐得住性子的人。</p><p><strong>2、管理好精力</strong></p><p>人一天能够利用的时间极其有限，所以要学会合理分配精力。学习并不是生活的全部，要参与家务，如果你整天扑到学习上，只会感动自己。随着精力的消耗，自控力的减弱，一定会在某天突然崩掉，开始变得什么都没有兴趣，行动力拉到最低，即使强迫在学，也只是枯坐原地，享受着左耳进右耳出的枯燥感。</p><p>早起别熬夜，每天一定留至少 30 分钟的时间午睡，为了第 2天的精神良好。学习时推荐使用番茄钟，每过半小时就休息一小会，合理分配精力。（休息时不要看电子产品与动脑筋，要适当远眺）</p><p><strong>3、学会分享</strong></p><p>不要闭门造车，要敢于发在各大网站上分享，Markdown语法我会在下节中讲到，你学会了，注册个号，把笔记直接复制粘贴，发在博客网上；不要觉得自己技术菜。理由如下：</p><ol type="1"><li><p>人人都有开始，你发出来了，别人才能纠正你的错误，避免成为井底之蛙。</p></li><li><p>你又开始自耗了，不停地在脑海天人交战，一顿脑补：会不会万一发出来被人嘲笑怎么办？...于是藏着掖着，生怕别人知道，出丑；事情还未做，就想一系列的后果，别人有多可恶。我觉得世上还是好心人多，当然不要被零星几个恶评就忽略了大多数支持你的人，这么大的林子总会有几个脑残。</p></li><li><p>百分之 99.9 的人根本刷不到你的文章，或者一下就 ×过去了，即使刷到了，那还有 9.9成人浏览刷的一下就关了，评论的那是少之又少，凤毛麟角。</p></li><li><p>对于四处搜索资源的人，是没有精力留下痕迹的，没有用的直接毙掉，有用的看完理解后也直接毙掉；这么快节奏的生活，没人关心你是谁，最多充当局外客。当你还在纠结别人的看法时，纠结要不要做时，别人根本记都不记得你。我们在网络时代那是十分渺小，沧海一粟，很快被淹没，就算有弄潮儿掀起了几朵浪花，也会很快平息，所以别再纠结丢不丢脸了。</p></li><li><p>帮助别人就是帮助自己。虽然这个地球少了谁都能转动，但我愿意相信天生我材必有用，自己的不可替代性。</p></li><li><p>你已经落后别人太多了，得到的都不是最新的知识；不要求自己跑的更快，但是也要有行动的勇气吧，就算有1000个人从众笑你、反对你，我也不会笑你，只会支持你，为你的敢于行动喝彩。</p></li><li><p>或者你担心教会了徒弟饿死了师傅，认为自己凭什么白白让别人分享自己的辛苦所得，让那些白嫖怪轻而易举获取到所有。</p><p>呃，我也不反对你，曾经的我认为那些动不动说要分享，文章标题、内容弄得很吸引人；结果在文章底部放了个二维码，说要关注才能获取验证码与资源，我一向嗤之以鼻，这不就是引流吗，能赚多少钱啊？但是现在觉得别人有权力这么做，没有人必须无偿满足你，因为用爱发电，得不到利益，很容易让人寒心。既然付不了金钱，就只能搭进时间和人脉，等价交换而已。</p><p>对于那些开源的人，要不是他们的分享，让我窥见一斑，那我现在应该不在家，而是进厂做流水线去了，是不会发文章的，或许抱怨这个世界不公平。所以再次感谢开源的人，感谢你们的无私奉献，你们就是一道光，照亮被淘汰看不见希望的我，至于我的信念就从此转变为萤火虫也可与日月争辉。（不禁想起了一句话：为众人抱薪者，不可使其冻毙于风雪；为大众谋福利者，不可使其孤军奋战；为自由开路者，不可使其困顿于荆棘）很抱歉我现在捉襟见肘，无法回馈你们。</p><p>说实话，现在当我使用手机、电脑、冰箱、自来水等一切产品时，都会惴惴不安，一是因为怕现在习惯了离不开了，但是不了解底层原理，要是他们以后技术垄断，坐地起价...；二是当我还在感叹新技术新发展新气象，日新月异，这些东西如此方便快捷，被制作被运送，傻瓜都能轻松使用。但是到底以牺牲了多少人的自由空暇为代价，令他们如同机械一般麻木，我们却理所当然，嘻嘻哈哈，嘲笑着都是因为不努力，教导下一辈不要学他们，要成为人上人...扪心自问，真的能够心安理得使用吗？平等或许只是伪命题。</p></li></ol><p><strong>4、承认自己的不完美</strong></p><p>人无完人，总有顾及不到，犯错的时候。想做就直接放手干，不要计划地那么周全，稍微一有变动，就放弃目标，想明天再做。是吧，别觉得只有从容不迫、不慌不忙、按部就班地才叫做事，而达不到自己的心理预期就不做了，大多数人都是计划赶不上变化，被搞得灰头土脸的。</p><p>人是一种很奇怪的生物，我把人称为石头，有 1 就有2。当难度设定太高，有一次累了没去执行，那么最后结局就是放弃。我就改变思路，将难度设定为合适、简单。还是如此，不管之前坚持了多少天，只要有一次意外，没做，结局还是放弃。</p><p>结论：没有外力时，一直滚动；有外力一碰，就停了；结论：维持当前状态，会被外力改变。</p><p>但是在滚动的过程中，会磨去棱角，那么下一次进入相同的环境，会很容易滚落下去，很难控制。所以每一次尝试，都是为下一次作铺垫，不要认为失败就是无用功。</p><p><strong>5、调整心态</strong>（找准目标）</p><p>如果你学这个只是为了找工作，那么你一定会很痛苦。为了以后不再工作而工作，为了以后享福而选择现在吃苦（为了不再吃苦而吃苦），为了将来而牺牲现在；这种矛盾的做法，并且大部分人实现不了财务自由，如果你只靠出卖自己的时间换来金钱的话。</p><p>你想得又得不到，或追赶不上前面的事物，你会处于十分焦虑的状态。你真想财务自由，那么就要垄断其他人的时间，给自己带来利益（用金钱换他们的时间，创造价值收入囊中），或者搭上顺风车。</p><p>但我不一样，我写这个，并不奢求得到回报，因为我写这个同时，我就很满足了。</p><p>但也不要担忧，如果企业家全都使用机器人或者雇很少的人，短时间的确能够让利润增加，因为减少了给员工那一项的支出；但是员工既是生产者也是消费者，如果他们没有时间买或者没有钱买，就算降低商品的价格，但为了有利润可赚，员工的工资也会降，那就更没有钱买，继续降低商品价格...如此反复，就倒闭了；所以他们是不会让穷人更穷的。</p><p>（我只是安慰你，这些玩意早被研究透了，说不定命运都被安排的明明白白）</p><p><strong>6、相信自己</strong></p><p>可你也与我有着同一样的感受，为什么这些大佬如此牛逼，而自己什么都看不懂，不能理解，沮丧睡不着觉。我觉得这不是你的问题，而是每个人的必经之路。希望你能够坚持下来，即使在人生最黑暗的时候也能与本心融为一体，认同自己，一起冲向光明；最后祝你学业有成，找个好饭碗。</p><p><strong>7、选择城市</strong></p><p>之前聊天时，问到了这个问题：去大城市还是小城市发展？然后又说小城市容不下灵魂、大城市容不下肉身。其实我都没有工作，村里人都知道我是游民，我给不了什么实质性的意见。</p><p>哈哈，没关系，任何一个选择都有得有失，你看看代价与风险是否自己能够承受：是接受安稳，被人看扁；还是避开喧嚣之地，舍命一拼，打下一片未来；就看你怎么选了。</p><p><strong>8、没有绝对正确的理论</strong></p><p>给出一个貌似符合常理的结论，有人举出反例，然后结论被推翻，再重新给出符合此反例的新的结论，不停周而复始...</p><p>如果这个结论目前还未被推翻，就暂时当作正确的吧，不需要怀疑一切，那样会很累的；我的知识体系到处东拼西凑，别人说什么如果验证不出来，就分不清真假，只能暂时当成对的。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.1 JDK 下载及准备工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.1.1 Java 介绍</title>
      <link href="/2022/04/29/1.1.1-jdk-xia-zai-ji-zhun-bei-gong-zuo/1.1.1.1-java-jie-shao/"/>
      <url>/2022/04/29/1.1.1-jdk-xia-zai-ji-zhun-bei-gong-zuo/1.1.1.1-java-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="java-介绍">1.1 Java 介绍</h2><p>内容导视：</p><ul><li>Java 简介</li><li>Java 技术体系</li><li>前后端的工作内容</li><li>Java 语言特性</li><li>Java 用途</li></ul><p>看不懂就跳过，这里不是重头戏，说实话，挺无聊的，直接跳过也没问题。（我只教如何开车，不教车的来历、发动机缸数、如何运转；你觉得只是浮于表面，没办法啊，又不是科班）</p><h3 id="java-简介">1.1.1 Java 简介</h3><p>Java 最早是由 SUN 公司（已被 Oracle 收购）的 JamesGosling（詹姆斯·高斯林）在 1992 年开发的一种编程语言，最初被命名为Oak，目标是针对小型家电设备的嵌入式应用，结果市场没啥反响。谁料到互联网的崛起，让Oak 重新焕发了生机，于是 SUN 公司改造了 Oak，在 1995 年以 Java的名称正式发布，原因是 Oak 已经被人注册了，因此 SUN 注册了 Java这个商标。随着互联网的高速发展，Java 逐渐成为最重要的网络编程语言。</p><p>有兴趣查看以下文章，了解 Java 发展历史</p><ul><li>作者：<a href="https://home.cnblogs.com/u/jmcui/">JMCui</a>，https://www.cnblogs.com/jmcui/p/11796303.html</li><li>作者：<a href="https://author.baidu.com/home?from=bjh_article&amp;app_id=1711489012880566">苗子说全栈</a>，https://baijiahao.baidu.com/s?id=1714823765201515049</li></ul><p>此外 JDK1.5 与 JDK5是一样的意思。因为比之前版本的变化大，以此作为区分，表示与众不同。就像美猴王自封齐天大圣，都是一个人(猴)。</p><p>此外还有 J2EE 、JavaEE，只是叫法不同，不必纠结。</p><table><thead><tr class="header"><th style="text-align: center;">正式发行名称</th><th style="text-align: center;">昵称</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">JDK 1.0.x</td><td style="text-align: center;">Java 1.0</td></tr><tr class="even"><td style="text-align: center;">JDK 1.1.x</td><td style="text-align: center;">Java 1.1</td></tr><tr class="odd"><td style="text-align: center;">Java 2 Platform，StandardEdition，v1.2</td><td style="text-align: center;">Java 2</td></tr><tr class="even"><td style="text-align: center;">Java 2 Platform，StandardEdition，v1.3</td><td style="text-align: center;">Java 3</td></tr><tr class="odd"><td style="text-align: center;">Java 2 Platform，StandardEdition，v1.4</td><td style="text-align: center;">Java 4</td></tr><tr class="even"><td style="text-align: center;">Java 2 Platform，StandardEdition，v5.0</td><td style="text-align: center;">Java 5</td></tr><tr class="odd"><td style="text-align: center;">Java Platform，Standard Edition 6</td><td style="text-align: center;">Java 6</td></tr><tr class="even"><td style="text-align: center;">Java Platform，Standard Edition 7</td><td style="text-align: center;">Java 7</td></tr><tr class="odd"><td style="text-align: center;">Java Platform，Standard Edition 8</td><td style="text-align: center;">Java 8</td></tr></tbody></table><h3 id="java-技术体系">1.1.2 Java 技术体系</h3><p>分成了三个技术体系</p><p>（以前被称为 J2SE、J2EE、J2ME）</p><p><strong>JavaSE（Java Standard Edition）</strong>：Java标准版，包含核心的类库，主要开发桌面应用（如 Windows下的应用程序）。允许您在桌面和服务器上开发和部署 Java 应用程序。JavaSE和组件技术提供了当今应用程序所需要的丰富的用户界面、性能、多功能性、可移植性和安全性，并为JavaEE 提供基础。</p><p><strong>JavaEE（Java Enterprise Edition）</strong>：Java企业版，为开发企业环境下的应用程序提供的一套解决方案，包括 Web网站后台开发等。该技术体系包含的技术：Servlet、JSP等。企业版本帮助开发和部署可移植、健壮、可伸缩且安全的服务端Java应用。JavaEE 是在 JavaSE 的基础上构建的提供 Web服务、组建模型、管理和通信 API。</p><p><strong>JavaME（Java Platform Micro Edition）</strong>：Java微型版，JavaSE 的瘦身版。主要做嵌入式开发。 JavaME是专门为资源受限的设备设计的，如为M2M、工业控制、智能电网基础设施、环境传感器和跟踪等的无线模块、手机、PDA、电视机顶盒和打印机上运行的应用程序提供一个健壮且灵活的环境。自从安卓系统出来后，JavaME 就用的比较少了。</p><p>JavaSE 是整个 Java 平台的核心，做 Java 后端先学 JavaSE。</p><h3 id="前后端的工作内容">1.1.3 前后端的工作内容</h3><p><strong>前端</strong></p><p>编写 html代码搭建一个框架展现网页内容，如图片、文字、视频...，打开浏览器的任意网页，按下F12 可以看到网页对应的 html 文件</p><figure><img src="https://s2.loli.net/2022/04/23/qTvujOhNMVG5tBI.png" alt="浏览器按下 F12 后展开的页面"><figcaption aria-hidden="true">浏览器按下 F12 后展开的页面</figcaption></figure><p>用 CSS 技术美化页面，指定 html 标签的位置、样式等；</p><p>用 JavaScript语言控制与用户的交互，比如网页弹窗、动态改变网页内容、验证登录信息、跳转页面等。</p><p>例：点击登录页面，输入用户名与密码，按下回车，会触发事件执行JavaScript 代码，给用户响应（登录失败或成功）。</p><p>可以说前端相当于前台，是可以看的见的内容。</p><p><strong>后端</strong></p><p>接收从前端页面或其他后端服务传递过来的请求，处理业务逻辑，对数据库中的数据增删改查CRUD。</p><p>给调用者一个响应，如把数据返回给调用者、操作是否失败、返回对应的 html代码等，用户是看不见的。</p><p>例：接收到前端传过来的用户名与密码，查询数据库中是否存在，若不存在返回用户不存在。前端接收到后，改变页面信息给用户提示。</p><p>不限于使用哪种编程语言，只要能把正确的数据返回给调用者即可。</p><p>要保证访问量很大时（同一时间内能够处理尽可能多的请求）而服务器不宕机、响应时间短不至于用户长时间等待、多个用户访问时保证数据的一致性等。（高可用、高并发、分布式、自动化）</p><h3 id="java-语言特性">1.1.4 Java 语言特性</h3><p>Java 是一门编程语言，特性如下：</p><p><strong>1、面向对象</strong></p><p>Java以类为结构组织代码，对对象、继承、封装、多态、接口、包等均有很好的支持。为了简单起见，Java只支持类之间的单继承，但是可以使用接口来实现多继承。使用 Java语言开发程序，需要采用面向对象的思想设计程序和编写代码。</p><p>如果不想使用此特性，Java 也可以写出面向过程的代码。</p><p><strong>2、平台无关性</strong></p><p>一次编写，到处运行（Write Once，Run any Where）。因此采用 Java语言编写的程序具有很好的可移植性，而保证这一点的正是 Java虚拟机。在引入虚拟机之后，编译后的 <mark>class文件可以在不同的平台上运行</mark>，不需要重新编译。</p><p><strong>3、简单性</strong></p><p>Java 语言的语法与 C 语言和 C++语言很相近，使得很多程序员学起来很容易。对 Java 来说，它舍弃了很多 C++中难以理解的特性，如操作符的重载和多继承等，而且 Java语言不使用指针，加入了垃圾回收机制，解决了程序员需要管理内存的问题，使编程变得更加简单。</p><p><strong>4、解释执行</strong></p><p>Java 程序在 Java 平台运行时会被编译成字节码文件，然后可以在有 Java环境的操作系统上运行。在运行文件时，Java的解释器对这些字节码进行解释执行，执行过程中需要加入的类在连接阶段被载入到运行环境中。</p><p>解释型的转换工具称为解释器，程序在运行时使用解释器。每翻译一句，就执行一句，效率低，但跨平台性能好。</p><p>编译型的转换工具称为编译器，事先把源代码交给编译器，它一下子全部翻译，得到编译后的代码，可以直接被机器执行。</p><p>例如 JavaScript 语言有编译型的转换工具，如 chrome 的 V8引擎，也有解释型的转换工具如 Netscape Navigator 的 JS 引擎。</p><p><strong>5、多线程</strong></p><p>Java 语言是多线程的，这也是 Java 语言的一大特性，它必须由 Thread类和它的子类来创建。Java支持多个线程同时执行，并提供多线程之间的同步机制。任何一个线程都有自己的run() 方法，要执行的方法就写在 run() 方法体内。</p><p><strong>6、分布式</strong></p><p>Java 语言支持 Internet 应用的开发，在 Java的基本应用编程接口中就有一个网络应用编程接口，它提供了网络应用编程的类库，包括URL、URLConnection、Socket 等。Java 的 RIM机制也是开发分布式应用的重要手段。</p><p><strong>7、健壮性</strong></p><p>Java 的强类型机制、异常处理、垃圾回收机制等都是 Java健壮性的重要保证。对指针的丢弃是 Java 的一大进步。另外，Java的异常机制也是健壮性的一大体现。</p><p><strong>8、高性能</strong></p><p>Java 的高性能主要是相对其他高级脚本语言来说的，随着 JIT（Just inTime）的发展，Java 的运行速度也越来越高。</p><p><strong>9、安全性</strong></p><p>Java 通常被用在网络环境中，为此，Java提供了一个安全机制以防止恶意代码的攻击。除了 Java语言具有许多的安全特性以外，Java还对通过网络下载的类增加一个安全防范机制，分配不同的名字空间以防替代本地的同名类，并包含安全管理机制。</p><h3 id="java-用途">1.1.5 Java 用途</h3><p><strong>1、Android 应用</strong></p><p>许多的 Android 应用都是由 Java 程序员开发者开发。虽然 Android运用了不同的 JVM 以及不同的封装方式，但是代码还是用 Java语言所编写。相当一部分的手机中都支持 Java游戏，这就使很多非编程人员都认识了 Java。</p><p><strong>2、在金融业应用的服务器程序</strong></p><p>Java在金融服务业的应用非常广泛，很多第三方交易系统、银行、金融机构都选择用Java 开发，因为相对而言，Java 较安全 。大型跨国投资银行用 Java来编写前台和后台的电子交易系统，结算和确认系统，数据处理项目以及其他项目。</p><p><strong>3、网站</strong></p><p>Java在电子商务领域以及网站开发领域占据了一定的席位。开发人员可以运用许多不同的框架来创建Web 项目，如 MyBatis、Spring 全家桶。</p><p><strong>4、嵌入式领域</strong></p><p>Java在嵌入式领域发展空间很大。是指各种小型设备上的应用，包括机顶盒、车载的大屏影音娱乐设备、POS机等。在这个平台上，只需 130KB 就能够使用 Java技术。（在智能卡或者传感器上）</p><p><strong>5、大数据技术</strong></p><p>Hadoop 以及其他大数据处理技术很多都是用 Java，例如 Apache 的基于 Java的 HBase 和 Accumulo 以及 ElasticSearchas。</p><p><strong>6、框架</strong></p><p>解决企业应用开发的复杂性，让开发更加方便。</p><p><strong>7、软件</strong></p><p>制作小游戏、开发工具 IDE 。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.1 JDK 下载及准备工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.0.1 前言</title>
      <link href="/2022/04/29/1.1.0-shuo-zai-qian-mian-de-hua/1.1.0.1-qian-yan/"/>
      <url>/2022/04/29/1.1.0-shuo-zai-qian-mian-de-hua/1.1.0.1-qian-yan/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><figure><img src="https://s2.loli.net/2022/04/22/sXGKZ3PywET9Uzg.png" alt="魔兽教人入土"><figcaption aria-hidden="true">魔兽教人入土</figcaption></figure><h3 id="内容介绍">内容介绍</h3><p>介绍 JavaSE基础的基本语法知识，不会包含特别难以理解或更深层次的内容，通俗易懂。</p><p><strong>前提</strong></p><p>本书的所有例子使用 JDK8 在 Windows10 系统下完成，所以默认使用exe；若你与我的不一致，快捷键、源码都有可能不同，但网上无偿资源十分的多，搜索了解不同之处即可。</p><p><strong>受众人群</strong></p><p>区别于教材，不会设问不答，而是十分详细，不会为读者留出思考和遐想的空间；目的只为节省时间，算是入门的自学读物吧。</p><p>主要让小白快速了解或回顾 JavaSE的基础语法知识，随看即用，无阅读门槛。</p><p>如果要明明白白，至少要有初高中数学知识，否则遇到什么函数、多次项、对数、极限...有可能迷糊。</p><p><strong>主要内容</strong></p><p>本书前二十章，涵盖了如 Java基础语法、变量、运算符、流程控制语句、面向对象、常用类、集合、IO等部分，基本囊括作为后端开发人员必学的知识点。</p><p>另外把那些不常用的知识自成一章，移入<strong>扩充内容</strong>。</p><p>本书示范中，将可能使用到的软件、工具网址放入<strong>资源地址</strong>中。</p><p><strong>章节编排</strong></p><p>每章共有 3 级目录，取名尽量保持唯一性；第 2级目录随后跟着<strong>内容导视</strong>，用来统领第 3 级目录的内容；若第3 级目录中还有大量知识点，会提取到<strong>内容如下</strong>。</p><p>对于讲源码的部分，先抛出结论，自成一节，在它的下一个目录，粘贴全部源码，逐行分析。</p><p>每章的结尾会插入<strong>总结回顾</strong>与习题；习题的平均难度分级：脑海练习、实战演练、掀起波澜、头脑风暴、大脑宕机、空空如也。</p><p>此外正文中可能会以<strong>课堂练习</strong>与<strong>思考</strong>的形式发问。思考的答案紧跟题目后面，课堂练习答案在文章末尾，<strong>参考答案</strong>自成一章。</p><p><strong>如何使用</strong></p><p>因为人的大脑很特别，会自动屏蔽掉日常普通、枯燥乏味的事情，目的是保持内存充足。它只记住比较特别的，其它的都会慢慢遗忘。</p><p>什么是比较特别的？</p><ul><li>重复，一直重复；重复到大脑认为这不该忘记，有道言：熟能生巧、勤能补拙、好记性不如烂笔头，还谈不上拼天赋包括努力。</li><li>新奇的、有趣的、充满致命危险的、富有挑战性的、特殊的；与自己基因特性相关，偏向哪方面，大脑对哪感兴趣，不用你重复多次，自然会记住。</li></ul><p>所以我加入了总结回顾，记录了这一章的重要内容，怕你看着看着就全忘了。放心，只有一点点，不会对你的大脑造成负担。看完后，记得休息一会。</p><h3 id="更新内容">更新内容</h3><p><strong>第 3 版的更新内容</strong></p><p>新增 switch case 分支、补码、二进制转换、字符编码常识、值传递、String字符串常量池和 intern方法的解析、第三代日期类、UUID、正则表达式等一系列内容。</p><p>将双向链表移入 LinkedList 这节中。</p><p>取消了 b 标签的使用，因为无法在 CSDN中无法做到与博客园一样的显示。</p><p>取消了 img 标签的使用，因为在 CSDN 中无法显示图片。</p><p>取消了 gif 动图的使用，因为打印 pdf 文件后就是静图；</p><p>取消了超链接使用，统一使用网址代替。</p><p>发现每章的内容过多，将每章继续拆分为几个小节。</p><p>移除了强类型语言、进制转换、字符编码、原码补码等内容。</p><p><strong>第 2 版的更新内容</strong></p><p>将所有目录重新整合，改名，保证标题的唯一性，否则博客园可能跳转错误。</p><p>将 字符编码 部分内容移到 常用类 一章中；将 Eclipse移至扩充内容中；将下载与准备工作合二为一，修改 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="0.991ex" height="2.057ex" role="img" focusable="false" viewBox="0 -704 438 909"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D709" d="M268 632Q268 704 296 704Q314 704 314 687Q314 682 311 664T308 635T309 620V616H315Q342 619 360 619Q443 619 443 586Q439 548 358 546H344Q326 546 317 549T290 566Q257 550 226 505T195 405Q195 381 201 364T211 342T218 337Q266 347 298 347Q375 347 375 314Q374 297 359 288T327 277T280 275Q234 275 208 283L195 286Q149 260 119 214T88 130Q88 116 90 108Q101 79 129 63T229 20Q238 17 243 15Q337 -21 354 -33Q383 -53 383 -94Q383 -137 351 -171T273 -205Q240 -205 202 -190T158 -167Q156 -163 156 -159Q156 -151 161 -146T176 -140Q182 -140 189 -143Q232 -168 274 -168Q286 -168 292 -165Q313 -151 313 -129Q313 -112 301 -104T232 -75Q214 -68 204 -64Q198 -62 171 -52T136 -38T107 -24T78 -8T56 12T36 37T26 66T21 103Q21 149 55 206T145 301L154 307L148 313Q141 319 136 323T124 338T111 358T103 382T99 413Q99 471 143 524T259 602L271 607Q268 618 268 632Z"></path></g></g></g></svg></mjx-container></span> 符号的显示问题；用 ① 替换 1.避免格式乱码。</p><p>由于章节过多，这篇只得拆分成 20 章，否则浏览器加载不过来。</p><h3 id="其他说明">其他说明</h3><p><strong>跳转问题</strong></p><p>博客园有时会出毛病，在同一篇文章中，如果两个标题名相同，点击只会跳转到第一个同名标题；虽然已经开始在标题前面加1.1.0让标题名唯一，但是目前还未改完，请从点击如图展示的标题列表中跳转。（2022/03/1118:00）</p><figure><img src="https://img-blog.csdnimg.cn/977181edf02a42a9a8b5f1dc7458367c.png" alt="博客园已弃用"><figcaption aria-hidden="true">博客园已弃用</figcaption></figure><p><strong>封面制作</strong></p><p>封面是用 Win10 3D 画图制作的。</p><p><strong>爱好</strong></p><p>喜欢养鱼（草金鱼）、养龟（草龟）；看奥特曼；看优秀的国漫，如伍六七、凡人修仙传；喜欢听梁博的歌；欢迎交流。</p><h3 id="本书由来">本书由来</h3><p>本人就不是正儿八经的程序员，我也知道，像我这种野路子出身的程序员，从网上东拼西凑没有体系得来的知识，看法一定不全面，但我还是希望能够帮助到大家，你就当我童心未泯吧。</p><p>疫情大家都被困在家中，只能慌着想另谋出路，培训机构天天打广告，制图、CAD、编程、剪辑...，于是抱着试一试的心态，他们都说学Java 好找工作，我怎么感觉教人赚钱的人最赚钱？</p><p>当然我没去培训机构，而是在网上一篇篇的看文章，因为学习路线图挺多，你在知乎上随便搜下，就有一大群打广告，引流到自己的微信公众号；让我不禁感慨那些熟手竟然都混的这么艰难。</p><p>我越看，越觉得自己太滞后了，太脱节了。Java是上个世纪末出现的，我到现在才知道，仿佛我们这个地方的时间流速比发达城市慢了几千倍。我可能会想，如果要是早点知道就好了，也不至于大学期间抱着动力电池组、汽车检测与故障判断百无聊赖，只能在腾讯中迷失自我，寻求一点认同感。我现在才明白，并不是不知道自己到底喜欢什么，而是自己视野太窄，接触东西太少，别人也是如此，给不了贴合实际的建议，所以还是靠自己寻，但是又不能完全不听从别人建议，只希望别又浪费三年。</p><p>年龄越大越感觉似乎有一道屏障阻碍，不，不对，应该是高中时就有了这种局限性。</p><p>所以感觉自己就像困在茧中发育迟缓的儿童，或者像是一排纽扣，某个纽扣系错位，其它全都错位了。真担心，还没长起来，就gg了。我很明白，如果你也能感同深受，我祝你早日挣脱束缚，突破自己的局限性。</p><p>由此推出，可能我习以为常的概念，但其他人却一无所知，看到线头也认不出来，自然也不会揪。说实话，要不是学Java 顺带接触了前端，我永远也不会知道浏览器页面背后隐藏的 HTML标签，或许误解为 Word或者其它更高深的东西。再想到大学时还是如高中般按部就班，呆呆地等老师讲，什么高等数学啊，没讲的就不知道要学，结果就讲到极限没讲了，直到毕业后才醒悟，可惜已经没有那么好的学习环境了，真傻。所以，我说非本科的，还是抽出时间干自己的事吧，只听老师讲没多大用处。</p><p>那些本科、985、211出来的，我不知道他们学校是否与社会脱节，还是不需要培训直接就能胜任工作；又或者那些高材生早就摸索出了属于自己的道路，只待毕业后就能大展身手；真是年轻有为啊。当然如果不是，也不要妄自菲薄，至少你学习能力强，也聪明，打败了50%的同龄人，多接触我们这样的人，不要被外界评价降低了自己的自信心，哪怕现在积累散去，也可以东山再起，别放弃，要加油！</p><p>对我而言，也许受眼界或目光局限，看不远，但我并不认为这是遗憾，种树的最好时期除了十年前就是现在。</p><p>所以我的目标压根就不是教小白前沿知识，因为当一个新概念传到我们那，可能都不知道被多少人玩烂了；我只是相信还有一些人如同曾经的我一样，没来得及上道，视野受限，四处碰壁，我想踩过的坑没有必要再让人踩一遍吧。</p><p>当然我可没有那么高尚，我很坏的，不受人待见，像是与世界格格不入披着人皮的异类，缺点也是一大堆，对此我没有什么意见，认了。我只是不希望有人跟我一样，踏同一个坑，犯同一个错，浪费生命，自责内疚，消耗最美的年华。可现在技术如此成熟，获取某领域的知识简直不要太方便，个人的努力似乎变得如此廉价，我这个后辈还有必要写吗？</p><p>这个学习时间太长了，还不容易上手，可能学不出什么名堂，做好心理准备吧。如果你很久以后才看到这篇文章，这本书介绍的内容、软件可能也会过时。（2021/07/1519:29）</p><p>我以前听说过一个段子，让我改编一下吧：老师在课堂上将 100%的知识讲出了 70%，同学们接收到了 40%，动笔自己试下，写出了 10%，隔天只剩 1% 了，剩下全靠编。</p><p>于是我这知识算是从网上来，经过遗忘、组装、变异后再回到网上去吧。</p><h3 id="帮助说明">帮助说明</h3><p>你帮助了我，我自然很乐意回馈你。但是请客，我不知道你是真心的感到开心，还是出于礼貌，很拘谨，不好意思拒绝，说不出口，又或者只是人的本性如此，不受控制地开心，而不是你的本心；这样猜来猜去的，很累。本人没有去高级餐厅的经验，怕出洋相。</p><p>你如果有什么难处，力所能及下，我会帮助你的。（不借钱，被人骗过）</p><p>我听力不好，医生说是脑神经损伤，不可逆了（不可恢复）：听力的衰弱、接收频率的丢失、无法被解析，说人话就是你叫我，我听不见；听见了声音，不认为是人在喊我；知道你在喊我，但不知道你在讲什么，需要重复几次才能听懂，所以不喜与人交流，不喜欢悄悄话，声音太小了。</p><p>我的语言沟通能力方面不是很好，每当亲戚叫我多接触人，出去找个好工作，不要好高骛远，实在不知道未来如何是好，我坐着吧又听不懂你们在讲什么，彷佛被按在椅子上不能离开，比较困扰，所以一直独处，没有面对人的经验，显得十分冷漠，常常被人当作矫情。</p><p>由于不怎么接触人，时常感觉自己不近人情，只在家的附近活动，逢年过节不送礼，又不嘘寒问暖走个表面形式，生病也不带礼物看看，没有那些乐呵呵的人受欢迎，我自认为挺讨人嫌，不像个正常人，融入集体，至少我周围看不到第2 个我这样的，我经常自拟为披着人皮的生物，似人。</p><p>哦，你如果想招聘我，想好这一点，我不适合与客户打交道的。希望不会因此找不到工作而饿死吧，否则在全中国也是独一份笑话。</p><p>我很早之前就听说过：不要试图改变他人，因为他人无法改变，要从自己身上找原因。每次出现问题，不用别人说，自己就开始把矛头指向自己。现在发现改变自己也很难，之前一直对自己耿耿于怀，发现只会让事情变得越来越糟，因为与最了解自己的自己对抗，这是一件多么愚蠢的事，它总能找到内心最柔弱处，给你致命一击。</p><p>终于发现这样不行了，不原谅自己，自己就会拖自己下水：反正就这样了，无法挽回，还不如破罐子破摔；自己给自己过多压力，整个人非但不能前进，反而会散去精气神；一直被动接收别人的观点，只会让我深陷地狱，但我就是十分在意别人的看法，于是想着法子给自己洗脑：我凭什么要管别人的看法来折磨自己？我就这样坏、无耻啦，我就是有这么多不完美的地方，我不当人啦！咋滴？想着想着，于是学会了拥抱自己，接纳自己；哪怕自己有太多的缺陷与不足，拥有这个身体已经值得了，没有必要追求过多，生和它一起，逝也和它一起，它才是最了解我的人，其它都是浮云，没有必要与它不愉快。</p><p>于是担子自然就放下了一大半。它再差劲那也是我，不必撇清关系，并且它还是挺好用的，就是忘得快。</p><p>当然你如果说想同情我，那倒没有必要啊，我这不是聋，只是偶尔听不懂，大多数情况下还可以对话。谢谢你的关心，祝你天天开心，岁月安好。</p><figure><img src="https://s2.loli.net/2022/03/19/aLTZbEQFgztYv1r.png" alt="英语语法"><figcaption aria-hidden="true">英语语法</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/19/4DAw5xCE782ruel.png" alt="动词"><figcaption aria-hidden="true">动词</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/19/OAh4mHqwvc3tWZT.png" alt="在 b 站买的公开课"><figcaption aria-hidden="true">在 b 站买的公开课</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/19/qGxYHuJlR94fsOE.png" alt="力学"><figcaption aria-hidden="true">力学</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/19/cLoymdH4ivtZXkl.png" alt="天文课"><figcaption aria-hidden="true">天文课</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/19/EB7HKsY129RhIUd.png" alt="数学分析"><figcaption aria-hidden="true">数学分析</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/19/QAvpn8x27zEYlsN.png" alt="定积分"><figcaption aria-hidden="true">定积分</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/19/FnYwlPG5TRycOKh.png" alt="泰勒公式"><figcaption aria-hidden="true">泰勒公式</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/19/8691OkoJsQac2Rd.png" alt="高等代数"><figcaption aria-hidden="true">高等代数</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/19/yNRUzX62kfvisFE.png" alt="酉空间"><figcaption aria-hidden="true">酉空间</figcaption></figure><p>数学讲的还是挺简单的，于是买了几本书，发现老师明明在视频上讲的通俗易懂，由浅入深，但是编写的大学教材是真的劝退人，几千页啊，战线拉得太长了。并且那段时间在学Java，于是没再继续了，我只知道一点，不用的知识一定会忘记，所以现在干脆不学了，等用时再补。果然遗忘才是人类最大的法宝。</p><figure><img src="https://s2.loli.net/2022/03/19/J2CaKih1QIZf9EW.png" alt="高等代数指导书"><figcaption aria-hidden="true">高等代数指导书</figcaption></figure><h3 id="求职">求职</h3><p>天要下雨，人要吃饭；不管再怎么想，到了年龄，就算不结婚生子，但还是得找工作。</p><p>不讲什么本人勤奋热爱好学、吃苦耐劳这套老掉牙的事了，这玩意就是你情我愿，一拍即合，不行就拉倒，谁也没有必要低声下气，彷佛占了什么便宜，双向选择嘛。</p><p>招聘网站一个个看（不太信任，听说骗子挺多，还是需要线下跑来跑去，还可能被第三方公司外包，扯皮都没法扯，精力都耗没了），什么一面二面，还要花时间背没有用的题目，互相试探，装的很牛的样子，然后等通知；或者一个个线下到处漫无目的地找；除以上途径之外，我还想在各大网站上发布信息，希望能够找到合适的工作。</p><p>若你想要了解我掌握的东西，那你看看我写的博客就行，也不会超出这个博客内容太多，忘了很正常，看看就捡起来了，我又不是电脑，没必要一直存储到脑海中，超时就丢掉。</p><p>要求：</p><ul><li><p>工作地址：离湖北越近越好。</p></li><li><p>工作内容：与电脑相关就很好，敲字什么的无所谓，我不想丢失熟练度。</p></li><li><p>工作形式：公司、团队搭伙、工厂、私活、兼职、在家...都可以。</p></li><li><p>工作要求：</p><p>1）连续工作半小时 ~ 1小时，因为现在码字，眼睛不是很好，很干涩需要流泪才能缓解，需要休息 5分钟远眺；我常常使用番茄钟，提醒自己该休息了，以免精力不足，影响明天。</p><p>2）可以接受重复性劳动，时长不能超过 9小时；禁止夜班，没得商量。为了身体着想，说不定工资还不够看病呢。</p></li><li><p>公司气氛：不要勾心斗角、人人胡思乱想；不要官僚作风、气氛紧张。</p></li><li><p>工资要求：实习期间工资 3000 以上。</p></li><li><p>个人缺点：</p><p>1）手笨，不会系绳子，只会打蝴蝶结与死结。</p><p>2）习惯沉默寡言，不会烘托气氛；别觉得奇怪，各人秉性不同，不必强求。</p><p>3）英语差，我尝试过好多次了，暂时办不到，以后有时间再试试。</p></li><li><p>如果确定要为您办事了，我会在入职前将鱼放生，所以请不要耍我玩。</p></li><li><p>补充一条，禁止传销、坑蒙拐骗其他人、等其它犯法行为。</p></li></ul><p>你如果有意向，可以列出岗位的技术相关要求，若我有不熟悉的，我直接自学完了，再到你那来，给你干活去，这对我小菜一碟。</p><p>声明：天下没有不散的宴席，人都有分别的时候，好聚好散；请直接提出来，别耍阴谋，调来调去，或突然增大压力。</p><p><strong>本人联系方式</strong></p><p>不可以公开手机号，我怕销售天天打我电话，可以私聊我，在此期间应该一直在家附近寻找工作，我习惯被动，现在疫情这么严重，除非一锤定音，否则实在不想外地跑来跑去。</p><p>QQ：2675385031</p><p>微信号：cqhjava</p><p>邮箱：2675385031@qq.com</p><p>CSDN：https://blog.csdn.net/cqh123hh</p><p>（有人问，有工作就不错了，怎么还提这么高的要求？漫画附图：）</p><p>PS：这要求还算高？</p><figure><img src="https://s2.loli.net/2022/03/20/YVyTqm79hRXfMHA.png" alt="金老师炒股破产引起的一系列悲剧"><figcaption aria-hidden="true">金老师炒股破产引起的一系列悲剧</figcaption></figure><p>当然我很清楚，能够看到这篇文章的，要么是小白急于寻找信息，要么是好奇；我这啰里吧嗦的，这写了也是白写，所以没有寄托太多的希望；再说了，这毕竟不是专门的招聘网站。</p><p><strong>工作情况</strong></p><p>物业维修员：2019.10 ~ 2020.5</p><p>状态：待业中，最近被催着找工作，能敲电脑就行；只是怕又头脑一热，选错了，又浪费3 年。</p><p>分支：送餐员、流水线、文员、Java 初级工程师、渔场、志愿员...</p><h3 id="致谢与勘误">致谢与勘误</h3><p><strong>致谢</strong></p><p>首先感谢父母给我一个好的身体，感谢母亲耐心的支持。</p><p>其次感谢遇到的挫折与不堪，及时纠正我前进的方向。好吧我还是讨厌它，为什么我总要给自己的生活添堵呢？</p><p>最后感谢在网上无私奉献知识的大家，我是在家自学的，不懂就上网搜，算是野生吧。你们对我带来了很大的帮助，可以说脑海中的知识体系都是网上博客园一篇篇的文章，一段段视频堆砌而成的，真的很感谢你们。生活在和平的中国，享受如此丰富的资源，挺幸运的，我会把文章知识来源链接放在参考文献中，但可能有遗漏，不能一一列出，但你们对我帮助也挺大，感谢。</p><p><strong>这些在网上搜集的资料，如有侵权，烦请告知。</strong></p><p>编者：cqh<br>2022 年 3 月 4 日，于湖北安陆</p><p><strong>勘误</strong></p><p>笔者也只能算是新手，学识尚浅、水平有限，有些抽象、底层的东西以目前的功力无法一眼看破，找不到合适的方法去验证结论，只能是凭第一感觉得到具体的规律，所以也可能是想当然，看法比较片面。你就当成强行解释，笑一笑吧，对身体好。</p><p>部分解释可能不详细或不清楚（词不达意），如果你有更好、更通俗易懂的语言，欢迎留言指出。</p><p>在阅读文章时，请你时刻持有一种质疑的态度，这样既能帮助自己思考，也能发现我文章的不足之处，如果文章中有什么错漏的地方，还请不吝啬指教与批评，十分感谢！</p><p>若有帮助，会将你列入鸣谢名单中。</p><p><strong>书中源码地址</strong></p><p>https://gitee.com/ccqqhh/java-se</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.0 说在前面的话 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.0.2 自序</title>
      <link href="/2022/04/29/1.1.0-shuo-zai-qian-mian-de-hua/1.1.0.2-zi-xu/"/>
      <url>/2022/04/29/1.1.0-shuo-zai-qian-mian-de-hua/1.1.0.2-zi-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="自序">自序</h2><h3 id="第-3-版自序">第 3 版自序</h3><p>之前是想要找文献与资料，四处找不到；现在是资料漫天飞，四顾茫然；曾经的我反复横跳，浪费了很多时间与精力，干脆把曾经所做的学习笔记整合起来，方便大家。并且这期间，如果另有收获，会持续更新此书的内容。（学海无涯苦作舟）</p><p>本人专科毕业。我始终认为只有自己喜欢的才需要学，忽略了高中这不是专项发展，而是筛选人才；那么多的人，企业正好设置为本科门槛可以节省筛选时间；此外你通不过本科，企业难道不会怀疑你的学习能力有问题？既然是为了赚钱，那为什么不选更好的？人才多的去，谁稀罕你这一个。</p><p>我倒是不后悔，因为学历与钱对我而言不太重要，还比不上自身学会了写代码的那种喜悦；只是觉得大多数人经过18年的学习，转眼间淘汰了一半人，估计都流向工厂的流水线了，太浪费了。</p><p>但是学历高，见识的东西就更多，能够打下更坚实的地基，就算现在一无所有，也能东山再起。</p><p>一直笑着说大不了回家种田，但其实要是真的能够维持生活，没有人愿意背井离乡，出去打工的。我之前提到过滞后性，上一辈人因为这种滞后性，吃够了亏，于是只让我们专心学习，自己在外辛苦打工，承受所有的风险，只为了子代不再重蹈覆辙，以为我们考上大学了以后就能赚很多钱，可以享福了，却忽略了其它方面。</p><p>我们都以为学成了，考上了好大学，也许前途就顺了。但总还有一半人被淘汰了，比如我，父母还是抱有期望的，至少是个大学生啊！至少比我们强吧，结果期望越大，失望也就越大。</p><p>其实学校教的东西可用的很少，大多数就是纯粹应付考试。等上了大学后，被忽略的其它方面，弊处就开始显现；上一辈人突然觉得这么聪明的大学生，这点生活常识都不懂？人际交往、生活常识、整理内务、洗衣做饭、修电脑啥都一团糟？你们在学校学了个啥？换我来吧！读书有啥用！废物！你们90 后当家了，这个社会要完蛋！</p><p>我不太在意，我知道他的局限性，他所在的小地方，也就只能看到我，误以为我就是大学生的缩影。但是网上有才有能力的人多了海了，否则你们找工作怎么这么难找。当然工厂、销售...等岗位还是挺需要人的。</p><p>我认为有这些高智商的人材们，尤其是特别努力勤奋的，社会只会越来越好，但是对自己的命运不是特别乐观。</p><p>我希望以后不会固步自封，局限自己的认知，觉得自己经历过这么多的事情，可以一言堂，断定周围人的秉性。因为经验有时效性，且与个人息息相关，在别人身上不一定适用。传递的观念如果别人不听后吃亏掉坑，我就在旁边暗笑，那样太可怕了，那说明我已经变质了，经验此时反而束缚住了我前进的脚步。</p><blockquote><p>警告自己的一句话：我知道人都会变，可是当你看到这曾经写下的这句话，如果觉得很幼稚可笑，算了，不想前进了，就说明你已经融化了。那么狠狠地抽自己，往死里抽，别让我瞧不起你，你欠我的。我现在拼死累活地，下决心，不是为了让现在的你心安理得的阻碍其他人的梦想，嘲讽其他人，也不是让你吃老本，坐吃山空，别以为这是理所当然，好好想想自己该做什么，还是在楼下打麻将与其他人夸天？</p></blockquote><p>当初高中毕业，选专业，虽然实现不了小时候的理想，但是想着新能源汽车发展起来了，也可以保护环境啊，于是特别天真地就选了此专业。唉，实习时来的都是接插线、黑白班做饲料、卖挖掘机、开叉车...尤其看到要求男女不限，18~ 50，身体健康...沉默，我这时才明白自己早就已经 out了，到这来只是将噩耗延迟而已，其实刚进大学时觉得完了啊，时间一长，如同温水煮青蛙一般，渐渐习惯了自己的处境，我应该事先多看看东西扩展一下视野，或许可以认清自己，然后挣扎一下；不禁怀疑我到底这18年的生涯到底学了什么？混成这个样子？竟然不知道在简历添些什么东西，热情开朗？踏实能干？会求微积分？也不明白自己有什么优点，自己的价值在哪？凭什么让企业招聘我。再看看其它要求高的，不觉得我能够达到，别人说不定看不上，真是贱啊。</p><p>好吧，乌龟壳虽然保护了我不受伤害，但是一旦有朝一日，从壳中脱离，没有练成应对危机的本能，只能扑街。</p><p>因为上半年考了一个电工证与驾驶证，友每天恨铁不成钢，即使之前有多不敢，导致错失了机会，所以这次一定不能放过！于是如同赶鸭子上架般慌着选择了工作，貌似能扯上一点关系的物业维修，正遭疫情，每天都是抄水电表，没积累可用的工作经验。解封辞职后开始学Java，跟着网上的博客与视频一步步来，哎！觉得希望来了，这有什么难的。</p><p>那段时间，父亲和亲戚不再问读书成绩的事了，时常问我学了什么名堂，答：我学的这个集合很厉害，底层用多种数据结构存储数据，你看这个双向链...停停停，别跟我讲这个，我听不懂，这么有用，什么时候出去找事？可以赚多少钱？答：额...</p><p>得，赶进度吧，花了5个多月的时间，数据结构与算法、MySQL、JDBC、HTML、CSS、JavaScript、Tomcat、Http协议、Servlet、JSP、AJAX、JQuery、Maven、MyBatis、SVN、Git、Spring、SpringMVC、Dubbo、Linux、SpringBoot、SpringCloud、Nginx、SpringSession、FastDFS、RabbitMQ、SpringSecurity、Shiro、Swagger、CRM项目...</p><p>期间为了方便翻阅和复习，加页码、加目录、记时间、正字复习、画星星、康奈尔...方法效果甚微。</p><figure><img src="https://img-blog.csdnimg.cn/1145392c9f5f49498ac28e37335a389f.png" alt="动力节点的 IDEA 如何安装"><figcaption aria-hidden="true">动力节点的 IDEA 如何安装</figcaption></figure><figure><img src="https://s2.loli.net/2022/04/23/6GFICf9tp4KxEmA.png" alt="韩顺平老师的数据结构与算法"><figcaption aria-hidden="true">韩顺平老师的数据结构与算法</figcaption></figure><figure><img src="https://s2.loli.net/2022/04/23/Rpg7jdAvW3o2CL6.png" alt="杜聚宾老师的 JavaScript"><figcaption aria-hidden="true">杜聚宾老师的 JavaScript</figcaption></figure><figure><img src="https://s2.loli.net/2022/04/23/IasLWx185YHdc2h.png" alt="杜老师的 Servlet"><figcaption aria-hidden="true">杜老师的 Servlet</figcaption></figure><figure><img src="https://s2.loli.net/2022/04/23/oT4uKgbdaOyFnit.png" alt="Spring"><figcaption aria-hidden="true">Spring</figcaption></figure><p>所以以我为反例，别用纸质笔记，很不方便的。</p><p>（之前有人问我，5个月怎么这么慢？其实我之前太贪心了，还想学数学、英语、物理...）</p><p>也不是没有人劝我，江山易改本性难移，固定的思维就像茅坑里的石头难以改变。每次听到劝导，又开始神经发作，万一呢？你到底怕什么呢？谁会吃了你？这是否已经成了本能？我想不通，也说不清了...</p><p>我的理智告诉我，我只是害怕未知，本能拒绝去尝试，害怕再次失败，又被人侮辱与嘲笑，尤其是年龄大了，没有试错机会了，只能尽力维持现状，一旦没有了父母的支撑，把我投入到大海中，要么四肢扑腾，学会游泳，要么淹死。说到底，我还是有很好的父母，坚实的后盾，实在太幸福了，所以才令人感到如此悲哀。再结合到三和大神、26岁成人被饿死之类的，我能理解亲戚他们的想法。算了，不说了，混成这个小孩模样，也是没谁了，希望能在饿死之前，主动寻求改变吧。没想到还真自证了自己初中时的想法，讽刺啊。</p><p>觉得学的也差不多了，开始看招聘，清一色的本科以上要求，这还玩个毛啊。再从网上看看题目，倒是不难，但想流利的说出，还是要背；语文、英语对我还是有点难，由于耳朵问题，只习惯看字幕，真不想把时间花在这无用的试探之上。说到底，我的信心一直被摧残，没被培养起来，一做事就放下手头的事跑过来看我，指指点点，说这不行那不行，不停地被否定，最后直接推开替换了我，一说话就被认为是借口，为什么别人行而我不行？对啊，我也纳闷这到底是为什么。所以畏手畏脚，一想到工作就躲避，哎呀都是我不行的，干不了，主动失去信心，下贱自己。那么别人看到这个样子，没有一点正能量，只会让现状越来越坏，犹如囚笼之兽。现在回想起来，这本来就不难，小事一桩！为什么非要挫折教育呢？？？究竟经历过什么事才会认为这是正确的做法？是不是我视野窄了，看不到背后的良苦用心？</p><p>得到一个规律：不犯错，必败事；如果小时候文文静静，逆来顺受，畏手畏脚，被框在自以为的规矩下，不敢尝试，看上去很听话很乖；但年纪大了，躲得了一时，躲不了一世，没有小错带来的经验，将来必定踩坑，成为平庸的人；这虽然不是必然发生的，但是概率很大，常在河边走总有一次会湿鞋嘛。小时犯错相比大时犯错，周围人包容度更高，所以建议小时多尝试。</p><p>受限于学历，所以我降低了要求，不得非要与代码搭边，随便啊，别进工厂黑白班、天天12小时，我还不想猝死。你们如果有什么好的渠道，智联、前程、脉脉...欢迎交流啊！</p><p>回顾，自己表面掌握了什么高大上的框架，但框架用起来很简单的，底层屏蔽了繁琐细节的具体实现，从配置多个XML 文件到约定大于配置直接启动，增删改查就增几个注解，改下 SQL语句，越学越简单，只是要背注解、方法名、操作步骤...才发现我其实也就是只会调下API，太浅显了，一遇到稍微深层次的问题就扑街。忘了代码就在网上搜索复制粘贴，这不就是搬砖吗？我学到这之后就没学了，就是觉得太浅了，简直把我当做硬盘在用。这些方法名，记流程有个鬼用，时代一换，又得重新开始。</p><p>我觉得是基础没打好，也许是哪里走错，之前学的不够系统，又把 JavaSE内容看了一遍，尚硅谷、动力节点、狂神说...，收获不是很大。</p><p>终于下定决心，这 Java内容之多，之繁杂，总得有人要整理一下节省小白的时间，稍微扑腾一下吧；为了帮助和我一样的人，避免踏入同一个坑，开始本书的第1 版制作：</p><figure><img src="https://s2.loli.net/2022/04/23/sMVWgjUqenT5rpS.png" alt="2021 春节时折腾的 JavaSE 笔记"><figcaption aria-hidden="true">2021 春节时折腾的 JavaSE笔记</figcaption></figure><figure><img src="https://s2.loli.net/2022/04/23/stpw46jfTRd8IEC.png" alt="前端"><figcaption aria-hidden="true">前端</figcaption></figure><figure><img src="https://s2.loli.net/2022/04/23/qkaVbGeh2vx9YRy.png" alt="MySQL 数据库"><figcaption aria-hidden="true">MySQL 数据库</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/3f434ba185a84387861657f6e5e1bd86.png" alt="MyBatis"><figcaption aria-hidden="true">MyBatis</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/b27e374baf484b4885c2fc1f2f688188.png" alt="架构的发展历史"><figcaption aria-hidden="true">架构的发展历史</figcaption></figure><p>（当然现在忘得差不多了）</p><p>当时正是过年，前前后后忙了几个月。又被打击了一顿，说我在家里游手好闲、不学无术，不务正业，试过辩解，被认为只晓得找借口，是废物一个，在村里都不好意思说，不敢走亲戚，抬不起头，对外统一口径是我好高骛远，只晓得在家里玩，那么我也就没有什么可以说的呢，我不明白这是在激励我还是在保护我呢；每当别人问起我的年龄时，是否还在上学，总是感到脸上一阵青一阵白十分羞愧，无力感萦绕在心头阴魂不散。此时负标终于超过负荷，被最后一根稻草压倒，期间强行振作，努力维护日常作息，又被说年轻人还是没有被锻炼到，还是要多给点压力锻炼下，否则太脆弱了，心理承受能力太差，连这点打击就把你压垮了，去做销售扭转下性格就好了，挺适合的。终于压不住内心的痛苦崩溃了，开始自暴自弃，为什么所有的评价都认为只有我这么废？算了吧，说的对啊，我的确没用，还学什么啊，都卖了吧，我实在太脆弱了不堪一击，整个人又坏又蠢，估计就连小学的我就瞧不起现在的自己，不搞了，自闭中；眼泪不能流，声音不能出，打碎牙齿往肚子里呜咽...男人！男人嘛，男人！你这么大个人，怎么还跟小儿一样，好意思吗？没希望了，一生已经毁了。</p><p>但是过了一段日子后，越看越觉得这个笔记不对劲，写的这么粗略，这是给自己看的吧？新手能够看得懂吗？强行驱动自己，做事必须有头有尾，还是续了一根弦。在此期间，我明白了寻求人的认同十分困难，干脆把精力放在代码、鱼、自然身上。有人说自然与这些生物有灵性，我不否认，可是它们的灵性如果达到了人的高度，假如我散步去了另一个地方、今天没有喂鱼...它们会不会在心里扯着喉咙喊：“为什么不到我这玩！为什么今天不喂我！！”那我该是什么表情？是不是比与人打交道更累？</p><p>当时又看了韩顺平老师的课程，他总结的学习方法很不错，先 demo再写注意事项。然后由此编写了第 2 版：</p><p>初入门时 JDK 安的是 15，（应该是 8，做第一版教程时才应该把 8删了，重新下了15）当我重新准备下载时，发现页面找不到了，这才知道长期支持版本是什么东东。</p><p>好吧，为了回顾当初下载软件时遇见的问题，场景重现，方便截屏，狠心格式化了电脑，把之前的Node.js、Linux、MySQL、Navicat、Maven仓库、Tomcat等一切全部删了，直到现在都还没下载回来。之前放入 GitHub仓库的代码，比如数据结构，被我认为代码写的太垃圾了，直接清空了。（现在就没有参照了，真是白给）</p><p>只剩下 FastDFS、RabbitMQ、SpringSession 的 demo 了。</p><p>好，没关系，大不了重新开始。</p><p>花了好几个月，废了很大心血，删了改，改了删，半夜突然醒来，打开电脑就只为修改一句话，信心满满，没有多少评论，想着是不是网络上资源太多，唾手可得，根本就不缺我一人的努力，此时突然觉得我都没有找到工作，所学知识之浅，路之狭窄已到头，还敢斗胆发文章，也不称称自己的斤两，这不是误人子弟吗，于是把之前的所有博客都删了，秉持了不尝试就不会失败的鸵鸟原则。</p><p>我现在想明白了，去追赶那些前言技术，学习语法，如何使用，只会流于表面，疲于奔命；干脆放弃掉，重新开始。我觉得就连Java语法，也变得不太重要，毕竟只是背别人定义的规则，还是表面；但是要写程序，没有办法，于是就有了语法入门篇。</p><p>根据纸质资料和粗略的第 1 版，以及网上的博客资料，拼拼凑凑得来了第 3版，至此只完成到集合部分。并且我还是不满意，决定抽出时间，继续重置。</p><p>现在又要看最开始的老版笔记重新写一遍，做事有始有终，不能轻言放弃，爬也要爬到终点！没有什么是不可能的（Nothingisimpossible），即使这份感情被背叛过千百次。还好现在没工作，否则抽不出时间写。由于删了之前的博客，有很多都是后来在最初版的基础上修修补补地，可能有很多疏漏、没来得及添加的、知识变异了的，恳请大家提出宝贵的批评和建议，以便改正。学习路线就按韩老师的来，先demo 再声明课堂注意、出题目，按部就班的点还是挺不错的。</p><p>2022.3.11</p><h3 id="第-2-版自序">第 2 版自序</h3><p>接受现实，痛定思痛，干脆抽出时间，整理曾经写过的纸质笔记与博客，为尚未踏出校门的同学节省一点时间。</p><p>有的地方根本没必要学，直接复制粘贴看看 API就行，没啥技术含量的。对于那些性格内向的人，心里有很多内容与墨水，但嘴里吐不出话的人，我特别能够理解你的苦衷，珍惜校招吧，避免毕业就是失业的尴尬局面。</p><p>有些人的确很聪明，在这里我不想扯勤奋与努力，以前也讲过，这只是表象，何况对于有些人也真的很难，考虑到通用性，内容稍微细一点，不要嫌我啰嗦。</p><p>我已经很知足了，阳光、空气、可以动的四肢、能计算 1 + 1的大脑，没用什么遗憾了。对我而言，健康远比时间、金钱、技术重要。不对，这该死的技术，这抵挡不住的魅力啊！！！</p><p>真的好怀念魔兽，如果阿尔萨斯王子没走屠杀线一定会有美好的结局吧。</p><p>2021.7.4</p><h3 id="第-1-版自序">第 1 版自序</h3><p>最近学习了 MarkDown语法与五笔打字，打算把纸质笔记整理成书，帮助大家。</p><p>经过一段时间的摸索中，得出了以下结论，希望对新手有帮助。</p><p><strong>1、删除无效的软件</strong>（打造合适的环境）</p><p>比如一直让你刷刷刷，停不下来的。因为你每次刷，都在期待下一个视频对你有用，但很大的可能只是满足了你的多巴胺分泌。</p><p>上瘾后不要责怪自己，想办法清醒后把这些触手可及的东西，不管是卸载、还是关闭推送、扔在角落...尽一切可能不要让它来打扰你；如果你是因为没有事情，好无聊，看这些来打发时间，那就找一些其他事情吧，如散步、健身、看书什么都可以...</p><p>这种大量占用时间碎片，令人上瘾的软件，可以说是一种毒瘤，我想不通为什么要研发它，钱真的很重要，但也不至于这样吧。</p><p>我说过人就是个石头，现在看看销售营销等一些手段玩弄心理，越发坚定这个想法；我们能做的只不过是别让那些外力推动自己。</p><p><strong>2、工作与学习之间的平衡</strong></p><p>公司都是重复性劳动，没有实际上的经验提升，还要担心上级领导的试探，同事的打压，构建话术。下标后自学也只能学习1、2个小时，并且还不包括动手尝试的环节，能够学到手的知识十分浅显。等学完，天都换了。</p><p>并且公司本质上是私人组织的、有了好点子想变现、以盈利为目的的结构；你想想你要是老板，谁不行直接替换掉，反正人才多的是，为何还要等你慢慢成长，真以为自己是潜力股吗。</p><p>但是辞职也不可取，长时间在家，没有了生活来源；走在路上还要被婆婆们嬉笑。</p><p>此外亲戚们都不会理解，最亲的人也会骂你不中用，你给他也讲不明白，还会被觉得十分可怜。一开始还可以打哈哈，说自己已经毕业了，在学习编程；但之后呢？这条漫长的学习之路，不同于进厂教教就能直接上手。</p><p>我想提醒你，你是否也感觉大学的课完全没必要上，但我们也许还如同高中一样，按部就班，讲什么就听什么，那么到了毕业就等于失业，你应该抽空把自己的爱好发扬光大。如果等到上班再学，其他人会怎么想？</p><p>结论：<strong>请好好珍惜大学的时光，那是唯一适合自学的时候</strong>。否则你要承担额外的精神压力，扛不住人就废了。</p><p><strong>3、适当约束自己的好奇心</strong></p><p>不要看到什么都想学，什么都想买，一直在搜，知识太多，你学不过来的。你先在网上搜索，比如后端的整套知识点，按顺序来，一心一意，一套教程为主，有疑惑的再去别的地方比对。不要没事就搜索一大堆资料收藏，又不开始，资料一定要精简，那些看上去有用的知识但短期用不上的，直接取消收藏。等你到了这步，再找资源，别做松鼠。</p><p>关于难度高的，可以先跳过，记录下来，后面再补上，比如数据结构、JVM底层、多线程与高并发、GUI 等等...别把初学时间浪费在这上面。</p><p>不要背代码，要掌握原理，方法可以到 API文档上查。之前基本都是概念上的东西，理解就好了，但学到集合、IO、常用类如String，只背方法名一定会消灭你学习的兴趣。</p><p>如果学习资料抛出一大堆让人心痒痒的新名词，操作不讲规则与原理，没有容易理解的例子，只是像背或粘贴似的敲打代码以及一大堆的命令控制流程，那么我劝你趁早跳过，用时再翻阅。</p><p><strong>4、管理好精力</strong></p><p>并不是一直在同一个地方枯坐，工作效率才会高。</p><p>要合理分配精力，因为精力是有限的。学习并不是生活的全部，如果你整天扑到学习上，只会感动自己。随着精力的消耗，自控力的减弱，一定会在某天突然崩掉，开始变得什么都没有兴趣，行动力拉到最低，即使强迫在学，也只是枯坐原地，享受着左耳进右耳出的枯燥感。</p><p>早起别熬夜，每天一定留至少 30 分钟的时间午睡。（为了第 2天的精神良好）学习时推荐使用番茄钟，每过半小时就休息一小会，合理分配精力。（休息时不要看电子产品与动脑筋，要适当远眺）</p><p><strong>5、学好英语</strong></p><p>没什么说的，英语真的很通用很重要，为了阅读懂优质的国外资料。看着机翻的我太拉跨的，简直是哑巴英语。学不会也没关系，就算关了一扇窗，把开这扇窗的力量用到别的地方去，一定不会浪费的。</p><p><strong>6、必学的知识点</strong></p><p>从大多招聘岗位的要求取出交集：</p><p>IO、集合、JVM、多线程、Spring、SpringBoot、SpringMVC、MyBatis、Dubbo、SpringCloud、JavaScript、Vue、MySQL与 Oracle 取其一、SQL调优、Redis、Tomcat、Nginx、Docker、Zookeeper、RabbitMQ、Kafka、Linux、HTTP与 TCP / IP 协议、Socker、Maven、Git、AJAX、ElasticSearch</p><p>剩下的知识，应聘意中岗位时再选择性补全。</p><p><strong>7、选择书籍还是视频</strong></p><p>视频时间看完所需时间更长，但可以一步步来，如果章节内容划分合理，每个视频时常合适，学习者更轻松完成每个目标，掌握自己的进度。适合初学者。</p><p>书籍花费时间较少，但经常有断节之处，初学者搞不明白缺少哪一个环节，看着晦涩难懂的文字，翻不了几页就草草放弃，适合耐得住性子的人。</p><p><strong>8、不要过分追求完美（承认自己的不足之处）</strong></p><p>想做就直接放手干，不要计划的那么周全，稍微一有变动，就放弃目标，想明天再做。是吧，别觉得只有从容不迫、不慌不忙、按部就班地才叫做事，而达不到自己的心理预期就不做了，大多数人都是计划赶不上变化，被搞得灰头土脸的。</p><p>另外人都是有惯性的，如果设置了太高的目标难度，只要有一天没坚持下来或不想做了，那么最终结果一定是放弃。</p><p>这不禁让我怀疑，以前对生命的定义。我本来以为生命是一种奇迹，我感到自豪，超脱于物质之上；比如从下坡推一个石头，它只会毫无疑问的滚落下去，而我们可以做出反应。</p><p>但经过太多的事后，我发现生命的本质与死物没有太大区别；生命就像是一台精密的操作仪器，如同电脑、机器人，只不过比它们先进点。</p><p>接收输入做出反应，将应对方式与最终结果存储；等下一次事件再发生时，可以不断优化脑海中存储的应对危机的方法，达成自我学习的本领。</p><p><strong>9、学会分享</strong></p><p>不要闭门造车，要发在各大网站上分享，Markdown语法如果你都会了，直接发在博客网上。不要觉得自己技术菜。</p><p>第一，人人都有开始，你发出来了，别人才能纠正你的错误，避免成为井底之蛙。</p><p>第二，你又开始自耗了，不停地在脑海天人交战，一顿脑补：会不会万一发出来被人嘲笑怎么办？...于是藏着掖着，生怕别人知道，出丑，事情还未做，就想一系列的后果，别人有多可恶。我觉得世上还是好心人多，当然不要被零星几个恶评就忽略了大多数支持你的人。</p><p>第三，百分之 99.9 的人根本刷不到你的文章，或者一下就 ×过去了，即使刷到了，那还有 9.9成人浏览刷的一下就关了，评论的那是少之又少，凤毛麟角。如果帮助不到他，谁还关心你是谁，最多充当局外客感到可笑。当你还在纠结别人的看法时，纠结要不要做时，别人根本记都不记得你。我们在网络时代那是十分渺小，沧海一粟，很快被淹没，就算有弄潮儿掀起了几朵浪花，也会很快平息，所以别再纠结丢不丢脸了。</p><p><strong>10、关于努力与勤奋</strong></p><p>有人经常说，要自律，要吃苦，要努力，才能成功，你看看这些成功人士都是这样...努力才能得到一切，才能成功。但我抛出一个结论：努力与吃苦，并不能成功，也不能改变命运。</p><p>他们忽略了一个东西，自律、吃苦等只是个表面行动展现出来的结果，并不是成功的原因。比如你打王者，技术很菜，但是你就想升段位，不用别人提醒，开了一把有一把，一直连跪，日夜颠倒，身体早就向你警告了，这种违反本能的行为真够自律的。不打一定不会上王者，打了无数盘由于技术太菜，也不一定能上王者。</p><p>如果你真心地想要完成某个目标，你不会觉得这是折磨的。再次声明，不是自律、努力才会成功，<strong>它们实际是想到达成目标，而自发控制自己身体机能活动的行为。</strong></p><p>所以努力只是达成目标的一种手段；由于基因与环境很难改变，于是性格也几乎定型，形成了独有的接人待物的一套行为模式，感兴趣并为之付出汗水的也就那么几件，还要承受不理解；之所以说“努力改变命运”这种只是安慰、激励自己的空话，是因为要给一点希望，如果让“唉，都是自己不够聪明，天赋不好，于是就不努力了，让子代好好搞吧”的观点占了主流，那么原本有希望改变的人也会受到负面影响，并且我之前都说过部分人根本就谈不上拼努力与天赋，正常学习不放弃就OK，没有必要与头部的那群神仙比，那么我换一种说法：“经验、知识就是力量”。</p><p>友情提醒：全身心很耗精力，记得番茄钟打断此状态（半小时），休息的时间眺望远方，不要看电视、玩智能设备，否则越来越累。</p><p><strong>11、学完要多久？</strong></p><p>如果你不复习，不怎么练，只看视频的话，最多半年。能够记住多少看命。</p><p>正常一年半（每天 8 小时以上不间断）</p><p><strong>12、是不是很难？</strong></p><p>相比越到后面越抽象，一环扣一环的数学，Java其实还算好，小白也能调用方法完成工作，理解一下就行，屏蔽了底层如何实现的繁琐细节，看看API 即可拿来用。</p><p>至于为什么一看就会，一敲就废？是不是我没有天赋？</p><p>说实话，这些东西不会就跳过，以后再补，只要学会调用方法，看看 API就行。还没有达到拼天赋的地步，努力也无需拼，努力只是外表展现的结果，而不是因，若你感觉自己很努力了，很痛苦，就像我之前说的这样，你想想哪里出现了问题，是不是真的不感兴趣，居然会觉得要强逼自己，努力才会成功？想着人只有逼逼自己才行？</p><p>话说回来，不会不是真的完全不会，而是你看时觉得很正常，但一到做时脑海中缺少一些关键片段，甚至连思绪的头都没有，无法串联成珠，往往出错，其他人只不过是由于过往经历（熟能生巧）或者下自然地就补齐了这个漏洞。</p><p>没必要担心，如果你接触它的时间过长，会弥补的。不用特意寻找解决它的办法，多看看就行。（把同一个知识点学三遍差不多就熟了）</p><p>此外我觉得人略微笨些，是好事，意味着你能够帮助这世界绝大多数人，不会出现理所当然，而一些人却不能理解的事，知道哪里有槛，知道一些人哪里有误区。只要你走通了，其他人就能走通。</p><p>花自己的时间，让更多人节省了时间，值。努力活完短短的一生，将所得成果留给后代分享，人类真的是很了不起呢。</p><p>2021.2.11</p><h3 id="第-0-版自序">第 0 版自序</h3><p>今天是网上学习 Java的第一天，自学，根据学习路线图一篇篇在网上搜来的知识。</p><p>本人才疏学浅，感悟还不够深，只能根据些许痕迹揣摩出背后道理。主要是臆想成分居多,如果有什么不对的地方,还请各位大师指点,大家一起共同进步。</p><p>另外希望把已建立的认知体系撕开一个口，推倒。<strong>包容，承认自己的失败</strong>，不要斗气就认这个死理，大不了掌握其它方法重头再来。</p><p>2020.6.13</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.0 说在前面的话 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.6.1 一维数组</title>
      <link href="/2022/04/29/1.1.6-shu-zu/1.1.6.1-yi-wei-shu-zu/"/>
      <url>/2022/04/29/1.1.6-shu-zu/1.1.6.1-yi-wei-shu-zu/</url>
      
        <content type="html"><![CDATA[<h2 id="一维数组">6.1 一维数组</h2><p>内容导视：</p><ul><li>数组介绍</li><li>一维数组的声明</li><li>一维数组的遍历</li><li>数组元素默认值</li><li>数组赋值机制</li></ul><h3 id="数组介绍">6.1.1 数组介绍</h3><p>数组是一种数组结构，当成一个容器吧，只能存放同一类型的元素。如 int数组只能存放 int 类型的元素。（包括自动转换成 int 的元素）</p><p>数组一旦创建，长度不可变。如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此数组实例的长度被确定为 5 了，不可改变。</p><p>数组中的元素的内存地址是连续的，数组拿<mark>首元素的内存地址</mark>作为整个数组的内存地址。</p><p>数组对象都有 length属性，可以获取数组的长度。<code>int length = arr.length;</code></p><p>每个元素都有下标，从 0 开始，以 1 递增，如最后一个元素的下标是 length- 1，首元素的下标为 0。</p><blockquote><p>下标也被称为索引、index。</p></blockquote><p><strong>为什么数组长度不可变</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/*这并不是改变了原数组的长度，而是重新在堆中创建了一个新的数组实例将地址重新赋给引用，原来的数组实例由于没有引用指向被回收*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>堆是一块内存空间，用来存放实例（我有时候也称对象）。引用是指保存了实例的内存地址的变量，可以通过引用操纵实例，如同遥控器控制电视一样。</p></blockquote><p>语言设计者对需要执行的任务分配给不同的结构，数组具有固定长度，因为它旨在成为开发人员可以构建的低级别、简单的实现。</p><p>计算机内存有限，如果可以延长数组，但旁边的内存已经存了另一个对象怎么办？数组各个元素是彼此相邻存储，延长不了。</p><p>固定长度后，如果数组没有足够的空间存放元素，那么可以找到更大的空白空间创建一个新的更大的数组存放原有数组的数据，同时也可以腾出原数组的空间。</p><p>如果不确定数组长度多大，可以使用 List 集合存放数据。</p><p>集合底层已经实现好了，当数组快装满时，会在更大的空白处创建一个长度更大的数组，将原有数据复制到新数组，不需要我们手动实现。</p><p><strong>为什么数组下标从 0 开始</strong></p><ol type="1"><li><p>历史原因</p><p>之前 C 语言数组下标也是从 0开始，没有必要出一种语言就改一次下标，增加额外的学习和理解成本。</p></li><li><p>减少 CPU 指令运算</p><p>1）下标从 0 开始，计算第 i 个元素的地址，arr[i] = 首地址 + i *单个元素所占字节。</p><p>2）下标从 1 开始，计算第 i 个元素的地址，arr[i] = 首地址 +（i - 1）*单个元素所占字节。</p><p>每次寻找地址时，多了一次 i - 1 即减法的指令运算，更加消耗 CPU资源。（把大脑想象成 CPU，每次寻址时多计算一次二进制的减法）</p></li></ol><p><strong>使用数组存放元素的优点</strong>：根据下标查询元素效率极高</p><ul><li>每个元素的内存地址在空间上是连续的。</li><li>数组中每个元素类型相同，占用空间大小一样。</li><li>知道首元素的内存地址、每个元素的占用空间大小，通过下标可以算出元素的内存地址，直接通过内存地址定位元素。</li></ul><p><strong>缺点</strong>：</p><ul><li><mark>由于保证数组中每个元素的内存地址连续</mark>，随机增删元素时，会涉及到后面元素统一向后或向前位移的操作，效率较低。</li><li>数组不能存储大数据量，因为很难在内存中找一块特别的大的连续的空间。</li></ul><p><strong>简化版本如下</strong>：</p><p><strong>数组是什么</strong></p><ul><li>存储同一类型元素的容器，引用类型。</li></ul><p><strong>数组的优缺点</strong></p><ul><li>根据下标查询元素效率极高</li><li>随机增删元素效率低</li></ul><p><strong>为什么数组下标从 0 开始</strong></p><p>前提：</p><ul><li><p>数组的每个元素的内存地址是连续的</p></li><li><p>每个元素占用空间一样</p></li></ul><p>知道首元素内存地址，可以算出第 i 个下标的元素的内存地址。设元素是 int类型：（首地址即第一个元素的内存地址）</p><ul><li>如果下标从 1 开始，arr[i] 的地址 = 首地址 +（i - 1）* 4</li><li>如果下标从 0 开始，arr[i] 的地址 = 首地址 + i * 4</li></ul><p>很明显从 1 开始多算了一次减法，消耗的 CPU 更多。</p><p><strong>为什么数组长度不可变</strong></p><ul><li><p>数组是连续不断的</p><ul><li>如果数组可以延长，如果旁边恰好存了一个对象怎么办？</li><li>如果数组可以缩减，那么突然空出来了一小块空间，别人如何利用？</li></ul></li><li><p>解决</p><p>固定数组长度，如果数组满了：</p><p>另寻一个更大的空间创建更大的数组，把原有数据填入新数组。旧数组无引用指向被当作垃圾回收，释放空间。</p></li></ul><h3 id="一维数组的声明">6.1.2 一维数组的声明</h3><p><strong>静态初始化</strong></p><p>在声明时，同时确定了元素的值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/*也可以这么写：int[] array = new int[]{1, 2, 92, 64, 90};有时候传参，或者先声明了 array，需要用到这样的方式赋值*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建了一个 int 类型、长度为 5 的数组，引用名为 array，存放了 5 个 int类型的元素，分别为 1、2、92、64、90。</p><figure><img src="https://s2.loli.net/2022/04/24/LTuGOnc41W7FCwb.png" alt="array"><figcaption aria-hidden="true">array</figcaption></figure><p>上面图的元素，下标从左到右，依次为 0、1、2、3、4。</p><p>通过引用访问下标对应的元素：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 访问第 1 个元素</span><span class="token keyword">int</span> a1 <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 访问第 5 个元素</span><span class="token keyword">int</span> a5 <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 获取数组的长度</span><span class="token keyword">int</span> length <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 90</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>动态初始化</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/*可以先声明，后分配空间int[] array2;array2 = new int[3];*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建了一个 int 类型、长度为 3 的数组，引用名为 array2，存放了 3 个int 类型的元素，值都默认为 0。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/24/I8qUztax3f1bmuJ.png" alt="array2"><figcaption aria-hidden="true">array2</figcaption></figure><p>赋值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 把 53 赋给下标为 0 的元素</span>array2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">53</span><span class="token punctuation">;</span>array2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>array2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 53</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>空</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">;</span><span class="token comment">// 此变量没有保存任何值，必须赋值（初始化）才能够访问</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 此变量保存了 null，代表空</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 创建了一个长度为 0 的数组（数组无元素），地址赋给了 arr3</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 同上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一维数组的遍历">6.1.3 一维数组的遍历</h3><p>数组中的元素下标从 0 到 length - 1，可以使用 for循环访问每个元素。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：当访问不存在的下标时，会报数组索引越界异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">Exception <span class="token function">in</span> thread <span class="token string">"main"</span> java.lang.ArrayIndexOutOfBoundsException<span class="token punctuation">:</span> <span class="token number">3</span>        <span class="token function">at</span> Hello.main<span class="token punctuation">(</span>Hello.java<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="数组元素默认值">6.1.4 数组元素默认值</h3><p>使用动态初始化时，不同类型的元素会有默认值。</p><table><thead><tr class="header"><th style="text-align: center;">数据类型</th><th style="text-align: center;">默认值</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">short、byte、int、long</td><td style="text-align: center;">0</td></tr><tr class="even"><td style="text-align: center;">float、double</td><td style="text-align: center;">0.0</td></tr><tr class="odd"><td style="text-align: center;">boolean</td><td style="text-align: center;">false</td></tr><tr class="even"><td style="text-align: center;">char</td><td style="text-align: center;">'\u0000'</td></tr><tr class="odd"><td style="text-align: center;">引用类型包括 String、数组</td><td style="text-align: center;">null</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 报错：从 long 转换到 byte 可能会有损失</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>特别说明一下：</p><p>char 的 '\u0000' 并不是空格，而是空字符，代表什么都没有。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">' '</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>'\u0000' 对应整数 0，另一种写法'\0'，是字符的八进制表示。打个比方，'a' 对应的 8、10、16 进制分别为0141、97、0x0061，如下都是一个意思。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token number">0141</span><span class="token punctuation">;</span><span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token number">0x0061</span><span class="token punctuation">;</span><span class="token keyword">char</span> c4 <span class="token operator">=</span> <span class="token char">'\141'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c5 <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组赋值机制">6.1.5 数组赋值机制</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 将 arr1 保存的值拷贝一份，赋给 arr2</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>arr1 保存的值为数组实例的内存地址，假设为0x1111，然后拷贝一份地址（创建副本）给 arr2，本质还是值传递。</p><figure><img src="https://s2.loli.net/2022/04/24/Q38nVbfSTONlUtR.png" alt="数组"><figcaption aria-hidden="true">数组</figcaption></figure><p>修改 arr2 保存的值，arr1 不会受到影响。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">arr2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [I@15db9742（等同于实例的内存地址）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>本来应该就此打住，但是有人可能还接触过引用传递这个概念：</p><p>值传递（pass byvalue）：赋值时将值拷贝一份赋给另一个变量，这样在另一个变量中修改自己保存的值，不会影响到最初的变量；</p><p>类似 Ctrl + C、Ctrl + V。</p><p>引用传递（pass byreference）：赋值时将值的地址赋给另一个变量，另一个变量通过内存地址定位到此值，如果修改此值，会影响原来变量保存的值；</p><p>类似 Windows 系统的创建桌面快捷方式。</p><table><thead><tr class="header"><th style="text-align: center;">值传递</th><th style="text-align: center;">引用传递</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">会创建副本</td><td style="text-align: center;">不会创建副本</td></tr><tr class="even"><td style="text-align: center;">无法改变原变量保存的值</td><td style="text-align: center;">可以改变原变量保存的值</td></tr></tbody></table><p>有人就问了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">;</span><span class="token comment">// 使用 arr2 改变了数组中第一个元素的值</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token comment">// 你看看，这不影响了 arr1 吗？</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 99</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不不不，不是这个意思，把 arr1、arr2当成两个独立的遥控器吧，电视只有一个，arr2 换台，受影响的是电视，而不是arr1。</p><p>这里修改的是数组中的元素，而不是 arr1 保存的值，arr1保存的值还是这个实例的地址，没受影响。</p><p>结论：arr1把自己保存的值拷贝一份赋给了arr2，只不过这个值恰好是地址，就当作是值传递吧。</p><p>数组实例 {6, 62, 2} 把地址赋给 arr1，才有点引用传递的味道。</p><p>由于不能直接通过实例访问到元素，必须借助引用；当没有引用时，再也不可能访问到此实例，等同于垃圾。</p><p>有人说，不对啊？必须借助引用访问元素这我知道，如arr[0]；可当没有引用时，我可以重新把这个实例的地址赋给另一个变量，又来了一个引用，这不就可以访问到了吗？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 保存实例的地址的变量称为引用</span><span class="token comment">// 现在 arr1 不是 {5, 6, 2} 的引用了</span>arr1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 重新将此实例的地址赋给 arr2</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 我访问到了！</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可是，你确定第 1 行与第 6 行的 {5, 6, 2} 是同一个实例吗？</p><p>要想确认是否是同一个实例，需要借助引用修改这个实例的值，再看看实例是否被修改了。如果被修改了，说明是同一个实例。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 修改 arr1 对应的实例第一个元素为 9</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token comment">// 访问 arr2 对应的实例第一个元素，还是 5</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然而并没有被修改，说明不是同一个实例。所以第 1 行的 {5, 6, 2}永远不可访问到了，这种访问不到的实例已经没有用处，需要及时被垃圾回收器清理。</p><p>也可通过直接输出引用、双等号比较，查看是否是同一个实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// arr1 与 arr2 保存的值一样</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1 <span class="token operator">==</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token comment">// arr1 与 arr3 保存的值不一样，说明保存的不是同一个实例的内存地址</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1 <span class="token operator">==</span> arr3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [I@15db9742</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [I@15db9742</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [I@6d06d69c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>于是我们通常说：基本数据类型使用双等号比较的是值，引用类型使用双等号比较的是内存地址。</p><p>那如果有人只认为保存的内容相等就行，不在乎是否为不同实例，在源代码最上面加入<code>import java.util.Arrays;</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// equals 比较内容</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1 <span class="token operator">==</span> arr3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1 <span class="token operator">==</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 1.1.6 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.6.4 简单查找</title>
      <link href="/2022/04/29/1.1.6-shu-zu/1.1.6.4-jian-dan-cha-zhao/"/>
      <url>/2022/04/29/1.1.6-shu-zu/1.1.6.4-jian-dan-cha-zhao/</url>
      
        <content type="html"><![CDATA[<h2 id="简单查找">6.4 简单查找</h2><p>内容导视：</p><ul><li>顺序查找</li></ul><h3 id="顺序查找">6.4.1 顺序查找</h3><p>Sequential Search：从头到尾遍历得到所有元素，依次与给定值比较。</p><p>考试结束了，所有人的成绩都被记录在数组当中，老师想要查找一位成绩为 70的学生，该如何做？</p><p>最先想到的办法就是从头到尾（从尾到头）遍历所有元素，获取每位同学的成绩与70 比较；若某位同学的成绩等于70，OK，查找成功，返回这位同学的信息；若查找到最后一个元素都没有找到成绩为70 的同学，则查找失败，返回 null。</p><p>先定义一个学生类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment">// 学生成绩</span><span class="token keyword">double</span> scope<span class="token punctuation">;</span>    <span class="token comment">// 学生姓名</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> scope<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>scope <span class="token operator">=</span> scope<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从头到尾遍历，一个个比对。（这里就不考虑浮点数的精度问题，依然使用双等号比较）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Student</span> <span class="token function">getStudentByScope</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> students<span class="token punctuation">,</span> <span class="token keyword">double</span> scope<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> students<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 得到每位学生</span>        <span class="token class-name">Student</span> stu <span class="token operator">=</span> students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 获取学生的成绩与 scope 比较，若相等返回这位学生</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stu<span class="token punctuation">.</span>scope <span class="token operator">==</span> scope<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> stu<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 否则就返回 null</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试程序：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Student</span> as1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"阿衰"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Student</span> zk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"庄库"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Student</span> xc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小冲"</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Student</span> dlm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"大脸妹"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Student</span> as2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"阿帅"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Student</span> nn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"奶奶"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stus <span class="token operator">=</span> <span class="token punctuation">{</span>nn<span class="token punctuation">,</span> as2<span class="token punctuation">,</span> dlm<span class="token punctuation">,</span> xc<span class="token punctuation">,</span> zk<span class="token punctuation">,</span> as1<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> scope <span class="token operator">=</span> <span class="token number">70.0</span><span class="token punctuation">;</span>    <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token function">getStudentByScope</span><span class="token punctuation">(</span>stus<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stu <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"分数为 "</span><span class="token operator">+</span>scope<span class="token operator">+</span><span class="token string">" 的同学："</span> <span class="token operator">+</span> stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"抱歉，没有分数为 "</span><span class="token operator">+</span>scope<span class="token operator">+</span><span class="token string">" 的同学"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>复杂度分析</strong></p><p>最好情况：元素就在开头，一次找到，时间复杂度为<code>O(1)</code>；</p><p>最差情况：元素在末尾，<code>O(n)</code>；</p><p>平均：元素在中间，需要比较前 n/2位同学的成绩，<code>O(n)</code>；</p><p>每次循环都要与数组长度、分数做比较，为了减少比较次数，取消与数组长度的比较，受《大话数据结构》启发，让数组<strong>空一个位置</strong>，如students[0]，让这个哨兵保存 70，i 从尾到头遍历，只要当前同学的成绩不等于70，就继续遍历，直到找到为止。（因为 i 减到 0时，哨兵的成绩与给定值相等，所以循环会终止，不会越界）</p><p>如果一直到 i = 0 才找到，证明没有成绩为 70 的同学，于是就返回null。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Student</span> <span class="token function">getStudentByScope</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> students<span class="token punctuation">,</span> <span class="token keyword">double</span> scope<span class="token punctuation">)</span> <span class="token punctuation">{</span>    students<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> students<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>scope <span class="token operator">!=</span> scope<span class="token punctuation">)</span> <span class="token punctuation">{</span>        i<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意使用这种方法，必须空出一个位置，不能存放元素，如<code>Student[] stus = {null, nn, as2, dlm, xc, zk, as1};</code></p>]]></content>
      
      
      <categories>
          
          <category> 1.1.6 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.6.2 多维数组</title>
      <link href="/2022/04/29/1.1.6-shu-zu/1.1.6.2-duo-wei-shu-zu/"/>
      <url>/2022/04/29/1.1.6-shu-zu/1.1.6.2-duo-wei-shu-zu/</url>
      
        <content type="html"><![CDATA[<h2 id="多维数组">6.2 多维数组</h2><p>内容导视：</p><ul><li>二维数组声明</li><li>遍历二维数组</li><li>静态方法调用</li></ul><h3 id="二维数组声明">6.2.1 二维数组声明</h3><p>二维以上的数组用的很少，故略去。</p><p><strong>声明二维数组</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">;</span><span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>arr3<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一般使用第一种。</p><p><strong>静态初始化</strong></p><p>二维数组由多个一维数组组成（二维数组的每一个元素是一维数组），三维数组有多个二维数组组成...</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> i1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> i2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">262</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> i3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">,</span> i3<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token number">252</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>动态初始化</strong></p><p>语法：</p><p><code>数据类型[][] 数组名 = new 数据类型[二维数组的长度][一维数组的长度];</code></p><p>例：</p><p><code>int[][] arr =  new int[2][3];</code></p><p>代表创建了一个 int 类型、长度为 2的二维数组；（对于引用类型，只保存内存地址）</p><p>而二维数组中的每个元素都保存着 int 类型、长度为 3的一维数组的内存地址。（但通常说二维数组里的每个元素是 int 类型、长度为3 的一维数组）</p><figure><img src="https://s2.loli.net/2022/04/24/qJecXLyDdMVZb86.png" alt="arr"><figcaption aria-hidden="true">arr</figcaption></figure><p><strong>访问</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 二维数组中的每一个元素都是一维数组，如 arr[0] 是 int[] 类型</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// arr[0] 代表二维数组中下标为 0 的元素，也就是一维数组，把一维数组的地址赋给 arr1</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 给 arr1 数组的下标为 0 的元素赋值 67</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">67</span><span class="token punctuation">;</span><span class="token comment">// 获取 arr1 数组下标为 0 的元素</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>合并</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 下标为 0 就是数组中的第一个元素</span><span class="token comment">// 给 arr 下标为 0 的一维数组中的下标为 0 的元素赋值 67</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">67</span><span class="token punctuation">;</span><span class="token comment">// 访问 arr 下标为 0 的一维数组中的下标为 0 的元素</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 赋值</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">52</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">62</span><span class="token punctuation">;</span><span class="token comment">// 现在下标为 0 的一维数组：{52, 5, 62}</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">// 现在下标为 1 的一维数组：{2, 8, 6}</span><span class="token comment">// 访问下标为 0 的数组的所有元素</span><span class="token keyword">int</span> n1 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n3 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 访问下标为 1 的数组的所有元素</span><span class="token keyword">int</span> m1 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> m2 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> m3 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 注意二维数组长度为 2，一维数组长度为 3，下标别越界。（下标别超过 length - 1）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当一维数组的长度不确定时，就不能使用上述方式动态初始化。</p><p><strong>动态初始化 2</strong></p><p>假如确定了二维数组的长度为 4，</p><p><code>int[][] arr = new int[4][];</code>此时内存图如下：（因为一维数组是引用类型，不赋值默认为 null）</p><figure><img src="https://s2.loli.net/2022/04/24/xsjDdB7iIZ3vwUt.png" alt="arr"><figcaption aria-hidden="true">arr</figcaption></figure><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// null</span><span class="token comment">// 使用 null 获取什么都会抛出 java.lang.NullPointerException 空指针异常</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这类运行时异常，编译时检查不出来。</p><p>以后需要时再创建一维数组：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="遍历二维数组">6.2.2 遍历二维数组</h3><p>先得到每一个元素，也就是一维数组，再遍历一维数组：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> total <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> total<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> total<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"，"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一维数组遍历完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>合并</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> total <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> total<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> total<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>total<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态方法调用">6.2.3 静态方法调用</h3><p>每次都是重复的代码，有点厌倦了，所以需要方法封装重复的代码了；只讲一点点。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a1 <span class="token operator">+</span> a2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>方法的第 3 个单词 void、int...代表返回值类型，如果没有返回值就写void；有返回值，就写返回值的类型，然后在方法结尾处写上<code>return 要返回的值</code>;</p><p>f1、sum 是方法名，自己定义，符合标识符规则就行。</p><p>方法名后的是形式参数列表，可以定义任意个变量，变量之间使用英文逗号分隔，将来调用时传入实际参数，注意实际参数的个数和类型要与形式参数对应上。</p><p>如何使用方法？（调用方法）</p><p>在同一个类中，直接通过<code>方法名(实参)</code>调用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 使用 int 类型的变量接收返回值</span>        <span class="token comment">// int num1 = 4; int num2 = 5;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 9</span>    <span class="token punctuation">}</span>    <span class="token comment">// 返回 num1 + num2</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在同一个包下（同级目录），不同类中，使用<code>类名.方法名(实参)</code>调用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不同包下的类需要使用 import 导入，如使用其它包下的 Arrays类，关于方法详细请看 API文档；如果以后编译时说找不到符号，想一想自己导入了此类没有。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [5, 26, 3]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外我还会涉及到成员变量：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token punctuation">{</span>    <span class="token comment">// 成员变量：类体中，方法外定义的变量，作用域为整个类</span>    <span class="token class-name">String</span> s1<span class="token punctuation">;</span>        <span class="token comment">// 带 static 的成员变量称为静态变量</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> s2<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 在带 static 的方法中访问普通成员变量，需要使用 new 创建实例，再用引用.变量名访问</span>        <span class="token class-name">T</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span>s1 <span class="token operator">=</span> <span class="token string">"你好"</span><span class="token punctuation">;</span><span class="token comment">// 不赋值默认为 null，与数组元素默认值一样</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 你好</span>                <span class="token comment">// 访问静态变量，本类中直接通过变量名访问，其它类需要使用类名.变量名访问</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// null</span>                <span class="token comment">// 与数组一样，这是一个新的实例，与 t 无关</span>        <span class="token class-name">T</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t <span class="token operator">==</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 1.1.6 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.6.x 总结回顾</title>
      <link href="/2022/04/29/1.1.6-shu-zu/1.1.6.x-zong-jie-hui-gu/"/>
      <url>/2022/04/29/1.1.6-shu-zu/1.1.6.x-zong-jie-hui-gu/</url>
      
        <content type="html"><![CDATA[<h2 id="x-总结回顾">6.x 总结回顾</h2><p>数组是一种引用类型，一旦创建，长度不可变，只能存放同一类型的元素；数组中的元素的内存地址是连续的，可以通过下标快速定位到某个元素，但随机增删元素时，涉及到大量元素的位移，效率较低，适合经常查询而增删少的场景。</p><p>一维数组静态初始化：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>动态初始化：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 此时 5 个元素默认值为 0</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>获取数组长度：<code>int length = arr.length;</code></p><p>遍历：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 1.1.6 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.6.3 简单排序</title>
      <link href="/2022/04/29/1.1.6-shu-zu/1.1.6.3-jian-dan-pai-xu/"/>
      <url>/2022/04/29/1.1.6-shu-zu/1.1.6.3-jian-dan-pai-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="简单排序">6.3 简单排序</h2><p>内容导视：</p><ul><li>时间复杂度</li><li>空间复杂度</li><li>冒泡排序</li><li>简单选择排序</li><li>直接插入排序</li></ul><p>我们知道了如何定义数组来存放元素，那就试试对数组中的元素排序吧。</p><p>排序：一组元素按指定顺序排列的过程。生活中，排序无处不在，我会依次介绍，默认顺序：从小到大排。</p><p>对于初学者，只需要了解简单排序，其它不用看，因为大部分人不可能一次学会；如果是天才当我没说。（怨念~_~）</p><p>排序算法分为：</p><ul><li>交换排序<ul><li>冒泡排序</li><li>快速排序</li></ul></li><li>选择排序<ul><li>简单选择排序</li><li>堆排序</li></ul></li><li>插入排序<ul><li>直接插入排序</li><li>希尔排序</li></ul></li><li>归并排序</li><li>基数排序</li></ul><p>在完成功能的情况下，我们需要考虑如何让程序运行时间更短，占用空间更小。（你也不希望软件卡半天没响应，又特别占用内存，对吧）</p><p>由此引申出来时间复杂度与空间复杂度，接下来一一介绍。</p><h3 id="时间复杂度">6.3.1 时间复杂度</h3><p>描述了解决特定问题的步骤称为算法，如排序算法解决了元素无序的问题。只不过在计算机上，可以使用代码描述。</p><p>解决问题的方法有多种，不同算法的效率有高有低；最直观的方法就是编写不同的程序实现不同的算法，然后输入不同数据，进行编译，运行时对它们进行计时，用时最短的就是最好的。但这种事后测量的方法有很大的缺点与不确定性：</p><ul><li>实现不同程序需要耗费大量时间，而我们只需保留其中之一。</li><li>数据的不同，可能对某个算法更加有利；如使用顺序与逆序查找，如果查找的数就在开头，顺序唰的一下找到了，就能说明顺序一定比逆序好吗？如何选择测试数据以及数据量的多少，才能能够保证结果的公平性，很难判断的。</li><li>在不同的运行环境、硬件性能情况下得到的结果可能相差会很大；即使在同台机器上，也有可能测试时CPU负荷突然过高、运行内存忽高忽低、计算机电量不足...代码运行速度慢了下来，你究竟要测试几次，在不同的机器上，配置一个怎么样的的环境，才能得出令人信服的结果？</li></ul><p>这时就需要我们自己在编写程序前，能够粗略估计代码的运行时间。（事前分析估算方法）</p><p><strong>语句执行次数</strong></p><p>也称语句频度、时间频度，记为 <code>T(n)</code>，n代表数据的个数。假设运行一行基础代码就算执行一次语句。代码花费的时间与语句执行次数成正比例，执行的语句越多，花费时间越多。</p><p>求 m1 方法内语句执行次数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行 1 次</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我饿了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行 1 次</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>T(n) = 2</p><p><code>E:\\dd</code></p><p>t<sup>2</sup></p><p>t<sub>2</sub></p><p>t<sup>d</sup></p><p>此时数组中元素的个数 n 不会对语句执行次数产生影响，也就是说无论arr.length 有多大，语句执行次数也就是 2。</p><p>求 for 内的语句执行次数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">// 从 0 到 n - 1，一共循环 n 次，每次循环执行 2 个语句</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我不想排序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 一共执行 n 次</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我想睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 一共执行 n 次</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>T(n) = 2n</code>;</p><p>求 for 内的语句执行次数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没想到吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"还有乘等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>for 循环执行了几次？</p><p>每次循环 i *= 2 第 1 次循环 i = 1 = 2<sup>0</sup>; 第 2 次循环 i = 2= 2<sup>1</sup>; 第 3 次循环 i = 4 = 2<sup>2</sup>; ... 第 x+1 次循环 i= 2<sup>x</sup>;</p><p>假设第 x+1 次循环时，i &gt;= n，不满足条件，退出循环，得出不等式：2<sup>x</sup> &gt;= n 解出：x &gt;= log<sub>2</sub>n</p><p>第 log<sub>2</sub>n + 1 次循环时，i 正好等于n，退出了循环，这次不算，那么一共执行了 log<sub>2</sub>n次循环，每次循环时执行 2 个语句。</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="16.191ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7156.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2359.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3415.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(4137.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(4860,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(5158,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(5643,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(6556.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>;</p><blockquote><p>若循环次数不是整数，向上取整，如 2.321928 记作 3。</p><p>对数：https://baike.baidu.com/item/%E5%AF%B9%E6%95%B0/91326</p><p>对数公式：https://baike.baidu.com/item/%E5%AF%B9%E6%95%B0%E5%85%AC%E5%BC%8F/5557846</p></blockquote><p>求方法中输出语句的执行次数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m4</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i="</span> <span class="token operator">+</span> i                <span class="token operator">+</span> <span class="token string">"，j="</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>外层 for 一共循环 n 次，里层 for 一共循环 n次，里面的输出语句被执行了 n * n 次。</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="10.073ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 4452.1 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2359.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(3415.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span>;</p><p>有了语句执行次数的函数，难道就能比较不同代码的运行时间吗？</p><p>比如 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="16.376ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7238 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2359.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3415.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mi" transform="translate(4915.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5737.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(6738,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span> 与 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="13.97ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 6174.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2359.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(3415.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(4674.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(5674.6,0)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g></g></g></svg></mjx-container></span>，依然无法清晰看出谁的运行时间更短，此时需要看运行时间如何随 n的增长而变化，选出增速最小的算法。</p><p>引出渐进时间复杂度（asymptotic time complexity）这个概念：</p><p><strong>渐进时间复杂度</strong></p><p>简称时间复杂度，定义如下：</p><p>代码执行语句次数记作 <code>T(n)</code>；存在函数<code>f(n)</code>，当 n 趋近无穷大时，<code>T(n) / f(n)</code>的比值为一个不等于 0 的常数，说明 <code>f(n)</code> 与 <code>T(n)</code>的增长率相同，是同一量级；如 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.601ex" xmlns="http://www.w3.org/2000/svg" width="10.091ex" height="3.567ex" role="img" focusable="false" viewBox="0 -868.9 4460.4 1576.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munder"><g data-mml-node="mo" transform="translate(214.8,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(278,0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(556,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(0,-600) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1572,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g><g data-mml-node="mfrac" transform="translate(1985.3,0)"><g data-mml-node="mrow" transform="translate(220,398) scale(0.707)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1100,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1878,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g><g data-mml-node="mi" transform="translate(1025.4,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="2235.1" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> = 2。</p><p>记作 <code>T(n) = O( f(n) )</code>，称 <code>O( f(n) )</code>为代码的时间复杂度；时间复杂度描述了代码执行时间随数据量增长的变化趋势。</p><p>如何推出 <code>f(n)</code>？</p><table><thead><tr class="header"><th style="text-align: center;">次数 n</th><th style="text-align: center;">a：2n + 10</th><th style="text-align: center;">a`：n</th><th style="text-align: center;">b：2n<sup>2</sup> + 5</th><th style="text-align: center;">b`：n<sup>2</sup></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">12</td><td style="text-align: center;">1</td><td style="text-align: center;">7</td><td style="text-align: center;">1</td></tr><tr class="even"><td style="text-align: center;">100</td><td style="text-align: center;">210</td><td style="text-align: center;">100</td><td style="text-align: center;">20005</td><td style="text-align: center;">10000</td></tr><tr class="odd"><td style="text-align: center;">10000</td><td style="text-align: center;">20010</td><td style="text-align: center;">10000</td><td style="text-align: center;">200000005</td><td style="text-align: center;">100000000</td></tr><tr class="even"><td style="text-align: center;">1000000</td><td style="text-align: center;">2000010</td><td style="text-align: center;">1000000</td><td style="text-align: center;">2000000000005</td><td style="text-align: center;">1000000000000</td></tr></tbody></table><p>当 n 越来越大时，常数、低次数项已经变得不太重要，如同 a再怎么努力，也追不上 b，因此被可以省略。</p><ul><li>如果函数是常数，使用 1 代替</li><li>若不是常数，只保留最高次数的那一项，并去除最高次数的系数</li></ul><p>如 <code>T(n) = 20</code>，记作 <code>T(n) = O(1)</code>；</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="44.916ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 19852.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2359.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3415.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(4137.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(4860,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(5158,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(5643,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(6556.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(7378.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(8379,0)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(9656.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(10712.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(11434.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(12157,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(12455,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(12940,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(13853.6,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(14596.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(15319,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(15617,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(16102,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mi" transform="translate(17030.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(17852.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(18852.8,0)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container></span>，只保留最高次数那项，且去掉系数，记作 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="16.443ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7268 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2359.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3415.6,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(4178.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4567.6,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(4865.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(5350.6,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mi" transform="translate(6279,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6879,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>;</p><blockquote><p>设 k 为任意常数，由换底公式得：log<sub>2</sub>n = log<sub>2</sub>k *log<sub>k</sub>n</p></blockquote><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="20.355ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 8997 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2359.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3415.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msup" transform="translate(3915.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(5174.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(6174.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mi" transform="translate(6674.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(7496.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(8497,0)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g></g></g></svg></mjx-container></span>，记作 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="13.559ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 5993.1 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2359.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3415.6,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(4178.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(4567.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(5604.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>。</p><figure><img src="https://s2.loli.net/2022/04/05/PWATt6ebQxlKcDk.png" alt="三种函数的增长趋势"><figcaption aria-hidden="true">三种函数的增长趋势</figcaption></figure><p>很明显随着 n 的增大，O(n<sup>2</sup>)的时间复杂度（增长速度）远大于其它两个。</p><p><strong>常见的时间复杂度</strong></p><p>从小到大排（n 趋向无穷大时）：</p><p>常数时间：<code>O(1)</code></p><p>对数时间：O(log<sub>k</sub>n)</p><p>线性时间：<code>O(n)</code></p><p>线性对数时间：O(n * log<sub>k</sub>n)</p><p>平方时间：O(n<sup>2</sup>)</p><p>立方时间：O(n<sup>3</sup>)</p><p>指数时间：O(2<sup>n</sup>)</p><p>阶乘时间：<code>O(n!)</code></p><p>O(n<sup>n</sup>)</p><p>一般代码的时间复杂度为指数阶及以上，就不用考虑了，哪怕 n 只有10000，结果也是天大的数字，除非你确定 n 十分的小，将来也不会增加。</p><p>计算 1 到 n 的数之和，来看看哪种算法时间效率高：</p><p>普通人想到的是一个个累加，用代码描述：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// n + 1</span>    sum <span class="token operator">+=</span> i<span class="token punctuation">;</span><span class="token comment">// n</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记录所有语句执行次数：2n + 4，时间复杂度：<code>O(n)</code>；</p><blockquote><p>前 n 次顺利通过 for 循环的判断条件，第 n + 1次时判断失败，没有进入。</p></blockquote><p>高斯想到的是首尾相加 * 个数 / 2：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>时间复杂度：<code>O(1)</code>；</p><p>很明显高斯给出的算法效率更高；那么如果在某个程序中，需要解决求和问题，就可以选择此算法；而不是等到程序写好了，才掐着秒表，运行一下，一个个比哪个算法用的时间少。</p><p>我们可以看到，执行的代码就算有再多行，但如果与 n 的取值无关，通通记为<code>O(1)</code>，所以我只计算循环内某段语句的执行次数（受 n 影响），如sum += i，其外的忽略不计，这样方便点。</p><p>算法优劣、数据的不同、数据量决定了程序的运行时间长短。</p><blockquote><p>当数据量很少时，如 n = 2，计算机运行速度很快的，时间差异几乎是0；使用事后计时的方法，是无法准确区分算法优劣的。</p></blockquote><p>备注，高斯思路描述如下：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex"> sum =   1 +   2 + ... + 100 sum = 100 +  99 + ... +   12sum = 101 + 101 + ... + 101 = 101 * 100  sum = 101 * 50 = 5050<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="空间复杂度">6.3.2 空间复杂度</h3><p>代码耗费的存储空间，记作 <code>S(n)</code>，同样也有<code>S(n) = O( f(n) )</code>，<code>O( f(n) )</code>记为空间复杂度。</p><p>要求：记录一张 n * n 棋盘上的黑白棋子。</p><figure><img src="https://s2.loli.net/2022/04/05/qEYPx7gBM8dAroj.png" alt="棋盘"><figcaption aria-hidden="true">棋盘</figcaption></figure><p>代码 1：使用二维数组记录棋盘，空记为 0，黑记为 1，白记为 2；假设 n =9：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组所占空间：一个 int 类型是 4 个字节，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="13.207ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 5837.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(645,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1034,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1634,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2300.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3356.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(4078.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="msup" transform="translate(4801,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span>，空间复杂度为O(n<sup>2</sup>);</p><p>想要获取第 row 行、第 column 列的信息：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> column<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 注意下标从 0 开始，并不是 1，所以需要减去 1</span>    <span class="token comment">// 例：第 1 行第 1 列，即 arr[0][0]</span>    <span class="token keyword">int</span> data <span class="token operator">=</span> arr<span class="token punctuation">[</span>row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>column <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第 "</span> <span class="token operator">+</span> row <span class="token operator">+</span> <span class="token string">" 行、第 "</span> <span class="token operator">+</span> column <span class="token operator">+</span> <span class="token string">" 列的棋子为："</span> <span class="token operator">+</span> <span class="token function">printChess</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">printChess</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> state <span class="token operator">=</span> <span class="token string">"？"</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span> <span class="token operator">:</span>            state <span class="token operator">=</span> <span class="token string">"空"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span> <span class="token operator">:</span>            state <span class="token operator">=</span> <span class="token string">"黑"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span> <span class="token operator">:</span>            state <span class="token operator">=</span> <span class="token string">"白"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>    <span class="token punctuation">}</span><span class="token keyword">return</span> state<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度为 <code>O(1)</code>。</p><p>代码 2：创建二维数组保存数据</p><p>第一行记录数组一共 i 行 j 列，有 count 个棋子（目前是 9、9、5）；剩下count 行记录这些棋子的位置（下标从 0 开始）与保存的值；数组长度为 1 +count。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 棋盘的总行、列数、棋子的个数</span>    <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 第一个棋子的行数 - 1、列数 - 1、保存的值</span>    <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>count 的范围处于 [0, n<sup>2</sup>] 之间；</p><p>如果棋盘上没有一个棋子，最好情况；只记录棋盘几行几列、棋子的个数为0，数组所占空间：<code>S(n) = 4 * 3 = 12</code>，空间复杂度为<code>O(1)</code>； 如果棋盘上放满了棋子，最差情况；需要记录n<sup>2</sup> 个棋子的位置，数组所占空间：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="34.785ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 15375 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(645,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1034,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1634,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2300.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3356.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(4078.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(4801,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(5523.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mo" transform="translate(6245.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(6634.4,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(7893.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(8893.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(9393.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(10060.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(11116,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="msup" transform="translate(12116,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(13374.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(14375,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container></span>，空间复杂度为 O(n<sup>2</sup>)。</p><p>获取第 row 行、第 column 列的信息，比如获取第 3 行第 6列的信息，如果棋子存在，那么二维数组中肯定记录了2、5、棋子保存的值。</p><p>我们需要从头遍历，找到开头为 2、5的一维数组；如果找到，说明棋子存在，获取这个一维数组第 3个元素（保存的值）；</p><p>如果没有找到，棋子不存在，记为空。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> column<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> column <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> i <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            data <span class="token operator">=</span> arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第 "</span> <span class="token operator">+</span> row <span class="token operator">+</span> <span class="token string">" 行、第 "</span> <span class="token operator">+</span> column <span class="token operator">+</span> <span class="token string">" 列的棋子为："</span> <span class="token operator">+</span> <span class="token function">printChess</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式时间复杂度十分不稳定，最好情况 count =0，不需要遍历，得到结果为空，时间复杂度为 <code>O(1)</code>；最差情况count = n<sup>2</sup>，且对应一维数组在最后一个，时间复杂度为O(n<sup>2</sup>)。</p><p>当棋子较少时，使用代码 2 更节省空间；想要获取某行某列的信息，使用代码1 时间效率更高。到底是用空间换时间，还是用时间换空间，凭自己取舍。</p><p>也可以组合：当用户下棋时，为了提升时间效率，用空间换时间，使用代码1；退出棋盘时并不需要获取某行某列的信息，只需记录棋盘位置，使用代码 2更节省空间。</p><h3 id="冒泡排序">6.3.3 冒泡排序</h3><p>规定从小到大排序，那么小的要在前面，否则就需要交换。</p><p>Bubble Sort 算法思路：比较相邻元素，逆序就交换。</p><p>以 5，6，74，2，36，7 为例，每次比较中，我会用灰色标记大数。</p><p>第一轮：5，6，74，2，36，7</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">首先比较第 1 个与第 2 个元素的大小，5 &lt; 6，不需要交换；比较第 2 个与第 3 个，6 &lt; 74，不需要交换；比较第 3 个与第 4 个，74 &gt; 2，需要交换，交换后：5，6，2，74，36，7比较第 4 个与第 5 个，74 &gt; 36，需要交换，交换后：5，6，2，36，74，7比较第 5 个与第 6 个，74 &gt; 7，需要交换，交换后：5，6，2，36，7，74<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/06/hLZ3JAiBEa4gNwd.png" alt="第一轮"><figcaption aria-hidden="true">第一轮</figcaption></figure><p>可以看到第一轮只是把最大的数归位了，继续找出第二大数吧。</p><p>第二轮：5，6，2，36，7，74</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">比较第 1 个与第 2 个，5 &lt; 6，不需要交换；比较第 2 个与第 3 个，6 &gt; 2，需要交换，交换后：5，2，6，36，7，74比较第 3 个与第 4 个，6 &lt; 36，不需要交换；比较第 4 个与第 5 个，36 &gt; 7，需要交换，交换后：5，2，6，7，36，74<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/06/Sr7zB8iQNwY69MH.png" alt="第二轮"><figcaption aria-hidden="true">第二轮</figcaption></figure><p>这一轮找出了第二大数 36。</p><p>有人这时可能会问，需不需要比较第 5 个与第 6 个？</p><p>要知道我们第一轮排序时，已经把最大的数放在了最后面，其它的数肯定不会大于最大数，所以没有必要进行比较了，剩下几轮同理，如下一轮只需比较到第3 个与第 4 个，找出第三大数。</p><p>第三轮：5，2，6，7，36，74</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">比较第 1 个与第 2 个，5 &gt; 2，需要交换，交换后：2，5，6，7，36，74比较第 2 个与第 3 个，5 &lt; 6，不需要交换；比较第 3 个与第 4 个，6 &lt; 7，不需要交换；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第三轮找出了第三大数 7。</p><figure><img src="https://s2.loli.net/2022/04/06/m3VYdB6xjZJRiuI.png" alt="第三轮"><figcaption aria-hidden="true">第三轮</figcaption></figure><p>第四轮：2，5，6，7，36，74</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">比较第 1 个与第 2 个，2 &lt; 5，不需要交换；比较第 2 个与第 3 个，5 &lt; 6，不需要交换；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/06/d8LmWIObx6VJhRA.png" alt="第四轮"><figcaption aria-hidden="true">第四轮</figcaption></figure><p>找出了第四大数 6。</p><p>第五轮：2，5，6，7，36，74</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">比较第 1 个与第 2 个，2 &lt; 5，不需要交换；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/06/HdqQ82C4gnVTANG.png" alt="第五轮"><figcaption aria-hidden="true">第五轮</figcaption></figure><p>找出了第五大数 5，接下来就只剩2，没必要比了，到此结束。可以看出一个长度为 6 的数组，需要 5轮才能排好序，轮数正是数组长度 - 1。</p><p>使用代码实现：</p><blockquote><p>之前在整数类型中讲过两数如何交换值，这里借助第三个变量 temp。</p></blockquote><p>注意下标从 0 开始，如第一轮，arr[0] 与 arr[1] 比较、arr[1] 与 arr[2]比较、...、arr[4] 与 arr[5] 比较，一共 5 次，那么定义一个变量从 0 到 4即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 第一轮</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 如果逆序就交换</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 比较 5 次</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 第二轮</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 比较 4 次</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">// 第三轮</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 比较 3 次</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">// 第四轮</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 比较 2 次</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">// 第五轮</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 比较 1 次，即 arr[0] 与 arr[1]</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">// 遍历arr</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"，"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可是你发现了，每轮对应的 for 循环都几乎一模一样，只是判断条件从 j&lt; 5，j &lt; 4 ... 到 j &lt; 1，可以考虑使用外层循环将其包裹，定义一个i 从 5 到 1，让 j &lt; i，而这个 5 正是数组的长度 - 1。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改进：</p><p>可以发现第三轮时就已经排好序了，再也没有交换元素，剩下几轮都是无用功。可以定义一个boolean 变量，默认为 true。</p><p>每次循环开始赋值 false；如果交换了，说明有逆序，需要继续循环，改为true；如果没有交换，证明已经排好序了，需要退出循环。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// flag 为 false 时，退出循环</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 逆序就交换</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token comment">// 还要继续循环</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改进后，设参与排序的数组长度为 n；</p><p>分析排序算法时，传统方式是衡量元素之间的比较和交换的次数。</p><p>最坏情况：数组为逆序，每次比较都是逆序，需要交换，比较次数为：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.366ex" xmlns="http://www.w3.org/2000/svg" width="41.549ex" height="5.807ex" role="img" focusable="false" viewBox="0 -1520.9 18364.5 2566.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo" transform="translate(136,0)"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(90.2,-887.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(0,950) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1494.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2117.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3173.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3895.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4895.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(5395.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(6173.6,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(6618.3,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(7062.9,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(7507.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(8285.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(8674.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(9496.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(10497.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(10997.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(11663.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(12719.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(13541.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mo" transform="translate(14264.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(14653.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(15475.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(16475.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(16975.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(17364.5,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(17864.5,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container></span>，时间复杂度为 O(n<sup>2</sup>)；</p><p>最好情况：数组为顺序，逆序数为 0，当 i = n - 1 时，进入外循环，里循环j 从 0 到 n - 2，一共 n - 1 次比较，没有进入 if 语句内，flag =false，下一次外循环直接退出。时间复杂度为 <code>O(n)</code>。</p><p>平均情况：数组平均逆序数为最好与最坏的情况的一半：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="6.204ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 2742.3 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(989,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1589,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2367,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2867,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(1194.4,-345) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><rect width="2502.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>，每次交换最多减少一个逆序，至少需要O(n<sup>2</sup>) 次交换。</p><p>空间复杂度为 <code>O(1)</code>。（temp 与 n 无关，记为<code>O(1)</code>）</p><p>属于稳定排序。</p><blockquote><p>输入的数据如数组arr，只取决于问题本身，与算法无关，不计入空间复杂度，只需计入算法实现所用的辅助空间，如temp。</p><p>包括输出数组的内容（查看数组是否已经排序好了），都不计入。</p></blockquote><p>稳定排序：对于相等的元素，排序前后的先后顺序不会变。</p><p>举例，怕踢校园学生的数学成绩如下：</p><table><thead><tr class="header"><th style="text-align: center;">庄库</th><th style="text-align: center;">奶奶</th><th style="text-align: center;">阿衰</th><th style="text-align: center;">大脸妹</th><th style="text-align: center;">小冲</th><th style="text-align: center;">阿帅</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">100</td><td style="text-align: center;">0</td><td style="text-align: center;">100</td><td style="text-align: center;">70</td><td style="text-align: center;">100</td></tr></tbody></table><p>100 分成绩的同学的先后顺序：奶奶、大脸妹、阿帅。</p><hr><p>使用不稳定的排序得到结果如下：</p><table><thead><tr class="header"><th style="text-align: center;">庄库</th><th style="text-align: center;">阿衰</th><th style="text-align: center;">小冲</th><th style="text-align: center;">大脸妹</th><th style="text-align: center;">奶奶</th><th style="text-align: center;">阿帅</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">70</td><td style="text-align: center;">100</td><td style="text-align: center;">100</td><td style="text-align: center;">100</td></tr></tbody></table><p>100 分成绩的同学的先后顺序：大脸妹、奶奶、阿帅。</p><hr><p>使用稳定的排序得到结果如下：</p><table><thead><tr class="header"><th style="text-align: center;">庄库</th><th style="text-align: center;">阿衰</th><th style="text-align: center;">小冲</th><th style="text-align: center;">奶奶</th><th style="text-align: center;">大脸妹</th><th style="text-align: center;">阿帅</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">70</td><td style="text-align: center;">100</td><td style="text-align: center;">100</td><td style="text-align: center;">100</td></tr></tbody></table><p>100 分成绩的同学的先后顺序：奶奶、大脸妹、阿帅。</p><h3 id="简单选择排序">6.3.4 简单选择排序</h3><p>Simple Selection Sort 算法思路：找出小数，放在前面；第 i 轮找出第 i小数，放在第 i 个位置。</p><blockquote><p>小数：两数比较中，更小的数，我说的并不是 1.241 这种小数。</p></blockquote><p>以 {5，2，6，252，1} 为例；小数使用灰色标记。</p><p>第一轮：5，2，6，252，1</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">比较第 1 个与第 2 个元素大小，5 &gt; 2，小数为第 2 个；比较第 2 个与第 3 个，2 &lt; 6，小数为第 2 个；比较第 2 个与第 4 个，2 &lt; 252，小数为第 2 个；比较第 2 个与第 5 个，2 &gt; 1，小数为第 5 个；结束。最小数在第 5 个位置上，应该放在第 1 个位置上。交换第 5 个与第 1 个元素位置后：1，2，6，252，5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/07/8NcB5lHOe7nAkQo.png" alt="第一轮"><figcaption aria-hidden="true">第一轮</figcaption></figure><p>第一轮，找出了最小数并放在了合适的位置，那么接着找第二小数。</p><p>第二轮：1，2，6，252，5</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">比较第 2 个与第 3 个，2 &lt; 6，小数为第 2 个；比较第 2 个与第 4 个，2 &lt; 252，小数为第 2 个；比较第 2 个与第 5 个，2 &lt; 5，小数为第 2 个；结束。第二小数在第 2 个位置上，正好合适，不需要交换：1，2，6，252，5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/07/dZRy7kTiWsoOg6v.png" alt="第二轮"><figcaption aria-hidden="true">第二轮</figcaption></figure><p>不需要比较第 1 个与第 2 个，因为第 1个是最小数，但我们找的是第二小数，下面同理。</p><p>第三轮：1，2，6，252，5</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">比较第 3 个与第 4 个，6 &lt; 252，小数为第 3 个；比较第 3 个与第 5 个，6 &gt; 5，小数为第 5 个；结束。第三小数在第 5 个位置上，应该放在第 3 个位置上。交换第 5 个与第 3 个元素位置：1，2，5，252，6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/07/LRGvr4jdciFytNC.png" alt="第三轮"><figcaption aria-hidden="true">第三轮</figcaption></figure><p>第四轮：1，2，5，252，6</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">比较第 4 个与第 5 个，252 &gt; 6，小数为第 5 个；结束。第四小数在第 5 个位置上，应该放在第 4 个位置上。交换第 5 个与第 4 个元素位置：1，2，5，6，252<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/07/R6ODwMZejAi2cyK.png" alt="第四轮"><figcaption aria-hidden="true">第四轮</figcaption></figure><p>5 个数，已经确定了 4 位，剩下一个数自动归位；轮数为数组长度 - 1。</p><p>使用代码实现：</p><p>我们可以看到每轮都是拿小数与其它数进行比较，所以需要定义变量如min，记录小数的下标；设数组长度为 n。</p><p>如第 1 轮假设最小数下标也就是 min 为 0，然后让 arr[min]与剩下的数，即与下标为 1、2、3 ... n - 1的元素比较；期间，若发现更小数，将 min 替换为此数的下标，然后拿 arr[min]继续与其它数比较。</p><p>第 2 轮设 min 为 1；</p><p>第 3 轮设 min 为 2；</p><p>...</p><p>第 n - 1 轮设 min 为 n - 2。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">252</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">// n = 5</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 第一轮：找最小数，假设最小数下标为 0</span><span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 下标为 0 的数，与下标为 1、2、3、4 的元素进行比较</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 比较过程中，发现有更小的，将 min 替换为此数下标，保证 min 一直记录的是最小数的下标</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 比较 4 次</span>        min <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 如果 min 不等于 0，证明最小数的下标不是 0，需要将最小数与下标为 0 的元素交换位置</span><span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 第二轮：找出第二小数，假设第二小数下标为 1（因为下标为 0 的元素已经被确定为最小数，无需参与比较）</span>min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 下标为 1 的数，与下标为 2、3、4 的元素进行比较</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 比较 3 次</span>        min <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 第三轮</span>min <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 比较 2 次</span>        min <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 第四轮</span>min <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 比较 1 次</span>        min <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 利用 Arrays 类的 toString 方法输出 arr 的内容</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每轮对应的 for 循环几乎一致，观察每轮的变化之处：min = 0、1、2 ... n- 2，j = 1、2、3 ... n - 1。</p><p>考虑外层 for，定义 i 从 0 到 n - 2，让 min = i，j = i + 1。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            min <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单选择排序，比较时没有交换元素，分开讨论：</p><p>比较次数是固定的，一共为 1 + 2 + ... + (n - 1) = n * (n - 1) /2。</p><p>交换次数，最好情况不用交换，次数为0；最坏情况，每次位置都不对，需要交换，次数为 n - 1。</p><p>所以平均、最好、最坏时间复杂度都为 O(n<sup>2</sup>)，空间复杂度为<code>O(1)</code>，属于不稳定排序。</p><hr><p>备注：跳跃式交换的排序一般是不稳定的。以之前的数学成绩为例：</p><p>第一轮选出庄库，不用交换；</p><p>第二轮选出阿衰，与奶奶交换；</p><p>第三轮选出小冲，与奶奶交换，这时相同成绩的同学先后顺序已被打乱；</p><p>第四、五轮选出大脸妹、奶奶，不用交换；结束。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">【庄库：0】, 【奶奶：100】, 【阿衰：0】, 【大脸妹：100】, 【小冲：70】, 【阿帅：100】 【庄库：0】, 【阿衰：0】, 【奶奶：100】, 【大脸妹：100】, 【小冲：70】, 【阿帅：100】【庄库：0】, 【阿衰：0】, 【小冲：70】, 【大脸妹：100】, 【奶奶：100】, 【阿帅：100】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>有兴趣的话，复制以下源码测下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Person</span> as1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"阿衰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> zk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"庄库"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> xc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token string">"小冲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> dlm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"大脸妹"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> as2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"阿帅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> nn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"奶奶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> persons <span class="token operator">=</span> <span class="token punctuation">{</span>zk<span class="token punctuation">,</span> nn<span class="token punctuation">,</span> as1<span class="token punctuation">,</span> dlm<span class="token punctuation">,</span> xc<span class="token punctuation">,</span> as2<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前："</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bubbleSort</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"冒泡排序后："</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> persons2 <span class="token operator">=</span> <span class="token punctuation">{</span>zk<span class="token punctuation">,</span> nn<span class="token punctuation">,</span> as1<span class="token punctuation">,</span> dlm<span class="token punctuation">,</span> xc<span class="token punctuation">,</span> as2<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">selectionSort</span><span class="token punctuation">(</span>persons2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"选择排序后："</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>persons2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token class-name">Person</span> temp<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>scope <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">.</span>scope<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    min <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token class-name">Person</span> temp<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">// flag 为 false 时，退出循环</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 逆序就交换</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>scope <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>scope<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    <span class="token comment">// 还要继续循环</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> scope<span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> scope<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>scope <span class="token operator">=</span> scope<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"{"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"："</span> <span class="token operator">+</span> scope <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="直接插入排序">6.3.5 直接插入排序</h3><p>Insertion Sort算法思路：新元素与前面已排序的元素进行比较，并将它插入到正确的位置。</p><p>以 {25, 6, 50, 26}一共四个元素为例，灰色元素的集合代表有序序列，当所有元素都为灰色时代表已经排好序了。</p><p>第一轮：25，6，50，26</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">arr[1] 与 arr[0] 比较，6 &lt; 25，逆序，需要交换，交换后：6，25，50，26<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/12/YwuvZj4hGBaWf1L.png" alt="第一轮"><figcaption aria-hidden="true">第一轮</figcaption></figure><p>那么前面两个元素已经排好序了。</p><p>第二轮：6，25，50，26</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">arr[2] 与 arr[1] 比较，50 &gt; 25，顺序，不需要交换<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/12/Rt4ajI9OgeHSkKu.png" alt="第二轮"><figcaption aria-hidden="true">第二轮</figcaption></figure><p>arr[2] 不需要跟 arr[0] 比较，因为通过第一轮排序，确定了 arr[1] &gt;arr[0]，如果 arr[2] &gt; arr[1]，必然有 arr[2] &gt;arr[0]，大小已经确定，无需比较，下面同理。（如果后面的元素大于前面，不需要交换，说明顺序是对的，无需比较，直接终止操作）</p><p>前面三个元素排好序了。</p><p>第三轮：6，25，50，26</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">arr[3] 与 arr[2] 比较，26 &lt; 50，交换后：6，25，26，50arr[2] 与 arr[1] 比较，26 &gt; 25，不需要交换<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/12/WxeUiDVPTSkac8g.png" alt="第三轮"><figcaption aria-hidden="true">第三轮</figcaption></figure><p>前面四个元素排好序了；到此为止，一共 arr.length - 1 轮。</p><p>代码描述：</p><p>只有后面元素小于前面元素才需要交换，否则就终止循环；在循环期间，需要保证后面元素即arr[j - 1] 不能越界，所以 j <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.751ex" role="img" focusable="false" viewBox="0 -636 778 774"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g></g></g></svg></mjx-container></span>1，注意 j 是整数，可以写成 j &gt; 0。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 第一轮</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 第二轮，最差情况比较 2 次。</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 第三轮</span><span class="token comment">/*最差情况，比较 3 次；即 arr[3]、arr[2] 比较，arr[2]、arr[1] 比较，arr[1]、arr[0] 比较。*/</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>j 从 1 到 arr.length - 1，考虑定义外层 for 循环，i 从 1 到 arr.length- 1；让 j = i。</p><p>结合：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最差情况：参与排序的数组为逆序，每次的新元素都比前面所有的元素小，需要移动到数组最前面，设数组长度为n，一共 n - 1 轮排序，比较次数为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="27.803ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 12288.8 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1722.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2222.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(3000.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(3445.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(3889.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4334.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(5112.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5501.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6323.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(7323.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(7823.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8490.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(9546.4,0)"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(989,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1589,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2367,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2867,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(1194.4,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="2502.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>；时间复杂度为O(n<sup>2</sup>)。</p><p>最好情况：参与排序的数组为顺序，每次新元素都大于前面的元素，刚进入for 循环，比较结果为 false，直接退出循环；一共 n - 1 比较，交换次数为0，时间复杂度为 <code>O(n)</code>。</p><p>平均：前面的元素有一半比新元素大，那么就是最差情况下的比较次数除以2，时间复杂度为 O(n<sup>2</sup>)。</p><p>空间复杂度为 <code>O(1)</code>，是稳定排序。</p><p>在简单排序中，插入排序性能最好；一般待排序元素个数较少时，使用直接插入排序最快。</p><hr><p>变体：</p><p>将新元素与前面的元素比较，获取新元素应该插入的位置，并把已有元素往后移，给新元素腾出一个空间。</p><p>以 {6，3，5，7，1} 为例：</p><p>第一轮：6，3，5，7，1</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">记录新元素的值：insertVal = arr[1] = 3insertVal 与 arr[0] 比较，3 &lt; 6，记录新元素应该插入的位置：insertIndex = 0将 arr[0] 后移腾出空间：6，6，5，7，1结束根据记录的下标插入新元素：arr[insertIndex] = arr[0] = insertVal = 3插入后：3，6，5，7，1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/13/PF6VS5yBdAcG4QH.png" alt="第一轮"><figcaption aria-hidden="true">第一轮</figcaption></figure><p>第二轮：3，6，5，7，1</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">记录 insertVal = arr[2] = 5insertVal 与 arr[1] 比较，5 &lt; 6，记录下标 1，将 arr[1] 后移：3，6，6，7，1insertVal 与 arr[0] 比较，5 &gt; 3，结束插入新元素，arr[1] = insertVal = 53，5，6，7，1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/13/pT3tsLGufDnB6PZ.png" alt="第二轮"><figcaption aria-hidden="true">第二轮</figcaption></figure><p>第三轮：3，5，6，7，1</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">记录 insertVal = arr[3] = 7insertVal 与 arr[2] 比较，7 &gt; 6，结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/13/x85fIMWcr9Ejehd.png" alt="第三轮"><figcaption aria-hidden="true">第三轮</figcaption></figure><p>第四轮：3，5，6，7，1</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">记录 insertVal = arr[4] = 1insertVal 与 arr[3] 比较，1 &lt; 7，记录下标 3，将 arr[3] 往后移：3，5，6，7，7insertVal 与 arr[2] 比较，1 &lt; 6，记录下标 2，将 arr[2] 往后移：3，5，6，6，7insertVal 与 arr[1] 比较，1 &lt; 5，记录下标 1，将 arr[1] 往后移：3，5，5，6，7insertVal 与 arr[0] 比较，1 &lt; 3，记录下标 0，将 arr[0] 往后移：3，3，5，6，7结束arr[0] = insertVal = 11，3，5，6，7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/13/Q9qYplLgG8Uo2Ah.png" alt="第四轮"><figcaption aria-hidden="true">第四轮</figcaption></figure><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 记录下标</span>    <span class="token keyword">int</span> insertIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token comment">// 新元素的值</span>    <span class="token keyword">int</span> insertVal <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 拿新元素与之前的元素比较</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> insertVal <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 记录新元素应该插入的下标</span>        insertIndex <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 将 arr[j - 1] 后移，即让 arr[j] 保存 arr[j - 1] 的值</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> insertIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>insertIndex<span class="token punctuation">]</span> <span class="token operator">=</span> insertVal<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码的第 16 行说明：insertIndex 默认为 i（新元素的下标），经过循环后insertIndex 如果还是 i，说明新元素的位置正合适，不用变动。</p><p>这种实现比第一种方式，由于交换次数的减少，稍微快一点点。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1.6 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.6.y 实战演练</title>
      <link href="/2022/04/29/1.1.6-shu-zu/1.1.6.y-shi-zhan-yan-lian/"/>
      <url>/2022/04/29/1.1.6-shu-zu/1.1.6.y-shi-zhan-yan-lian/</url>
      
        <content type="html"><![CDATA[<h2 id="y-实战演练">6.y 实战演练</h2><p>6.1 编写方法用于拷贝数组。</p><p>6.2 编写方法用于反转数组，例：{12，25，67，2} -----&gt;{2，67，25，12}。</p><p>6.3 编写一个类，有成员变量 int size、int[] arr；</p><ul><li><p>编写方法使用 arr添加元素，要求：能够自动扩容，而不会越界。</p></li><li><p>可以通过 size 获取已添加元素的个数。</p></li><li><p>编写方法删除元素，要求：数组长度同时也跟着缩减。示例：{42, 26, 6,4, 9, 97} 删除 6 后，得到 {42, 26, 4, 9, 97}。</p></li></ul><p>6.4 创建一个任意类型的一维数组，不手动赋值，元素的默认值为？</p><p>6.5 输出如下图形：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">    1   1 1  1 2 1 1 3 3 11 4 6 4 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.6 x 是二维数组，y 是一维数组。以下语句能够通过编译的有：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">a) x[0] = y;b) x[0][0] = y[0];c) x = y[0];d) x[0][0] = y;e) x = y;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 1.1.6 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.1 语法入门 </tag>
            
            <tag> 1. JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
