<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>1.1.p 参考文献</title>
      <link href="/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.p-can-kao-wen-xian/"/>
      <url>/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.p-can-kao-wen-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="参考文献">参考文献</h1><p>版权声明：本文版权著作权归以下链接的作者共有，遵循 CC 4.0 BY-SA版权协议。商业转载请联系原作者获得授权，非商业转载请附上原文出处链接，未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接，否则保留追究法律责任的权利。</p><h2 id="参考视频">参考视频</h2><h3 id="参考视频链接">参考视频链接</h3><ul><li>作者：<a href="https://space.bilibili.com/95256449">遇见狂神说</a>，内容：JavaSE基础，<a href="https://www.bilibili.com/video/BV12J41137hu">https://www.bilibili.com/video/BV12J41137hu</a></li></ul><h3 id="引用视频观点">引用视频观点</h3><ul><li><p>作者：<a href="https://space.bilibili.com/2630977">SchelleyYuki</a>，内容：前后端是做什么的，<a href="https://www.bilibili.com/video/BV1DV411B7v5">https://www.bilibili.com/video/BV1DV411B7v5</a></p></li><li><p>作者：<a href="https://space.bilibili.com/651245581">韩顺平</a>，内容：JavaSE基础，<a href="https://www.bilibili.com/video/BV1fh411y7R8">https://www.bilibili.com/video/BV1fh411y7R8</a></p></li><li><p>作者：<a href="https://space.bilibili.com/76542346">动力节点</a>，内容：JavaSE基础，<a href="https://www.bilibili.com/video/BV1Rx411876f">https://www.bilibili.com/video/BV1Rx411876f</a></p></li><li><p>作者：<a href="https://space.bilibili.com/302417610">尚硅谷</a>，内容：JavaSE基础，<a href="https://www.bilibili.com/video/BV1Kb411W75N">https://www.bilibili.com/video/BV1Kb411W75N</a></p></li><li><p>作者：<a href="https://space.bilibili.com/302417610">尚硅谷</a>，内容：IDEA教程，<a href="https://www.bilibili.com/video/BV1PW411X75p">https://www.bilibili.com/video/BV1PW411X75p</a></p></li></ul><h2 id="参考书籍">参考书籍</h2><h3 id="参考书籍观点">参考书籍观点</h3><ul><li>书名：《啊哈！算法》，作者：啊哈磊，出版社：人民邮电出版社，时间：2014.5</li></ul><h3 id="引用书籍原句">引用书籍原句</h3><ul><li><p>书名：《Think in Java》《Java编程思想》，作者：【美】BruceEckel，译者：陈昊鹏、绕若楠，出版社：机械工业出版社，时间：2003</p></li><li><p>书名：《大话数据结构》，作者：程杰，出版社：清华大学出版社，时间：2011.6</p></li><li><p>书名：《阿里巴巴Java开发手册》，发布者：<a href="https://github.com/gujin520">gujin520</a>，<a href="https://github.com/alibaba/p3c">https://github.com/alibaba/p3c</a></p></li><li><p>书名：《Effective Java 第三版》，作者：【美】Joshua Bloch（约书亚· 布洛克），译者：俞黎敏，出版社：机械工业出版社，时间：2018</p></li><li><p>书名：《Core Java Volume Fundamentals》《Java 核心技术卷》，作者：Cay S.Horstmann，译者：周立新、陈波、叶乃文、邝劲筠、杜永萍</p></li></ul><h2 id="参考文章">参考文章</h2><h3 id="参考文章链接">参考文章链接</h3><ul><li><p>作者：<a href="https://blog.csdn.net/weixin_45073562">喵酱向前冲</a>，内容：mathjax语法渲染错误，<a href="https://blog.csdn.net/weixin_45073562/article/details/120289648">https://blog.csdn.net/weixin_45073562/article/details/120289648</a></p></li><li><p>作者：<a href="https://blog.csdn.net/Serena_tz">Serena_tz</a>，内容：用 gitee搭建博客，<a href="https://blog.csdn.net/serena_tz/article/details/115482336">https://blog.csdn.net/serena_tz/article/details/115482336</a></p></li><li><p>作者：<a href="https://blog.csdn.net/weixin_36401046">乔小乔jojo</a>，内容：hexod ERROR Deployer not found: git，<a href="https://blog.csdn.net/weixin_36401046/article/details/52940313">https://blog.csdn.net/weixin_36401046/article/details/52940313</a></p></li><li><p>提问：如何搭建个人网站，有关网站：</p><p><a href="https://www.zhihu.com/question/22197688">https://www.zhihu.com/question/22197688</a></p><p><a href="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration</a></p><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></p></li><li><p>作者：闪烁之狐，内容：Hexo 博客主题之 hexo-theme-matery的介绍，<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/</a></p></li><li><p>作者：<a href="https://blog.csdn.net/qq_41297896">MorKANA</a>，内容：时间复杂度，<a href="https://blog.csdn.net/qq_41297896/article/details/104223612">https://blog.csdn.net/qq_41297896/article/details/104223612</a></p></li><li><p>作者：<a href="https://blog.csdn.net/weixin_43288201">看见代码就想敲</a>，内容：shell脚本语法，<a href="https://blog.csdn.net/weixin_43288201/article/details/105643692">https://blog.csdn.net/weixin_43288201/article/details/105643692</a></p></li><li><p>作者：<a href="https://jingyan.baidu.com/user/npublic?uid=e826f430e5e30adccccfdf6c">我真的不知道的啦</a>，内容：极限符号，<a href="https://jingyan.baidu.com/article/414eccf6be0a6d6b431f0ae0.html">https://jingyan.baidu.com/article/414eccf6be0a6d6b431f0ae0.html</a></p></li><li><p>作者：<a href="https://home.cnblogs.com/u/nickchen121/">二十三岁的有德</a>，内容：本地自动发布文章到博客园，<a href="https://www.cnblogs.com/nickchen121/p/11132957.html">https://www.cnblogs.com/nickchen121/p/11132957.html</a></p></li><li><p>作者：<a href="https://www.cnblogs.com/nickchen121">二十三岁的有德</a>，内容：Python从入门到放弃，<a href="https://www.cnblogs.com/nickchen121/p/10718112.html">https://www.cnblogs.com/nickchen121/p/10718112.html</a></p></li><li><p>作者：lightzhan，内容：Joplin 网页剪辑，<a href="https://lightzhan.xyz/index.php/2020/03/18/joplin-web-clipper-tutorial/">https://lightzhan.xyz/index.php/2020/03/18/joplin-web-clipper-tutorial/</a></p></li><li><p>来源：互联网，内容：查看博客园的 MetaWebLog API，<a href="https://www.icode9.com/content-4-664692.html">https://www.icode9.com/content-4-664692.html</a></p></li><li><p>作者：<a href="https://blog.csdn.net/qq_21808961">蓝蓝223</a>，内容：双击可以执行jar 包，<a href="https://blog.csdn.net/qq_21808961/article/details/78442858">https://blog.csdn.net/qq_21808961/article/details/78442858</a></p></li><li><p>作者：<a href="https://blog.csdn.net/weixin_44678104">故里江添_</a>，内容：使用exe4j 将 jar 包打包成 exe 命令，<a href="https://blog.csdn.net/weixin_44678104/article/details/101015065">https://blog.csdn.net/weixin_44678104/article/details/101015065</a></p></li><li><p>作者：知乎用户，内容：GB2312、GBK、GB18030这几种字符集的主要区别是什么，https:/<a href="https://gitee.com/ccqqhh/JavaSE-grammar"></a>/www.zhihu.com/question/19677619</p></li><li><p>作者：<a href="https://www.zhihu.com/people/zhang-jun-zhao-60">张大昭</a>，内容：为什么计算机能读懂1 和 0，<a href="https://www.zhihu.com/question/20112194">https://www.zhihu.com/question/20112194</a></p></li><li><p>作者：热心网友，内容：ASCII 码是几位二进制码，<a href="https://wenwen.sogou.com/z/q657498179.htm">https://wenwen.sogou.com/z/q657498179.htm</a></p></li><li><p>作者：<a href="https://home.cnblogs.com/u/malecrab/">malecrab</a>，内容：ANSI是什么编码，<a href="https://www.cnblogs.com/malecrab/p/5300486.html">https://www.cnblogs.com/malecrab/p/5300486.html</a></p></li><li><p>转载：<a href="https://blog.csdn.net/imxiangzi">imxiangzi</a>，内容：ANSI是什么编码，<a href="https://blog.csdn.net/imxiangzi/article/details/77370160">https://blog.csdn.net/imxiangzi/article/details/77370160</a></p></li><li><p>作者：<a href="https://cloud.tencent.com/developer/user/3541135">黑泽君</a>，内容：如何查看Windows 操作系统的默认编码，<a href="https://cloud.tencent.com/developer/article/1353937">https://cloud.tencent.com/developer/article/1353937</a></p></li><li><p>作者：<a href="https://blog.csdn.net/shenwansan_gz">沈万三gz</a>，内容：什么是JIT，<a href="https://blog.csdn.net/shenwansangz/article/details/95601232">https://blog.csdn.net/shenwansangz/article/details/95601232</a></p></li><li><p>作者：<a href="https://www.jianshu.com/u/a00b505c83fb">猪_队友</a>，内容：什么是多态，<a href="https://www.jianshu.com/p/68ddb5484ca2">https://www.jianshu.com/p/68ddb5484ca2</a></p></li><li><p>作者：<a href="https://blog.csdn.net/qq_42937522">Duktig丶</a>，内容：方法的重载是多态性吗，<a href="https://blog.csdn.net/qq_42937522/article/details/106563188">https://blog.csdn.net/qq_42937522/article/details/106563188</a></p></li><li><p>作者：<a href="https://blog.csdn.net/chunzhilianxue">springinwinter_4all</a>，内容：Java8Instant 时间戳，<a href="https://blog.csdn.net/chunzhilianxue/article/details/80974202">https://blog.csdn.net/chunzhilianxue/article/details/80974202</a></p></li><li><p>作者：<a href="https://blog.csdn.net/xingxiupaioxue">树上的疯子^</a>，内容：ThreadLocalRandom，<a href="https://blog.csdn.net/xingxiupaioxue/article/details/104796276/">https://blog.csdn.net/xingxiupaioxue/article/details/104796276/</a></p></li><li><p>作者：<a href="https://home.cnblogs.com/u/xfeiyun/">流浪的雨</a>，内容：集合概述，<a href="https://www.cnblogs.com/xfeiyun/p/15837566.html">https://www.cnblogs.com/xfeiyun/p/15837566.html</a></p></li><li><p>作者：<a href="https://blog.csdn.net/u011138533">pNull</a>，内容：IntelliJ IDEA单元测试入门，<a href="https://blog.csdn.net/u011138533/article/details/52165577">https://blog.csdn.net/u011138533/article/details/52165577</a></p></li><li><p>作者：<a href="https://home.cnblogs.com/u/tangshun100/">Town125</a>，内容：boolean类型数据到底占有几个字节，<a href="https://www.cnblogs.com/tangshun100/p/13173006.html">https://www.cnblogs.com/tangshun100/p/13173006.html</a></p></li><li><p>作者：<a href="https://blog.csdn.net/weixiaodedao">微笑的小小刀</a>，内容：一篇文章搞清楚boolean 到底占几个字节，<a href="https://blog.csdn.net/weixiaodedao/article/details/109506667">https://blog.csdn.net/weixiaodedao/article/details/109506667</a></p></li><li><p>作者：<a href="https://blog.csdn.net/qq_17231297">公众号-老炮说Java</a>，内容：Java中 boolean 类型占多少字节，<a href="https://blog.csdn.net/qq_17231297/article/details/106621963">https://blog.csdn.net/qq_17231297/article/details/106621963</a></p></li><li><p>作者：<a href="https://www.jianshu.com/u/cca22173a13f">冬天里的懒喵</a>，内容：在java中boolean 类型占多少字节，<a href="https://www.jianshu.com/p/4d0ae2bac610">https://www.jianshu.com/p/4d0ae2bac610</a></p></li></ul><h3 id="引用文章原句">引用文章原句</h3><ul><li>内容：设计模式，来源：菜鸟教程，<a href="https://www.runoob.com/design-pattern/singleton-pattern.html">https://www.runoob.com/design-pattern/singleton-pattern.html</a></li><li>作者：<a href="https://blog.csdn.net/zolalad">zolalad</a>，内容：时间复杂度与空间复杂度，<a href="https://blog.csdn.net/zolalad/article/details/11848739">https://blog.csdn.net/zolalad/article/details/11848739</a></li><li>作者：<a href="https://www.zhihu.com/people/xia_2">夏2同学</a>，内容：Typora中使用图床，<a href="https://zhuanlan.zhihu.com/p/137310314">https://zhuanlan.zhihu.com/p/137310314</a></li><li>作者：<a href="https://zhidao.baidu.com/usercenter?uid=c2334069236f25705e7938ad&amp;role=newteam">陌上花开luckly</a>，内容：Java用途，<a href="https://zhidao.baidu.com/question/138993898.html">https://zhidao.baidu.com/question/138993898.html</a></li><li>作者：百度百科，内容：eclipse，<a href="https://baike.baidu.com/item/eclipse/61703">https://baike.baidu.com/item/eclipse/61703</a></li><li>作者：廖雪峰，内容：Java 教程，<a href="https://www.liaoxuefeng.com/wiki/1252599548343744">https://www.liaoxuefeng.com/wiki/1252599548343744</a></li><li>作者：<a href="https://blog.csdn.net/qq_42245219">Jackson蜜蜂</a>，内容：什么是Java Bean，<a href="https://blog.csdn.net/qq_42245219/article/details/82748460">https://blog.csdn.net/qq_42245219/article/details/82748460</a></li><li>作者：<a href="https://blog.csdn.net/bengxu">公众号/头条号：技术很有趣</a>，内容：数组下标为什么从0 开始，<a href="https://blog.csdn.net/bengxu/article/details/83477690">https://blog.csdn.net/bengxu/article/details/83477690</a></li><li>作者：<a href="https://blog.csdn.net/weichi7549">渣一个</a>，内容：数组下标索引为什么从0 开始，<a href="https://blog.csdn.net/weichi7549/article/details/108064848">https://blog.csdn.net/weichi7549/article/details/108064848</a></li><li>作者：<a href="https://blog.csdn.net/qq_40670946">陆顺治</a>，内容：数组下标为什么从0 开始，<a href="https://blog.csdn.net/qq_40670946/article/details/83061993">https://blog.csdn.net/qq_40670946/article/details/83061993</a></li><li>提问：JavaScript 中的 Date 对象取值 month 为什么是从 0 开始的，<a href="https://www.zhihu.com/question/263804983">https://www.zhihu.com/question/263804983</a></li><li>作者：<a href="https://github.com/cenalulu">卢钧轶</a>，内容：什么是字符编码、字符集，<a href="http://cenalulu.github.io/linux/character-encoding/">http://cenalulu.github.io/linux/character-encoding/</a></li><li>作者：<a href="https://hernsong.blog.csdn.net/">Hern（宋兆恒）</a>，内容：Unicode与 UTF-8 的区别，<a href="https://blog.csdn.net/qq_36761831/article/details/82291166">https://blog.csdn.net/qq_36761831/article/details/82291166</a></li><li>作者：<a href="https://blog.csdn.net/weixin_45025727">老马达</a>，内容：含 BOM 的UTF-8 与 不含的区别，<a href="https://blog.csdn.net/weixin_45025727/article/details/106799649">https://blog.csdn.net/weixin_45025727/article/details/106799649</a></li><li>作者：<a href="https://blog.csdn.net/u012373281">金麟十三少</a>，内容：BOM是什么意思，<a href="https://blog.csdn.net/u012373281/article/details/91410698">https://blog.csdn.net/u012373281/article/details/91410698</a></li><li>作者：<a href="https://blog.csdn.net/lili13897741554">DreamTech1113</a>，内容：ASCII及其它编码，<a href="https://blog.csdn.net/lili13897741554/article/details/82053351">https://blog.csdn.net/lili13897741554/article/details/82053351</a></li><li>作者： <a href="https://home.cnblogs.com/u/zwbg/">zwbg</a>，内容：类的加载时机，<a href="https://www.cnblogs.com/zwbg/p/5903527.html">https://www.cnblogs.com/zwbg/p/5903527.html</a></li><li>作者：<a href="https://blog.csdn.net/weixin_40304387">不断前行的菜鸟_</a>，内容：字符串常量池深入解析，<a href="https://blog.csdn.net/weixin_40304387/article/details/81071816">https://blog.csdn.net/weixin_40304387/article/details/81071816</a></li><li>作者：<a href="https://www.jianshu.com/u/1b9d18270e91">你想要怎样的未来</a>，内容：字符串常量池，<a href="https://www.jianshu.com/p/039d6df30fea">https://www.jianshu.com/p/039d6df30fea</a></li><li>作者： <a href="https://home.cnblogs.com/u/gxyandwmm/">小勇DW3</a>，内容：字符串常量池，<a href="https://www.cnblogs.com/gxyandwmm/p/9495923.html">https://www.cnblogs.com/gxyandwmm/p/9495923.html</a></li><li>来源：互联网，内容：String Pool 的实现，<a href="https://www.isolves.com/it/cxkf/yy/JAVA/2019-12-23/10492.html">https://www.isolves.com/it/cxkf/yy/JAVA/2019-12-23/10492.html</a></li><li>作者： <a href="https://home.cnblogs.com/u/cosmos-wong/">cosmoswong</a>，内容：字符串常量池和运行时常量池在哪，<a href="https://www.cnblogs.com/cosmos-wong/p/12925299.html">https://www.cnblogs.com/cosmos-wong/p/12925299.html</a></li><li>作者：<a href="https://home.cnblogs.com/u/syp172654682/">小奔的早晨</a>，内容：深入浅出Java 常量池，<a href="https://www.cnblogs.com/syp172654682/p/8082625.html">https://www.cnblogs.com/syp172654682/p/8082625.html</a></li><li>作者：<a href="https://blog.csdn.net/weixin_44765605">懒杰</a>，内容：JDK 8中字符串常量池在哪，<a href="https://blog.csdn.net/weixin_44765605/article/details/110737251">https://blog.csdn.net/weixin_44765605/article/details/110737251</a></li><li>作者： <a href="https://home.cnblogs.com/u/skyvalley/">人菜话多帅瓜皮</a>，内容：字符串常量池处在JVM 的堆中，那么是在堆的哪个部分呢，<a href="https://www.cnblogs.com/skyvalley/p/13818240.html">https://www.cnblogs.com/skyvalley/p/13818240.html</a></li><li>作者：manDD_HH，内容：还搞不定方法区、常量池、字符串常量池吗，<a href="https://www.it610.com/article/1292596715873968128.htm">https://www.it610.com/article/1292596715873968128.htm</a></li><li>作者：<a href="https://blog.csdn.net/TomAndersen">TomAndersen</a>，内容：Java字符串字面量是何时进入到字符串常量池中的，<a href="https://blog.csdn.net/TomAndersen/article/details/107147344">https://blog.csdn.net/TomAndersen/article/details/107147344</a></li><li>作者： <a href="https://home.cnblogs.com/u/holos/">holos</a>，内容：Java中几种常量池的区分，<a href="https://www.cnblogs.com/holos/p/6603379.html">https://www.cnblogs.com/holos/p/6603379.html</a></li><li>作者： <a href="https://home.cnblogs.com/u/byqin/">Aj小菜</a>，内容：JVM中的堆的新生代、老年代、永久代详解，<a href="https://www.cnblogs.com/byqin/p/12512528.html">https://www.cnblogs.com/byqin/p/12512528.html</a></li><li>作者：<a href="https://www.zhihu.com/people/mo-ting-yu-95">剑客手中拿把刀</a>，内容：类加载过程：三大阶段，<a href="https://zhuanlan.zhihu.com/p/346333194">https://zhuanlan.zhihu.com/p/346333194</a></li><li>作者：<a href="https://home.cnblogs.com/u/yuexiaoyun/">跃小云</a>，内容：41. JVM方法区的内部结构（方法区中存储的是什么） ，<a href="https://www.cnblogs.com/yuexiaoyun/articles/14001254.html">https://www.cnblogs.com/yuexiaoyun/articles/14001254.html</a></li><li>作者：<a href="https://www.jianshu.com/u/bd316610ac77">笨比乔治</a>，内容：对方法区和永久代的理解，<a href="https://www.jianshu.com/p/797ec081a4aa">https://www.jianshu.com/p/797ec081a4aa</a></li><li>作者：<a href="https://home.cnblogs.com/u/chenpt/">不二尘</a>，内容：JVM类的加载机制，<a href="https://www.cnblogs.com/chenpt/p/9777367.html">https://www.cnblogs.com/chenpt/p/9777367.html</a></li><li>作者：<a href="https://home.cnblogs.com/u/chenpt/">不二尘</a>，内容：JVM运行时数据区，<a href="https://www.cnblogs.com/chenpt/p/8953435.html">https://www.cnblogs.com/chenpt/p/8953435.html</a></li><li>作者：<a href="https://blog.csdn.net/weixin_38719347">vanlyy</a>，内容：关于常量池，字符串常量池的整理，<a href="https://blog.csdn.net/weixin_38719347/article/details/80907944">https://blog.csdn.net/weixin_38719347/article/details/80907944</a></li><li>作者：sdky，内容：JavaSE 基础，<a href="https://sdky.gitee.io/">https://sdky.gitee.io/</a></li><li>作者：<a href="https://blog.csdn.net/feiyanaffection">phial03</a>，内容：Java集合超详解，<a href="https://blog.csdn.net/feiyanaffection/article/details/81394745">https://blog.csdn.net/feiyanaffection/article/details/81394745</a></li><li>作者：<a href="https://thinkwon.blog.csdn.net/">ThinkWon</a>，内容：Java知识体系最强总结（2021版），<a href="https://blog.csdn.net/ThinkWon/article/details/103592572">https://blog.csdn.net/ThinkWon/article/details/103592572</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 1.1 语法入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1. JavaSE </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.o 资源地址</title>
      <link href="/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.o-zi-yuan-di-zhi/"/>
      <url>/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.o-zi-yuan-di-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="资源地址">资源地址</h1><p><mark>下面资源全部收集整理于网络并无偿提供，仅可用于个人学习交流；请勿转载、售卖或商用。侵权删！</mark></p><p>文章中已经出现的网址可能不再出现，望谅解！</p><h2 id="网盘链接">网盘链接</h2><p>百度网盘太慢了，一百兆的文件隔了一天才下好，所以就弃用了。</p><h3 id="jdk-下载">JDK 下载</h3><p><strong>JDK8</strong></p><p>阿里云盘链接：<a href="https://www.aliyundrive.com/s/xu2ZbDSbf61">https://www.aliyundrive.com/s/xu2ZbDSbf61</a></p><p>天翼云盘链接：（访问码：8qwi）<a href="https://cloud.189.cn/web/share?code=JR7rEbvI32mm">https://cloud.189.cn/web/share?code=JR7rEbvI32mm</a></p><p>奶牛快传传输链接：打开【奶牛快传】cowtransfer.com使用传输口令：a7khbp 提取；或 传输链接：<a href="https://cowtransfer.com/s/4370c88f111d4e">https://cowtransfer.com/s/4370c88f111d4e</a></p><p><strong>JDK11</strong></p><p>阿里云盘链接：<a href="https://www.aliyundrive.com/s/XwaEENBMMs2">https://www.aliyundrive.com/s/XwaEENBMMs2</a></p><p>天翼云盘链接：（访问码：uw75）<a href="https://cloud.189.cn/web/share?code=YZJBRf77ZBzu">https://cloud.189.cn/web/share?code=YZJBRf77ZBzu</a></p><p><strong>JDK17</strong></p><p>阿里云盘链接：<a href="https://www.aliyundrive.com/s/uoYfGWEAknU">https://www.aliyundrive.com/s/uoYfGWEAknU</a></p><p>天翼云盘链接：（访问码：tcu5）<a href="https://cloud.189.cn/web/share?code=UzuuYbeEjUry">https://cloud.189.cn/web/share?code=UzuuYbeEjUry</a></p><p>奶牛快传传输链接： 打开【奶牛快传】cowtransfer.com使用传输口令：zn46qi 提取；或 传输链接：<a href="https://cowtransfer.com/s/ad936bbebca445">https://cowtransfer.com/s/ad936bbebca445</a></p><h3 id="ide-工具">IDE 工具</h3><p><strong>IDEA 下载</strong>：</p><p>阿里云盘链接：<a href="https://www.aliyundrive.com/s/TM9rvAjEeJu">https://www.aliyundrive.com/s/TM9rvAjEeJu</a></p><p>天翼云盘链接：（访问码：4gn2）<a href="https://cloud.189.cn/web/share?code=VNFvqyE3YvMj">https://cloud.189.cn/web/share?code=VNFvqyE3YvMj</a></p><p>奶牛快传传输链接：打开【奶牛快传】cowtransfer.com使用传输口令：e63ydj 提取； 或 传输链接：<a href="https://cowtransfer.com/s/6737a08627ee45">https://cowtransfer.com/s/6737a08627ee45</a></p><p><strong>Eclipse 下载</strong>：</p><p>天翼云盘链接：（访问码：upy6）<a href="https://cloud.189.cn/web/share?code=eIfAzqvYZrim">https://cloud.189.cn/web/share?code=eIfAzqvYZrim</a></p><p>奶牛快传传输链接： 打开【奶牛快传】cowtransfer.com使用传输口令：xywy0y 提取；或 传输链接：<a href="https://cowtransfer.com/s/9f126bbf83d242">https://cowtransfer.com/s/9f126bbf83d242</a></p><h3 id="自己写的小玩意">自己写的小玩意</h3><p><strong>合并多个 md 文件为一个文件</strong></p><p>天翼云盘链接：（访问码：qg9y）<a href="https://cloud.189.cn/web/share?code=Un2iuamInI7z">https://cloud.189.cn/web/share?code=Un2iuamInI7z</a></p><p>奶牛快传传输链接： 打开【奶牛快传】cowtransfer.com使用传输口令：omy5y8 提取；或 传输链接：<a href="https://cowtransfer.com/s/b995725decea4c">https://cowtransfer.com/s/b995725decea4c</a></p><h2 id="工具网址">工具网址</h2><p>书中源码地址：<a href="https://gitee.com/ccqqhh/JavaSE-grammar">https://gitee.com/ccqqhh/JavaSE-grammar</a></p><h3 id="可能会使用到的在线工具网址">可能会使用到的在线工具网址</h3><ul><li>查看 IP 地址：<a href="http://ip111.cn">http://ip111.cn</a></li><li>ioDraw 思维导图：<a href="https://www.iodraw.com/template">https://www.iodraw.com/template</a></li><li>Process On 思维导图：<a href="https://www.processon.com/diagrams/new#template">https://www.processon.com/diagrams/new#template</a></li><li>JDK 8 API 文档：<a href="https://docs.oracle.com/javase/8/docs/api/index.html">https://docs.oracle.com/javase/8/docs/api/index.html</a></li><li>JDK 8 中文文档：<a href="https://www.matools.com/api/java8">https://www.matools.com/api/java8</a></li><li>进制转换：<a href="https://tool.lu/hexconvert/">https://tool.lu/hexconvert/</a></li><li>汉字编码查询：<a href="https://www.qqxiuzi.cn/bianma/zifuji.php">https://www.qqxiuzi.cn/bianma/zifuji.php</a></li><li>编程书籍：<a href="https://www.bookstack.cn/">https://www.bookstack.cn/</a></li><li>集合符号：<a href="http://www.52unicode.com/not-a-subset-of-unicode">http://www.52unicode.com/not-a-subset-of-unicode</a></li><li>集合符号：<a href="http://www.fhdq.net/sx/95.html">http://www.fhdq.net/sx/95.html</a></li><li>Unicode 字符集：<a href="https://www.qqxiuzi.cn/zh/unicode-zifu.php">https://www.qqxiuzi.cn/zh/unicode-zifu.php</a></li><li>谷歌插件市场：<a href="https://zhuanlan.zhihu.com/p/76634823">https://zhuanlan.zhihu.com/p/76634823</a></li><li>生成 ico 图标：<a href="https://www.ico51.cn/">https://www.ico51.cn/</a></li><li>自动采集文章并发布：<a href="https://www.lmcjl.com/">https://www.lmcjl.com/</a></li><li>自动构建文档：<a href="https://readthedocs.org/">https://readthedocs.org/</a></li><li>一文多发：<a href="https://openwrite.cn/">https://openwrite.cn/</a></li><li>PDF 转成 MD：<a href="https://pdf2md.morethan.io/">https://pdf2md.morethan.io/</a></li></ul><h3 id="可能会使用到的工具下载链接">可能会使用到的工具下载链接</h3><ul><li>有道词典：<a href="https://dict.youdao.com/">https://dict.youdao.com/</a></li><li>搜狗五笔输入法：<a href="https://wubi.sogou.com/">https://wubi.sogou.com/</a></li><li>Sublime Text：<a href="https://www.sublimetext.com/">https://www.sublimetext.com/</a></li><li>谷歌浏览器：<a href="https://www.google.cn/intl/zh-CN/chrome/">https://www.google.cn/intl/zh-CN/chrome/</a></li><li>Win RAR 解压缩：<a href="https://www.win-rar.com/download.html?&amp;L=0">https://www.win-rar.com/download.html?&amp;L=0</a></li><li>Win RAR 中文版：<a href="https://www.winrar.com.cn/">https://www.winrar.com.cn/</a></li><li>比邻云盘：<a href="https://www.bilnn.com/">https://www.bilnn.com/</a></li><li>比邻云盘升级版：<a href="https://link.bilnn.com/">https://link.bilnn.com/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 1.1 语法入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1. JavaSE </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.n 参考答案</title>
      <link href="/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.n-can-kao-da-an/"/>
      <url>/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.n-can-kao-da-an/</url>
      
        <content type="html"><![CDATA[<h1 id="参考答案">参考答案</h1><h2 id="第一到五章">第一到五章</h2><h3 id="第一章答案">第一章答案</h3><p>1.1 JDK 和 JRE 的区别？</p><p>JVM（Java Virtual Machine）Java 虚拟机，Java程序需要运行在虚拟机上，根据不同平台的虚拟机，能够实现跨平台的功能。（编译一次，生成的字节码文件可以在不同平台运行）</p><p>JDK（Java Development Kit）Java开发工具包，包含了 JRE和<mark>开发工具</mark>（javac.exe、javadoc.exe、javap.exe等），不仅可以运行 Java 程序，也可以开发 Java 程序。</p><p>JRE（Java Runtime Environment）Java运行环境，包括JVM、<mark>核心类库</mark>（常用类）等。</p><p>JDK 中包含 JRE，如果只想运行 class 文件，JRE 就足够。</p><p>JDK &gt; JRE &gt; JVM</p><hr><p>1.2 什么是编程？</p><p>编程：解决某个问题而使用某种编程语言编写程序代码控制电脑得到结果的过程。</p><p>使用高级语言编写的源代码需要进行编译或解释，能够让操作系统识别，理解你的意图，接收一系列的指令去一步步操纵硬件工作，最终解决某个问题。</p><hr><p>1.3 Swing 组件是什么？</p><p>Swing包含了构建图形界面（GUI）的各种组件，如按钮、标签、窗口、面板、文本框等组件。你现在看到的QQ、微信等软件就是一个图形界面，里面是各种类型的组件组成。</p><hr><p>1.4 JAR 包是什么？</p><p>jar 包也称类库。源码编译后生成对应的 .class字节码文件，为了完成某些功能通常需要多个 .class 文件的配合。jar包主要对多个 .class 文件打包，类似 zip 压缩格式的文件，但不同的是 jar多了 META-INF/MANIFEST.MF 文件，里面有 jar包的创建人、版本等信息；若是可执行的 jar 包（有 main 方法），会包含Main-Class 属性，表示 main 方法在哪个类中。</p><hr><p>1.5 软件与程序指的是什么？</p><p>软件可以完成特定的功能，可以理解为应用程序的集合。而应用程序是软件的一个组成部分，它是软件的必要元素。简单来说，软件= 程序 + 文档 = 数据结构 + 算法 + 文档。</p><p>程序指计算机执行某些操作或解决某个问题而编写的一系列有序指令的集合。</p><hr><p>1.6 什么是编译型语言和解释型语言？</p><p>使用计算机语言（一大串二进制数）或汇编语言，一个指令只能对应一个操作中的一个细微的动作，太繁琐，不利于记忆，容易出错，开发效率极低。计算机语言能够被计算机直接识别，执行效率最高。（面向机器）</p><p>后来生成了高级语言，方便让人类理解，开发效率高。但是编写的源代码不能被机器识别，需要翻译成机器可以识别的语言，请看下答的<strong>平台无关性</strong>。</p><hr><p>1.7 Java 语言特性？</p><p><strong>1）面向对象</strong></p><p>面向对象虽然执行效率没有面向过程高，但是以类的方式管理大量代码时（一个类中有变量、方法、代码块、内部类），更加方便程序员组织和管理代码，思路更清晰不易出错。</p><p>由此才有了对象、继承、封装、多态等概念。</p><p>①对象：使用类为模板指定参数创建的实例，通过实例可以调用类中定义的方法、访问类中的字段，不会混乱。</p><p>②继承：解决多个类中重复出现的代码，只要继承了一个类，自动拥有这个类的全部字段和方法。(私有、构造器、静态、final除外)</p><p>③封装：为了保护数据，不被错误的修改；在类、字段、方法上添加访问权限修饰符，如private，只允许在本类中访问，再提供公开的 set 与 get方法以供别人修改（在方法中可以添加判断逻辑来决定是否赋值）或访问本类的字段。此外还有包机制可以管理大量的类，可以区分两个同名类、将类似功能的类放在同一个包下...</p><p>④多态：子类继承了父类，但不满意父类的方法实现，可以重写此方法，表面是父类型，但可能底层为子类实例，调用的方法是子类重写后的方法，展现了不同的结果。</p><p>①对象：把自己当作上帝，想要创建一只狗，想一想狗的特征、行为有哪些，在类中定义字段用以保存狗的颜色、大小、品种信息，定义方法体现狗的行为。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    <span class="token comment">//private私有化，防止坏人直接修改狗的年龄</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">//定义age变量用以保存年龄</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//name保存姓名</span>    <span class="token comment">//方便别人访问狗的年龄，但不允许修改就不提供set方法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">//狗吃饭时的表现</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"开心地摇起了尾巴！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//有参构造器略</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后使用 new 关键字创建狗，同时指定狗的初始属性值。</p><p><code>new Dog(3, "土狗");</code></p><p>② 继承：想一想子女能够继承父母的财产吧。</p><p>③ 封装：父母可不能什么都让你访问，总要有自己私人的东西吧。</p><p>④多态：你老爸有事不能去了，你可以代替老爸，以他的身份参加这次宴席，你要是不满意老爸继承给你的如何为人处事的方法，可以使用自己的方法应对这些客人。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Father</span> huYingJun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>huYingJun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 您好啊，真高兴见到你。</span><span class="token class-name">Father</span> huTuTu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>huTuTu<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 我会动耳神功，你要看吗？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然你如果不想使用面向对象，嫌麻烦还要设计字段、方法，也可以把所有变量、方法都塞进一个类中，只是看着乱糟糟的，不好维护。（代码量很少时，没有必要使用面向对象）</p><p><strong>2）平台无关性</strong></p><p>编写出的代码不可直接被机器识别，需要工具进行转换。</p><p>先讲编译器与解释器的区别：</p><p>①编译器将源代码一次性全部翻译，生成一个二进制码文件，这个文件可以直接被机器识别，执行效率高。如果源代码改动需要重新编译生成新的二进制码文件。</p><p>②解释器将源代码逐行解释成特定平台的机器码，解释一行执行一行。每次执行都需要翻译，跨平台性好。</p><p>Java 的做法：</p><p>③ Java源代码会被编译成字节码文件，这个字节码文件是与任何平台都无关的中间代码，由JVM启动解释器翻译成对应平台上的机器码，所以一份字节码可以在任何平台上运行。前提：不同平台上要安装对应的JVM，JVM 不跨平台。</p><p>之所以这么做，是 Java既想保持解释语言的跨平台性（可移植性），又想解决解释语言执行效率低的问题。</p><p>但效率还是不如编译性语言。为了避免解释型语言带来的执行效率低的问题，Java设计者制作了 JIT（just in timecompilation）实时编译程序，将运行频率很高的字节码直接编译为机器指令执行来提高性能。</p><p>①给一个英语文件，你看不懂，有人直接将英语文件翻译成汉文，将翻译的结果保存在一本书中，给你发过去；这样你每次就直接看这本翻译后的书即可，缺点是原著改了，你又需要请他翻译一下。</p><p>②有人跟在你身边，你看一句，他就说一句这是什么意思；即使你换了一本英语书，他照样解释给你听，只不过效率低。</p><p>③有的人没有直接翻译成汉文，而是记录了源文件的重要信息、文章主题、中心思想、具体脉络等，再以后看到这份批注，能够迅速理解原文含义，get到这个点，能够不假思索说给你听。</p><p>后来发现也挺麻烦，他干脆挑出你最喜欢、频繁看的部分，将这部分先翻译好了，等你需要看别的地方时，再请教他。</p><p>所以不要纠结这个语言究竟是编译执行、还是解释执行，没有多大意义。</p><p><strong>3）支持多线程</strong></p><p><strong>a）线程与进程</strong></p><p>① 进程：每个运行的程序都会开启一个独立的进程，如QQ、酷狗音乐；操作系统为进程分配内存空间。</p><p>②线程：由线程创建，是线程的最小执行单位，一个进程至少有一个线程，用以完成任务。比如迅雷同时下载多个文件、QQ打开多个窗口等，多个任务同时执行。</p><p>单线程：一个进程同一时刻只有一个线程。</p><p>多线程：同一时刻有多个线程用以完成任务。</p><p><strong>b）CPU 处理线程的方式</strong></p><p>① 并行：同一个时刻，多个任务同时执行（多个 CPU）</p><p>② 并发：同一个时刻，多个任务交替执行（单个 CPU），通过 CPU调度，速度十分快，造成貌似同时执行的错觉。</p><p>③串行：按先后顺序依次执行任务，一次只做一件事。后面的任务想要执行，必须等前面的任务执行完毕。</p><p>①并行：吃饭时来了电话，你叫老婆接，自己吃饭；接电话与吃饭同时执行。</p><p>②并发：吃饭时来了电话，边吃饭边接电话，感觉像是同时，但是不可能真正在同一个时刻做到吃饭和说话，这样会呛到鼻子去。</p><p>③ 串行：吃饭时来了电话，先吃完饭，再打电话。</p><p>并发和并行可以同时存在，比如两个 CPU，一个 CPU 在处理 QQ 线程，另一个CPU 来回切换处理浏览器和音乐播放器。</p><p><strong>c）线程之间的关系</strong></p><p>①同步：一个线程需要等待另一个线程执行完毕，返回了消息，才能继续往下运行。</p><p>② 异步：一个线程 A 对另一个线程 B 发起请求，可以不用等待 B返回消息，因为 B线程执行完后会通知你，你直接去干别的事情了；等到接受通知后，再处理。</p><p><strong>d）单个线程的状态</strong></p><p>① 阻塞：一个线程在等待的过程啥也不干。</p><p>② 非阻塞：没必要一直等待，可以干别的事。</p><p>同步阻塞：快递员给你打电话，说楼下有你的快递；当你没拿之前，他就一直在原地等你，不能走开，啥也干不了。</p><p>同步非阻塞：快递员给你打电话，说楼下有你的快递；当你没拿之前，他觉得一直在原地等你很无聊，决定跑下步、玩手机、时不时观察你下来了没有、直接上楼...</p><p>异步非阻塞：快递员给你发短信，说快递放到菜鸟驿站了；随后没有等你来拿，直接把短信继续发给下一个人。直到你签收后，他那边才接收到消息，然后做相应处理。</p><p>异步阻塞：别人拿完快递后，自然会有信息通知你，你完全可以做其他事情，却还在那傻等。</p><p><strong>4）安全性</strong></p><p>双亲委派机制可以防止恶意加载同名字节码。</p><p><strong>5）健壮性</strong></p><p>异常处理机制：对可能出现异常的代码实现进行预先处理，防止遇见问题时，程序直接挂掉。</p><p>垃圾回收机制：自动清除长时间没使用的对象，防止内存泄漏（内存满了），这也算是简单性吧。</p><p><strong>6）简单性</strong></p><ul><li>封装、继承、多态很贴近生活。</li><li>没有指针这复杂的概念。</li><li>只支持类的单继承，多继承可以使用接口实现。</li><li>垃圾回收机制，不需要手动释放内存。</li></ul><hr><p>1.8 能说下 JavaSE、JavaEE、JavaME 吗？</p><p>JavaSE标准版，包含核心类库。主要用来开发桌面应用，允许在桌面、服务器开发和部署Java 应用程序。</p><p>JavaEE 企业版，帮助企业开发和部署可移植、可伸缩且安全的服务端 Java应用程序，包括 Web 网页后台开发等。</p><p>JavaME微型版，专门为在移动设备和嵌入设备上运行的应用程序提供一个健壮且灵活的环境。</p><h3 id="第二章答案">第二章答案</h3><p>2.1 为什么 Java 代码可以做到一次编译，到处运行？</p><p>编译生成的 .class 文件与具体平台、系统无关。</p><p>JVM 虚拟机是关键。程序运行时，由 JVM 负责解释执行 .class文件，将其翻译成不同平台下的机器码并运行。需要注意的是，.class文件是与操作系统平台无关的中间代码，不能直接运行。</p><p>JVM 不跨平台，不同平台需要安装不同的 JVM。</p><p>这么做的目的，在可移植的同时兼顾执行效率。此外还加入了 JIT（just intime）编译器，把运行频繁的代码直接编译成与本地平台相关的机器码，需要时直接使用，不用再次翻译。</p><hr><p>2.2 一个源文件可以生成多个 class 文件吗？</p><p>可以，源文件只要按规则定义了多个类，编译后会生成多个对应的 class文件。</p><hr><p>2.3 Java 源文件定义的类名必须与文件名一致吗？</p><p>不是，只有被 public 修饰的类名必须与源文件名一致。</p><h3 id="第三章答案">第三章答案</h3><p>3.1 下面语句能够通过编译吗？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>b <span class="token operator">=</span> b <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">10L</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不能，从 long 转换到 byte 可能会有损失。</p><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">float</span> f <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2.22</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不能，从 double 转换到 float 可能会有损失。（2.22 默认被当作 double处理）</p><p>3）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">231</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">3.23</span><span class="token punctuation">;</span><span class="token keyword">long</span> l2 <span class="token operator">=</span> i <span class="token operator">+</span> l <span class="token operator">+</span> d<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不能，从 double 转换到 long 可能会有损失。</p><p>4）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">3.14</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">6.2</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不能，从 double 转换到 int可能会有损失。（强转符号只针对最近的操作数有效，只是把 3.14 转成了 int类型，可以使用小括号提升优先级）</p><p>5）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">34</span><span class="token punctuation">;</span><span class="token keyword">short</span> s2 <span class="token operator">=</span> s1 <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不能，从 int 转换到 short 可能会有损失。</p><p>6）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以。</p><p>7）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> b1 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">short</span> s <span class="token operator">=</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不能，第 2 行报从 int 转换到 byte 可能会有损失；第 4 行报从 int转换到 short 可能会有损失。</p><p>8）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>d <span class="token operator">+</span> <span class="token number">.234F</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以。</p><p>9）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">3L</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token number">3.24F</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以。</p><hr><p>3.2 下面输出结果？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">3.14</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 69</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3.14</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">6.2</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 71</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>先算小括号里，得出结果再强转成 int。</p><hr><p>3.3 想在控制台上输出 \，怎么写？</p><p><code>System.out.println("\\");</code></p><hr><p>3.4 想在控制台上输出如下，怎么写？</p><figure><img src="https://s2.loli.net/2022/04/24/XRSwDZ49Jkiyou5.png" alt="特别厉害的那个迦"><figcaption aria-hidden="true">特别厉害的那个迦</figcaption></figure><p><code>System.out.println("动漫名称\t编剧\t价格\t销量\n微笑超人\t坂本\t1000\t0001");</code></p><h3 id="第四章答案">第四章答案</h3><p>4.1 求 i 的值。</p><p><code>double i = 5 / 2;</code> 中的 i 的值为 2.0。</p><hr><p>4.2 输出什么？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 张三6b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">++</span>x <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先++，x = 6，再判断，输出 <code>false</code>；先判断，输出<code>true</code>，再++，y = 6，输出 <code>6</code>。</p><p>3）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>a = 10 + 10 = 20，x++ 后为 11；b = 11 + 12 = 23，x 为12。输出20、23、12。</p><p>4）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">34</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token operator">--</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>j = 34，i = 33；i = 32，z = 32。输出 32、34、32。</p><p>5）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>j = 2 + 2 = 4，随后 i 自加一为 3，输出 3、4.</p><p>6）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这道题，不是那么好讲，使用 javap -c反编译（先弹出栈顶的数）看看就行，不用了解，没有人会这么用的。</p><p>什么是栈顶，就是容器最上面的一个元素。打个比方，一个空羽毛球筒，现在放入羽毛球a（称为入栈），此时栈顶是羽毛球 a；现在又放入一个羽毛球 b，b 把 a压住了，b 在 a 的上面，此时 b 就是栈顶；想要拿出 a，必须先拿出b（称为弹栈，把最上面的元素取出来)，这就是<strong>后进先出</strong>、<strong>先进后出</strong>。</p><figure><img src="https://s2.loli.net/2022/04/24/9Bd8zm3AExbwKCj.png" alt="人拿羽毛球"><figcaption aria-hidden="true">人拿羽毛球</figcaption></figure><p>对代码进行反汇编，反编译后得到的结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Code</span><span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> aload_0       <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object."&lt;init&gt;":()V</span>       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Code</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span> bipush        <span class="token number">10</span> <span class="token comment">// 将 10 压入操作数栈中，此时栈顶为 10</span><span class="token number">2</span><span class="token operator">:</span> istore_1 <span class="token comment">// 从操作数栈中弹出一个数也就是 10 赋给第 1 个局部变量 i</span><span class="token number">3</span><span class="token operator">:</span> iinc          <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">// 对第 1 个局部变量 i 自增 1，i = 11</span><span class="token number">6</span><span class="token operator">:</span> iload_1 <span class="token comment">// 将第 1 个局部变量的值 11 压入操作数栈，栈顶为 11</span><span class="token number">7</span><span class="token operator">:</span> istore_1 <span class="token comment">// 从栈中弹出一个 11 赋给第 1 个变量 i</span><span class="token number">8</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><span class="token number">11</span><span class="token operator">:</span> iload_1<span class="token number">12</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token comment">// Method java/io/PrintStream.println:(I)V</span><span class="token number">15</span><span class="token operator">:</span> <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据 JVM 指令手册翻译：<a href="https://blog.csdn.net/qq_40109475/article/details/117134802">https://blog.csdn.net/qq_40109475/article/details/117134802</a></p><p>人话就是：将 10 赋给变量 i，i 自增一为 11，将 11 赋给 i。</p><p>7）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>反编译部分节选：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0</span><span class="token operator">:</span> bipush        <span class="token number">10</span><span class="token comment">// 将 10 压入栈</span><span class="token number">2</span><span class="token operator">:</span> istore_1<span class="token comment">// 将 10 弹出赋给第 1 个变量 i</span><span class="token number">3</span><span class="token operator">:</span> iload_1<span class="token comment">// 将第 1 个变量 i 的值 10 压入栈</span><span class="token number">4</span><span class="token operator">:</span> iinc          <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token comment">// 对第 1 个变量 i 自增 1，i = 11</span><span class="token number">7</span><span class="token operator">:</span> istore_1<span class="token comment">// 将 10 弹出赋给第 1 个变量 i</span><span class="token number">8</span><span class="token operator">:</span> <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以 i 为 10。为了方便理解，借助韩老师的例子，首先 i =10，有个临时变量 temp 保存 i 的值，temp = 10；后 i++ 为11，再把 temp的值赋给 i，i = 10。</p><p>8）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b1 <span class="token operator">=</span> b<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token operator">--</span>b<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反编译部分节选：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0</span><span class="token operator">:</span> iconst_1# 直接取常量（整数 <span class="token number">1</span>），压入栈中。（栈中从上至下的值：<span class="token number">1</span>）<span class="token number">1</span><span class="token operator">:</span> istore_1# 弹栈，赋给第 <span class="token number">1</span> 个变量 b，此时 b <span class="token operator">=</span> <span class="token number">1</span>。（空）<span class="token number">2</span><span class="token operator">:</span> iload_1# 将第 <span class="token number">1</span> 个变量 b 的值压入栈中。（<span class="token number">1</span>）<span class="token number">3</span><span class="token operator">:</span> iload_1# 将第 <span class="token number">1</span> 个变量 b 的值压入栈中。（<span class="token number">1</span>，<span class="token number">1</span>）<span class="token number">4</span><span class="token operator">:</span> iconst_1# 将 <span class="token number">1</span> 压入栈中。（<span class="token number">1</span>，<span class="token number">1</span>，<span class="token number">1</span>）<span class="token number">5</span><span class="token operator">:</span> iadd# 取出栈中最上面两个值相加，并将结果 <span class="token number">2</span> 压入栈中。（<span class="token number">2</span>，<span class="token number">1</span>）<span class="token number">6</span><span class="token operator">:</span> i2b# 将 <span class="token keyword">int</span> 类型的值转为 <span class="token keyword">byte</span>。<span class="token number">7</span><span class="token operator">:</span> istore_1# 弹栈，赋给第一个变量 b，此时 b <span class="token operator">=</span> <span class="token number">2</span>。（<span class="token number">1</span>）<span class="token number">8</span><span class="token operator">:</span> istore_2 # 弹栈，赋给第二个变量 b1，此时 b1 <span class="token operator">=</span> <span class="token number">1</span>。（空）<span class="token number">9</span><span class="token operator">:</span> iload_1# 将第 <span class="token number">1</span> 个变量 b 的值压入栈中。（<span class="token number">2</span>）<span class="token number">10</span><span class="token operator">:</span> iconst_1# 将 <span class="token keyword">int</span> 类型的常量 <span class="token number">1</span> 压入栈中。（<span class="token number">1</span>，<span class="token number">2</span>）<span class="token number">11</span><span class="token operator">:</span> isub# 取出栈中最上面两个值相减，并将结果 <span class="token number">1</span> 压入栈中。（<span class="token number">1</span>）<span class="token number">12</span><span class="token operator">:</span> i2b# 将 <span class="token keyword">int</span> 类型的值转为 <span class="token keyword">byte</span>。<span class="token number">13</span><span class="token operator">:</span> istore_1# 弹栈，赋给第 <span class="token number">1</span> 个变量，此时 b <span class="token operator">=</span> <span class="token number">1</span>。（空）<span class="token number">14</span><span class="token operator">:</span> iload_1# 将第 <span class="token number">1</span> 个变量 b 的值压入栈中。（<span class="token number">1</span>）<span class="token number">15</span><span class="token operator">:</span> istore_3# 弹栈，赋给第 <span class="token number">3</span> 个变量 b2，此时 b2 <span class="token operator">=</span> <span class="token number">1</span>。（空）<span class="token number">16</span><span class="token operator">:</span> <span class="token keyword">return</span># 结束。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于汇编语言太麻烦，很不好理解。还是按老法解释：b1 = 1，后 b++，b =2；--b，b = 1，b2 = 1，输出 1、1、1。</p><p>9）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>b = true，输出 b 的值，即 true。true 等于 false 为假，输出false。</p><p>10）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> x <span class="token operator">&lt;</span> y <span class="token operator">?</span> x <span class="token operator">+</span> y <span class="token operator">:</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9 &lt; 12 为 true，返回 x + y = 21，赋给 z，输出 21。</p><p>11）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a<span class="token operator">++</span> <span class="token operator">:</span> b<span class="token operator">--</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10 &gt; 99 为 false，返回 b--：先将 b 的值 99 赋给 result，后 b--，b= 98。输出 99、10、98。</p><hr><p>4.3 利用三目表达式求出三个数之间的最大数。</p><p>先定义三个变量保存数值，先让其中两数比较，返回大值赋给 max1；再让max1 与剩下的数比较返回大值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">241</span><span class="token punctuation">;</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">324</span><span class="token punctuation">;</span><span class="token keyword">int</span> n3 <span class="token operator">=</span> <span class="token number">242</span><span class="token punctuation">;</span><span class="token keyword">int</span> max1 <span class="token operator">=</span> n1 <span class="token operator">&gt;</span> n2 <span class="token operator">?</span> n1 <span class="token operator">:</span> n2<span class="token punctuation">;</span><span class="token keyword">int</span> max2 <span class="token operator">=</span> max1 <span class="token operator">&gt;</span> n3 <span class="token operator">?</span> max1 <span class="token operator">:</span> n3<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>4.4 利用所学知识求出 33 天是多少个星期零几天？</p><p>其实很简单，让 33 除以 7，商就是星期数，余数就是天数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span><span class="token keyword">int</span> week <span class="token operator">=</span> day <span class="token operator">/</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">RemainDay</span> <span class="token operator">=</span> day <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>day <span class="token operator">+</span> <span class="token string">"天是"</span> <span class="token operator">+</span> week<span class="token operator">+</span> <span class="token string">"个星期零"</span> <span class="token operator">+</span> <span class="token class-name">RemainDay</span> <span class="token operator">+</span> <span class="token string">"天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>4.5 求值。</p><p><code>3 / 9 * (242.2 - 100) = 0</code>。</p><p>因为 3 / 9 = 0，所以结果为 0；要想不偏离原意，请至少把其中一个数转为double 类型。</p><hr><p>4.6 下面代码输出什么？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> x <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> y <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">byte</span> num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">++</span>num <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有 <code>if ()</code> 中为 true，才会执行 {} 中的语句。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">直接快进到 if 语句num++ == 2：先判断 num 是否等于 2，为 true再自加一，num = 3；此时不能断定结果，继续看右边y = true：给 y 赋值为 true两边条件都为 true，&amp;&amp; 后的结果为 true，执行 num++num = 4接着看第 2 个 if 语句x = false：给 x 赋值 false既然 x 为假，不能断定结果，继续看第 2 个条件++num == 5：先自加一，num = 5再判断 num 是否等于 5，为 true两个条件一假一真，|| 后的结果为 true，执行 num++num = 6输出 6、false、true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">342</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">++</span>i <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>先 ++i，i = 343，再赋值：b = 343 + 343 = 686。</p><p>3）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">342</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> i<span class="token operator">++</span> <span class="token operator">+</span> <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">i++ + ++i先进行加法运算再自加一即 342 + ++(i)，此时 i++ 后，i = 343现在再看右边的 ++i，先自加一，即 i = 344，再运算int b = 342 + 344 = 686i = 344输出 344、656<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正好呢，之前有个类似的题，但反编译麻烦，试着使用韩老师教的 temp方法举例，再试试吧：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">342</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i<span class="token operator">++</span> <span class="token operator">+</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">先进行加法运算 342 + i++，后自加 1，i = 343先进行加法运算 342 + 343使用 temp 保存运算结果，即 685后 i 自加 1，i = 344i = temp，i = 685<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第 2 个例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">342</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i<span class="token operator">++</span> <span class="token operator">+</span> <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">先进行加法运算 342 + ++i，后自加 1，i = 343++i 先自加一，i = 344，再进行加法运算 342 + 344使用 temp 保存运算结果，即 686i = temp，i = 686<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第 3 个例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">342</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token operator">++</span>i <span class="token operator">+</span> <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">先自加一，i = 343，得到：343 + ++i先自加一，i = 344，得到：343 + 344使用 temp 保存运算结果，即 687i = temp，i= 686<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>像极了茴香豆的“茴”有几种写法，大家看个乐呵就行。</p><h3 id="第五章答案">第五章答案</h3><p>5.1 打印 [n，m] 之间的所有是 x 倍数的整数，统计个数及总和。</p><p>先考虑输出 [1，50] 之间所有是 5 的倍数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// （1）输出 1 ~ 50</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// （2）只有当 i 是 5 的倍数时，才输出</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// （3）定义变量保存统计个数、和</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总和："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是 5 的倍数的数的个数："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// （4）扩展到一般情况</span><span class="token comment">// 这里可以考虑接收键盘输入，得到整数值</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总和："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是 "</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">" 的倍数的数的个数："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>5.2 输出 1 + (n - 1）= n、2 + (n - 2）= n、...、50 + (n - 50）=n。</p><p>观察变的部分，1 ~ 50，将其提取出来，定义为 i：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" + (n - "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">") = n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><p>5.3 打印九九乘法口诀表。</p><p>效果如图：</p><figure><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.chusan.com%2Fupload%2F202011%2F20201114152325401.jpg&amp;refer=http%3A%2F%2Fimg.chusan.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1633171436&amp;t=87508049ff494c62857acb77d121f8e4" alt="九九乘法表"><figcaption aria-hidden="true">九九乘法表</figcaption></figure><p>由于我们是按行输出的，所以观察递增的部分：1 ~ 9；也就是乘号右边。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>观察乘号左边与 i 的关系</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">当 i = 1 时，输出 1i = 2 时，输出 1、2i = 3 时，输出 1、2、3...i = 8 时，输出 1、2、3、4、5、6、8i = 9 时，输出1、2、3、4、5、6、8、9可以发现输出的开始都是 1，结束都是 i定义一个变量 j，使用 for 循环输出这些值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开始组合 “j * i = 某值” 字符串：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token string">"x"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意同行显示的乘法口诀，别用 ln换行了；应该输出完这行所有的乘法口诀后，再换行。</p></blockquote><hr><p>5.4 打印一个 n 层的空心金字塔。例：当 n = 5 时，输出如下：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">    *   * *  *   * *     **********<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简化 1：打印实心金字塔</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">    *   ***  ***** ****************<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简化 2：将星号前面空格去掉</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">*************************第 2 层是 1+2 = 2*2 - 1第 3 层是 1+2+2 = 2*3 - 1第 4 层是 1+2+2+2 = 2*4 - 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过观察，发现每层都比上层多 2 个星号，通过归纳得出第 i 层为 2 * i -1 个星号。</p><p>先打印 5 层。i 控制层数 1 ~ 5 层；j 控制每层的星号数，一共输出 2 * i- 1 个星号。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来观察简化 1：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">第 1 行前面有 4 个空格第 2 行前面有 3 个空格第 3 行前面有 2 个空格第 4 行前面有 1 个空格第 5 行前面有 0 个空格所以当第 i 行前面应该打印 5 - i 个空格后再打印 *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> z <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> z<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来观察最初的空心版本，除了最后一层，其它层除了开始的和结束的星号，都输出空格：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> z <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> z<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 不是最后一层，除了开始与结束输出星号，其它都输出空格</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> j <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后将 5 改为 n：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> z <span class="token operator">&lt;=</span> n <span class="token operator">-</span> i<span class="token punctuation">;</span> z<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> j <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>5.5 找出 3 位数的水仙花数，水仙花数是各位数的三次方之和等于此数，比如153 = 1<sup>3</sup> + 5<sup>3</sup> + 3<sup>3</sup> = 153。</p><p>首先需要得到各位上的数：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">设一个三位数的整数 i，把百位、十位、个位上的数得到百位 = i / 100十位 = i % 100 / 10或十位 = i / 10 % 10个位 = i % 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么从 100 ~ 999 范围内查找，当满足水仙花就输出：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> u <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">// 可用 Math 的 pow 方法求幂</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> h <span class="token operator">*</span> h <span class="token operator">*</span> h <span class="token operator">+</span> t <span class="token operator">*</span> t <span class="token operator">*</span> t <span class="token operator">+</span> u <span class="token operator">*</span> u <span class="token operator">*</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>扩充内容：</p><p>得到四位数上的各位数，以 1234 为例</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">千 1234 / 1000    百 1234 % 1000 / 100 或 1234 / 100 % 10十 1234 % 100 / 10 或 1234 / 10 % 10个 1234 % 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p>5.6 计算 1 - 1/2 + 1/3 - 1/4 + ... - 1/100。</p><p>观察规律：</p><p>分子都为 1，分母以 1 递增到 100；设为 i，当 i为偶数时，符号为负。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> <span class="token operator">-</span><span class="token number">1.0</span> <span class="token operator">/</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> <span class="token number">1.0</span> <span class="token operator">/</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/*    double num = i % 2 == 0 ? -1.0 / i : 1.0 / i;    sum += num;    */</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0.688172179310195</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>分子的 1 必须写成小数，否则除了第一项其它式子的结果都为 0；sum 必须为double 类型，如果为 int 类型，+= 会被强转为整数，恰巧结果小于1，统统转成 0。</p></blockquote><hr><p>5.7 计算 1 + (1 + 2）+ (1 + 2 + 3）+ ... + (1 + 2 + 3 + 4 + ... +100）。</p><p>方法 1：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">一共有 100 个式子相加第 1 个式子是 1第 2 个式子是 1+2第 3 个式子是 1+2+3得出规律，当 i &gt; 1 时第 i 个式子是从 1 加到 i，想办法把 1 到 i 这几个数弄到手，累加定义 i 控制式子的个数，从 1 到 100定义 j 控制每个式子，从 1 加到 i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 171700</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法 2：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">第 1 个式子是 1 = 1第 2 个式子是 1+2 = 3第 3 个式子是 1+2+3 = 6得出规律，当 i &gt; 1 时第 i 个式子是第 i-1 个式子的结果 + ii 从 1 到 100考虑使用 formula 记录第 1 个式子的和，然后不停地累加 i。第一次循环，formula = 1第二次循环，formula + i = 1 + 2 = 3第三次循环，formula + i = 3 + 3 = 6...每个式子的和得到了，再定义 sum 变量将这些式子的和累加，即 sum += formula同时为了和谐，修正 formula = 0；第一次循环 formula + i = 0 + 1 = 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> formula <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    formula <span class="token operator">+=</span> i<span class="token punctuation">;</span>    sum <span class="token operator">+=</span> formula<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法 3：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">观察式子发现 1 出现了 100 次，2 出现了 98 次...100 出现了 1 次所以总和为 1 * 100 + 2 * 99 + ... + 100 * 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sum <span class="token operator">+=</span> i <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">101</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>扩展为一般情况：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sum <span class="token operator">+=</span> i <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第六到十章">第六到十章</h2><h3 id="第六章答案">第六章答案</h3><p>6.1 编写方法用于拷贝数组。</p><p>思路：创建一个新的数组实例，长度为源数组的长度，然后遍历得到源数组的每个元素，同时将值拷贝到新的数组。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr1<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr2<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意我们并不是拷贝地址，如 int[] arr2 =arr1，而是重新创建新的实例，如现在调用此方法传入的数组为 {1，2，6}：</p><figure><img src="https://s2.loli.net/2022/04/24/OJH28CFR4ypgl5Y.png" alt="两个不同实例"><figcaption aria-hidden="true">两个不同实例</figcaption></figure><p>JDK 已提供现成的方法供我们调用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*    将 arr1 数组的元素拷贝到 arr2 中；从下标 0 开始拷贝，从 arr2 下标 0 开始放；    一共拷贝 arr1.length 个元素*/</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*    创建新的长度为 arr1.length 的数组，同时将 arr1 数组中 arr1.length     个元素拷贝到新的数组中，并返回此数组。*/</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>6.2 编写方法用于反转数组，例：{12，25，67，2} -----&gt;{2，67，25，12}。</p><p>方法 1：创建新的数组接收值。</p><p>arr2[length - 1] 是 arr1[0]</p><p>arr2[length - 2] 是 arr1[1]</p><p>...</p><p>可以发现和为 length - 1，所以得到 arr2[i] 对应 arr1[length - i -1]。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr2<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法 2：自身的元素交换位置。</p><p>以 {1，2，3，4，5，6，7，8，9，10} 为例：1、10 交换，2、9交换，一直到 arr[length / 2 - 1] 与 arr[length / 2] 交换，即 5、6交换；一共 length / 2 次交换。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>6.3 编写一个类，有成员变量 int size、int[] arr；</p><ul><li>编写方法使用 arr 添加元素，要求：能够自动扩容，而不会越界。</li><li>可以通过 size 获取已添加元素的个数。</li><li>编写方法删除元素，要求：数组长度同时也跟着缩减。示例：{42, 26, 6, 4,9, 97} 删除 6 后，得到 {42, 26, 4, 9, 97}。</li></ul><p>1）add 方法添加元素</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">数组初始容量设为 10每次添加元素之前判断 size + 1 是否大于数组容量若大于数组容量则扩容为原来的 1.5 倍<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">IntList</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INIT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">IntList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>INIT_CAPACITY<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&gt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arr <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）编写 remove 方法删除元素</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">顺序查找元素的下标如果存在，则让此元素的后面所有元素前移一位，size--    使用 JDK 自带的 arraycopy 方法，让下标 index + 1 及之后的元素从下标 index 开始放置，    这样就覆盖了原来的下标为 index 的元素不存在返回 false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>            index <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">,</span> index<span class="token punctuation">,</span> size <span class="token operator">-</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将最后一个元素归 0，因为上一步中已被前移一位</span>        arr<span class="token punctuation">[</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3） 遍历</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foreach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 为了去掉逗号但不在循环中每次都判断是不是最后一个元素的做法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>6.4 创建一个任意类型的一维数组，不手动赋值，元素的默认值为？</p><p>数组动态初始化后，如果没有赋值，不同类型的数组中的元素有默认值，如下：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">short byte int long 类型的数组默认值是 0float double 是0.0char 是空 ，对应 16 进制是 0x0000；即 char c = '\u0000' 或 char c = '\0';boolean 是 falseString 和其它引用类型是 null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我尝试复制那个符号，却发现就是空，通过混合运算自动升级成 int类型的特性，才知道它在字库表中的序号是 0，而不是空格 32：</p><figure><img src="https://s2.loli.net/2022/04/28/7RVC35yYGaHehSL.png" alt="显示不出的符号"><figcaption aria-hidden="true">显示不出的符号</figcaption></figure><hr><p>6.5 输出如下图形：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">    1   1 1  1 2 1 1 3 3 11 4 6 4 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先考虑打印如下图形：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">11 11 2 11 3 3 11 4 6 4 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>观察规律：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">1. 开头和结尾都是 12. 第 i 行有 i 个数3. 从第 3 行开始，中间的数 = 上一行同列的数 + 上一行列数减一的数将其看做二维数组，以第 4 行为例，arr[3][1] = arr[2][1] + arr[2][0]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>考虑：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">（1）定义长度为 5 的二维数组 arr 保存这些值（2）由于一维数组长度在变，使用动态初始化（3）遍历二维数组，i 从 0 开始，则 arr[i].length 为 i + 1（4）遍历一维数组，开头与结尾都赋值 1，中间的元素为 arr[i][j] = arr[i - 1][j] + arr[i - 1][j - 1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 一维数组的长度为 i + 1</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 开头与结尾都为 1</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 中间的元素</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设 arr.length = 5；</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">    1   1 1  1 2 1 1 3 3 11 4 6 4 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第 1 行前面有 4 个空格，输出 arr[0] 前先输出 arr.length - 1个空格；</p><p>第 2 行前面有 3 个空格，输出 arr[1] 前先输出 arr.length - 2个空格；</p><p>...</p><p>第 i + 1 行前面有 arr.length -（i + 1）个空格，输出 arr[i] 前先输出arr.length - i - 1 个空格。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>6.6 x 是二维数组，y 是一维数组。以下语句能够通过编译的有：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">a) x[0] = y;b) x[0][0] = y[0];c) x = y[0];d) x[0][0] = y;e) x = y;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>能通过编译的有：a、b </p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">c 报错误: 不兼容的类型: int 无法转换为 int[][]d 报错误: 不兼容的类型: int[] 无法转换为 inte 报错误: 不兼容的类型: int[] 无法转换为 int[][]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p></p><h3 id="第七章答案">第七章答案</h3><p>7.1 b<sub>n</sub> = 1 + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.773ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1225.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + ... + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex" xmlns="http://www.w3.org/2000/svg" width="1.955ex" height="2.755ex" role="img" focusable="false" viewBox="0 -864.9 864.3 1217.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(255.4,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> - <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="3.621ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 1600.7 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(834,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(1000.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>，n 为正整数，证明 {b<sub>n</sub>}收敛。</p><p>证：b<sub>n</sub> - b<sub>n+1</sub> = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="64.708ex" height="2.869ex" role="img" focusable="false" viewBox="0 -864.9 28600.8 1267.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(778,0)"><g data-mml-node="mn" transform="translate(707.2,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1527.9" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(2768.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3768.4,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(4602.4,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(4602.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4991.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5813.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(6813.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(7313.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7925.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(8925.3,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(9759.3,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(9925.9,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(10803.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(11859.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(12637.5,0)"><g data-mml-node="mn" transform="translate(707.2,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1527.9" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(14627.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(15627.9,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(16461.9,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mfrac" transform="translate(16628.6,0)"><g data-mml-node="mi" transform="translate(671.8,394) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1527.9" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(18674.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(19730.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(20508.1,0)"><g data-mml-node="mn" transform="translate(707.2,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1527.9" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(22498.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(23498.5,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(24332.5,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(24332.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(24721.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(25443.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(26443.9,0)"><g data-mml-node="mn" transform="translate(707.2,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1527.9" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(28211.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><p>设 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="37.709ex" height="2.869ex" role="img" focusable="false" viewBox="0 -864.9 16667.6 1267.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(477,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(866,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1438,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2104.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3160.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3954.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(4955,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(5789,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(5789,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(6178,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6900.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(7900.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(8472.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(8861.4,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(9761.4,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(10238.4,0)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g><g data-mml-node="mo" transform="translate(10513.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(10902.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(11474.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(12141.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(13197,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(13919.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(14919.4,0)"><g data-mml-node="mn" transform="translate(697.3,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1278,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><rect width="1508.1" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>，令<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="8.904ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3935.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(477,0)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g><g data-mml-node="mo" transform="translate(752,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1141,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1713,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2379.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3435.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span>，求得 x = 0；当 x &gt;0 时，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="8.904ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3935.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(477,0)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g><g data-mml-node="mo" transform="translate(752,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1141,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1713,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2379.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(3435.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span>，-1 &lt; x&lt; 0 时，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="8.904ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3935.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(477,0)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g><g data-mml-node="mo" transform="translate(752,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1141,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1713,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2379.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mn" transform="translate(3435.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span>，所以<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="3.971ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1755 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(477,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(866,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(1366,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 是极小值点；在定义域内（x = 0除外），有 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="15.269ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6749.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(477,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(866,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1438,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2104.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mi" transform="translate(3160.6,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(3637.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(4026.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(4526.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5193.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(6249.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span>，即 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="13.149ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5812 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mi" transform="translate(1905.6,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(2739.6,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(2739.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(3128.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3850.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(4851,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(5423,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><p>令 x = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="5.76ex" height="2.869ex" role="img" focusable="false" viewBox="0 -864.9 2545.9 1267.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(778,0)"><g data-mml-node="mn" transform="translate(707.2,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1527.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>，有 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="20.321ex" height="2.869ex" role="img" focusable="false" viewBox="0 -864.9 8981.9 1267.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(778,0)"><g data-mml-node="mn" transform="translate(707.2,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1527.9" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(2823.7,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mi" transform="translate(3879.5,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(4713.5,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(4713.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(5102.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(5824.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(6824.9,0)"><g data-mml-node="mn" transform="translate(707.2,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1527.9" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(8592.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>，所以b<sub>n</sub> - b<sub>n+1</sub> &gt; 0，b<sub>n</sub> 单调递减；</p><p>令 x = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex" xmlns="http://www.w3.org/2000/svg" width="1.955ex" height="2.755ex" role="img" focusable="false" viewBox="0 -864.9 864.3 1217.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(255.4,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>，有 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex" xmlns="http://www.w3.org/2000/svg" width="23.753ex" height="2.764ex" role="img" focusable="false" viewBox="0 -868.9 10498.7 1221.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(255.4,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1142,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mi" transform="translate(2197.8,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(3031.8,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(3031.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(3420.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4143,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(5143.3,0)"><g data-mml-node="mn" transform="translate(255.4,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(6007.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6674.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(7730.1,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(8564.1,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mfrac" transform="translate(8730.8,0)"><g data-mml-node="mrow" transform="translate(220,398) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(671.8,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1527.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>，例<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> &gt; <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="4.059ex" height="2.736ex" role="img" focusable="false" viewBox="0 -864.2 1794.2 1209.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(834,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mfrac" transform="translate(1000.7,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></p><p>b<sub>n</sub> = 1 + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>+ <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.773ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1225.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + ... + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex" xmlns="http://www.w3.org/2000/svg" width="1.955ex" height="2.755ex" role="img" focusable="false" viewBox="0 -864.9 864.3 1217.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(255.4,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> - <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="3.621ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 1600.7 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(834,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(1000.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> &gt; <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex" xmlns="http://www.w3.org/2000/svg" width="37.276ex" height="2.79ex" role="img" focusable="false" viewBox="0 -872.7 16475.9 1233.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(834,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mfrac" transform="translate(1000.7,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(2016.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3016.7,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(3850.7,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mfrac" transform="translate(4017.3,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(5033.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(6033.3,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(6867.3,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mfrac" transform="translate(7034,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(7827.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(8605.5,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(9050.2,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(9494.9,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(9939.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(10884.2,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(11718.2,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mfrac" transform="translate(11884.9,0)"><g data-mml-node="mrow" transform="translate(220,398) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(671.8,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1527.9" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(13875.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(14875.3,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(15709.3,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(15875.9,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span></p><p>= <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="62.791ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 27753.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(834,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mn" transform="translate(1000.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(1722.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2723.1,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(3557.1,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mn" transform="translate(3723.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4446,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(5446.2,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(6280.2,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mn" transform="translate(6446.9,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(7169.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(8169.3,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(9003.3,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mn" transform="translate(9170,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(9892.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(10892.4,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(11726.4,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mn" transform="translate(11893.1,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(12615.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(13615.6,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(14449.6,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mn" transform="translate(14616.2,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(15116.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(15894.2,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(16338.9,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(16783.6,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(17228.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(18172.9,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(19006.9,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(19006.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(19395.9,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(20218.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(21218.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(21718.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(22329.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(23329.8,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(24163.8,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(24330.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(25152.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(26152.9,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(26986.9,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(27153.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span></p><p>= <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="15.289ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6757.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(834,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(834,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1223,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2045.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3045.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3545.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4156.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(5156.9,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(5990.9,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(6157.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> &gt;0，b<sub>n</sub> 有下界；</p><p>根据单调有界数列收敛定理，记 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.601ex" xmlns="http://www.w3.org/2000/svg" width="31.009ex" height="3.558ex" role="img" focusable="false" viewBox="0 -864.9 13706 1572.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munder"><g data-mml-node="mo" transform="translate(214.8,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(278,0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(556,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(0,-600) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1572,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1818.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(2207.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2929.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(3930.1,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(4945.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(5946.1,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(6739.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(7517.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(7962.3,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(8407,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(8851.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(9629.7,0)"><g data-mml-node="mn" transform="translate(255.4,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(10716.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(11716.4,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(12550.4,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(12717,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(13317,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex" xmlns="http://www.w3.org/2000/svg" width="1.229ex" height="1.486ex" role="img" focusable="false" viewBox="0 -441 543 657"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FE" d="M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z"></path></g></g></g></svg></mjx-container></span>。</p><h3 id="第八章答案">第八章答案</h3><p>8.1 编写方法返回长度为 n 的斐波那契数组。（包括 0）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 创建长度为 n 的斐波那契数组 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">fibonacciArr</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第九章答案">第九章答案</h3><p>9.1 使用 debug 测试创建对象时的代码执行顺序。</p><p>创建子类对象时，会先显示初始化父类的实例变量，再执行父类的构造方法，接着显示初始化子类的实例变量，执行子类的构造方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 父类</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">String</span> flag<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        age <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>        name <span class="token operator">=</span> <span class="token string">"33"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 子类</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span>    tag <span class="token operator">=</span> <span class="token string">"无聊"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">String</span> tag<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> test <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// new 对象</span>        <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 new 对象的地方打个断点，使用 debug 得知：</p><p>new 先创建了 B 类的对象，age、name、flag、tag 等实例变量附上默认值 0或 null。随之调用 B 类的无参构造器，构造器省略了两句话 ：</p><ol type="1"><li>调用父类的无参构造器</li><li>显示初始化本类的实例变量和执行实例代码块（自上而下顺序执行）</li></ol><figure><img src="https://s2.loli.net/2022/05/11/yVxtPWjoZ9w3dSG.png" alt="简略流程图"><figcaption aria-hidden="true">简略流程图</figcaption></figure><p>忽略 Object 类的存在，最开始显示初始化的是 A类的实例变量，接着执行可见部分的 A 类无参构造器给实例变量赋值。返回到 B类的无参构造器，执行实例语句块给 tag 赋值，执行可见部分的 B类的构造器输出 tag 的值。</p><p>符合看到的现象（先显示初始化父类实例变量，执行父类的构造方法；接着显示初始化子类的实例变量，执行子类的构造方法）。</p><h3 id="第十章答案">第十章答案</h3><p>10.1 在 AA 类编写一个静态方法，判断一个整数是奇数还是偶数，奇数返回false，偶数返回 true。</p><p>考虑返回一个 boolean 类型的值，判断一个整数是否是偶数，那么需要一个int 类型的参数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">AA</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isEvenNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以直接返回 return num % 2 == 0;</p><hr><p>10.2 分析如下代码，控制台上会输出什么？</p><p>1）在类 A 中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"swap 中 a："</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"swap 中 b："</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main 中 a："</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main 中 b："</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/05/16/CQIoKl7H2O46BWf.png" alt="main"><figcaption aria-hidden="true">main</figcaption></figure><p>当代码执行到swap(a，b）这行时，会开启一个新栈，分配此方法运行所需要的内存空间，同时将实参赋给形参。</p><figure><img src="https://s2.loli.net/2022/05/16/KIOl51WCXxpjJUS.png" alt="压在上面"><figcaption aria-hidden="true">压在上面</figcaption></figure><p>只有栈顶部的元素才有活跃权，调用者 main 陷入等待，直到 swap方法执行完毕后才能执行接下的代码。</p><p>执行 swap 中的代码，int temp = a = 5; a = b = 1; b = temp = 5;</p><figure><img src="https://s2.loli.net/2022/05/16/P19Ujmc2gMw8D6v.png" alt="不同栈中的变量即使同名也互不影响"><figcaption aria-hidden="true">不同栈中的变量即使同名也互不影响</figcaption></figure><p>接着输出 <code>swap 中 a：1</code>、<code>swap 中 b：5</code>。</p><p>swap 方法执行完毕，释放空间。</p><figure><img src="https://s2.loli.net/2022/05/16/CQIoKl7H2O46BWf.png" alt="main"><figcaption aria-hidden="true">main</figcaption></figure><p>回到 main 方法，执行剩下的代码，输出<code>main 中 a：5</code>、<code>main 中 b：1</code>，最后 main方法执行结束，释放了空间，程序结束。</p><p>可以看到栈中的局部变量，保存的值是独立的，互不干扰，这两个栈的空间是独立的数据空间。</p><p>swap 方法声明的 a 变量与 main 方法声明的 a 变量存储的值互不影响，同理b 变量也是如此，不要以为 main 方法中的 a 与 b 的值也互换了。</p><hr><p>2）在类 B 中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>int[] arr = new int[3]，在堆中创建了一个 int类型的一维数组。（我说一下啊，0x????是内存地址转化得来的十六进制整数，是实例的唯一标识，每 new一个实例，就会分配新的空间）</p><figure><img src="https://s2.loli.net/2022/05/16/5gnAlSuNGrmq8is.png" alt="数组"><figcaption aria-hidden="true">数组</figcaption></figure><p>随后 arr 作为实参传入并调用 some 方法，开启了新栈。将 main 方法中的arr 变量保存的值赋给了 some 方法中的 arr变量，这样有两个引用指向数组实例了。</p><figure><img src="https://s2.loli.net/2022/05/16/OHE8PkbYyG9L7hU.png" alt="some"><figcaption aria-hidden="true">some</figcaption></figure><p>arr[0] = 1234; 将 arr 指向的数组实例的第一个元素保存的值修改为1234；随后 some 方法栈空间释放。</p><figure><img src="https://s2.loli.net/2022/05/16/ZWpjxDNL69RVU1I.png" alt="1234"><figcaption aria-hidden="true">1234</figcaption></figure><p>回到 main 方法，输出 arr[0]，即 1234。</p><hr><p>10.3 类 Person 中，分析输出什么？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    p <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里就不画内存图了</p><p>main 方法，0x677327b6 {age -&gt; 32}，p -&gt; 0x677327b6</p><p>调用 some 方法，p -&gt; 0x677327b6，随后 p = null，p -&gt; null。some方法执行结束，释放空间，回到 main 方法。</p><p>输出 p.age，即 32。</p><p>别将两个方法中的 p 变量混为一谈，some 中的 p = null，与 main 方法中的p 互不影响。</p><hr><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>    <span class="token class-name">Person</span> p1 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p <span class="token operator">==</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age <span class="token operator">==</span> p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main 方法，0x677327b6 {age -&gt; 32}，p -&gt; 0x677327b6</p><p>some 方法，返回了 p -&gt; 0x677327b6</p><p>回到 main 方法，将返回值赋给 p1，p1 -&gt; 0x677327b6</p><p>双等号比较的是变量保存的值，这里 p、p1 保存的内存地址相同，都指向0x677327b6 实例，所以为 true。那么两个引用访问同一个实例变量 age进行比较，自然也为 true。</p><hr><p>3）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p1<span class="token punctuation">.</span>age <span class="token operator">=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token keyword">return</span> p1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>    <span class="token class-name">Person</span> p1 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p <span class="token operator">==</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age <span class="token operator">==</span> p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main 方法，0x677327b6 {age -&gt; 32}，p -&gt; 0x677327b6</p><p>some 方法，p -&gt; 0x677327b6，0x14ae5a5 {age -&gt; 32}，p1 -&gt;0x14ae5a5，返回 p1</p><p>回到 main 方法，将 0x14ae5a5 赋给 p1，p1 -&gt; 0x14ae5a5，所以 p ==p1 为 false，它们指向的不是同一个实例，但两个实例的 age 都是 32，为true。</p><p>4）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// p -&gt; 0x677327b6</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">// p1 -&gt; 0x677327b6</span>p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 0x677327b6 {age -&gt; 2}</span>p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// p1 -&gt; 0x14ae5a5</span>p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">333</span><span class="token punctuation">;</span><span class="token comment">// 0x14ae5a5 {age -&gt; 333}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>10.4 一共有 ？个桃子。每天猴子吃其中的一半加 1 个桃子，当第 10天时，准备吃，一看，只剩 1 个桃子了，请问 ？的值为？</p><p>设第 i 天有 n 个桃子，吃了 n/2 + 1 个桃子，还剩 n - n/2 - 1个桃子，则第 i+1 天有 n - n/2 - 1 个桃子。</p><p>记 n - n/2 - 1 = x，解得 n =（x+1）* 2；</p><p>转述为第 i 天有（x+1）* 2 个桃子，第 i+1 天有 x 个桃子。</p><p>所以第 i 天的桃子的个数 = (第 i+1 天的桃子的个数+1）* 2。</p><p>设计方法求第 i 天的桃子的个数 peach(i），则第 i+1 天的桃子的个数peach(i+1）；</p><p>有 peach(i）=（peach(i+1）+ 1) * 2；</p><p>当 i = 10 时，桃子个数为 1，peach(10）= 1。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">peach</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">peach</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们求的 ？是第 1 天的桃子的个数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">peach</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1534</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p>10.5 有 1 个迷宫由二维数组组成。1 代表墙，0代表可通行。现有一球在左上角（1，1）处，要求到右下角（7，7），记录小球走过的路径。（注意上下移动的是x，左右移动的是 y，与坐标系相反）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token number">1</span> q <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Maze 类中，首先先有一个二维数组作为全局变量；</p><p>创建 step 方法记录小球走过的路径，自定义寻路规则：</p><ul><li>已经走过的路：死路记为 3，通路记为 2</li><li>假设当前坐标为通路记为 2</li><li>每一步都先尝试向下走，尝试成功返回 true，否则再尝试右、上，左</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 假设当前为通路</span>    arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// 尝试向下、右、上、左，成功返回 true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">step</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">step</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">step</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">step</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>经过以上分支尝试都失败，则返回false；说明假设错误，不是通路，同时将当前坐标记为 3，代表死路</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">step</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">step</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">step</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">step</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 尝试失败，标记为死路</span>        arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>尝试失败条件之一：遇墙 arr[x][y] =1，之二：已经走过的路不走，arr[x][y] == 2 或 3</p><p>将失败条件结合，只有当 arr[x][y] = 0 时才能走，否则返回 false</p><p>成功条件，小球走到了终点，即 arr[7][7] = 2</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">step</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">step</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">step</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">step</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 构造器初始化二维数组，化为迷宫</span><span class="token keyword">public</span> <span class="token class-name">Maze</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 将四周都标记为墙</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 第一列、最后一列标记为墙</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 第一行、最后一行标记为墙</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 按题目设置墙</span>    arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Maze</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Maze</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 小球的初始坐标</span>    <span class="token keyword">boolean</span> b <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">step</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">?</span> <span class="token string">"小球找到了路，标记为 2"</span> <span class="token operator">:</span> <span class="token string">"小球迷失了，标记为 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">toString</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>10.6 如图，把 A 中的 n 个圆盘全部移到 C中。要求：大圆盘不能放在小圆盘上面，每次只能移动一个圆盘，如何移动。</p><figure><img src="https://s2.loli.net/2022/05/16/yxPd6p2v8YzDusw.png" alt="移动圆盘"><figcaption aria-hidden="true">移动圆盘</figcaption></figure><p>先将 n - 1 个小盘从 a 移到 b 处，再将 1 个大盘从 a 移到 c 处，最后将b 上的 n - 1 个盘移到 c 处。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">,</span> <span class="token class-name">String</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">move</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> c<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">move</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">move</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当只有一个盘时，直接从 a 移到 c。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">,</span> <span class="token class-name">String</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将最上面的盘子从 "</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">" 移动到 "</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">move</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> c<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">move</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">move</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试一下，比如移动 2 个盘子，从 A 到 C</p><figure><img src="https://s2.loli.net/2022/05/17/BIMhTrqWk1LnUZH.png" alt="圆盘生物"><figcaption aria-hidden="true">圆盘生物</figcaption></figure><p>调用方法 <code>move(2, "a", "b", "c")</code> 结果如下：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">将最上面的盘子从 a 移动到 b将最上面的盘子从 a 移动到 c将最上面的盘子从 b 移动到 c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从 a 移动到 b</p><p><img src="https://s2.loli.net/2022/05/17/NTOFMr7AqX4ljmK.png"></p><p>从 a 移动到 c</p><p><img src="https://s2.loli.net/2022/05/17/zxChPt7MOjT1Yv8.png"></p><p>从 b 移动到 c</p><p><img src="https://s2.loli.net/2022/05/17/fXDNpnO4vkPouLE.png"></p><hr><p>10.7 在一个 8*8 格的棋盘摆放 8个棋子，要求：任意两个棋子之间不能处于同一行、同一列、同一斜线。共有几种摆法？</p><p>使用穷举法，第 1 个棋子放在第 1 行的第 1 ~ 8 个，第 2 个棋子放在第 2行的第 1 ~ 8个...只不过在放置棋子后，判断它的下标是否与之前的棋子冲突，如果冲突，则将其移一位，然后继续判断...</p><p>那么只需要长度为 8 的一维数组就可以保存结果。如 arr[0] 代表第 1个棋子在第 1 行的下标，arr[1] 代表第 2 个棋子在第 2行的下标...将其作为成员变量。</p><p><strong>判断是否冲突的方法</strong></p><p>同一行：arr[i] = arr[j]，处于同一斜线上即斜率为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 778 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="B1" d="M56 320T56 333T70 353H369V502Q369 651 371 655Q376 666 388 666Q402 666 405 654T409 596V500V353H707Q722 345 722 333Q722 320 707 313H409V40H707Q722 32 722 20T707 0H70Q56 7 56 20T70 40H369V313H70Q56 320 56 333Z"></path></g></g></g></svg></mjx-container></span> 1：j - i = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 778 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="B1" d="M56 320T56 333T70 353H369V502Q369 651 371 655Q376 666 388 666Q402 666 405 654T409 596V500V353H707Q722 345 722 333Q722 320 707 313H409V40H707Q722 32 722 20T707 0H70Q56 7 56 20T70 40H369V313H70Q56 320 56 333Z"></path></g></g></g></svg></mjx-container></span>(arr[j] - arr[i]），这里使用 Math.abs求绝对值省去判断正负的功夫</p><p>检查方法需要遍历得到之前的棋子的位置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 判断第 n + 1 个棋子的位置是否与之前棋子冲突</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSuitable</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>n <span class="token operator">-</span> i<span class="token punctuation">)</span>            <span class="token operator">==</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>放置棋子的方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// n 从 0 开始，放置第 n + 1 个棋子</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">place</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token comment">// 检查第 n + 1 个棋子的位置是否与之前冲突</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSuitable</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果没有冲突，则放置下一个棋子</span>            <span class="token function">place</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 n = 8 时，说明正准备放置第 9 个棋子，那么前 8个棋子已摆好，创建方法打印数组查看摆法，同时 count++。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">place</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 摆法又多了一种</span>count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSuitable</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">place</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"种摆法如下："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个棋子放在第"</span><span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"行的第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"列"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后创建实例调用 place(0）方法后，访问实例的 count 得到 92，所以一共92 种摆法。</p><hr><p>10.8设计一个类，完成与电脑的猜拳，电脑随机出石头、布、剪刀，要求显示输赢次数。</p><p>类名为ManMachineFingerGuessingGame；我的想法是这样的，首先一局比赛需要两个参赛者（或人机），设他们的类型为GuessingBoxer。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ManMachineFingerGuessingGame</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">GuessingBoxer</span> b1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">GuessingBoxer</span> b2<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>需要记录他们的姓名、赢的次数、出的招式；</p><p>就可以编写一个 throwFinger 方法用于出招，通过 scanner对象获取输入招式，因为输入字符串容易出错，所以用整数代表招式，0：石头，1：布，2：剪刀；出招后就调用print 方法就将整数转为招式打印出来。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">GuessingBoxer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> winCount<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> finger<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">GuessingBoxer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getFinger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> finger<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWinCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> winCount<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addWinCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        winCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 出招</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">throwFinger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"请出招："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            finger <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>finger <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> finger <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"你不会猜拳，扑该了，我帮你出; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            finger <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">throwFinger</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isAuto<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isAuto<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">throwFinger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        finger <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 根据整数打印招式</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> move<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>finger<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                move <span class="token operator">=</span> <span class="token string">"石头"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                move <span class="token operator">=</span> <span class="token string">"布"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                move <span class="token operator">=</span> <span class="token string">"剪刀"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"竖起了中指！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"出"</span> <span class="token operator">+</span> move <span class="token operator">+</span> <span class="token string">"; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好，回到 ManMachineFingerGuessingGame 类，让两个参赛者出招后vs，谁赢谁的 winCount 就++，记录他的赢的次数；当比赛结束后，调用statistics 方法打印他们赢的次数，并宣布胜利者。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ManMachineFingerGuessingGame</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">GuessingBoxer</span> b1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">GuessingBoxer</span> b2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ManMachineFingerGuessingGame</span><span class="token punctuation">(</span><span class="token class-name">GuessingBoxer</span> b1<span class="token punctuation">,</span> <span class="token class-name">GuessingBoxer</span> b2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b1 <span class="token operator">=</span> b1<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b2 <span class="token operator">=</span> b2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">throwFinger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        b1<span class="token punctuation">.</span><span class="token function">throwFinger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b2<span class="token punctuation">.</span><span class="token function">throwFinger</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">vs</span><span class="token punctuation">(</span>b1<span class="token punctuation">,</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">vs</span><span class="token punctuation">(</span><span class="token class-name">GuessingBoxer</span> b1<span class="token punctuation">,</span> <span class="token class-name">GuessingBoxer</span> b2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> b1Finger <span class="token operator">=</span> b1<span class="token punctuation">.</span><span class="token function">getFinger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b2Finger <span class="token operator">=</span> b2<span class="token punctuation">.</span><span class="token function">getFinger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> winName <span class="token operator">=</span> b1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b1Finger <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b2Finger <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            b1<span class="token punctuation">.</span><span class="token function">addWinCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b1Finger <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b2Finger <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            b1<span class="token punctuation">.</span><span class="token function">addWinCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b1Finger <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> b2Finger <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            b1<span class="token punctuation">.</span><span class="token function">addWinCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b1Finger <span class="token operator">==</span> b2Finger<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"两人平局！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            b2<span class="token punctuation">.</span><span class="token function">addWinCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            winName <span class="token operator">=</span> b2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>winName <span class="token operator">+</span> <span class="token string">"赢！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">statistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"比赛结束，"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c1 <span class="token operator">=</span> b1<span class="token punctuation">.</span><span class="token function">getWinCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c2 <span class="token operator">=</span> b2<span class="token punctuation">.</span><span class="token function">getWinCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"赢了 "</span> <span class="token operator">+</span> c1 <span class="token operator">+</span><span class="token string">" 场, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"赢了 "</span> <span class="token operator">+</span> c2 <span class="token operator">+</span><span class="token string">" 场, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">==</span> c2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"两人打平。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">&lt;</span> c2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"赢了！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"赢了！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么入口方法，就需要创建一个比赛场地实例、两个参赛者实例，并设置比赛回合，每次回合调用throwFinger 方法让参赛者出招后 vs；当所有回合结束，调用 statistics统计。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">GamePlay</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请设置你的名字："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> b1Name <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">GuessingBoxer</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GuessingBoxer</span><span class="token punctuation">(</span>b1Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">GuessingBoxer</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GuessingBoxer</span><span class="token punctuation">(</span><span class="token string">"电脑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ManMachineFingerGuessingGame</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ManMachineFingerGuessingGame</span><span class="token punctuation">(</span>b1<span class="token punctuation">,</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"设置比赛回合："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            total <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            total <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"比赛一共 "</span> <span class="token operator">+</span> total <span class="token operator">+</span> <span class="token string">" 回合，招式如下："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"0：石头，1：布，2：剪刀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> total<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第 "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 回合开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            game<span class="token punctuation">.</span><span class="token function">throwFinger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        game<span class="token punctuation">.</span><span class="token function">statistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题的源码我稍微改动了下。</p><h2 id="第十一到第十五章">第十一到第十五章</h2><h3 id="第十一章答案">第十一章答案</h3><p>11.1 控制台上输出什么？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是 A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是 B 的无参构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 先调用父类的无参构造</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"我是 B 的有参构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 调用另一个构造器</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是 C 的无参构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 调用父类有参构造</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"呵呵"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"我是 C 的有参构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用 C 类的无参构造器 ①</p><p>调用 C("hello"）②</p><p>调用 C 的父类的构造器 B("呵呵"）③</p><p>调用 B 的父类的构造器 A(），输出 <code>我是 A</code></p><p>回到 ③ 输出 <code>呵呵我是 B 的有参构造器</code></p><p>回到 ② 输出 <code>hello我是 C 的有参构造器</code></p><p>回到 ① 输出 <code>我是 C 的无参构造器</code></p><hr><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Sub</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Base</span> b <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>s.count = 20，输出 <code>20</code></p><p>s.display 调用的是 Sub 类的 display 方法，输出 <code>20</code></p><p>b 与 s 保存的内存地址相等，指向同一个对象，输出 <code>true</code></p><p>b.count = 10，重写与字段无关，从编译类型 Base 开始找，输出<code>10</code></p><p>b 实际是 Sub 类型，b.display 调用的是 Sub 的 display 方法，输出<code>20</code></p><p>Sub 类没有 some 方法，往上找，b.some 调用的是 Base 的 some方法，输出本类的 count 即 <code>10</code></p><hr><p>3）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A类的some方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B类的some方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>B 类没有 doOther 方法，往上找，调用 A 类的 doOther 方法，调用 some方法，输出 <code>A类的some方法被调用</code>。</p><blockquote><p>私有方法不能被重写，可以加 <span class="citation" data-cites="Override">@Override</span> 验证</p></blockquote><hr><p>4）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字段没有重写机制，在 A 类中 a.i = 10，输出 <code>10</code>；</p><p>a 的实际类型是 B，B 类没有 sum 方法，调用 A 类的 sum 方法，返回getI(）+ 10 ①</p><p>getI(）被 B 重写，返回 20；</p><p>回到 ①，返回 30，输出 <code>30</code></p><hr><p>11.2 哪里有误？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">13.4</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> d<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token comment">// boolean b = (boolean) i;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> objI <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// String str2 = (String) objI;</span>        <span class="token class-name">Integer</span> objI1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> objI<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>int 类型不能强转成 boolean</p><p>objI 的实际类型为 Integer 类型，不能强转成 String，运行时会报ClassCastException</p><h3 id="第十二章答案">第十二章答案</h3><p>12.1 控制台上输出？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Test</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示初始化 count = 9；</p><p>调用构造器，输出 <code>count=9</code> 后 count = 10</p><p>调用构造器，输出 <code>count=10</code> 后 count = 11</p><p>输出 Test.count，即 <code>11</code></p><hr><p>2）修改错误后...</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getTotalPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        id<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> total<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        total<span class="token operator">++</span><span class="token punctuation">;</span>        id <span class="token operator">=</span> total<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">getTotalPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">getTotalPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>getTotalPerson 是静态方法，不能直接访问实例变量，将 id++ 去掉。</p><p>显示初始化 total = 0</p><p>调用 getTotalPerson 方法返回 total，输出 <code>0</code></p><p>调用构造器 total = 1，id = 1</p><p>调用 getTotalPerson 方法返回 total，输出 <code>1</code></p><hr><p>3）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span>        age <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span>        flog <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flog<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        age <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>flog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>flog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行实例代码块 age = 55，flog = 3</p><p>显示初始化 age = 4</p><p>执行实例代码块，输出 <code>4</code>，输出 <code>3</code></p><p>回到构造器 age = 99</p><p>回到 main 方法，输出 <code>99</code>、<code>3</code></p><p>注意实例语句块在构造器之前执行。</p><hr><p>4）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span>        age <span class="token operator">=</span> <span class="token number">434</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最上面的实例语句块执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        age <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最下面的静态语句块执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Test</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行静态代码块，输出 <code>最下面的静态语句块执行了</code> ①</p><p>调用构造器 ②</p><p>执行实例代码块，age = 434，输出<code>最上面的实例语句块执行了</code></p><p>显式初始化实例变量，age = 6</p><p>执行实例代码块，输出 <code>6</code></p><p>回到 ②，输出 <code>构造方法被调用</code>，age = 1234</p><p>回到 ①，输出 t.age 即 <code>1234</code></p><p>执行静态代码块，输出 <code>结束</code></p><hr><p>5）如果 B 类中的 a 字段是实例变量，在 main 方法中创建 B类型的对象呢？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A构造方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B构造方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示初始化静态变量 a = new A(）</p><p>调用 A 类的构造器 ①</p><p>显示初始化实例变量 b = new B(）</p><p>调用 B 类的构造器，输出<code>B构造方法被调用</code>，执行结束后将地址赋给 b</p><p>回到 ① 处，输出 <code>A构造方法被调用</code>，执行结束后将地址赋给a</p><hr><p>如果 B 类中的 a 字段是实例变量，在 main 方法中创建 B类型的对象呢？</p><p>调用 B 类的构造器 ①</p><p>显示初始化实例变量 a = new A(）</p><p>调用 A 类的构造器 ②</p><p>显示初始化实例变量 b = new B(）</p><p>调用 B 类的构造器 ③</p><p>显示初始化实例变量 a = new A(）</p><p>调用 A 类的构造器 ④</p><p>...</p><p>循环调用，直到栈溢出...这种差异的出现是由于静态变量只显示初始化一次，而实例变量每次创建对象时都会显示初始化。</p><hr><p>6）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">B1</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B1类被加载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">B1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B1无参构造被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B2</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B2类被加载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person类被加载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> country <span class="token operator">=</span> <span class="token string">"中国"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person构造方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        age <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test类被加载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token class-name">B1</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">B2</span> b2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Person</span> p<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>p<span class="token punctuation">.</span>country<span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span>b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>*初始化 Test 类</p><p>​ 执行静态代码块输出 <code>Test类被加载</code></p><p>​ 显示初始化静态变量 b1 = new B1(）</p><p>*初始化 B1 类</p><p>​ 执行静态代码块输出 <code>B1类被加载</code></p><p>调用 B1 类的无参构造，输出<code>B1无参构造被调用</code>，执行结束后，将地址赋给 b1</p><p>​ 显示初始化静态变量 b2 = null</p><p>调用 main 方法</p><p>​ 调用 Test 类的无参构造，执行结束后，将地址赋给 test</p><p>​ test.p = new Person(）①</p><p>*初始化 Person 类</p><p>​ 执行静态代码块输出 <code>Person类被加载</code></p><p>​ 显式初始化静态变量 country = "中国"</p><p>回到 ① 处，调用 Person 类的无参构造，显示初始化实例变量 age = 4</p><p>​ 输出 <code>Person构造方法被调用</code>，age =5，执行结束后，将地址赋给 test.p</p><p>​ 输出 <code>5</code>、<code>中国</code></p><p>test.b2 = new B2(）②</p><p>*初始化 B2 类</p><p>​ 执行静态代码块输出 <code>B2类被加载</code></p><p>回到 ② 处，调用 B2 类的无参构造，执行结束后，将地址赋给 test.b2</p><p>程序结束。</p><hr><p>7）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> color <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> price <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Car</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Car</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示初始化静态变量 color = "white"</p><p>执行 main 方法</p><p>调用 Car 类的构造器，显示初始化实例变量 price = 10.0，price =9.0，color = "red"，执行结束将地址赋给 c。</p><p>调用 Car 类的有参构造，显示初始化实例变量 price = 10.0，price =100.0，执行结束后将地址赋给 c1。</p><p>输出 c，调用 c.toString 方法，输出 <code>9.0   red</code></p><p>输出 c1，调用 c1.toString 方法，输出 <code>100.0   red</code></p><p>需要注意 color 是所有对象共享的变量。</p><blockquote><p>上面只是题目而已，使用类名.变量名访问，就不会那么容易混淆。</p></blockquote><p>8）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">S</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">S</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"看我干什么，我只是凑个热闹"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">S</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span>        age <span class="token operator">=</span> <span class="token number">66</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 局部变量 age = 局部变量 age，与实例变量 age 无关</span>        age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无聊的无参构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        age <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span>        fole <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> fole <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">252</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token keyword">int</span> fole<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B类的有参构造:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fole <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>fole<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用 B 类的无参构造 ①，转至有参构造 ②，调用父类 A 的有参构造 ③，调用S 的无参构造，输出 <code>看我干什么，我只是凑个热闹</code></p><p>回到 ③，执行实例代码块 age = 66，接着执行构造器中的 age = age语句，执行结束；</p><p>回到 ②，执行实例代码块 fole = 44，显示初始化 fole = 0，输出<code>B类的有参构造:0=66</code></p><p>回到 ①；</p><p>回到 main 方法，输出 <code>0</code>、<code>66</code>。</p><hr><p>9）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">S</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"S类被加载："</span> <span class="token operator">+</span> <span class="token class-name">A</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">S</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A类被加载："</span> <span class="token operator">+</span> <span class="token class-name">S</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">S</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>new S(）创建对象前 ①</p><p>先初始化 S 类，执行静态代码块，访问 A.a 前 ②</p><p>先初始化 A 类，显示初始化静态变量 A.a = 32，执行静态代码块，此时S.age 还未显示初始化，默认值 0，输出 <code>A类被加载：0</code></p><p>回到 ② 输出 <code>S类被加载：32</code>，显示初始化静态变量 S.age =3</p><p>回到 ①，创建对象，输出 <code>3</code>、<code>32</code>。</p><hr><p>10）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">S</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"S类被加载："</span><span class="token operator">+</span><span class="token class-name">A</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">S</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A类被加载："</span><span class="token operator">+</span><span class="token class-name">S</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>new A(）前 ① 先初始化 A 类</p><p>初始化 A 类前先初始化父类 S，执行静态代码块，此时 A.age还未显示初始化，默认值 0，输出 <code>S类被加载：0</code>，S.age = 3</p><p>初始化 A 类，A.a = 32，输出 <code>A类被加载：3</code></p><p>回到 ① 创建对象。</p><hr><p>11）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">S</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"S类被加载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">S</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A类被加载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B类被加载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> flog<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test类被加载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用 main 方法前，初始化 Test 类，执行静态代码块，输出<code>Test类被加载</code></p><p>调用 mian 方法，访问 A.age 前 ①</p><p>初始化 A 类 ②</p><p>初始化 S 类，输出 <code>S类被加载</code></p><p>回到 ②，age = 33，输出 <code>A类被加载</code></p><p>回到 ①，new B(）前，初始化 B 类，由于类只初始化一次，直接输出<code>B 类被加载</code></p><hr><p>12）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        age <span class="token operator">=</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        age <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> age<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行静态代码块 age = show(）①</p><p>调用 show 方法，age = 33，返回 33 后自加一 age = 34；</p><p>回到 ① show 返回 33，赋给了 age，age = 33</p><p>调用 main 方法，输出 <code>33</code></p><h3 id="第十三章答案">第十三章答案</h3><p>13.1 控制台上输出？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">Vehicle</span> vehicle<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">goToSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>vehicle <span class="token keyword">instanceof</span> <span class="token class-name">Bike</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>vehicle <span class="token operator">=</span> <span class="token class-name">VehiclesFactory</span><span class="token punctuation">.</span><span class="token function">getBike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        vehicle<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token string">"学校"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flying</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vehicle <span class="token operator">=</span> <span class="token class-name">VehiclesFactory</span><span class="token punctuation">.</span><span class="token function">getBambooDragonfly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                vehicle<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token string">"飞天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token class-name">String</span> goal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Bike</span> <span class="token keyword">implements</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token class-name">String</span> goal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"骑着老旧的小自行车嘎吱嘎吱缓缓地驶向了"</span> <span class="token operator">+</span> goal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">VehiclesFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Bike</span> bike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Vehicle</span> <span class="token function">getBike</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bike<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Vehicle</span> <span class="token function">getBambooDragonfly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> goal <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转着竹蜻蜓"</span> <span class="token operator">+</span> goal <span class="token operator">+</span> <span class="token string">"~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Student</span> zs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zs<span class="token punctuation">.</span><span class="token function">goToSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zs<span class="token punctuation">.</span><span class="token function">flying</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>zs 调用 goToSchool 方法，vehicle 默认为 null，if 条件为true，进入；调用 getBike 方法，返回 Bike 类型的对象，赋给了zs.vehicle；</p><p>vehicle.work(），vehicle 实际类型为 Bike，调用的是 Bike 类中的 work方法，输出<code>张三骑着老旧的小自行车嘎吱嘎吱缓缓地驶向了学校</code></p><p>zs 调用 flying 方法，getBambooDragonfly 返回的是实现 Vehicle接口的匿名内部类的对象，赋给了 zs.vehicle；</p><p>调用 vehicle.work 方法，输出 <code>张三转着竹蜻蜓飞天~~~</code></p><hr><p>2）在接口或抽象类中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p><strong>主要解决</strong>：一些方法通用，却在每一个子类都重新写了这一方法。</p><p><strong>关键代码</strong>：在抽象类实现，其他步骤在子类实现。</p><p><strong>优点</strong>：1、封装不变部分，扩展可变部分。2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。</p><p><strong>缺点</strong>：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</p><p><strong>使用场景</strong>：1、有多个子类共有的方法，且逻辑相同。2、重要的、复杂的方法，可以考虑作为模板方法。</p><p><strong>注意事项</strong>：为防止恶意操作，一般模板方法都加上 final关键词。</p><p>如果子类重写的方法，逻辑大致相同，那没必要每个类都写一遍，可以提取公共部分，在父类中定义一个骨架，某个步骤延迟到子类实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">World</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">life</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">goToSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">goToWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">toGetMarried</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">toHaveChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">goToSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">goToWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">toGetMarried</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">toHaveChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Loser</span> <span class="token keyword">extends</span> <span class="token class-name">World</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Loser</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">goToSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"满怀疲惫地上学了，成绩倒数..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">goToWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"末尾淘汰制，因业绩垫底，"</span> <span class="token operator">+</span> name <span class="token operator">+</span><span class="token string">"被辞退了；"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"但"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"丝毫不慌，因为穷不过三代。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toGetMarried</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父母催着结婚，于是"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"急着结婚了"</span> <span class="token operator">+</span>                <span class="token string">"，尽管不知道如何抚养孩子，想着给钱就行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toHaveChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"在外地辛苦工作，妻子半辈子守在农村；似乎孩子不怎么认"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"哦，原来半生只是一场梦..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"在阳台上安详地晒着太阳，突然就没了生息..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"可惜高楼大厦，每层人家门户紧闭，没有人注意到"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"的逝去，"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"而"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"家里除他以外再没有人了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Loser</span><span class="token punctuation">(</span><span class="token string">"三代目"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">life</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Loser 类中没有 life 方法，所以调用的是 World 接口中的 life方法，内部的这些方法已被 Loser 重写，所以依次调用 Loser 类中的goToSchool、goToWork、toGetMarried ... 等方法。</p><hr><p>3）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Arr</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foreach</span><span class="token punctuation">(</span><span class="token class-name">I2</span> i2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            i2<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Arr</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">I2</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Arr</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Arr</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"遍历的元素为："</span> <span class="token operator">+</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有参构造赋值 a.arr = {4,6,8}</p><p>调用 foreach，遍历数组，每次遍历调用 i2.some 方法，输出<code>遍历的元素为：4</code>、<code>遍历的元素为：6</code>、<code>遍历的元素为：8</code></p><hr><p>4）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Math</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span> <span class="token keyword">int</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token class-name">Math</span> math <span class="token operator">=</span> <span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">Math</span> math1 <span class="token operator">=</span> <span class="token punctuation">(</span>a1<span class="token punctuation">,</span> b1<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> a1 <span class="token operator">+</span> b1<span class="token punctuation">;</span>    <span class="token class-name">Math</span> math2 <span class="token operator">=</span> <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x1 <span class="token operator">*</span> y1 <span class="token operator">-</span> x1<span class="token punctuation">;</span>    <span class="token keyword">return</span> math1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span> <span class="token operator">-</span> math2<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">math<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> 返回值为 math1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">-</span> math2<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>math1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> 返回值为 <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>math2<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> 返回值为 <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">-</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>所以返回值为 <span class="token number">11</span> <span class="token operator">-</span> <span class="token number">25</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>5）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IntConsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token class-name">IntConsumer</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        action<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> i <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"down:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>repeat 方法中每次遍历调用 action 的 run 方法，传入0、1、2、...、9</p><p>输出 <code>down:9</code>、<code>down:8</code>、...<code>down:0</code></p><hr><p>6）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">TypeC</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">MicroUSB</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">work2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token keyword">implements</span> <span class="token class-name">MicroUSB</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"充电中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 优先使用组合，而不是继承</span><span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">implements</span> <span class="token class-name">TypeC</span> <span class="token punctuation">{</span>    <span class="token class-name">Phone</span> phone<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token class-name">Phone</span> phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        phone<span class="token punctuation">.</span><span class="token function">work2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*class Adapter extends Phone implements TypeC {    @Override    public void work() {        super.work2();    }}*/</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Phone</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">charge</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 充电中...</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">charge</span><span class="token punctuation">(</span><span class="token class-name">TypeC</span> typeC<span class="token punctuation">)</span> <span class="token punctuation">{</span>        typeC<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于 Phone 不是 TypeC 类型，无法作为 charge方法的实参；要想充电，必须借助实现 Typec 接口的适配器Adapter，通过适配器调用 Phone 的方法。</p><h3 id="第十四章答案">第十四章答案</h3><p>14.1 运行后输出？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Clothes</span> <span class="token punctuation">{</span>    JACKET<span class="token punctuation">,</span> TROUSERS<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Clothes</span> j1 <span class="token operator">=</span> <span class="token class-name">Clothes</span><span class="token punctuation">.</span>JACKET<span class="token punctuation">;</span>        <span class="token class-name">Clothes</span> j2 <span class="token operator">=</span> <span class="token class-name">Clothes</span><span class="token punctuation">.</span>JACKET<span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>j2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>toString 默认返回常量名，输出 <code>JACKET</code>，equals默认使用双等号比较，j1、j2 保存着同一个对象的地址，输出<code>true</code>。</p><h3 id="第十五章答案">第十五章答案</h3><p>15.1 输出？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"try..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出 <code>try...</code> 后抛出异常，进入 catch 块，最后执行 finally块的语句，上抛异常到 main 方法，继续上抛，由 JVM打印异常信息，退出程序。</p><hr><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抛出算术异常，到 catch 语句块，在返回 2 前执行 finally 语句，返回3。</p><hr><p>3）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 try 子句时抛出算术异常，被 catch 块捕捉，返回 i（即1）之前，先执行 finally 子句，i++ 为 2，再返回 1。</p><hr><p>4）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入 catch 子句，此时 i = 1，应返回 1；后 i++ 为 2，返回前先执行finally 子句，此时 i 为 2，返回 2，之前的返回值被覆盖；后 i++ 为3；返回值 j = 2，i = 3。</p><hr><p>5）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>System.exit(0）代表正常退出程序，直接结束，之后的代码都不会运行。</p><hr><p>6）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>catch 子句应返回 1，i++ 为 2；返回前执行 finally 子句，i++ 为3，再返回 1。</p><hr><p>7）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>strArr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"try..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            strArr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"jerry"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArrayIndexOutOfBoundsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>strArr[2] 为 null，抛空指针溢出，到对应 catch 块，应返回 3，返回 3之前执行 finally 子句，返回 4。</p><hr><p>8）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入方法1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"异常1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法1的finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入方法2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法2的finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用 method1 方法，输出<code>进入方法1</code>，抛出异常回到调用者前，执行 finally 子句，输出<code>方法1的finally</code>，异常被 main 方法的 catch 子句捕捉，输出<code>异常1</code>；</p><p>调用 method2 方法，输出 <code>进入方法2</code>，return 前执行 finally子句，输出 <code>方法2的finally</code>。</p><hr><p>9）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用 func 方法，try 子句抛出异常，执行 finally 子句，输出<code>B</code>；</p><p>抛出的异常被 main 方法的 catch 子句捕捉，输出 <code>C</code>；</p><p>输出 <code>D</code>。</p><hr><p>15.2键盘输入得到整数后输出到控制台，若不是整数，循环输入，直到得到整数为止。</p><p>错误示范：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果字符缓冲区为空，调用 read方法等待键盘输入，如果输入的不是整数，填充到字符缓冲区中，hasNextInt方法读取缓冲区中的内容，判断下个 token，如果不是整数，就会返回false。</p><p>下一次循环调用 hasNextInt方法，字符串缓冲区已有内容，不用键盘输入，判断缓冲区中内容，延续上次，因不是整数返回false；然后无尽循环。</p><p>利用异常机制，当字符串不能转为整数时就继续循环。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNumber</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> aChar <span class="token operator">=</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>aChar <span class="token operator">&lt;</span> <span class="token char">'0'</span> <span class="token operator">||</span> aChar <span class="token operator">&gt;</span> <span class="token char">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 1.1 语法入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1. JavaSE </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.f 异常</title>
      <link href="/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.f-yi-chang/"/>
      <url>/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.f-yi-chang/</url>
      
        <content type="html"><![CDATA[<h1 id="第十五章-异常">第十五章 异常</h1><p>内容导视：</p><ul><li>异常分类</li><li>异常处理</li></ul><h2 id="异常分类">15.1 异常分类</h2><p>内容导视：</p><ul><li>RuntimeException</li><li>Exception</li></ul><p>程序的运行并不总是一帆风顺的，可能读取的文件不存在、读取的不是个文件、使用值为null的引用访问实例变量、访问不存在的下标、强行将字符串转成整数...这些不正常的情况称为<strong>异常</strong>。（语法错误不是异常）</p><p>运行时发生异常（抛出了异常对象），如果不处理，默认退出程序，异常后面的代码不会执行。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后面的代码不再执行..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ArithmeticException</span><span class="token operator">:</span> <span class="token operator">/</span> by zeroat <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span></span>Excep</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">Test</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所有异常类都是 Throwable 的子类，体系图：</p><p><img src="https://s2.loli.net/2022/05/30/qSilADUN8s2v3CI.png"></p><h3 id="error">15.1.1 Error</h3><p>Error：JVM 无法解决的严重错误，如系统内部错误、资源耗尽等错误，如：StackOverflowError（栈溢出）和OutOfMemoryError（内存溢出）；程序会崩溃。</p><p>应用程序不应该抛出这种类型的对象。如果出现了这样的内部错误，除了通告给用户，并尽力使程序安全地终止之外，再也无能为力了。</p><p>这种情况很少出现，大多数情况下我们关注于 Exception。</p><blockquote><p>如果线程请求的栈深度大于虚拟机所允许的深度，将会抛出StackOverflowError异常；如果虚拟机栈可以动态扩展时却无法申请到足够的内存，就会抛出OutOfMemoryError 异常。</p></blockquote><h3 id="runtimeexception">15.1.2 RuntimeException</h3><p>Exception：因为逻辑错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码处理。</p><p>Exception 分为两大类：编译时异常、运行时异常。</p><p>运行时异常又称<strong>非受检异常</strong>，不要求强制处理；<mark>RuntimeException（包括子类）是运行时异常。</mark></p><p>通常是由于程序逻辑错误导致的异常（内因），如空指针、除0、下标越界、类型转换、数字格式化等运行时异常。这类异常如果强制要求处理，比如计算、调用方法、访问字段、访问数组某个下标的元素等，都需要try catch，那么代码量会急速膨胀，看着就很混乱。</p><p>这类异常从一开始就不该存在，应极力避免，可以提早检查出来；使用 trycatch 处理这类异常有些小题大作，效率也低。</p><p>例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">obj<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>应考虑到 obj 为 null 的情况，避免空指针异常：（如果能确定 obj一定不为 null，则不需要处理）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    obj<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不要使用 try catch：（无法通过预检查的异常除外，比如NumberFormatException）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    obj<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>常见的运行时异常</strong></p><ol type="1"><li><p>java.lang.NullPointerException 空指针异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>java.lang.ArithmeticException 算数异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> dividend<span class="token punctuation">,</span> <span class="token keyword">int</span> divisor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> dividend <span class="token operator">/</span> divisor<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>java.lang.ArrayIndexOutOfBoundsException 数组下标越界异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>java.lang.ClassCastException 类型转换异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>java.lang.NumberFormatException 数字格式化异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"不是数字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="exception">15.1.3 Exception</h3><p>除 RuntimeException 外的 Exception是编译时异常，又称<strong>受检异常</strong>，必须手动处理，否则无法通过编译。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">java<span class="token operator">:</span> 未报告的异常错误<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>FileNotFoundException</span><span class="token punctuation">;</span> 必须对其进行捕获或声明以便抛出<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这类异常，并不是程序本身逻辑有问题，而是取决于外部环境，并不取决于代码，如E 盘下的 a.txt 是否存在。</p><p>我们无法控制这些外在因素，为此需要手动处理FileNotFoundException，说明当此文件不存在时应该怎么办。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a.txt 不存在，我们应该..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="异常处理">15.2 异常处理</h2><p>内容导视：</p><ul><li>throws</li><li>try catch</li></ul><p>对于编译时异常必须处理，否则通不过编译；处理异常的方式有两种，throws上抛给调用者，当前方法终止运行；或是 try catch处理异常，程序继续运行。</p><h3 id="throws">15.2.1 throws</h3><p>当方法中的语句可能抛出某个异常时，但是<mark>不确定如何处理这种异常，则此方法应显示地声明抛出异常，表明该方法将不对这些异常进行处理，而由该方法的调用者负责处理</mark>：trycatch 或继续上抛。</p><p>在方法声明中用 throws 语句声明抛出异常的列表，throws后面的异常类型可以是<mark>方法中可能抛出的异常类型</mark>，也可以是它的父类。如把FileNotFoundException 换成 Exception，即它的父类。</p><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">方法声明 <span class="token keyword">throws</span> 异常<span class="token number">1</span><span class="token punctuation">,</span> 异常<span class="token number">2</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表明此方法可能抛出 FileNotFoundException 异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">{</span>    <span class="token comment">// 此处可能会有异常抛出，当这句抛出异常时，后面的代码不会执行</span>    <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用者必须处理此编译时异常，是继续上抛，还是 try catch 自己处理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">{</span>    <span class="token comment">// 此处可能会有异常抛出，当这句抛出异常后，后面的代码不会执行</span>    <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>throws 过程：</p><ul><li><p>发生异常后，异常后的代码不会执行，直接结束方法回到调用者处，由调用者决定如何处理此异常</p></li><li><p>如果 main 方法自己不处理异常，而是继续上抛给JVM，异常后的代码不会执行；JVM 会调用异常对象的 printStackTrace方法打印出异常信息，然后退出程序。</p></li></ul><blockquote><p>运行时异常默认以 throws RuntimeException 的方式处理（隐式）。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 等同于</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子类重写父类的方法时，对抛出异常的规定：子类重写的方法，所抛出的异常类型要么和父类抛出的异常一致，要么为父类抛出的异常类型的子类型（或者干脆不显示抛出异常）。这是为了多态，父类出现的地方可以使用子类替换，且不会出现异常或错误。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 任意子类</span><span class="token keyword">class</span> ？ <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token comment">// 假如这里可以通过编译，不受限制地抛出异常</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token comment">// 这里不确定传入哪个子类对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/*        编译时，看编译类型的此方法没有抛出异常，正常通过；        运行时，调用的是子类重写后的方法，但子类重写后的方法如果抛出了编译时异常        但这里又没有处理，或者告知此方法可能会抛出异常（throws 或 try catch）相当于绕过了编译器的检查，开发者很可能就漏掉了对此异常的处理，导致程序崩溃        */</span>        a<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以经常看到父类的方法声明抛出异常，而实际没有抛出异常，强行要求处理，是预见到重写后的方法很有可能抛出异常。</p><h3 id="try-catch">15.2.2 try catch</h3><p>try 包含可能出错的代码，当异常发生时由对应的 catch 处理。</p><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment">// 可能会出现异常的代码 </span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>异常类型 变量名<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 发生异常后应执行的代码 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 try catch 语句过程：</p><ul><li>执行 try {} 中的语句<ul><li>如果没有抛出异常，catch {} 中语句不会执行（直至 try中语句执行结束，整个 try catch 结束，程序继续运行）</li><li>如果抛出了异常，异常处后面的语句不会执行，直接执行<strong>对应catch</strong> 中的语句（直至 catch 语句执行结束，整个 try catch语句结束，程序继续运行）</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 b != 0 时，顺利执行完 try 中的代码，输出<code>中</code>、<code>后</code>；</p><p>当 b = 0 时，输出 <code>中</code>，执行到 <code>int c = a / b;</code>这行抛出异常，跳转至对应 catch 块，输出 <code>前</code>。</p><p>异常并不是越早处理越好，当调用者已做好准备，执行某段代码出现异常情况后该如何处理，结果调用的方法内部自己try catch了异常，没有上抛，但其实根本没有处理好，也没有打印异常栈轨迹信息，外部调用者没有接收到抛出的异常，以为程序还正常运行，没有启动应急方案，这些无意被忽略的异常也许会酿成大祸，直到很久后才被发现。</p><p>我无意就犯这样的错，有时候爆红强迫我处理异常，我快捷键随便一按，默认try catch处理，便编写其它地方的代码，正好埋下了隐患，但察觉不了，程序还能继续运行，直到要使用数据时，才发现不对劲，疑惑不是已经写了catch 处理吗？debug 一步步调试，原来被内部方法自己处理掉了，外部的 catch没有生效，此时程序都不知道跑了多远了...</p><h3 id="多个-catch-块">15.2.3 多个 catch 块</h3><p>当 try 包围的代码内抛出了不止一个异常，需要多个 catch子句，用于捕获不同的异常，要求：<mark>父类异常必须在子类异常的后面</mark>、无法捕捉不可能抛出的编译时异常。</p><p>发生异常后，从上至下选择对应的 catch 子句执行，<mark>只会执行一条catch 分支 </mark>。（重复捕捉没有意义）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:/a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件没有找到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出现了运行时异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出现了其它编译时异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果把父类 Exception 放在前面，发生的子类型异常一定会被此 catch捕捉到，后面捕捉子类型异常 FileNotFoundException 的 catch永远不会执行，没有意义。</p><blockquote><p>没有捕捉到的运行时异常会抛给上一级调用者；不捕捉的编译时异常必须以throws 的方式处理。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 打印异常信息</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果多个异常同一种处理方式，除了使用父类型的异常囊括统一处理，还可以在catch 中将不同类型的异常以 |分隔，统一处理。（被分隔的异常不得有父子关系）</p></blockquote><p>JDK7 新增特性：multi-catch 多重捕获机制</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:/a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> <span class="token class-name">FileNotFoundException</span> <span class="token operator">|</span> <span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常已发生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="finally">15.2.4 finally</h3><p>始终会执行的代码可以放入 finally 中；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 如果将 fis 定义在 try 内，则 finally 内无法访问到此变量</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token comment">// 如果 fis 不等于 null，就调用 close 方法关闭资源</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 此方法也会抛出异常，所以需要 try catch 处理</span>            fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 try 语句时，不管异常是否发生，都会执行 finally中的代码（释放资源、关闭连接），除非退出程序或被打断。</p><p>强迫处理异常的确非常繁琐，当确定文件一定存在时，本应是如下语句，现在倒是变得不那么简单清晰明了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>如果没有出现异常，则执行 try 块中所有语句，不执行 catch块中语句；如果有 finally，最后还需要执行 finally 里面的语句。</p><p>如果出现异常，则 try 块中异常发生后，剩下的语句不再执行。将执行 catch块中的语句；如果有 finally，最后还需要执行 finally 里面的语句。</p></blockquote><p>有人就问了，就算异常发生，异常都被 catch 捕捉了，有没有 finally不都会继续执行吗？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">// 应继续执行</span><span class="token keyword">if</span> <span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 避免空指针异常</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不一定，如下例执行到 return;语句，整个方法就结束了，不会执行剩下的语句。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请执行我"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是如果放入 finally 中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请执行我"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 return 前，会先执行 finally 中代码，输出<code>请执行我</code>。</p><blockquote><p>try finally配合使用，这种用法相当于没有捕获异常，需要上抛给调用者处理。不管是否发生异常，都必须执行某段代码。</p></blockquote><h3 id="try-with-resources">15.2.5 try with resources</h3><p>JDK7 新增特性，用于简化关闭流的过程；不需要在 finally块中关闭流了，try 语句结束后会自动调用对象的 close 方法。（若 try中抛出了异常，try 剩余代码不再执行，在进入 catch 之前先关闭流）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 在 try () 中放入需要关闭资源的对象（实现了 AutoCloseable 接口的实现类对象）</span><span class="token comment">// 可以放置多个对象，以 ; 分隔</span><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 关闭流（调用 close 方法）时如果抛出了异常，由此 catch 块处理</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>JDK7 需要在 try 括号中需要声明变量，如 try (FileInputStream fis =f），JDK9 后可以直接放入，如 try (f）。</p></blockquote><p>如果不想处理 try 中抛出的异常，但需要关闭资源：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">{</span>    <span class="token class-name">FileInputStream</span> f <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> f1 <span class="token operator">=</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也不想处理 close 方法抛出的异常：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者抛出异常，但不想强制调用者必须处理异常，可以转为运行时异常：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"E:\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>"invoke failed"<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>调用 close 方法的顺序</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">MyStream</span> m1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyStream</span><span class="token punctuation">(</span><span class="token string">"s1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">MyStream</span> m2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyStream</span><span class="token punctuation">(</span><span class="token string">"s2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">MyStream</span> m3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyStream</span><span class="token punctuation">(</span><span class="token string">"s3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyStream</span> <span class="token keyword">implements</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyStream</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"creating "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">/*if (true) {            throw new Exception(name);        }*/</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"closing"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">creating s1creating s2creating s3closings3closings2closings1<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Exception</span><span class="token operator">:</span> runat <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>cover<span class="token punctuation">.</span></span>Test</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">OverrideException</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与声明顺序相反，逆序调用对象的 close 方法。</p><p>期间某个对象调用构造器时抛出了异常，不再创建剩下的对象，逆序调用已创建好的对象的close 方法，try 语句块结束。</p><p>使得创建 m3 对象时抛出异常：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">MyStream</span> m1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyStream</span><span class="token punctuation">(</span><span class="token string">"s1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">MyStream</span> m2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyStream</span><span class="token punctuation">(</span><span class="token string">"s2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">MyStream</span> m3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyStream</span><span class="token punctuation">(</span><span class="token string">"s3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">MyStream</span> m4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyStream</span><span class="token punctuation">(</span><span class="token string">"s4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"try 中的语句不执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">creating s1creating s2creating s3closings2closings1<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>RuntimeException</span><span class="token operator">:</span> s3 constructor failed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>被抑制的异常</strong></p><p>将 close 方法的注释打开，注释 try 中抛出的异常。</p><p>运行：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">creating s1creating s2creating s3<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Exception</span><span class="token operator">:</span> s3 <span class="token comment">// 这是 m3.close 抛出的异常</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>cover<span class="token punctuation">.</span></span>MyStream</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">OverrideException</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">39</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>cover<span class="token punctuation">.</span></span>Test</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">OverrideException</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token class-name">Suppressed</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Exception</span><span class="token operator">:</span> s2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">2</span> more<span class="token class-name">Suppressed</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Exception</span><span class="token operator">:</span> s1<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">2</span> more<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用 m3 的 close 方法时抛出了异常，接着调用 m2、m1 的 close方法也抛出了异常，为了避免异常信息丢失，先抛出的异常会调用 addSuppressed方法，添加被抑制的异常。</p><p>将 try 中的注释打开，运行：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">creating s1creating s2creating s3<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Exception</span><span class="token operator">:</span> run <span class="token comment">// try 中抛出的异常，下面三个是被抑制的异常</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>cover<span class="token punctuation">.</span></span>Test</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">OverrideException</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token class-name">Suppressed</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Exception</span><span class="token operator">:</span> s3at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>cover<span class="token punctuation">.</span></span>MyStream</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">OverrideException</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">39</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>cover<span class="token punctuation">.</span></span>Test</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">OverrideException</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token class-name">Suppressed</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Exception</span><span class="token operator">:</span> s2at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>cover<span class="token punctuation">.</span></span>MyStream</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">OverrideException</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">39</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>cover<span class="token punctuation">.</span></span>Test</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">OverrideException</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token class-name">Suppressed</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Exception</span><span class="token operator">:</span> s1at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>cover<span class="token punctuation">.</span></span>MyStream</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">OverrideException</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">39</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>cover<span class="token punctuation">.</span></span>Test</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">OverrideException</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>不调用 addSuppressed 方法添加被抑制的异常</strong></p><p>始终会执行的 finally 块有时候会覆盖掉 try 中的异常：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"try：throw Exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"finally：throw Exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// finally 中抛出的异常</span><span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>RuntimeException</span><span class="token operator">:</span> <span class="token keyword">finally</span>：<span class="token keyword">throw</span> <span class="token class-name">Exception</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>cover<span class="token punctuation">.</span></span>Test</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">OverrideException</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>try 抛出的异常还没有处理，接着又抛出了一个异常，try异常信息丢失，只记录下了 “finally：throw Exception”。</p><p><strong>改进</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RuntimeException</span> re <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"try：throw Exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    re <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token comment">// 抛出 try 中的异常</span>    <span class="token keyword">throw</span> re<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"finally：throw Exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果 try 中没有抛出异常，直接抛出 finally 内的异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>re <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 否则 try 抛出的异常添加 e 到被抑制的异常列表中</span>            re<span class="token punctuation">.</span><span class="token function">addSuppressed</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// try 中抛出的异常</span><span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>RuntimeException</span><span class="token operator">:</span> <span class="token keyword">try</span>：<span class="token keyword">throw</span> <span class="token class-name">Exception</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>cover<span class="token punctuation">.</span></span>Test</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">OverrideException</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">)</span>        <span class="token comment">// finally 中被抑制的异常</span><span class="token class-name">Suppressed</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>RuntimeException</span><span class="token operator">:</span> <span class="token keyword">finally</span>：<span class="token keyword">throw</span> <span class="token class-name">Exception</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>cover<span class="token punctuation">.</span></span>Test</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">OverrideException</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">27</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义异常">15.3 自定义异常</h2><p>内容导视：</p><ul><li>抛出自定义异常</li><li>常用方法</li></ul><h3 id="步骤">15.3.1 步骤</h3><p>当程序出现了某些错误，如果内置的异常类无法满足需求，可以自定义异常，描述此错误信息。</p><p>步骤：</p><ol type="1"><li><p>定义类，编译时异常继承 Exception，运行时异常继承RuntimeException</p></li><li><p>调用父类的有参构造，以传递错误信息</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserNameFormatException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">UserNameFormatException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="抛出异常">15.3.2 抛出异常</h3><p>在你认为发生错误的地方抛出此异常对象，<code>throw new 异常类("错误原因");</code></p><p>如果抛出的是编译时异常，需要在方法处使用 throws声明可能会发生的异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UserNameFormatException</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UserNameFormatException</span><span class="token punctuation">(</span><span class="token string">"用户名称非法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>throw 语句只能放在 {}中的最后一句，抛出异常后，方法直接结束，返回上一级，由调用者处理此异常。</p><h3 id="常用方法">15.3.3 常用方法</h3><p><code>构造器(String message, Throwable cause)</code>：错误信息，异常发生的原因。当捕获了异常后，再次抛出新异常时（目的是改变异常类型，比如当前方法不支持抛出编译时异常、忽略细节等原因），如果不希望丢失原始异常的信息，使用此构造；或者调用initCause 方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment">// 可能会抛出的异常</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 抛出此异常的原因是 try 中抛出了 FileNotFoundException</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"读写文件失败！"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>void addSuppressed(Throwable exception)</code>：添加被抑制的异常。</p><p>如果由调用者处理异常；在 try块中抛出了异常后，在返回至调用者前，会执行 finally 块中的语句；但是finally 块在执行的过程中，也可能会抛出异常。</p><p>如果 finally 块也抛出了异常，则此异常被返回给调用者，但之前 try块中的异常就丢失了。</p><p>如下例，try抛出的算术异常，就被空指针异常覆盖了，控制台上只会打印空指针异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理，不要在 finally 中使用 return 语句，会忽略 try中的异常或返回语句。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"被忽略的异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在构造器中也是如此，</p><p>当 try 中出现的异常才是问题的根源，可以忽略 finally中的异常（抑制此异常）。</p><p>如下例，但是感觉还是挺麻烦：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 准备抛出的异常</span><span class="token class-name">RuntimeException</span> cue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>cue <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/*        只有当准备抛出的异常为 null 时（说明 try 中没有异常）        才记录 finally 中的异常        */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cue <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 抛出异常，由调用者处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> cue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RuntimeException</span> cue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>cue <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">throw</span> cue<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 只有 cue 为 null 时才抛出 finally 内的异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不想丢失异常信息，使用 addSuppressed 方法，添加被抑制的异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RuntimeException</span> cue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>cue <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cue <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 添加被抑制的异常</span>            cue<span class="token punctuation">.</span><span class="token function">addSuppressed</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> cue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RuntimeException</span> cue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cue <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">throw</span> cue<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            cue<span class="token punctuation">.</span><span class="token function">addSuppressed</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用 try-with-resources 时，当 try 中抛出异常，自动调用 close方法也抛出了异常，会抑制 close 方法抛出的异常，同时调用 addSuppressed添加至原有异常。</p></blockquote><p><code>Throwable getCause()</code>：获取原始异常（本异常发生的原因）</p><p><code>String getMessage()</code>：获取错误信息</p><p><code>StackTraceElement[] getStackTrace()</code>：获取栈轨迹元素数组，可以据此定位异常位置；默认开启，可以关闭此功能；</p><p>在创建异常对象时，调用如下构造器，writableStackTrace 赋值为false，就不会调用 fillInStackTrace方法记录栈轨迹，即有关当前线程的栈帧的当前状态的信息；此时调用getStackTrace 方法，返回的数组没有元素。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">构造器<span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">,</span>                    <span class="token keyword">boolean</span> enableSuppression<span class="token punctuation">,</span>                    <span class="token keyword">boolean</span> writableStackTrace<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>栈轨迹（stacktrace）是一个方法调用过程的列表，记录了抛出异常的方法以及所在行数。构造器中默认调用fillInStackTrace记录栈轨迹，可以手动调用此方法更新异常抛出点的调用栈信息，将之前的信息丢弃。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">57</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">NoSuchFieldException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">58</span>   <span class="token keyword">throw</span> e<span class="token punctuation">;</span><span class="token number">59</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>NoSuchFieldException</span><span class="token operator">:</span> iat <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>scanner<span class="token punctuation">.</span></span>TestScanner</span><span class="token punctuation">.</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span><span class="token class-name">TestScanner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">35</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>scanner<span class="token punctuation">.</span></span>TestScanner</span><span class="token punctuation">.</span><span class="token function">getHandle</span><span class="token punctuation">(</span><span class="token class-name">TestScanner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">54</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>scanner<span class="token punctuation">.</span></span>TestScanner</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">TestScanner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">69</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不想丢失栈信息，可以将原有异常作为新异常的cause，再抛出新异常；或者先调用 e.printStackTrace方法打印原有异常信息。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">57</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">NoSuchFieldException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token number">58</span> e<span class="token punctuation">.</span><span class="token function">fillInStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">59</span>  <span class="token keyword">throw</span> e<span class="token punctuation">;</span><span class="token number">60</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>NoSuchFieldException</span><span class="token operator">:</span> iat <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>scanner<span class="token punctuation">.</span></span>TestScanner</span><span class="token punctuation">.</span><span class="token function">getHandle</span><span class="token punctuation">(</span><span class="token class-name">TestScanner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">58</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>scanner<span class="token punctuation">.</span></span>TestScanner</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">TestScanner</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">70</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>Throwable[] getSuppressed()</code>：获取被抑制的异常；默认开启，可以关闭此功能，enableSuppression设置为 false</p><p><code>Throwable initCause(Throwable cause)</code>：设置异常发生的原因</p><p><code>void printStackTrace()</code>：使用 System.err标准错误输出流打印异常信息，如异常类型、错误信息、原因、栈轨迹、被抑制的异常等信息（可以传入PrintStream 类型的对象，指定输出位置）</p><p><code>String toString()</code>：获取异常类型及错误信息</p><h2 id="调试">15.4 调试</h2><p>内容导视：</p><ul><li>单元测试</li><li>assert</li><li>日志</li></ul><h3 id="单元测试">15.4.1 单元测试</h3><p>编写了多个方法，我需要验证它们的可行性；于是编写一个测试类，最开始在main 方法多次调用方法1，传入不同的参数，使用 sout将结果打印在控制台上，运行程序，肉眼辨别结果是否是预期值；不是则在方法1多处插入sout 语句，观察究竟是哪里出了问题，或者debug；好，发现错误处修改后，再手动将 sout 语句一个个删掉。</p><p>好，方法1验证完毕，因为只有一个入口方法，只能将 main方法中的测试代码清空，继续测试方法2、方法3...</p><p>这时突然想起测试方法1时，忽略了某处细节，又将 main方法清空，凭着回忆复原测试代码，如此反复...</p><p>的确很麻烦，不是吗？使用单元测试，每个方法都可单独运行，不需要在 main方法内反复修改。</p><p>IDEA 在 Project Structure 的模块下添加 Dependencies，导入junit-4.13.1、hamcrest-all-1.3 的 jar 包，jar 包可以在 Maven仓库中搜索并下载：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><p><img src="https://s2.loli.net/2022/06/02/FvoCpbVm8TMSWa1.png"></p><p>然后创建 src 的同级目录 test，右键此目录 Mark Directory as/TestSources Root，使之变绿；</p><p>然后在 test目录下编写测试类，包名与被测试类所在包一致，在方法上添加注解 <span class="citation" data-cites="Test">@Test</span>；（importorg.junit.Test;）</p><blockquote><p>如果是 Maven 项目，测试类放在 src/test/java 下。</p><p><img src="https://s2.loli.net/2022/06/02/sMoeRkafxGIdlPF.png"></p></blockquote><p>想要运行哪个方法就点击绿色三角（或 Ctrl + Shift +F10），点击类左边的三角运行所有方法。</p><p>规则：</p><ul><li>公开的类</li><li>公开的实例方法，没有返回值</li></ul><p>规范：</p><ul><li>类名为 测试的类名 + Test</li><li>方法名为 测试的方法名 + Test</li></ul><p>下面是常见的测试注解：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">@Test：把一个方法标记为测试方法@Before：每一个测试方法执行前自动调用一次@After：每一个测试方法执行完自动调用一次@BeforeClass：所有测试方法执行前执行一次，在测试类还没有实例化就已经被加载，所以用 static 修饰@AfterClass：所有测试方法执行完执行一次，在测试类还没有实例化就已经被加载，所以用 static 修饰@Ignore：暂不执行该测试方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="assert">15.4.2 assert</h3><p>刚刚图中方法内的 assert 关键字是断言，JDK4新特性，在测试阶段时使用，保证程序的正确性。</p><p>语法：<code>assert 布尔值;</code>、<code>assert 布尔值 : "错误信息";</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> result <span class="token operator">=</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assert</span> result <span class="token operator">==</span> 预期结果<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果布尔值为 false，将会抛出 AssertionError 异常，不再需要 sout输出，通过人眼验证结果。</p><blockquote><p>在测试类中可以使用<code>Assert.assertEquals("预期结果", "实际结果");</code> 代替。</p></blockquote><p>断言默认关闭，可以运行时加入 <code>-enableassertions</code> 或<code>-ea</code> 参数，启动断言。</p><p>打开 Edit Configurations</p><p><img src="https://s2.loli.net/2022/06/02/p6F3NGuEJtX1PSz.png"></p><p>在 VM options 框内输入 <code>-ea</code>即可，默认开启所有类的断言，可以使用 <code>-ea:完整类名</code>只启动某个类中的断言。</p><p>如果没有 VM options 框，点击 Modify options，添加 Add VMoptions。</p><p><img src="https://s2.loli.net/2022/06/02/ybig6VjK2GHpF8O.png"></p><p>开启断言后，可以使用 <code>-da:完整类名</code> 或<code>-disableassertions:完整类名</code> 禁用某个类中的断言。</p><h3 id="日志">15.4.3 日志</h3><p><code>不是则在方法1多处插入 sout 语句，观察究竟是哪里出了问题，或者 debug；好，发现错误处修改后，再手动将 sout 语句一个个删掉。</code></p><p>这样做比较麻烦，使用日志记录器记录结果，打开记录或关闭都比较方便。</p><p>日志级别，从高到低分为如下级别：</p><ul><li>SEVERE (highest value）：严重</li><li>WARNING：警告</li><li>INFO：信息</li><li>CONFIG：配置</li><li>FINE：详细</li><li>FINER：较详细</li><li>FINEST (lowest value）：非常详细</li></ul><p>Logger 类中：</p><p><code>Logger getGlobal()</code>：获取全局记录器</p><p><code>Logger getLogger(String name)</code>：创建给定名称的记录器，一般为包名，若有此名称的记录器，则直接返回</p><p><code>String getName()</code>：获取记录器的名称</p><p><code>void log(Level level, String msg)</code>：记录某级别的消息</p><p><code>void log(Level level, String msg, Throwable thrown)</code>：记录异常信息</p><p><code>void logp(Level level, String sourceClass, String sourceMethod, String msg)</code>：记录某级别的消息，指定所在类和方法名。</p><p><code>void config(String msg)</code>：记录 config 级别的消息</p><p><code>void info(String msg)</code>：记录 info 级别的消息</p><p><code>void severe(String msg)</code>：记录 severe 级别的消息</p><p><code>void setLevel(Level newLevel)</code>：设置日志级别，指定此记录器将记录哪些消息级别。<mark>低于此值的消息级别将被丢弃</mark>。级别值Level.OFF 可用于关闭日志记录，级别值 Level.ALL打开所有级别的日志记录；</p><p>如果 newLevel = null 且有父记录器，设置为父记录器的级别；默认为 INFO级别；</p><p>若子记录器没有设置级别，修改父记录器的级别同时会修改子记录器的级别。</p><p><code>void setParent(Logger parent)</code>：设置 parent为此记录器的父记录器，若此记录器没有设置级别，级别设置为父记录器的级别。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 默认级别为 info，以下级别的消息不会显示</span><span class="token class-name">Logger</span> global <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getGlobal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 会显示</span>global<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"info 级别的消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不会显示</span>global<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string">"config 级别的消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置日志级别为 SEVERE，以下级别的消息不会显示</span>global<span class="token punctuation">.</span><span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span>SEVERE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 会显示</span>global<span class="token punctuation">.</span><span class="token function">severe</span><span class="token punctuation">(</span><span class="token string">"severe 级别的消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不会显示</span>global<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"info 级别的消息2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可能发现修改了级别，控制台上却没有显示，打开 JDK 安装目录下的jre/lib/logging.properties 日志记录配置文件，修改<code>java.util.logging.ConsoleHandler.level = FINEST</code></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">############################################################</span><span class="token comment"># 使用指定的日志记录配置文件</span><span class="token comment"># 运行时添加选项：-Djava.util.logging.config.file=配置文件的绝对路径</span><span class="token comment">############################################################</span><span class="token key attr-name">handlers</span><span class="token punctuation">=</span> <span class="token value attr-value">java.util.logging.ConsoleHandler</span><span class="token comment"># 默认是控制台处理器，负责将消息打印在控制台上</span><span class="token comment"># 可以换成 java.util.logging.FileHandler，消息会输出在指定文件中</span><span class="token comment"># 多个处理器使用 , 分隔</span><span class="token key attr-name">.level</span><span class="token punctuation">=</span> <span class="token value attr-value">INFO</span><span class="token comment"># 日志记录器的默认级别为 INFO，低于此级别的消息会被丢弃，代码中可以使用 setLevel 方法设置级别</span><span class="token comment"># 指定日志记录器的默认级别为 INFO，此配置文件添加一句</span><span class="token comment"># 日志记录器名.level=INFO</span><span class="token key attr-name">java.util.logging.FileHandler.pattern</span> <span class="token punctuation">=</span> <span class="token value attr-value">%h/java%u.log</span><span class="token comment"># 若有 FileHandler，会将消息输出到 %h/java%u.log，可以改为其它路径</span><span class="token comment"># 注意不要含有中文，确保目录存在</span><span class="token comment"># %h，用户的主目录，可以通过 System.getProperty("user.home") 获取</span><span class="token comment"># %u，是防止文件重名的编号</span><span class="token comment"># 在 Windows 系统下，此日志文件路径为 C:\Users\用户名\java?.log</span><span class="token key attr-name">java.util.logging.FileHandler.limit</span> <span class="token punctuation">=</span> <span class="token value attr-value">50000</span><span class="token comment"># 日志文件最大字节数，改 0 代表无限制</span><span class="token comment"># 如果日志文件个数为 1，超过 50 kb 后就会覆盖原有文件内容</span><span class="token comment"># 如果日志文件有多个，超过 50 kb 后，将第一个文件内容移到下一个文件，依次类推</span><span class="token comment"># 最后将最新日志输出到第一个文件中</span><span class="token key attr-name">java.util.logging.FileHandler.count</span> <span class="token punctuation">=</span> <span class="token value attr-value">1</span><span class="token comment"># 日志文件个数为 1</span><span class="token comment"># 如果只有单个文件，每次运行内容都会被覆盖</span><span class="token comment"># 如果有多个日志文件，每次运行输出内容到第一个文件，第一个文件原有内容转移到第二个文件中</span><span class="token comment"># 依次转移，直到最后一个文件内容被倒数第二个文件内容覆盖</span><span class="token key attr-name">java.util.logging.FileHandler.formatter</span> <span class="token punctuation">=</span> <span class="token value attr-value">java.util.logging.XMLFormatter</span><span class="token comment"># 默认以 xml 格式保存，可以改为 java.util.logging.SimpleFormatter 以普通文本格式保存</span><span class="token comment"># 添加如下属性，每次运行时追加日志到第一个文件尾部</span><span class="token comment"># java.util.logging.FileHandler.append = true</span><span class="token key attr-name">java.util.logging.ConsoleHandler.level</span> <span class="token punctuation">=</span> <span class="token value attr-value">INFO</span><span class="token comment"># 控制台上打印的消息限制在 INFO 以上，低于此级别的消息不会在控制台上输出</span><span class="token key attr-name">java.util.logging.ConsoleHandler.formatter</span> <span class="token punctuation">=</span> <span class="token value attr-value">java.util.logging.SimpleFormatter</span><span class="token comment"># 以普通文本格式输出在控制台上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="x-总结回顾">15.x 总结回顾</h2><p>运行时异常应以预检查的方式避免，用 try catch 处理，效率太低。</p><p>编译时异常不确定如何处理或让调用者处理就 throws 上抛，否则就 trycatch 处理。</p><p><strong>throws 与 throw 的区别</strong></p><table><colgroup><col style="width: 6%"><col style="width: 22%"><col style="width: 11%"><col style="width: 20%"><col style="width: 38%"></colgroup><thead><tr class="header"><th style="text-align: center;">关键字</th><th style="text-align: center;">作用</th><th style="text-align: center;">位置</th><th style="text-align: center;">所跟</th><th style="text-align: center;">意义</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">throws</td><td style="text-align: center;">异常处理的一种方式</td><td style="text-align: center;">方法声明处</td><td style="text-align: center;">可能抛出的异常类型</td><td style="text-align: center;">表明自己不处理异常，交给调用者处理</td></tr><tr class="even"><td style="text-align: center;">throw</td><td style="text-align: center;">抛出异常对象的关键字</td><td style="text-align: center;">方法体中</td><td style="text-align: center;">异常对象</td><td style="text-align: center;">说明程序某处出现了错误</td></tr></tbody></table><h2 id="section"></h2><h2 id="y-脑海练习">15.y 脑海练习</h2><p>15.1 输出？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"try..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>strArr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"try..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            strArr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"jerry"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArrayIndexOutOfBoundsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入方法1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"异常1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法1的finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入方法2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法2的finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>15.2键盘输入得到整数后输出到控制台，若不是整数，循环输入，直到得到整数为止。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1 语法入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1. JavaSE </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.e 枚举</title>
      <link href="/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.e-mei-ju/"/>
      <url>/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.e-mei-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="第十四章-枚举">第十四章 枚举</h1><p>内容导视：</p><ul><li>单例设计模式</li><li>枚举类</li></ul><h2 id="单例设计模式">14.1 单例设计模式</h2><p>内容导视：</p><ul><li>设计模式</li><li>单例设计模式</li><li>饿汉式</li><li>懒汉式</li></ul><h3 id="设计模式">14.1.1 设计模式</h3><p>转载文章来处：<a href="https://www.runoob.com/design-pattern/singleton-pattern.html">单例模式| 菜鸟教程（runoob.com)</a></p><p><mark>设计模式</mark>（Designpattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p><p>设计模式是一套<strong>被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结</strong>。使用设计模式是为了<strong>重用代码、让代码更容易被他人理解、保证代码可靠性</strong>。毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。</p><p>共有 23 种设计模式，下面介绍单例设计模式。</p><h3 id="单例设计模式-1">14.1.2 单例设计模式</h3><p><strong>意图</strong>：保证<mark>一个类仅有一个实例</mark>，并提供一个取得其对象实例的方法，让其它调用者获取的是同一个对象，保证数据共享。</p><p><strong>主要解决</strong>：一个全局使用的类频繁地创建与销毁。</p><p><strong>何时使用</strong>：当实例是重量级对象，想控制实例数目，节省系统资源的时候，保证只有一个对象被创建，可以节约资源。</p><p><strong>如何解决</strong>：判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p><p><strong>关键代码</strong>：构造函数是私有的。</p><p><strong>分类</strong>：饿汉式、懒汉式。</p><p>比如一个查看当前时间的，一个实例就够了。谁查看时间就把当前时间返回去。如果创建多个实例，都显示一样的时间，对象重复，浪费资源。如果显示不一样的时间，会造成误导，不知道哪个是正确的。只要唯一的实例即可。</p><h3 id="饿汉式">14.1.3 饿汉式</h3><p>饿汉：还未使用这个对象，但对象已经创建好了。</p><p>步骤：</p><ol type="1"><li>将构造器私有化，防止外部类直接 new</li><li>创建一个对象</li><li>提供公开的静态方法，返回这个对象</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token punctuation">{</span>    <span class="token comment">// 类初始化时创建对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Son</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 构造器私有化防止其他类直接 new</span>    <span class="token keyword">private</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">// 返回创建的实例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Son</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> son<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 使用 getInstance 方法获取对象，看看是否获取到的对象是同一个对象</span>        <span class="token class-name">Son</span> son1 <span class="token operator">=</span> <span class="token class-name">Son</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Son</span> son2 <span class="token operator">=</span> <span class="token class-name">Son</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>son1 <span class="token operator">==</span> son2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>是否懒加载</strong>：否</p><p><strong>是否多线程安全</strong>：是</p><p><strong>实现难度</strong>：易</p><p><strong>描述</strong>：这种方式比较常用，但容易产生垃圾对象。</p><p><strong>优点</strong>：基于 ClassLoader机制避免了多线程的同步问题，不用加锁，执行效率会提高。</p><p><strong>缺点</strong>：虽然可能没有用这个对象，只是访问了它的静态变量而导致类初始化，但这个对象已经创建好了，造成资源的浪费。</p><h3 id="懒汉式">14.1.4 懒汉式</h3><p>获取实例时才创建。</p><p><font style="color: green;font-weight: bold;">懒汉式，线程不安全</font></p><p><strong>是否 Lazy 初始化</strong>：是</p><p><strong>是否多线程安全</strong>：否</p><p><strong>实现难度</strong>：易</p><p><strong>缺点</strong>：在多线程下不能保证单例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Son</span> son<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">// 获取实例时，如果为 null，就创建对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Son</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>son <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> son<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以直接在方法上加synchronized，但调用此方法频繁时，都排队等着，影响效率。</p><p><font style="color: green;font-weight: bold;">双检锁/双重校验锁（DCL，即double-checked locking）</font></p><p><strong>JDK 版本</strong>：JDK5 起</p><p><strong>是否 Lazy 初始化</strong>：是</p><p><strong>是否多线程安全</strong>：是</p><p><strong>实现难度</strong>：较复杂</p><p><strong>描述</strong>：这种方式采用双锁机制，安全且在多线程情况下能保持高性能。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Son</span> son<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">// 获取实例时，如果为 null，就创建对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Son</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>son <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Son</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>son <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> son<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font style="color: green;font-weight: bold;">登记式/静态内部类</font></p><p><strong>是否 Lazy 初始化</strong>：是</p><p><strong>是否多线程安全</strong>：是</p><p><strong>实现难度</strong>：一般</p><p><strong>描述</strong>：这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。</p><p>这种方式同样利用了 ClassLoader 机制来保证初始化 instance时只有一个线程，但是只有当主动使用 SonHolder 类时（调用 getInstance方法时），此类的静态变量才会被显式初始化，不会浪费资源。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token punctuation">{</span>    <span class="token comment">// 只有使用此类时（参考类的初始化时机），才会初始化此类，并显示初始化此静态常量</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SonHolder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Son</span> INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Son</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">SonHolder</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font style="color: green;font-weight: bold;">枚举</font></p><p><strong>JDK 版本</strong>：JDK5 起</p><p><strong>是否 Lazy 初始化</strong>：否</p><p><strong>是否多线程安全</strong>：是</p><p><strong>实现难度</strong>：易</p><p><strong>描述</strong>：这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。</p><p>这种方式是 Effective Java 作者 Josh Bloch提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于JDK5 之后才加入 enum特性，用这种方式写不免让人感觉生疏，在实际工作中，也很少用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Son</span> <span class="token punctuation">{</span>    INSTANCE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="枚举类">14.2 枚举类</h2><p>内容导视：</p><ul><li>自定义类实现枚举类</li><li>enum</li><li>常用方法</li></ul><h3 id="自定义类实现枚举类">14.2.1 自定义类实现枚举类</h3><p>要求：设计一个季节类，而季节只有 4个对象：春夏秋冬，要是按普通创建对象的方式，可以随意创建实例，不能体现季节是4 个对象。</p><p>可以借助单例模式的设计思想，将构造器设为私有，控制实例数量。</p><p><strong>枚举类</strong>：将有限个、具体的对象一个个例举出来的类。</p><ol type="1"><li>枚举对应英文 enumeration，简写 enum</li><li>枚举是一组常量的集合</li><li>当实例为有限个，使用枚举类更好</li><li>当 true、false 不足以表示所有结果时，使用枚举</li></ol><p><strong>步骤</strong></p><ol type="1"><li><p>在本类中创建本类的对象（枚举对象）</p></li><li><p>枚举对象值通常为只读，不用修改，没有 set 方法</p></li><li><p>构造方法私有化，避免其它类创建对象</p></li><li><p>为 final 类，防止被继承；因为私有构造器本应没有后代。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Season</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Season</span> SPRING <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span> <span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Season</span> SUMMER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span> <span class="token string">"烈日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Season</span> AUTUMN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span> <span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Season</span> WINTER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span> <span class="token string">"天寒地冻"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> description<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 保证本类只有 4 个实例</span>        <span class="token class-name">Season</span> spring <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span>SPRING<span class="token punctuation">;</span>        <span class="token class-name">Season</span> summer <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span>SUMMER<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>spring<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>summer<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="enum">14.2.2 enum</h3><p>JDK5 新特性，简化创建枚举类的过程。</p><p>语法：每个常量名都对应一个对象，不同对象使用 , 分隔，最后使用 ;结尾。（当枚举对象后没有其它语句时，; 可以省略）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> 枚举类名 <span class="token punctuation">{</span>    常量名<span class="token punctuation">(</span>实参<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    常量名<span class="token punctuation">(</span>实参<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例：（请与自定义枚举类对比，看看省略了哪些内容）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Season</span> <span class="token punctuation">{</span>    <span class="token comment">// 序号按声明顺序排</span>    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span> <span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 0</span>    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span> <span class="token string">"烈日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 1</span>    <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span> <span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 2</span>    <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span> <span class="token string">"天寒地冻"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>    <span class="token comment">// 访问权限默认私有</span>    <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> description<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Season</span> spring <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span>SPRING<span class="token punctuation">;</span>        <span class="token class-name">Season</span> summer <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span>SUMMER<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>spring<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>summer<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>补充几点：</p><ol type="1"><li><p>构造器访问权限默认为 private，不可更改</p></li><li><p>如果调用的是无参构造，可以省略枚举对象的小括号</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Micro</span> <span class="token punctuation">{</span>    <span class="token class-name">S</span><span class="token punctuation">,</span> <span class="token class-name">M</span><span class="token punctuation">,</span> <span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>枚举对象必须定义在类的最前面</p></li><li><p>由于枚举类隐式继承了 Enum 类，而 Java只支持单继承，不能再继承其它类了，只能通过实现接口扩展功能</p></li></ol><p>通过 javap 命令反编译，发现 enum 本质也是类，继承了父类 Enum。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Season</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Season</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> SPRING<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> SUMMER<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> AUTUMN<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> WINTER<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> description<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span><span class="token punctuation">[</span><span class="token punctuation">]</span> $VALUES<span class="token punctuation">;</span>    <span class="token comment">// 返回枚举对象数组</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Season</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 根据枚举常量名返回对应的枚举对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Season</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>枚举类会先调用父类构造，并传入常量名与序号，赋给 Enum 类的实例变量name、ordinal。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Season</span> spring <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span>SPRING<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Season</span><span class="token punctuation">.</span>SPRING<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// SPRING</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Season</span><span class="token punctuation">.</span>SPRING<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用方法">14.2.3 常用方法</h3><p><code>int compareTo(E o)</code>：返回 this.ordinal -o.ordinal，可以比较两个枚举常量的大小。</p><p><code>boolean equals(Object other)</code>：比较两个枚举常量是否相等，底层使用== 实现，只有当自己与自己比较时，才会返回 true。</p><p><code>Class&lt;E&gt; getDeclaringClass()</code>：返回与此枚举常量的枚举类型对应的Class 对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> zuper <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>zuper <span class="token operator">==</span> <span class="token class-name">Enum</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>clazz <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>zuper<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么不直接返回 this 的运行时类型，而要先获取父类型？</p><p>因为枚举常量允许指向子类型的实例。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token comment">// 匿名内部类对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">State</span> CLOSE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">State</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">State</span> OPEN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">State</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    CLOSE <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    OPEN <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此时 CLOSE 调用 getClass 方法返回的就是 State$1 类型。</p><p>想要获取枚举对象的实际类型就调用 getClass方法，用于判断两个枚举对象是否是同一类型；想要获取枚举对象的枚举类型，就调用getDeclaringClass方法，用于判断两个枚举对象是否定义在同一个枚举类中。</p><p><code>String name()</code>：返回枚举常量名</p><p><code>String toString()</code>：返回枚举常量名，因为此方法不是 final修饰，可以重写使结果更易读。</p><p><code>int ordinal()</code>：返回此枚举常量的序号（它在其枚举声明中的位置，其中初始常量的序号为零）。大多数程序员不会使用这种方法。</p><p><code>static T valueOf(Class&lt;T&gt; enumType, String name)</code>：根据枚举类型和枚举常量名找到对应的枚举对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">State</span> close <span class="token operator">=</span> <span class="token class-name">Enum</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">State</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"CLOSE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">State</span> close1 <span class="token operator">=</span> <span class="token class-name">State</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"CLOSE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>close1 <span class="token operator">==</span> close<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>Object clone()</code>：为了保证实例数量不变，枚举类型不支持克隆，所以此方法内部抛出CloneNotSupportedException 异常，且有 final 修饰。</p><p><code>static Season[] values()</code>：返回枚举对象数组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">State</span><span class="token punctuation">[</span><span class="token punctuation">]</span> states <span class="token operator">=</span> <span class="token class-name">State</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> states<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>states<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// CLOSE、OPEN</span><span class="token punctuation">}</span><span class="token comment">// 通过枚举类的 Class 对象调用 getEnumConstants 方法也能得到所有枚举对象</span><span class="token class-name">State</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s1 <span class="token operator">=</span> <span class="token class-name">State</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">State</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s2 <span class="token operator">=</span> <span class="token class-name">State</span><span class="token punctuation">.</span>CLOSE<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>枚举常量允许指向子类型的实例</strong></p><p>在匿名内部类中定义方法，也没法直接使用，因为这是子类独有的方法，必须向下转型，但转成什么，State$1吗？这是编译之后才生成的，在此之前使用通不过编译。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    OPEN <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OPEN 的 some 方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    CLOSE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">State</span> <span class="token keyword">open</span> <span class="token operator">=</span> <span class="token class-name">State</span><span class="token punctuation">.</span>OPEN<span class="token punctuation">;</span>        <span class="token keyword">open</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 找不到符号</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在 State 中定义 some方法，在匿名内部类中重写，使用多态：（枚举类中可以定义抽象方法）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 本质是继承 Enum 的抽象类</span><span class="token keyword">enum</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    OPEN <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"some 方法~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">State</span><span class="token punctuation">.</span>OPEN<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="x-总结回顾">14.x 总结回顾</h2><p>单例模式保证每次获取都是同一个对象，节省资源。</p><p><strong>懒汉式与饿汉式的区别</strong>：</p><ol type="1"><li><p>创建对象的时机不同：<font style="color: green;font-weight: bold;">饿汉式</font>是在<font style="color: green;font-weight: bold;">类初始化时</font>创建对象实例，而<font style="color: green;font-weight: bold;">懒汉式</font>是在<font style="color: green;font-weight: bold;">使用时</font>才创建。</p></li><li><p>饿汉式不存在线程安全问题，懒汉式存在线程安全问题。</p></li><li><p>饿汉式存在浪费资源的可能。因为如果程序员一个对象实例都没有使用，那么饿汉式创建的对象就浪费了，懒汉式是使用时才创建，就不存在这个问题。</p></li></ol><p><strong>什么时候使用枚举</strong></p><ul><li>实例有限个时</li><li>true、false 不足以表示所有结果，配合 switch 语句更好</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Color</span> color <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>RED<span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// case 后直接写枚举常量名就行，不需要加前缀</span>    <span class="token keyword">case</span> RED<span class="token operator">:</span>        color <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>YELLOW<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> YELLOW<span class="token operator">:</span>        color <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>GREEN<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> GREEN<span class="token operator">:</span>        color <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>RED<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>    RED<span class="token punctuation">,</span> YELLOW<span class="token punctuation">,</span> GREEN<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="y-脑海练习">14.y 脑海练习</h2><p>14.1 运行后输出？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Clothes</span> <span class="token punctuation">{</span>    JACKET<span class="token punctuation">,</span> TROUSERS<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Clothes</span> j1 <span class="token operator">=</span> <span class="token class-name">Clothes</span><span class="token punctuation">.</span>JACKET<span class="token punctuation">;</span>        <span class="token class-name">Clothes</span> j2 <span class="token operator">=</span> <span class="token class-name">Clothes</span><span class="token punctuation">.</span>JACKET<span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>j2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 1.1 语法入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1. JavaSE </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.d 面向对象高级-抽象</title>
      <link href="/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.d-mian-xiang-dui-xiang-gao-ji-chou-xiang/"/>
      <url>/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.d-mian-xiang-dui-xiang-gao-ji-chou-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="第十三章-面向对象高级-抽象">第十三章 面向对象高级-抽象</h1><p>内容导视：</p><ul><li>抽象类</li><li>接口</li><li>内部类</li><li>lambda 表达式</li><li>方法引用</li></ul><h2 id="抽象类">13.1 抽象类</h2><p>内容导视：</p><ul><li>抽象类</li><li>注意</li></ul><h3 id="抽象类-1">13.1.1 抽象类</h3><p>父类型的引用指向子类型的对象，使得不同子类型的对象调用重写后的方法后得到不同的结果。为此父类必须声明一个实例方法，让子类重写，<mark>但本身不确定如何实现该方法时，可以将其声明为抽象方法。</mark>设计好后，让子类继承，并实现抽象方法的具体步骤。</p><p>在继承这节中，Animal 中的 play 方法就是如此。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抽象方法声明：<code>访问权限修饰符 abstract 返回值类型 方法名(形参列表);</code></p><p>这是一个没有方法体（没有实现）的方法，以分号结尾。</p><p>当一个类存在抽象方法时，需要将该类声明为抽象类。抽象类可以被继承，由子类实现抽象方法。（重写此方法）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">访问权限修饰符 <span class="token keyword">abstract</span> <span class="token keyword">class</span> 类名 <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"飞天遁地，无所不能！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意">13.1.2 注意</h3><ul><li>只有抽象类中才能存在抽象方法</li><li>抽象类中可以没有抽象方法</li><li>抽象类不能被实例化</li><li>非抽象类如果继承抽象类，必须实现抽象类的所有抽象方法（抽象类可以不用）</li><li>抽象方法没有方法体，不能使用 private、final、static修饰，否则无法被子类实现</li><li>抽象方法的访问权限最好不要设置为默认级别，否则当其它包下的类继承抽象类时，无法被访问到的父类方法无法被实现。</li></ul><h2 id="接口">13.2 接口</h2><p>内容导视：</p><ul><li>接口</li><li>注意</li><li>默认方法</li><li>接口与抽象类的区别</li><li>实现接口与继承类的区别</li><li>什么时候使用接口</li><li>类与类之间的关系</li></ul><h3 id="接口-1">13.2.1 接口</h3><p>接口是抽象方法的集合，作用是让其他类实现，用于扩展功能。接口编译后生成的是字节码文件。</p><p>语法：<mark>接口中只有静态常量和抽象方法。</mark></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">访问权限修饰符 <span class="token keyword">interface</span> 接口名 <span class="token punctuation">{</span>    <span class="token comment">// 声明常量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> 数据类型 常量名 <span class="token operator">=</span> 值<span class="token punctuation">;</span>    <span class="token comment">// 声明抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> 返回值类型 方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>声明常量时的 public static final 可以省略不写；</p><p>声明方法时的 public 修饰符可以省略不写；</p><p>声明抽象方法时的 abstract 可以省略不写。</p><p>最终简化为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">访问权限修饰符 <span class="token keyword">interface</span> 接口名 <span class="token punctuation">{</span>    <span class="token comment">// 声明常量</span>    数据类型 常量名 <span class="token operator">=</span> 值<span class="token punctuation">;</span>        <span class="token comment">// 声明抽象方法</span>    返回值类型 方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接口中没有代码块、构造器，不能被实例化；接口里的常量、方法的<font style="color: green;font-weight: bold;">访问权限默认是公开的</font>，不可更改。</p><p>这些抽象方法需要被类实现，使用 implements关键字，语法：<code>访问权限修饰符 class 类名 implements 接口名 {...}</code></p><p>接口中的方法访问权限是公开的：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">I1</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> COUNT <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 子类必须实现接口中的所有抽象方法</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">I1</span> <span class="token punctuation">{</span>    <span class="token comment">/*    com.cqh.arr2.A中的some()无法实现com.cqh.arr2.I1中的some()    正在尝试分配更低的访问权限; 以前为public    */</span>    <span class="token comment">// protected void some() {}</span>        <span class="token annotation punctuation">@Override</span><span class="token comment">// JDK6 以前不可用于标注实现方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 JDK8 及以后，允许接口包含默认方法和静态方法，访问权限也默认为public。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">I2</span> <span class="token punctuation">{</span>    <span class="token comment">// 默认方法</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接口的 some 方法执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 静态方法</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>区分接口、父类中的同名方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">I2</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类重写了 some 方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 访问接口的 some 方法，父类直接使用 super.some()</span>I2<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>this.some(）是访问本类的 some 方法，I2.super.some(）是访问本类从 I2继承的 some 方法。</p><p>区分接口、父类中的同名字段：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">I1</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">I1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">s1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 对x的引用不明确，A 中的变量 x 和 I1 中的变量 x 都匹配</span>        <span class="token comment">//System.out.println(x);</span>    <span class="token punctuation">}</span>    <span class="token comment">// 区分接口与父类的同名变量</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">s2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>I1<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意-1">13.2.2 注意</h3><ul><li><p>接口之间支持多继承，实现类也要实现接口继承的其它接口的抽象方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">I1</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">some1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">I2</span> <span class="token keyword">extends</span> <span class="token class-name">I1</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">some2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">I2</span> <span class="token punctuation">{</span>    <span class="token comment">// 需要实现 some2、some1 方法，当然如果继承的父类已有此方法，就不用实现</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一个类可以实现多个接口，<code>class A implements I1, I2, I3</code>。</p></li><li><p>接口类型的引用可以指向实现类型的对象，也算多态。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">I3</span> <span class="token punctuation">{</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"默认"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">implements</span> <span class="token class-name">I3</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"重写"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实现"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">I3</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        i<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token punctuation">.</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>extends 与 implements可以同时存在，<code>class A extends Object implements I1</code>。</p></li><li><p>实现类与接口之间满足 like a的逻辑关系，例：鱼实现了翅膀这个接口，拥有了飞翔的功能，鱼变得可以像鸟一样飞翔。</p><p>当子类继承了父类，就自动拥有了父类的功能。如果子类需要扩展功能，可以通过实现接口的方式扩展。</p></li><li><p>如果继承的父类与接口存在同一个方法，调用此方法时父类优先。</p></li></ul><h3 id="默认方法">13.2.3 默认方法</h3><p>当实现接口时，只需其中一个方法，总是强制重写所有抽象方法未免有些烦人；可以使用抽象类先实现几个抽象方法，以后所有需要实现此接口的类，直接继承抽象方法即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">I1</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">some1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">some2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">some3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">some4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">A1</span> <span class="token keyword">implements</span> <span class="token class-name">I1</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">C1</span> <span class="token keyword">extends</span> <span class="token class-name">A1</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>default 作用就在于此，将不太重要的方法声明为default，而不必让子类全部实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">I1</span> <span class="token punctuation">{</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">some1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">some2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">some3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">some4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C1</span> <span class="token keyword">implements</span> <span class="token class-name">I1</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一种用法，当使用者实现了一个接口，后来接口又扩充了一个方法，则之前所有实现它的类，则需要实现新增的方法，否则就会报错；如果扩充的方法声明为default，就不必担心对使用者造成影响。</p><h3 id="接口与抽象类的区别">13.2.4 接口与抽象类的区别</h3><table><thead><tr class="header"><th style="text-align: center;">比较</th><th style="text-align: center;">接口</th><th style="text-align: center;">抽象类</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">组合</td><td style="text-align: center;">可以实现多个接口</td><td style="text-align: center;">只能继承一个类</td></tr><tr class="even"><td style="text-align: center;">状态</td><td style="text-align: center;">只有静态常量</td><td style="text-align: center;">任意</td></tr><tr class="odd"><td style="text-align: center;">构造器</td><td style="text-align: center;">无</td><td style="text-align: center;">有</td></tr><tr class="even"><td style="text-align: center;">代码块</td><td style="text-align: center;">无</td><td style="text-align: center;">有</td></tr><tr class="odd"><td style="text-align: center;">访问权限</td><td style="text-align: center;">public</td><td style="text-align: center;">任意</td></tr></tbody></table><h3 id="实现接口与继承类的区别">13.2.5 实现接口与继承类的区别</h3><p><strong>接口和继承解决的问题不同</strong></p><p>继承的价值主要在于：解决代码的复用性和可维护性。</p><p>接口的价值主要在于：设计好各种规范（方法），让其它类去实现这些方法。</p><p><strong>接口比继承更加灵活</strong></p><p><mark>接口比继承更加灵活</mark>，继承是满足 is-a的关系，天生决定。而接口只需满足 like-a 的关系。</p><h3 id="什么时候使用接口">13.2.6 什么时候使用接口</h3><ol type="1"><li><p>类只支持单继承，当已经继承了其它类时，只有实现接口才能<mark>扩展功能</mark>。</p></li><li><p>制定规范，让其它人去实现；消费者直接调用，而不必关心提供者。</p></li><li><p>方法形参使用接口类型，用于<mark>解耦合</mark>，因为接口类型的引用可以指向实现接口的类的对象</p></li></ol><blockquote><p>解耦合：降低程序的耦合度，提高程序的扩展力</p></blockquote><p>例1：解耦合</p><p>修改之前：</p><p></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token class-name">Swim</span> swim<span class="token punctuation">)</span> <span class="token punctuation">{</span>        swim<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token class-name">Run</span> run<span class="token punctuation">)</span> <span class="token punctuation">{</span>        run<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 新增其它运动需要新增方法</span><span class="token punctuation">}</span><span class="token comment">// 如果 Swim 类修改了，Person 中有关 Swim 的部分可能会受到影响</span><span class="token keyword">class</span> <span class="token class-name">Swim</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"游泳中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 同理</span><span class="token keyword">class</span> <span class="token class-name">Run</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"跑步中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Person</span> zs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zs<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>修改方案1，使用关联，使用接口类型的变量作为实例变量，直接调用它的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Sport</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Swim</span> <span class="token keyword">implements</span> <span class="token class-name">Sport</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"游泳中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Run</span> <span class="token keyword">implements</span> <span class="token class-name">Sport</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"跑步中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token class-name">Sport</span> sport<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSport</span><span class="token punctuation">(</span><span class="token class-name">Sport</span> sport<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sport <span class="token operator">=</span> sport<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sport<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Person</span> zs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zs<span class="token punctuation">.</span><span class="token function">setSport</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zs<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>修改方案 2，作为形参，根据传进的实参不同，调用的 play方法也不同。</p><p></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token class-name">Sport</span> sport<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sport<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Person</span> zs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果需要其它的运动，可以编写一个类继承 Sport 接口</span>        <span class="token comment">// 不用修改 Person 类，只用传入实参即可</span>        zs<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>例2：制定规范</p><p>设计一系列公开的接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Driver</span> <span class="token punctuation">{</span>    <span class="token class-name">Connection</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Connection</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token class-name">Driver</span> driver<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Driver</span> driver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Manager</span><span class="token punctuation">.</span>driver <span class="token operator">=</span> driver<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 面向接口调用，让制定规则的人、使用者不用关心实现类是谁</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> driver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时来个张三实现接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ZsDriver</span> <span class="token keyword">implements</span> <span class="token class-name">Driver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Connection</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用张三写的代码连接数据库成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ZsConnection</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ZsConnection</span> <span class="token keyword">implements</span> <span class="token class-name">Connection</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ZsConnection</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"打开了通道"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"关闭了连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用者编写程序，选择一个实现者，按接口声明的规范调用方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Manager</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ZsDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">Manager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"路人甲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conn<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果又来个李四实现接口，只需要改动测试类的一个地方，不需要改 Manager类和规范。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Manager</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LsDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以后通过读取配置文件，自动创建对象并传入 register方法，连代码都不需要改。</p><p>例3：扩展功能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">int</span> type<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Wing</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 如果猫已经继承了 Animal 类，想要飞，只能实现接口，而不能再继承鸟类</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token keyword">implements</span> <span class="token class-name">Wing</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本猫也会飞了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类与类之间的关系">13.2.7 类与类之间的关系</h3><blockquote><p>多用组合，少用继承</p></blockquote><p>依赖：A 类的方法中使用 B 类型的对象，如上学时借助公交车。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span>数据<span class="token number">1</span><span class="token punctuation">,</span> 数据<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关联（组合）：B 类作为 A 类的成员变量。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token class-name">B</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>聚合：特殊的关系，B 类组成的集合作为 A类的成员变量，是部分与整体的关系；每个 b 的生命周期不由 a决定；如同我与我拥有的书的关系：我没来时，书在，我不在了，书还在。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> bookList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 人的脑海</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token comment">// 人的数量</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">// 人的姓名</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Book</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selection</span><span class="token punctuation">(</span><span class="token class-name">Book</span><span class="token punctuation">[</span><span class="token punctuation">]</span> books<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> books<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bookList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>books<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">World</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Book</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">"月亮是如何练成的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Book</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">"太阳的燃烧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Book</span> b3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">"语法快速入门"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Book</span> b4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">"恶魔法则"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Book</span> b5 <span class="token operator">=</span> <span class="token function">beginToEnd</span><span class="token punctuation">(</span><span class="token string">"我"</span><span class="token punctuation">,</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 人不在了，书还在</span>        <span class="token class-name">Book</span> b6 <span class="token operator">=</span> <span class="token function">beginToEnd</span><span class="token punctuation">(</span><span class="token string">"你"</span><span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Book</span> b7 <span class="token operator">=</span> <span class="token function">beginToEnd</span><span class="token punctuation">(</span><span class="token string">"他"</span><span class="token punctuation">,</span> b1<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b3<span class="token punctuation">,</span> b4<span class="token punctuation">,</span> b6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Book</span> <span class="token function">beginToEnd</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> books<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">selection</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 人收集书籍</span>        <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>合成：特殊的聚合，B 类组成的集合作为 A类的成员变量，部分与整体的关系；每个 b 的生命周期由 a决定；如同我与我的四肢的关系。</p><p>实现：实现类与接口的关系。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">B</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>继承（泛化）：父子类关系，A</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr class="header"><th style="text-align: center;">关系</th><th style="text-align: center;">UML 连接符</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">依赖</td><td style="text-align: center;">人-----&gt;车</td></tr><tr class="even"><td style="text-align: center;">关联</td><td style="text-align: center;">人——&gt;狗</td></tr><tr class="odd"><td style="text-align: center;">聚合</td><td style="text-align: center;">车◊——&gt;轮胎</td></tr><tr class="even"><td style="text-align: center;">合成</td><td style="text-align: center;">人♦——&gt;四肢</td></tr><tr class="odd"><td style="text-align: center;">实现</td><td style="text-align: center;">实现类-----▻接口</td></tr><tr class="even"><td style="text-align: center;">继承</td><td style="text-align: center;">子类——▻父类</td></tr></tbody></table><p>双向关联可以双箭头，也可以无箭头。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token class-name">B</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token class-name">A</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内部类">13.3 内部类</h2><p>内容导视：</p><ul><li>实例内部类</li><li>静态内部类</li><li>局部内部类</li><li>匿名内部类</li><li>内部类如何访问到外部类的私有字段</li><li>如何继承实例内部类</li></ul><p>定义在类中的类称为内部类，外面的类称为外部类。如同正常类使用即可，编译也会生成.class 文件。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">OutClass</span> <span class="token punctuation">{</span><span class="token comment">// 外部类</span>    <span class="token keyword">static</span> <span class="token keyword">interface</span> <span class="token class-name">InnerInterface2</span> <span class="token punctuation">{</span><span class="token comment">// 内部接口（static 可以省略，接口默认是静态成员）</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>内部类可以访问外部类的私有变量，对同一个包下的类隐藏。</p><h3 id="实例内部类">13.3.1 实例内部类</h3><p>实例内部类定义在外部类的成员位置，地位等同于实例变量，由于静态方法不能直接访问实例相关的，需要通过外部类的实例.newInnerClass(）访问。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">访问权限修饰符 <span class="token keyword">class</span> 外部类类名 <span class="token punctuation">{</span>    访问权限修饰符 <span class="token keyword">class</span> 内部类类名 <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例内部类可以直接访问外部类的所有成员，包括私有的；作用域为整个类体。</p><p>创建内部类对象：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 外部类中</span><span class="token keyword">class</span> <span class="token class-name">OutClass</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">// 实例方法中</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">InnerClass</span> inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 静态方法中</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">some2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">OutClass</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InnerClass</span> inner <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// new OutClass().new InnerClass();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 外部其它类中</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">OutClass</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutClass<span class="token punctuation">.</span>InnerClass</span> inner <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例内部类不支持静态相关的声明，除了静态常量（以字面量的方式赋值）。编译后生成OutClass$InnerClass.class 文件。</p><p>最好不要使用 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="12.217ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 5400 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">作</text></g><g data-mml-node="mi" transform="translate(900,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">为</text></g><g data-mml-node="mi" transform="translate(1800,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">标</text></g><g data-mml-node="mi" transform="translate(2700,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">识</text></g><g data-mml-node="mi" transform="translate(3600,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">符</text></g><g data-mml-node="mi" transform="translate(4500,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g></g></g></svg></mjx-container>是用于编译器自定义类名、变量名，以免冲突。</p><p>实例内部类不能被继承外部类的类重写。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Out</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最开始的内部类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Out2</span> <span class="token keyword">extends</span> <span class="token class-name">Out</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"重写后的内部类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Out</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Out2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Out<span class="token punctuation">.</span>Inner</span> inner <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 最开始的内部类</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态内部类">13.3.2 静态内部类</h3><p>静态内部类定义在外部类的成员位置，有 static修饰，地位等同于静态变量，使用 new 外部类类名.内部类类名(）访问。</p><p>当不需要直接访问外部类的实例变量或方法时可以定义为静态内部类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">访问权限修饰符 <span class="token keyword">class</span> 外部类类名 <span class="token punctuation">{</span>    访问权限修饰符 <span class="token keyword">static</span> <span class="token keyword">class</span> 内部类类名 <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>静态内部类可以直接访问外部类所有的静态成员，包括私有的；作用域为整个类体。</p><p>创建静态内部类对象：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 外部类中</span><span class="token keyword">class</span> <span class="token class-name">OutClass</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 方法中</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">InnerClass</span> inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 外部其它类中</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">OutClass<span class="token punctuation">.</span>InnerClass</span> inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutClass<span class="token punctuation">.</span>InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">OutClass<span class="token punctuation">.</span>InnerClass</span><span class="token punctuation">.</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后生成 OutClass$InnerClass.class 文件。</p><h3 id="局部内部类">13.3.3 局部内部类</h3><p>局部内部类定义在外部类的局部位置，地位等同于局部变量，可以使用 final修饰。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">访问权限修饰符 <span class="token keyword">class</span> 外部类类名 <span class="token punctuation">{</span>    方法中、代码块中 <span class="token punctuation">{</span>        <span class="token keyword">class</span> 内部类类名 <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在实例方法、实例代码块、构造器内声明的内部类可以直接访问外部类的所有成员，包括私有的；在静态方法、静态代码块内声明的内部类只能访问静态成员；</p><p>局部内部类只在定义内部类时的方法或代码块内有效。</p><p>创建内部类对象：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">OutClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 仅在此方法内有效</span>        <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                <span class="token class-name">InnerClass</span> inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>局部内部类不支持静态相关的声明，除了静态常量（以字面量的方式赋值）。</p><p>所在方法内，局部内部类只能使用值不会改变的局部变量。（使用的变量本质是final 变量，使得局部变量与在局部类内建立的拷贝保持一致）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">{</span>        <span class="token comment">// 闭包</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// i++;从内部类引用的本地变量必须是最终变量或实际上的最终变量</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过反编译可以看出，引用的本地变量 i 存储在内部类的成员变量<code>final int val$i;</code>，且在构造器中赋的值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>arr1<span class="token punctuation">.</span></span>Out</span>$<span class="token number">1</span>InnerClass <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token keyword">int</span> val$i<span class="token punctuation">;</span>  <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>arr1<span class="token punctuation">.</span></span>Out</span>$<span class="token function">1InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Code</span><span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> aload_0       <span class="token number">1</span><span class="token operator">:</span> iload_1       <span class="token number">2</span><span class="token operator">:</span> putfield      #<span class="token number">1</span>                  <span class="token comment">// Field val$i:I</span>       <span class="token number">5</span><span class="token operator">:</span> aload_0       <span class="token number">6</span><span class="token operator">:</span> invokespecial #<span class="token number">2</span>                  <span class="token comment">// Method java/lang/Object."&lt;init&gt;":()V</span>       <span class="token number">9</span><span class="token operator">:</span> <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在计算机科学中，闭包（Closure），又称词法闭包（LexicalClosure）或函数闭包（function closures），是引用了自由变量的函数。</p><p>简单来说就是当一个方法引用了方法局部变量外的变量时，它就是一个闭包。闭包是由方法和与其相关的引用环境（方法外变量）组合而成的实体。</p><h3 id="匿名内部类">13.3.4 匿名内部类</h3><p>匿名内部类是一种局部内部类，类名是隐匿的，所以没有构造器，作为子类或实现类，定义匿名内部类的同时也会创建该类的实例，一次性用品。</p><p>作为子类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">父类类名 引用名 <span class="token operator">=</span> <span class="token keyword">new</span> 父类类名<span class="token punctuation">(</span>实参列表<span class="token punctuation">)</span> <span class="token punctuation">{</span>    子类类体<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>作为实现类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">接口名 引用名 <span class="token operator">=</span> <span class="token keyword">new</span> 接口名<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    实现类类体<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">I1</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 生成了一个实现 I1 接口的匿名类，创建了此匿名类的对象后调用 some 方法</span>        <span class="token keyword">new</span> <span class="token class-name">I1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实现 some 方法..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 局部内部类</span>        <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">I1</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实现 some 方法 2..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后生成 OutClass$1.class 文件，从 1开始，每遇见匿名内部类就加一。</p><p>当不想编写大量代码时，可以使用匿名内部类更加方便快捷：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 之前</span><span class="token keyword">class</span> <span class="token class-name">ArrayList2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">ArrayList</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 之后</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内部类如何访问到外部类的私有字段">13.3.5内部类如何访问到外部类的私有字段</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Out</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            name <span class="token operator">=</span> <span class="token string">"g"</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后生成 Out.class，Out$Inner.class，反编译后如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Out</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> name<span class="token punctuation">;</span>  <span class="token class-name">Out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> access$<span class="token function">002</span><span class="token punctuation">(</span><span class="token class-name">Out</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> access$<span class="token function">000</span><span class="token punctuation">(</span><span class="token class-name">Out</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Out</span>$<span class="token class-name">Inner</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">Out</span> <span class="token keyword">this</span>$<span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Out</span>$<span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token class-name">Out</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Out</span>$<span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token class-name">Out</span><span class="token punctuation">,</span> <span class="token class-name">Out</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还原真实的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Out</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">// 此方法用于赋值</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> access$<span class="token function">002</span><span class="token punctuation">(</span><span class="token class-name">Out</span> out<span class="token punctuation">,</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        out<span class="token punctuation">.</span>name <span class="token operator">=</span> str<span class="token punctuation">;</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 此方法用于访问私有字段</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> access$<span class="token function">000</span><span class="token punctuation">(</span><span class="token class-name">Out</span> out<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> out<span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>    <span class="token comment">// 需要外部类的引用</span>    <span class="token keyword">final</span> <span class="token class-name">Out</span> <span class="token keyword">this</span>$<span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 给外部类引用的字段赋值</span>        <span class="token class-name">Out</span><span class="token punctuation">.</span>access$<span class="token function">002</span><span class="token punctuation">(</span><span class="token keyword">this</span>$<span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Out</span><span class="token punctuation">.</span>access$<span class="token function">000</span><span class="token punctuation">(</span><span class="token keyword">this</span>$<span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 外部类引用通过构造器赋值</span>    <span class="token keyword">private</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token class-name">Out</span> out<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span>$<span class="token number">0</span> <span class="token operator">=</span> out<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token class-name">Out</span> out<span class="token punctuation">,</span> <span class="token class-name">Out</span> out2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看见外部类生成了默认访问权限的 access$xxx方法供内部类访问。如果想要修改本类的 private 字段，代码需要与 Out类<mark>放置在同一个包中。</mark></p><p>假如我现在已有 Out类源码，正好此类的内部类访问了外部类的私有变量，我可以将复制此类，将源码中的内部类去掉，手动添加access$xxx 方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cqh</span><span class="token punctuation">;</span><span class="token comment">// 想要访问 Out.class 中的私有字段</span><span class="token keyword">class</span> <span class="token class-name">Out</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在任意地方新建 com/cqh，复制此类到 cqh 目录下，去掉内部类后编译生成class 文件。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cqh</span><span class="token punctuation">;</span><span class="token comment">// 与原 Out.class 在同一个包下</span><span class="token comment">// 另一个地方的 Out.java</span><span class="token keyword">class</span> <span class="token class-name">Out</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token keyword">static</span> <span class="token keyword">boolean</span> access$<span class="token function">000</span><span class="token punctuation">(</span><span class="token class-name">Out</span> out<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> out<span class="token punctuation">.</span>flag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">boolean</span> access$<span class="token function">002</span><span class="token punctuation">(</span><span class="token class-name">Out</span> out<span class="token punctuation">,</span> <span class="token keyword">boolean</span> flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>out<span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span><span class="token keyword">return</span> out<span class="token punctuation">.</span>flag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 攻击代码</span><span class="token keyword">class</span> <span class="token class-name">Invade</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Out</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span>access$<span class="token function">002</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span>access$<span class="token function">000</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将编译后生成的 Invade.class 放置在 Out.class所在目录下（实际目录）；就可以访问、修改 Out 类的私有字段。</p><p>有人说，那我岂不是把类放在 java.xxx 包下，就可以修改 JDK源码的私有字段吗？</p><p>不可以，因为有安全机制，包名不允许以 java. 开头：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Error</span><span class="token operator">:</span> <span class="token class-name">A</span> JNI error has occurred<span class="token punctuation">,</span> please check your installation and <span class="token keyword">try</span> again<span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>SecurityException</span><span class="token operator">:</span> <span class="token class-name">Prohibited</span> <span class="token keyword">package</span> <span class="token namespace">name</span><span class="token operator">:</span> java<span class="token punctuation">.</span>awt安全异常，禁止的包名称    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="如何继承实例内部类">13.3.6 如何继承实例内部类</h3><p>通过上节的还原真实的代码，可以看出实例内部类必须传入外部类的引用，在构造器中完成赋值。</p><p>所以继承实例内部类时，需要使用特殊的语法，将外部类引用传递进去。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Out</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span><span class="token comment">// 调用的是此构造</span>        <span class="token keyword">public</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Other</span> <span class="token keyword">extends</span> <span class="token class-name">Out<span class="token punctuation">.</span>Inner</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Other</span><span class="token punctuation">(</span><span class="token class-name">Out</span> out<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 调用 Out$Inner 类的无参构造，将外部类引用作为参数传递</span>        out<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="lambda-表达式">13.4 lambda 表达式</h2><p>JDK8推出的新特性，目的是简化创建<mark>函数式接口</mark>的实现类对象的代码，一般作为实参使用。可以看作是简化的匿名内部类。</p><p>函数式接口（functionalinterface）：<mark>只包含一个抽象方法的接口</mark>（可以有默认方法和静态方法）</p><p>函数式接口可以加 <span class="citation" data-cites="FunctionalInterface">@FunctionalInterface</span>注解，如果无意增加了另一个抽象方法会报错。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">interface</span> <span class="token class-name">I1</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>lambda语法：<code>接口名 引用名 = (形参列表) -&gt; {方法体}</code></p><p><strong>规则</strong></p><ul><li><p>可以省略形参的数据类型</p></li><li><p>当形参只有一个时，可以省略小括号</p></li><li><p>当方法体只有一条语句时，可以省略花括号</p><ul><li>当这条语句为 <code>return xxx</code> 时，可以省略 return</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Math</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span> <span class="token keyword">int</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Math</span> math <span class="token operator">=</span> <span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span><span class="token class-name">Math</span> math2 <span class="token operator">=</span> <span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">return</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Math</span> math3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Math</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span> <span class="token keyword">int</span> n2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">I1</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// lambda 表达式</span>        <span class="token class-name">I1</span> i1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实现 some 方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token comment">// 匿名内部类</span>        <span class="token class-name">I1</span> i2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">I1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实现 some 方法 2..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token comment">// 作为实参</span>        <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实现 some 方法 3..."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">I1</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        i<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法引用">13.5 方法引用</h2><p>内容导视：</p><ul><li>方法引用</li><li>构造器引用</li></ul><p>JDK 8 新特性，当 lambda表达式中只有一条语句时，可以使用此特性，例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">I1</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">I1</span> i <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">;</span>        <span class="token class-name">I1</span> i2 <span class="token operator">=</span> num <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法引用-1">13.5.1 方法引用</h3><p>只有一条调用方法的语句时。</p><p>有三种形式：</p><ul><li>引用::实例方法名</li><li>类名::静态方法名</li><li>类名::实例方法名</li></ul><p>前两种方式，形参继续传递给调用的方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">I1</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span> <span class="token keyword">int</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span> <span class="token keyword">int</span> n2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">I1</span> i1 <span class="token operator">=</span> <span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">A</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等价于下面的语句</span>        <span class="token class-name">I1</span> i2 <span class="token operator">=</span> <span class="token class-name">A</span><span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后一种方式，第一个形参作为对象引用，其它参数传递给调用的方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">I1</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">I1</span> i1 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> a<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">I1</span> i2 <span class="token operator">=</span> <span class="token class-name">A</span><span class="token operator">::</span><span class="token function">setAge</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构造器引用">13.5.2 构造器引用</h3><p>只有一条返回对象的语句时。</p><p>语法：类型::new</p><p>传进来的实参作为构造器的实参。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">I1</span> <span class="token punctuation">{</span>    <span class="token class-name">A</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">I1</span> i1 <span class="token operator">=</span> age <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">I1</span> i2 <span class="token operator">=</span> <span class="token class-name">A</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="x-总结回顾">13.x 总结回顾</h2><p>某实例方法只是为了让子类重写，自身不确定如何实现，可以声明为抽象方法。</p><p>接口里的常量、方法都是 public修饰的；当不想强迫子类实现某方法时，可以使用 default。</p><p>接口作为规范让子类实现，用于扩展功能。</p><p>匿名内部类很常见，用于简化创建对象，Lambda表达式对此简化更近一步，用于函数式接口。</p><h2 id="y-脑海练习">13.y 脑海练习</h2><p>13.1 控制台上输出？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">Vehicle</span> vehicle<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">goToSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>vehicle <span class="token keyword">instanceof</span> <span class="token class-name">Bike</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>vehicle <span class="token operator">=</span> <span class="token class-name">VehiclesFactory</span><span class="token punctuation">.</span><span class="token function">getBike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        vehicle<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token string">"学校"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flying</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vehicle <span class="token operator">=</span> <span class="token class-name">VehiclesFactory</span><span class="token punctuation">.</span><span class="token function">getBambooDragonfly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                vehicle<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token string">"飞天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token class-name">String</span> goal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Bike</span> <span class="token keyword">implements</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token class-name">String</span> goal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"骑着老旧的小自行车嘎吱嘎吱缓缓地驶向了"</span> <span class="token operator">+</span> goal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">VehiclesFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Bike</span> bike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Vehicle</span> <span class="token function">getBike</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bike<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Vehicle</span> <span class="token function">getBambooDragonfly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> goal <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转着竹蜻蜓"</span> <span class="token operator">+</span> goal <span class="token operator">+</span> <span class="token string">"~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Student</span> zs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zs<span class="token punctuation">.</span><span class="token function">goToSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zs<span class="token punctuation">.</span><span class="token function">flying</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">World</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">life</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">goToSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">goToWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">toGetMarried</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">toHaveChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">goToSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">goToWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">toGetMarried</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">toHaveChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Loser</span> <span class="token keyword">extends</span> <span class="token class-name">World</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Loser</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">goToSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"满怀疲惫地上学了，成绩倒数..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">goToWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"末尾淘汰制，因业绩垫底，"</span> <span class="token operator">+</span> name <span class="token operator">+</span><span class="token string">"被辞退了；"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"但"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"丝毫不慌，因为穷不过三代。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toGetMarried</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父母催着结婚，于是"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"急着结婚了"</span> <span class="token operator">+</span>                <span class="token string">"，尽管不知道如何抚养孩子，想着给钱就行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toHaveChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"在外地辛苦工作，妻子半辈子守在农村；似乎孩子不怎么认"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"哦，原来半生只是一场梦..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"在阳台上安详地晒着太阳，突然就没了生息..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"可惜高楼大厦，每层人家门户紧闭，没有人注意到"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"的逝去，"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"而"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"家里除他以外再没有人了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Loser</span><span class="token punctuation">(</span><span class="token string">"三代目"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">life</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Arr</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foreach</span><span class="token punctuation">(</span><span class="token class-name">I2</span> i2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            i2<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Arr</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">I2</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Arr</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Arr</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"遍历的元素为："</span> <span class="token operator">+</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Math</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span> <span class="token keyword">int</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token class-name">Math</span> math <span class="token operator">=</span> <span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">Math</span> math1 <span class="token operator">=</span> <span class="token punctuation">(</span>a1<span class="token punctuation">,</span> b1<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> a1 <span class="token operator">+</span> b1<span class="token punctuation">;</span>    <span class="token class-name">Math</span> math2 <span class="token operator">=</span> <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x1 <span class="token operator">*</span> y1 <span class="token operator">-</span> x1<span class="token punctuation">;</span>    <span class="token keyword">return</span> math1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span> <span class="token operator">-</span> math2<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IntConsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token class-name">IntConsumer</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        action<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> i <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"down:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">TypeC</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">MicroUSB</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">work2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token keyword">implements</span> <span class="token class-name">MicroUSB</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"充电中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">implements</span> <span class="token class-name">TypeC</span> <span class="token punctuation">{</span>    <span class="token class-name">Phone</span> phone<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token class-name">Phone</span> phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        phone<span class="token punctuation">.</span><span class="token function">work2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Phone</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">charge</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">charge</span><span class="token punctuation">(</span><span class="token class-name">TypeC</span> typeC<span class="token punctuation">)</span> <span class="token punctuation">{</span>        typeC<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 1.1 语法入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1. JavaSE </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.c 面向对象中级-静态</title>
      <link href="/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.c-mian-xiang-dui-xiang-zhong-ji-jing-tai/"/>
      <url>/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.c-mian-xiang-dui-xiang-zhong-ji-jing-tai/</url>
      
        <content type="html"><![CDATA[<h1 id="第十二章-面向对象中级-静态">第十二章 面向对象中级-静态</h1><p>内容导视：</p><ul><li>静态变量</li><li>静态方法</li><li>代码块</li><li>final</li></ul><h2 id="静态变量">12.1 静态变量</h2><p>内容导视：</p><ul><li>静态变量</li><li>类的初始化时机</li><li>什么时候使用静态变量</li></ul><h3 id="静态变量-1">12.1.1 静态变量</h3><p>静态的成员变量也称类变量，是<mark>该类的所有对象共享的变量</mark>。</p><p>语法：<code>访问权限修饰符 static 数据类型 变量名;</code></p><p>虽然可以通过引用.变量名访问，但是实际上还是通过类名调用，不用创建对象，与实例无关。（最好使用类名.访问，与实例变量区分开）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Test</span> t <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i1 <span class="token operator">=</span> t<span class="token punctuation">.</span>i1<span class="token punctuation">;</span><span class="token comment">// 会自动转成 Test.i1</span>        <span class="token keyword">int</span> i2 <span class="token operator">=</span> t<span class="token punctuation">.</span>i2<span class="token punctuation">;</span><span class="token comment">// 空指针</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次创建对象都是在堆中开辟新的空间存储实例变量值，一个对象一份实例变量。静态变量是独立于对象的，只存在一份，<font style="color: green;font-weight: bold;">所有对象共享</font>；静态变量在方法区的静态域中（JDK6及之前）。</p><blockquote><p><a href="https://www.zhihu.com/question/59174759/answer/163207831">JDK7以上版本，静态域存储于定义类型的 Class 对象中，Class对象如同堆中其他对象一样，存在于 GC 堆中。</a></p></blockquote><p>实例变量是 new创建对象时调用构造器进行显示初始化，静态变量是<font style="color: green;font-weight: bold;">类加载的初始化阶段时显示初始化</font>。</p><h3 id="类的初始化时机">12.1.2 类的初始化时机</h3><p>虚拟机规范没有强制性约束什么时候进行类加载，但对于初始化，则严格规定了<strong>有且只有四种情况必须立即对类进行初始化</strong>，遇到new、getstatic、putstatic、invokestatic 这 4条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。</p><p>生成这 4 条指令最常见的 java 代码场景是：</p><ol type="1"><li><p>使用 new 关键字实例化对象</p></li><li><p>访问一个类的静态字段（被 final修饰、已在编译期把结果放在常量池的静态字段除外）</p></li><li><p>修改一个类的静态字段（被 final修饰、已在编译期把结果放在常量池的静态字段除外）</p></li><li><p>调用一个类的静态方法</p></li></ol><p>初始化类的时候如果其父类还没进行初始化，则需要先触发父类的初始化。</p><p><font style="color: red;font-weight: bold;">类只加载一次，即只初始化一次。</font></p><h3 id="什么时候使用静态变量">12.1.3 什么时候使用静态变量</h3><p>身高、体重、性别...这些状态，每个对象都不同，独一份的，作为实例变量。</p><p>当需要某个类的所有对象共享一个变量时，比如国籍，没有必要每个对象一个，使用类变量可以节省空间。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token class-name">String</span> idNumber<span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token class-name">String</span> country <span class="token operator">=</span> <span class="token string">"中国"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="静态方法">12.2 静态方法</h2><p>内容导视：</p><ul><li>静态方法</li><li>main 方法</li></ul><h3 id="静态方法-1">12.2.1 静态方法</h3><p>也称类方法；</p><p>语法：<code>访问权限修饰符 static 返回值类型 方法名(形参列表) {...}</code></p><p>通过类名.方法名(实参）调用。调用本类的方法，可以省略类名。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当方法不直接访问实例相关的（包括this、super），可以设计成静态方法。（静态方法中不能直接访问实例相关的，必须先创建对象，然后通过引用.访问）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> person <span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">// 返回 name，与实例有关，只能设计为实例方法</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 返回调用此方法的实例的 name</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 静态方法所需的数据由形参提供（或静态变量）</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">isBoy</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> sex <span class="token operator">?</span> <span class="token char">'男'</span> <span class="token operator">:</span> <span class="token char">'女'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>实例方法之所以可以直接访问实例变量，这是因为调用实例方法必须得有对象，那么实例方法中的实例变量就是此对象的状态。</p></blockquote><h3 id="main-方法">12.2.2 main 方法</h3><p><code>public static void main(String[] args) {}</code></p><p>public：运行时，虚拟机需要调用类的 main 方法，所以此方法必须是public</p><p>static：不必创建对象也能够调用 main 方法</p><p>args：接收执行 java 命令时传递的实参</p><p><code>java 类名 参数1 参数2 ...</code></p><p>可以传递参数后遍历 args</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/20/2zXVe98EnP6WpJr.png"></p><p>在 IDEA 中如何传递参数？先运行类后再修改运行时配置</p><figure><img src="https://s2.loli.net/2022/05/20/3BciW1hIgZ6uSTk.png" alt="Edit Configurations"><figcaption aria-hidden="true">Edit Configurations</figcaption></figure><p>选中刚刚运行的类填写方法参数即 Program arguments，点击 OK。</p><p><img src="https://s2.loli.net/2022/05/20/e9Kq26FfSoai1Ow.png"></p><p>main方法本质是一个类方法，可以直接访问本类的类方法和类变量，但是不能直接访问本类的实例成员，必须先创建实例，才能通过引用去访问。</p><h2 id="代码块">12.3 代码块</h2><p>内容导视：</p><ul><li>实例代码块</li><li>静态代码块</li><li>代码执行顺序</li></ul><p>代码块又称为初始化块，属于类中的成员（即是类的一部分），类似于方法，将逻辑语句封装在方法体中，通过{} 包围起来。</p><p>但和方法不同，它没有方法名，没有返回值，没有参数，只有方法体，而且不用通过对象或类显式调用，而是加载类时、创建对象时隐式调用。</p><p><strong>基本语法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> <span class="token punctuation">{</span>    java 语句<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>1）修饰符可选，要写的话，也只能写 static。</p><p>2）代码块分为两类，使用 static 修饰的叫静态代码块，没有 static修饰的，叫实例代码块。（有些文献也称域、静态域）</p><p>3）逻辑语句可以为任何逻辑语句。（输入、输出、方法调用、循环、判断等）</p><p>4）; 可以省略。</p><h3 id="实例代码块">12.3.1 实例代码块</h3><p>实例代码块，创建对象时调用。</p><p>实例代码块总是在构造方法执行之前执行。如果多个构造器中都有重复的语句，可以抽取到实例代码块中，提高复用性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"此人已疯"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"送入医院治疗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恢复良好，申请出院"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"此人已疯"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"送入医院治疗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恢复良好，申请出院"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把构造器重复的地方抽取放进实例语句块中，可以改成：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"此人已疯"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"送入医院治疗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恢复良好，申请出院"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态代码块">12.3.2 静态代码块</h3><p>有 static修饰的代码块称为静态代码块，在类加载的初始化阶段执行，一般做初始化操作如加载资源、配置文件等。类只加载一次，所以静态代码块也只执行一次。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        age <span class="token operator">=</span> <span class="token number">88</span><span class="token punctuation">;</span><span class="token comment">// 可以赋值，但不能前向访问     </span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用 Test 类的 main 方法前，会先初始化 Test 类，静态变量 a此时显示初始化，a = new A(）①</p><p>new 前会初始化 A 类，执行静态代码块 age = 88，输出 <code>88</code>后，紧接着调用无参构造，执行结束后回到 ① 处将地址赋给静态变量 a。</p><p>紧接着调用 main 方法。</p><h3 id="代码执行顺序">12.3.3 代码执行顺序</h3><p>我知道大家可能会有些迷惑。现在将零零散散的信息罗列出来：</p><p>实例变量：</p><ul><li><p>创建对象时在堆中开辟空间，为所有实例变量分配空间（包括继承来的），实例变量默认初始化，赋null 或 0，随后调用构造器。</p></li><li><p>构造器的第一句默认是调用父类的无参构造（可以追溯到 Object的无参构造），第二句按声明的先后顺序执行实例代码块中的语句及实例变量的显示初始化，再执行构造器中的剩余代码。执行完后将对象的地址赋给引用变量。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">// 显示初始化</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 1.调用父类构造（不可见，可以被this()替代）</span>        <span class="token comment">// 2.执行实例语句块，显示初始化实例变量，如 age（不可见）</span>        <span class="token comment">// 3.执行如下代码（可见）</span>        age <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出 <code>6</code>、<code>8</code></p></li></ul><p>无参构造器第一句替换为 this(实参列表），调用无参构造器①，会跳到本类的对应构造器，由这个构造器负责调用父类的无参构造器、包括实例代码块的执行、实例变量的显示初始化，当此构造器执行完后回到① 处执行 this(实参列表）之下的剩余代码。</p><p>静态变量：（包括不以字面量直接赋值的 final 变量）</p><ul><li>类加载的准备阶段时，静态变量默认初始化，赋 null 或 0。</li><li>类加载的初始化阶段时，按声明的先后顺序执行静态代码块中的语句及静态变量的显示初始化。</li></ul><figure><img src="https://s2.loli.net/2022/05/20/khabSNf23nMP8pV.png" alt="类加载的几个阶段"><figcaption aria-hidden="true">类加载的几个阶段</figcaption></figure><p>什么时候初始化：</p><ul><li>创建对象前</li><li>使用类的静态成员前（final修饰的且在编译时就把值放在常量池的静态字段除外）</li><li>初始化子类前先初始化父类</li><li>同一个类只初始化一次（类只加载一次，所以静态变量也只显示初始化一次）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用 main 方法前，应初始化 A类，按声明的先后顺序执行静态代码块与静态变量的显示初始化：age = 3，age =8，输出 age 即 <code>8</code>。</p><p>初始化阶段结束后，执行 main 方法，但没有任何语句，程序结束。</p><p>总结：</p><p>创建一个子类对象时，调用顺序如下：</p><ul><li>执行父类的静态代码块与静态变量的显示初始化（仅第一次时）</li><li>执行子类的静态代码块与静态变量的显示初始化（仅第一次时）</li><li>创建子类对象</li><li>执行父类的实例代码块与实例变量的显示初始化</li><li>执行父类的构造器</li><li>执行子类的实例代码块与实例变量的显示初始化</li><li>执行子类的构造器</li></ul><p><strong>其它情况</strong></p><p>final修饰的类变量在使用字面量赋值的方式时，会在准备阶段显示初始化，访问此变量就不会触发初始化。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COUNT <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">// 如果调用方法完成赋值、在静态代码块中赋值，访问此变量就会触发初始化</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态代码块~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">.</span>COUNT<span class="token punctuation">;</span><span class="token comment">// 访问 COUNT 不会执行 A 中的静态代码块</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>借助子类访问父类的静态变量时，不会触发子类初始化但是会触发父类初始化。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A 静态代码块~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B 静态代码块~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">B</span><span class="token punctuation">.</span>i<span class="token punctuation">;</span><span class="token comment">// 不会触发 B 类的初始化，因为 i 是 A 的</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="final">12.4 final</h2><p>内容导视：</p><ul><li>final</li><li>容易误会的地方</li></ul><h3 id="final-1">12.4.1 final</h3><p>final：最终的、最后的、<font style="color: green;font-weight: bold;">不可变更的</font></p><p>可以修饰类、字段、方法和局部变量。</p><ul><li>被修饰的类无法被继承<code>public final class 类名</code>；一个类如果已经是 final类了，没有必要再将方法修饰成 final 方法。（连继承都不行，何谈重写）</li><li>被修饰的方法无法被重写<code>public final void 方法名() {}</code></li><li>被修饰的变量无法被修改（即无法被重新赋值）<code>final int 变量名;</code></li><li>final 不能修饰构造器</li></ul><blockquote><p>final 与 static 修饰符不分先后顺序</p></blockquote><p>不希望类被继承、方法被重写、修改变量的值，就可以使用 final修饰，相当于绝育。</p><p><strong>常量</strong></p><p>final 修饰的变量称为常量，变量名全部大写，单词之间使用下划线 “_”连接。</p><p><strong>final 修饰的字段可以赋值的位置</strong></p><p>final 修饰的字段没有默认值，必须手动赋值；其中</p><p>实例变量可以赋值的位置：</p><ul><li>声明时显示初始化</li><li>实例代码块中</li><li>构造器中</li></ul><p>静态变量可以赋值的位置：</p><ul><li>声明时</li><li>静态代码块中</li></ul><p><strong>实际使用</strong></p><p>final 往往与 static往往搭配使用，定义时以字面量赋值的方式，使用类名.常量名访问不会触发初始化，编译器会把用到此常量的地方直接替换成字面量。</p><p>实例变量一个对象一份，并不是一成不变，不需要final。静态变量所有对象共享一份，如果静态变量的值不会变，使用 final修饰，效率更高。</p><h3 id="容易误会的地方">12.4.2 容易误会的地方</h3><p><strong>++、-- 或 += 等扩展赋值运算符</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">++</span>x<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>++x 本质是 <code>x = (int)(x+1)</code>，修改了 x 保存的值，但 final修饰的变量不可以修改，会报错：不能分配最终参数 x；return x+1 没错。</p><p><strong>final 引用指向的对象的字段值可以修改</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">'s'</span><span class="token punctuation">,</span><span class="token char">'b'</span><span class="token punctuation">,</span><span class="token char">'a'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>value<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'c'</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>有人就说肯定不能啊，final 不可变啊！我们说的 final 不可变，指的是被final 修饰的 value 变量保存的值不可修改。此 value[2]修改的只是数组中的值， value保存的对象地址依然为这个数组，并没有变。</p><p>0x677327b6 {0:'s', 1:'b', 2:'a'}</p><p>value -&gt; 0x677327b6，修改 value[2] 为 'c'</p><p>0x677327b6 {0:'s', 1:'b', 2:'c'}</p><p>value 没有变，还是指向数组对象，输出 <code>sbc</code></p><h2 id="x-总结回顾">12.x 总结回顾</h2><p>所有对象共享的变量设为静态变量，使用类名.变量名访问。</p><p>不直接访问实例变量的方法设为静态方法，使用类名.方法名(实参列表）调用。</p><p>构造器中重复的语句可以抽取放入实例代码块中，每创建一次对象，就在构造器方法执行之前执行一次。</p><p>把在 main 方法执行前的代码放入静态代码块中。</p><p>不想被继承、重写、修改，可以使用 final 修饰。</p><h2 id="y-脑海练习">12.y 脑海练习</h2><p>12.1 控制台上输出？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Test</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）修改错误后...</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getTotalPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        id<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> total<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        total<span class="token operator">++</span><span class="token punctuation">;</span>        id <span class="token operator">=</span> total<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">getTotalPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">getTotalPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span>        age <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span>        flog <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flog<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        age <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>flog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>flog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span>        age <span class="token operator">=</span> <span class="token number">434</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最上面的实例语句块执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        age <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最下面的静态语句块执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Test</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）如果 B 类中的 a 字段是实例变量，在 main 方法中创建 B类型的对象呢？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A构造方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B构造方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">B1</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B1类被加载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">B1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B1无参构造被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B2</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B2类被加载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person类被加载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> country <span class="token operator">=</span> <span class="token string">"中国"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person构造方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        age <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test类被加载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token class-name">B1</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">B2</span> b2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Person</span> p<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>p<span class="token punctuation">.</span>country<span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span>b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> color <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> price <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Car</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Car</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">S</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">S</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"看我干什么，我只是凑个热闹"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">S</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span>        age <span class="token operator">=</span> <span class="token number">66</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 局部变量 age = 局部变量 age，与实例变量 age 无关</span>        age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无聊的无参构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        age <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span>        fole <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> fole <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">252</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token keyword">int</span> fole<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B类的有参构造:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fole <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>fole<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">S</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"S类被加载："</span> <span class="token operator">+</span> <span class="token class-name">A</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">S</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A类被加载："</span> <span class="token operator">+</span> <span class="token class-name">S</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">S</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">S</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"S类被加载："</span><span class="token operator">+</span><span class="token class-name">A</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">S</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A类被加载："</span><span class="token operator">+</span><span class="token class-name">S</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">S</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"S类被加载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">S</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A类被加载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B类被加载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> flog<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test类被加载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>12）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        age <span class="token operator">=</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        age <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> age<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 1.1 语法入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1. JavaSE </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.a 面向对象基础-对象</title>
      <link href="/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.a-mian-xiang-dui-xiang-ji-chu-dui-xiang/"/>
      <url>/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.a-mian-xiang-dui-xiang-ji-chu-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="第十章-面向对象基础-对象">第十章 面向对象基础-对象</h1><p>内容导视：</p><ul><li>类与对象</li><li>实例变量</li><li>实例方法</li><li>构造方法</li></ul><h2 id="类与对象">10.1 类与对象</h2><p>内容导视：</p><ul><li>对象是什么</li><li>面向过程与面向对象</li></ul><p>问题：</p><p>借助韩老师的例子；张老汉也养了两只狗：一只地狱犬，名字叫黑魔王，今年2340 高寿，红黑相加的花纹十分地炫。</p><p>另一只种类为恐惧魔王，名字叫提克迪奥斯，今年 12242岁，是个不按常理出牌的绿色的恶魔。</p><p>要求：当输入名字时，就显示对应的狗的全部信息。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 狗 1 的所有信息</span><span class="token class-name">String</span> dog1Type <span class="token operator">=</span> <span class="token string">"地狱犬"</span><span class="token punctuation">;</span><span class="token class-name">String</span> dog1Name <span class="token operator">=</span> <span class="token string">"黑魔王"</span><span class="token punctuation">;</span><span class="token keyword">int</span> dog1Age <span class="token operator">=</span> <span class="token number">2340</span><span class="token punctuation">;</span><span class="token class-name">String</span> dog1Color <span class="token operator">=</span> <span class="token string">"红黑相加的花纹"</span><span class="token punctuation">;</span><span class="token class-name">String</span> dog1State <span class="token operator">=</span> <span class="token string">"死亡"</span><span class="token punctuation">;</span><span class="token comment">// 狗 2 的所有信息</span><span class="token class-name">String</span> dog2Type <span class="token operator">=</span> <span class="token string">"恐惧魔王"</span><span class="token punctuation">;</span><span class="token class-name">String</span> dog2Name <span class="token operator">=</span> <span class="token string">"提克迪奥斯"</span><span class="token punctuation">;</span><span class="token keyword">int</span> dog2Age <span class="token operator">=</span> <span class="token number">12242</span><span class="token punctuation">;</span><span class="token class-name">String</span> dog2Color <span class="token operator">=</span> <span class="token string">"绿色"</span><span class="token punctuation">;</span><span class="token class-name">String</span> dog2State <span class="token operator">=</span> <span class="token string">"萎靡不振"</span><span class="token punctuation">;</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A：我的狗被你拐到这了？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"B：你好，这里是正规的收容所，"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入遗失的狗的名字："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dog1Name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"种类："</span> <span class="token operator">+</span> dog1Type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"，名字："</span> <span class="token operator">+</span> dog1Name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"，年龄："</span> <span class="token operator">+</span> dog1Age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"，状态："</span> <span class="token operator">+</span> dog1State<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"；很抱歉，我们已经尽力了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dog2Name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"种类："</span> <span class="token operator">+</span> dog2Type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"，名字："</span> <span class="token operator">+</span> dog2Name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"，年龄："</span> <span class="token operator">+</span> dog2Age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"，状态："</span> <span class="token operator">+</span> dog2State<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"；这就还给你！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对不起，我们没有查到此狗的信息！请你到别处咨询！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用局部变量将所有信息拆卸，数据管理麻烦，将来也不好利用，只能将一个个的变量作为方法实参。</p><p>目前就两只狗，如果有 n 条狗，那就需要定义 5n 个变量，效率低下。</p><p>如果使用数组：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dog1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"地狱犬"</span><span class="token punctuation">,</span> <span class="token string">"黑魔王"</span><span class="token punctuation">,</span> <span class="token string">"2340"</span><span class="token punctuation">,</span> <span class="token string">"红黑相加的花纹"</span><span class="token punctuation">,</span> <span class="token string">"死亡"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dog2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"恐惧魔王"</span><span class="token punctuation">,</span> <span class="token string">"提克迪奥斯"</span><span class="token punctuation">,</span> <span class="token string">"12242"</span><span class="token punctuation">,</span> <span class="token string">"绿色"</span><span class="token punctuation">,</span> <span class="token string">"萎靡不振"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>数据类型无法得到体现，因为数组只能存储同一种类型的数据。</p><p>只能通过下标来取数据，造成变量名与内容对应关系不明确，比如单看代码，究竟地狱犬是名字还是黑魔王是名字，没有提示，还有"2340" 是什么；而使用 <code>String dog1Name = "黑魔王";</code>一看就知道这是第 1 只狗的名字。</p><h3 id="对象是什么">10.1.1 对象是什么</h3><p><strong>对象</strong></p><p>每个可以进行研究的任何事物都可以当作一个对象，如整数、棋盘、沙发、狗、飞机...，每个对象都有自己的<font style="color: green;font-weight: bold;">行为</font>和<font style="color: green;font-weight: bold;">状态</font>，比如他家的狗的状态有颜色、品种、名字...；行为、动作有吃、睡觉、玩耍...。</p><blockquote><p>状态也可以被称为属性，实际指代每个对象的数据（信息），但属性还另有他指，注意区分别混淆。</p></blockquote><p><strong>类</strong></p><p>通过观察现实的种种事物，把<mark>具有共同特征的一类事物抽象</mark>出来得到一个类；比如金毛犬、比特犬、田园犬都是狗，是狗类，再抽象一点就是动物类，可以称狗类是动物类的子类。</p><p>用<font style="color: green;font-weight: bold;">类</font> class描述这类事物的共同特征（行为和状态）；用<font style="color: green;font-weight: bold;">字段</font>field代表状态，<font style="color: green;font-weight: bold;">方法</font>method 代表行为。</p><p>当然也可以把类当作组织变量、让变量之间形成联系的一种方式。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 自定义的狗类</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    <span class="token comment">// 字段，保存了狗的状态</span>    <span class="token class-name">String</span> type<span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token class-name">String</span> color<span class="token punctuation">;</span>    <span class="token class-name">String</span> state<span class="token punctuation">;</span>        <span class="token comment">// 方法，表示狗的行为</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"边吃饭边打 Tom 猫。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"满足的打起了瞌睡。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 构造器与继承来的方法以后再讲</span>    <span class="token keyword">public</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token class-name">String</span> type1<span class="token punctuation">,</span> <span class="token class-name">String</span> name1<span class="token punctuation">,</span>               <span class="token keyword">int</span> age1<span class="token punctuation">,</span> <span class="token class-name">String</span> color1<span class="token punctuation">,</span> <span class="token class-name">String</span> state1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        type <span class="token operator">=</span> type1<span class="token punctuation">;</span>        name <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>name1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        age <span class="token operator">=</span> age1<span class="token punctuation">;</span>        color <span class="token operator">=</span> color1<span class="token punctuation">;</span>        state <span class="token operator">=</span> state1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Dog{种类："</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">"，姓名："</span>             <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"，年龄："</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"，颜色："</span> <span class="token operator">+</span> color             <span class="token operator">+</span> <span class="token string">"，状态："</span> <span class="token operator">+</span> state <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例化</strong></p><p>既然类描述了某类事物的共同特征，那么可以把类当成创建对象的模板，只需要创建对象时指定不同的参数，如年龄、品种...，就可以得到不同的具体对象（实例），这个过程就叫<font style="color: green;font-weight: bold;">实例化</font>。</p><p>例：金毛、比特都是狗，甚至同一种品种的狗，但不同的狗性别、年龄、习惯各有不同。可以把Dog 类当作模板，使用 new关键字（调用构造方法传进参数）创建很多的狗，创建的每个狗都是一个实例instance。</p><p>还记得之前讲的引用数据类型吗，我们自定义的类型 Dog 就是。</p><figure><img src="https://s2.loli.net/2022/05/15/s6Xk1wz2EDGIu7N.jpg" alt="两个实例"><figcaption aria-hidden="true">两个实例</figcaption></figure><p>那么之前的问题就可以解决了：</p><p>创建人类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment">// 主人的姓名</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">// 主人拥有的狗</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dog</span><span class="token punctuation">&gt;</span></span> dogList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dog</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 收养狗的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> dogs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dogs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dogList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dogs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">// 寻找狗的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">String</span> dogName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你每天都在找狗..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span> dog <span class="token operator">:</span> dogList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dogName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"你脑海浮现出一段信息："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你突然想起，这只是回忆罢了，都已过去很久了。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你甩了甩脑袋，记忆已经模糊不清了。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在入口方法中勾勒出不同对象之间的行为、交互：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 以狗类为模板创建两个狗对象</span>    <span class="token class-name">Dog</span> dog1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"地狱犬"</span><span class="token punctuation">,</span> <span class="token string">"黑魔王"</span><span class="token punctuation">,</span> <span class="token number">2340</span><span class="token punctuation">,</span> <span class="token string">"红黑相加的花纹"</span><span class="token punctuation">,</span> <span class="token string">"死亡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 new 关键字创建某引用类型的对象，同时调用对应gou'z</span>    <span class="token class-name">Dog</span> dog2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"恐惧魔王"</span><span class="token punctuation">,</span> <span class="token string">"提克迪奥斯"</span><span class="token punctuation">,</span> <span class="token number">12242</span><span class="token punctuation">,</span> <span class="token string">"绿色"</span><span class="token punctuation">,</span> <span class="token string">"死亡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 以人类为模板创建一个主人对象</span>    <span class="token class-name">Person</span> zhangSan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 人类收养了两只狗</span>    zhangSan<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dog1<span class="token punctuation">,</span> dog2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// dog1 睡觉时遗失了</span>    dog1<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"突然有一天再也找不到"</span> <span class="token operator">+</span> dog1<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"了。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 人类开始找狗</span>    zhangSan<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>dog1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然设计类比较麻烦，但是比之前，数据的联系更紧密，使用 dog1这个引用就可以获取此狗的所有信息，如 dog1.name，dog1.age，一目了然。</p><p>像 dog1、dog2变量，它保存了对象的内存地址，这样的变量称为<font style="color: green;font-weight: bold;">对象引用</font>。可以把引用当作电视遥控器，而对象是电视机，通过遥控器访问电视机的不同频道和调节音量大小。</p><p>补充来说，变量有数据类型、变量名、存储的值。dog1是变量名，使用变量名访问保存的数据。如果变量保存的值是对象的内存地址，则这个变量称为引用，真正的对象在堆中。</p><blockquote><p>关于“引用保存了对象的内存地址，指向了堆中的对象，可以通过引用修改对象的状态”我一直抱有疑问，引用真的保存了对象的内存地址吗？究竟是如何通过引用影响对象的，无奈隐藏的比较深，暂时看不出来。</p></blockquote><figure><img src="https://s2.loli.net/2022/05/15/oSt7Gb9lWPjUcX5.png" alt="内存图"><figcaption aria-hidden="true">内存图</figcaption></figure><p>首先在方法区加载相关类的信息、静态变量初始化，执行到 Dog dog1这行代码时使用 new创建了一个狗对象，在堆中开辟空间存储对象的实例变量，赋默认值，再调用构造器完成实例变量的初始化，最后把地址赋给dog1 引用。</p><p>字符串是引用类型，字符串一般放在方法区中的字符串常量池，如对象的 type字段保存的是字符串的内存地址。</p><p>JDK7 时字符串常量池被移到了堆中。</p><h3 id="面向过程与面向对象">10.1.2 面向过程与面向对象</h3><p>其实我有我自己的理解，但是一搜，有那么多博客都转载类似的言论，那就姑且当作是正确的吧。</p><p><strong>面向过程</strong></p><p>碰到了一个问题，需要解决。面向过程是分析出解决问题所需要的步骤，先做什么，再做什么...然后用方法把这个步骤一步一步实现，使用时依次调用就可以了。（自顶而下、逐步求精）</p><p>例：新学期学生到校注册流程</p><figure><img src="https://s2.loli.net/2022/05/15/yE72hacZb4TUwLC.png" alt="模仿"><figcaption aria-hidden="true">模仿</figcaption></figure><p>假如这些信息要存到 txt文件中，按照以上步骤解决问题，如第一步把学生的年龄、身份证号等写入文件中，编写一个方法实现它，需要的时候再调用。（若某一步太过繁杂，难度很大，可以将此步再次细分）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 准备相关变量保存数据</span>    <span class="token class-name">String</span> schoolName <span class="token operator">=</span> <span class="token string">"怕踢中学"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> studentName <span class="token operator">=</span> <span class="token string">"阿衰"</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment">// 把年龄和身份证号写入登记表文件中...</span>    <span class="token comment">// 获取输出流</span>        <span class="token comment">// 把年龄，身份证号写入</span>    <span class="token comment">// 减去学生银行卡号的钱，增加学校的钱...</span>        <span class="token comment">// 先判断余额是否大于支付金额</span>        <span class="token comment">// 是否支付成功</span>        <span class="token comment">// 增加学校钱</span>        <span class="token comment">// 哪一步失败就回退</span>  <span class="token comment">// 把经过认证过的人的信息添加到班级中，成为学生...</span>        <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>面向对象</strong></p><p>不再针对解决问题的先后步骤，而是先从问题中分析出完成事件的有哪些要素和参与对象，设计好模板（类），创建出对象，描述出各个对象在整个过程中发生的动作与行为、与其他对象的交互。</p><p>例：上述有学生、老师、学校、班级，可以先定义类描述共同特征，通过实例化创建对象，让这些对象去执行相应的动作完成学生的注册。</p><p>入口类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建对象</span><span class="token class-name">Student</span> aShuai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">"420425201209099090"</span><span class="token punctuation">,</span> <span class="token string">"阿衰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">School</span> school <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">School</span><span class="token punctuation">(</span><span class="token string">"怕踢中学"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        school<span class="token punctuation">.</span><span class="token function">registerStudent</span><span class="token punctuation">(</span>aShuai<span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用到的类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> idNumber<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> idNumber<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setAget</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setIdNumber</span><span class="token punctuation">(</span>idNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token class-name">School</span> school<span class="token punctuation">,</span><span class="token keyword">int</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 扣阿衰的钱...</span>        <span class="token comment">// 获取阿衰的银行卡号</span>        <span class="token comment">// 卡减钱</span>        <span class="token comment">// 给学校加钱</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">School</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment">// 注册流程</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">registerStudent</span><span class="token punctuation">(</span><span class="token class-name">Student</span> studnet<span class="token punctuation">,</span> <span class="token keyword">int</span> money<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 阿衰给学校加钱</span>        aShuai<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>school<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 怕踢中学添加阿衰的信息</span>    school<span class="token punctuation">.</span><span class="token function">addStudent</span><span class="token punctuation">(</span>aShuai<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 班级添加阿衰信息</span>        c<span class="token punctuation">.</span><span class="token function">addStudent</span><span class="token punctuation">(</span>aShuai<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>面向过程与面向对象的区别</strong></p><p><strong>面向过程</strong></p><p>优点：性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源；比如单片机、嵌入式开发、Linux/Unix 等一般采用面向过程开发，性能是最重要的因素。</p><p>缺点：没有面向对象易维护、易复用、易扩展的优点。</p><p><strong>面向对象</strong></p><p>优点：易维护、易复用、易扩展；由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护。</p><p>缺点：性能比面向过程低。</p><p><strong>自己的想法</strong></p><p>面向对象并不与面向过程对立，<mark>面向过程的程序设计是面向对象的基础</mark>，而从全局的角度来看采用面向对象，但对象调用的方法内部仍是面向过程思想来设计的，如阿衰扣钱的方法里内部使用面向过程的方法解决。</p><p>当逻辑比较简单时，使用面向过程能够更快的实现功能，而面向对象要设计出需要的类，考虑需要字段和方法，很麻烦；</p><p>当逻辑比较复杂时，采用面向对象的思维方式更贴近生活，相比与面向过程零零散散毫无联系的代码，更容易维护，在合理使用配置文件和接口后，可以做到基本不修改原有代码，就可以新增功能；而面向过程一环扣一环，每一步过程的结果都是下一步的前提条件，有了新的需求，又要全盘修改。</p><p>面向对象在我看来就是分类整理，同类数据归于一类。</p><h2 id="实例变量">10.2 实例变量</h2><p>内容导视：</p><ul><li>实例变量的定义</li><li>访问实例变量</li><li>变量的作用域</li><li>堆、栈、方法区</li></ul><h3 id="实例变量的定义">10.2.1 实例变量的定义</h3><p>定义在方法外、类体内的变量称为字段（field），也称成员变量、全局变量。</p><p>字段是类的组成部分，字段的数据类型可以是基本数据类型，也可以是引用数据类型。（数组、接口、其它类)</p><p>一个类拥有的东西（has a），可以以字段的方式存在。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> nationality<span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token class-name">PhoneNumber</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成员变量分为实例变量、静态变量。简单区分，带 static关键字的字段就是静态变量否则就是实例变量。</p><p>我们之前的例子绝大部分都是<font style="color: green;font-weight: bold;">实例变量</font>。通过引用.变量名访问、赋值。</p><p><strong>定义实例变量</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">访问权限修饰符 数据类型 变量名<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token class-name">Dog</span> dog<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>访问权限修饰符，是用于控制访问范围，有 4种：public、protected、默认（什么都不写）、private。用在变量上，是控制变量的访问范围，用在方法上是控制方法使用的范围。</p><p>你可以先试下，后面封装时再讲。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> dogAge <span class="token operator">=</span> dog<span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 错误: age 在 Dog 中是 private 访问控制</span><span class="token comment">// 有 private 修饰的字段，无法在其他类使用引用.字段名访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字段如果不赋值，有默认值，与数组元素默认值一致，这里不再赘述。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// null</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问实例变量">10.2.2 访问实例变量</h3><p>首先我们需要创建对象，然后通过引用访问实例变量。</p><p><strong>创建对象</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">引用数据类型 变量名 <span class="token operator">=</span> <span class="token keyword">new</span> 引用数据类型<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以先声明，后赋值：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Dog</span> dog<span class="token punctuation">;</span><span class="token comment">// 此时变量没有保存任何值</span>dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 开辟存储空间创建一个对象，把对象的地址赋给 dog，dog 被称为对象引用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>引用类型的变量可以赋值为 null，代表空，没有指向任何对象；使用值为null 的引用访问对象的实例变量、实例方法时，就会报<font style="color: green;font-weight: bold;">java.lang.NullPointException</font>空指针异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">int</span> age <span class="token operator">=</span> dog<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>访问实例变量</strong></p><p>引用名.字段名</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> name <span class="token operator">=</span> dog<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token comment">// 使用变量接收</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>赋值</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">dog<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"大黄"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="变量的作用域">10.2.3 变量的作用域</h3><p>全局变量的作用域为整个类体，局部变量的作用域为声明它时的域（{}）中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span><span class="token comment">// 作用域为整个类体，如 some 方法中可以访问到 age</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2</span>        <span class="token comment">//System.out.println(i);// 找不到符号,变量 i</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">// 局部变量 i 只在 other 方法内有效</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>全局变量可以不赋值直接使用，因为有默认值；局部变量必须赋值后才能使用。</p><p><strong>其他规则</strong></p><ol type="1"><li><p>全局变量可以与局部变量重名，直接访问变量时，遵循就近原则。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">// 实例变量</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"小名"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 小名</span>        <span class="token comment">/*        要是实在想访问实例变量 age        this 代表当前调用此方法的对象        */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实例变量和静态变量的生命周期较长，实例变量伴随对象的创建而分配空间，伴随对象的销毁而销毁；静态变量只要程序加载了此类，该类的静态变量就会被分配空间，程序结束后释放空间。</p><p>局部变量生命周期较短，伴随代码块、方法的执行而被创建，执行结束被销毁。比如调用方法时会在栈中开辟空间，创建局部变量，方法执行结束后，栈空间被释放，局部变量被销毁。</p></li><li><p>全局变量可以被本类和其它类使用（只要有对象引用即可），局部变量只能在本类声明它时的域中使用。</p></li><li><p>不同方法之间的局部变量即使名字相同，也不是同一块空间。（以后还会详细说明）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    i <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">// 你修改的是这个方法的 i 变量保存的值，不影响下面的 i</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token function">some</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>局部变量不能加访问权限修饰符 和 static 修饰符。</p></li></ol><h3 id="堆栈方法区">10.2.4 堆、栈、方法区</h3><p>粗略的介绍，因为这东西不是能够一眼看穿，比较底层，难以感知它的存在。</p><p><strong>方法区</strong></p><p>方法区最先有东西，存储类的加载信息（代码片段）、字符串常量池、静态变量等。</p><p><strong>栈</strong></p><p>方法被调用时，在栈中分配空间，存储局部变量（基本数据类型的值和对象的内存地址）及运行过程需要的内存。</p><p>数据进来叫“进栈”、“入栈”、“压栈”、“push”，出去叫“出栈”、“弹栈”、“pop”。最先进来的最后出去，最后进来的最先出去。</p><figure><img src="https://s2.loli.net/2022/04/24/9Bd8zm3AExbwKCj.png" alt="b 后进先出"><figcaption aria-hidden="true">b 后进先出</figcaption></figure><p>每调用一个方法，就会开启新的一个栈（方法不调用，不会开启新栈），压在原有栈的上面。栈帧指的是栈顶部的元素（如现在的b），只有栈帧才有活跃权，调用者 a 需要等待被调用的方法 b执行完毕释放空间后才能执行接下的代码。</p><p>当最上面的栈执行完毕后，就会释放空间，轮到下一个。</p><p>每个栈中的局部变量是相互独立的，不会互相影响。</p><p>当不停的开启新栈，而不释放空间，栈内存满了会报java.lang.StackOverflowError栈溢出错误。方法递归和循环引用时，最容易出现此问题。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        new Test();创建了一个对象，会调用此无参构造完成初始化        而无参构造会先调用父类即 Object 的无参构造方法；                接着显示初始化实例变量 test，然而 Test test = new Test();        也创建了对象，会调用无参构造，而无参构造会先调用父类即            Object 的无参构造方法；接着显示初始化 test...                一直循环下去，直到栈内存和堆内存总有一个空间不够        */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>堆</strong></p><p>使用 new关键字创建的对象都会保存在堆中。对象中的实例变量、包括从父类继承过来的实例变量都有默认值，通过调用构造器完成对象的初始化。</p><p>堆只有一个，被所有栈共享。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">short、byte、int、long 类型的字段的默认值是 0float、double 是 0.0char 是空，对应十六进制是 0x0000boolean 是 falseString 和其它引用类型是 null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接输出引用时，会自动调用 toString 方法（是从顶级父类 Object继承得来的），toString方法默认会返回<code>对象数据类型的完整类名@十六进制的哈希码值</code>。</p><p>hashCode方法会返回一个整数（哈希码值），哈希码值是将对象的内部地址转为整数得到的，可以看做是对象的内存地址。同一个对象调用hashCode 方法时，返回的哈希码值一定相同。</p><h2 id="实例方法">10.3 实例方法</h2><p>内容导视：</p><ul><li>实例方法的定义</li><li>调用实例方法</li><li>返回值类型</li><li>形式参数列表</li><li>方法重载</li><li>可变参数</li></ul><p>通常我会将实例变量与实例方法统称为实例相关的。</p><h3 id="实例方法的定义">10.3.1 实例方法的定义</h3><p>定义在类体中的方法称为<font style="color: green;font-weight: bold;">成员方法</font>，对应对象的行为。</p><p>成员方法分为实例方法和静态方法。</p><p>简单的讲下它们的区别：实例方法需要创建对象，使用引用.方法名调用。而静态方法多了一个static 修饰，使用类名.方法名调用，如果在同类下可以省略类名。</p><p>也就是说光定义方法不用，方法里的语句是不会执行的；换言之，因为 main方法是由 JVM 调用，那么我们需要在 main方法中写调用此方法的语句即可。</p><p><strong>定义实例方法的语法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">访问权限修饰符 返回值数据类型 方法名<span class="token punctuation">(</span>形式参数<span class="token number">1</span><span class="token punctuation">,</span> 形式参数<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    方法体<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>方法体由一句句的 java 语句构成；</p><p>方法名遵循驼峰命名，在实际工作中，要见名知意，表明这个方法的功能。</p><p>我们先从最简单的没有返回值 void、没有形式参数列表讲起。</p><h3 id="调用实例方法">10.3.2 调用实例方法</h3><p>想要调用某类的实例方法，首先需要此类的实例，通过引用.方法名调用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行 some 方法中的语句..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 先创建此类的实例，再通过引用.方法名调用</span>        <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                test<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// new Test().some(); 如果此对象不再使用，这样也行</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外我还听过一种有趣的说法：“调用方法的行为有时被称为向对象发送消息。面向对象编程可以总结为：向对象发送消息”。</p><p>此外在实例方法中调用本类方法，直接通过方法名调用即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"其它方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为调用实例方法，一定先要有实例，如 引用.some(），那么当执行到other(）这句时，就是此实例在调用 other 方法，所以引用.可以省去。</p><p><strong>方法的好处</strong></p><p>需求：遍历 10 遍二维数组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">621</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时需求又改了，在遍历之前打印“好嗨呦”，捉急啊！</p><p>但是如果将遍历封装成一个方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"好嗨呦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后使用引用调用此方法即可；现在代码不长，感觉没什么，以后几百行，千行代码完成一个功能，你在A、B、C...类都要用这个方法，难道还要手动把这些代码复制到 A、B、C 的 main方法内吗？如果把代码放入某类的方法中，只需要写一次，让其它类通过方法名调用即可。</p><p>方法<font style="color: green;font-weight: bold;">提高了代码的复用性</font>，可以把它当成为了完成某个特定功能，且可以重复利用的代码片段。</p><p>将实现的细节封装起来，其它人只需看 API文档知晓方法作用后调用即可，不需要关心底层细节，如<code>Arrays.sort(arr);</code>你并不需要了解排序算法，也能够使用它对数组进行排序。</p><h3 id="返回值类型">10.3.3 返回值类型</h3><p><strong>返回值类型为 void</strong></p><p>void 代表什么都不返回。</p><p><strong>其它返回值类型</strong></p><p>如果期待方法执行完毕后需要返回一个值，这个值的类型就是返回值类型；使用<code>return 值;</code>。（如果返回的值可以自动转成返回值类型也算）</p><p>一个方法最多只能返回一个值，由于 return语句的执行代表着方法的结束，程序回到调用者处，所以 return只能是最后执行的一条语句。（确保 return语句一定能够执行）（同一个域中，在 return之后不能再有其它语句，否则执行不到，是无效的语句）</p><p>作为调用者而言，可以接收有返回值的方法返回的值，也可以不接收。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// int 代表返回值的类型为 int，或者可以自动转成 int 类型</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 调用 some 方法，可以选择接收返回值，或者不接收</span>    <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="形式参数列表">10.3.4 形式参数列表</h3><p>方法括号中定义的变量，简称形参，每个参数都是局部变量，调用方法时传入实参赋值：</p><ul><li>参数可以是 0 到 n 个</li><li>参数之间使用逗号分隔</li><li>调用方法时，按对应类型、个数、顺序传入实际参数。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比如上面，那我们调用时传入三个实参，分别是 int、String、char 类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">引用<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"你好"</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这相当于</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">"你好"</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以使用变量作为实参。</p><p><strong>值传递</strong></p><p>之前在一维数组的数组赋值机制中，也说过 Java采用值传递，方法接收的是实参值的拷贝。一个方法不能修改实参保存的值，<mark>但可以修改实参指向的实例的状态。</mark></p><p>基本数据类型：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token function">some</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 100</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">int</span> i2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 与变量名无关，可以把 i2 改成 i1</span>    i2 <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/22/58ngYK7e9pE4asX.png"></p><p>引用数据类型：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">'h'</span><span class="token punctuation">,</span><span class="token char">'a'</span><span class="token punctuation">,</span><span class="token char">'i'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">some</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// hai</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 与变量名无关，可以把 c2 改成 c1</span>    c2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/22/Hkn3TNVKPvjQRwE.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">'h'</span><span class="token punctuation">,</span><span class="token char">'a'</span><span class="token punctuation">,</span><span class="token char">'i'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">some</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// wai</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 与变量名无关，可以把 c2 改成 c1</span>    c2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'w'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/22/8pBEYhkzSRarKfy.png"></p><h3 id="方法重载">10.3.5 方法重载</h3><p><strong>方法签名</strong></p><p>方法名与形式参数列表合并称为方法签名（signature of themethod），方法签名作为方法的唯一标识，同类中方法签名不能重复，即同一个类不能存在重复的方法，否则就无法区分调用的是哪个方法。</p><p><strong>方法重载</strong></p><p>同一个类中，方法名相同，但形参列表不同的两个方法构成重载。</p><p>方法名相同很好理解，而形参列表不重复，是指参数的个数、类型、顺序至少有一样不同。</p><p>如下面就构成重载：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">boolean</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意了，顺序不同，是指不同类型的顺序，而不是靠变量名区分顺序：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// some(int,int)方法已定义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>返回值类型、变量名都与方法重载无关，这个很好理解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在使用调用方法：<code>引用.some(2);</code>是不是没办法区分调用的是谁？返回值有但我可以不接收。</p><p><strong>方法重载的好处</strong></p><p>减轻了起名与记名的麻烦，拿打印方法举例：</p><figure><img src="https://s2.loli.net/2022/05/16/1Y3GcwHzPps4EhJ.png" alt="System.out.println"><figcaption aria-hidden="true">System.out.println</figcaption></figure><h3 id="可变参数">10.3.6 可变参数</h3><p>可变参数的本质是数组，可以直接将同类型的数组实例当成实参。</p><p>类似于将同名、参数类型相同但参数个数不同的方法封装成了一个方法。</p><p><strong>语法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">数据类型<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 变量名<span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strs    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>它代表着 0 ~ n 个此数据类型的参数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用此方法，可以传递 0 ~ n 个 int 类型的实参，如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">引用<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>引用<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>引用<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>引用<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>引用<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>引用<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>引用<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于可变参数长度无法确定，所以它只能放在形参列表中的最后 1个位置；换言之，形参列表中最多只能出现一个可变参数。</p><h2 id="构造方法">10.4 构造方法</h2><p>内容导视：</p><ul><li>构造方法定义</li><li>默认无参构造器</li><li>this</li></ul><h3 id="构造方法定义">10.4.1 构造方法定义</h3><p>构造方法也称构造器，调用时在栈中分配空间，是一种特殊的方法，定义时不用写返回值类型，方法名必须与类名一致！</p><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">访问权限修饰符 类名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span> <span class="token punctuation">{</span>    方法体<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在调用构造方法之前，对象已经创建好了，在堆中分配了空间，实例变量有默认值；构造方法执行结束后，返回这个对象的地址，赋给引用，从而让外部程序可以访问到此对象。（如果实例只使用一次也可以不赋给引用，直接调用实例方法）</p><p>一般我们通过调用<mark>构造方法来完成实例变量的初始化</mark>，在创建对象时根据传入实参的不同调用对应构造器。对的，构造器可以不止一个，构成重载。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">// 构造器1</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 接收到实参，将实参保存的值赋给 name</span>        name <span class="token operator">=</span> name1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 构造器2</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        age <span class="token operator">=</span> age1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 调用构造器1，传入实参"张三"</span>        <span class="token class-name">Person</span> zs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zs<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 张三</span>                <span class="token comment">// 调用构造器2</span>        <span class="token class-name">Person</span> ls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ls<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zs<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ls<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// null</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然调用的可能是同一个构造器，通过传入实参的不同，每个实例都有自己独有的一份数据。</p><figure><img src="https://s2.loli.net/2022/05/16/wu3EOLZKcpr1Cn2.png" alt="粗略表示图"><figcaption aria-hidden="true">粗略表示图</figcaption></figure><h3 id="默认无参构造器">10.4.2 默认无参构造器</h3><p>不知道你们发现没有？如果手动定义了有参构造器，则 newTest(）就会报错；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token keyword">int</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为当没有定义构造器时，编译器会自动生成一个默认的无参构造器（缺省构造器），它的访问权限修饰符与声明类时的访问权限修饰符一致；当定义了构造器时，默认无参构造就失效了；可以通过反编译<code>javap 类名</code> 命令测试。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 编译后生成了 Test.class，再执行 javap Test，结果如下：</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span><span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 反编译字节码，可以看到没有提供无参构造</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>面对这种情况，我们通常会手动添加无参构造。</p><h3 id="this">10.4.3 this</h3><p>对象创建时，JVM 会给对象分配一个指向自身的引用 this，this保存着自身的内存地址。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// this 指代正在初始化的对象</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张胜男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 可以通过引用.变量名区分</span><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"它"</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>p2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"不好"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>this类似于中文的“自己”，“自己”指的不是“张三”，也不是“李四”，而是说出这句话的人。</p><p>在实例方法中：</p><p>this 指向“调用此方法的实例”，实例方法肯定需要实例调用，那么谁调用的方法，this就是谁。</p><p>p1 实例调用 setName 方法，那么方法中的 this 指向的就是 p1 实例；p2实例调用 setName 方法，那么 setName 方法中的 this 指向的就是 p2实例。</p><p>一般情况下，this. 可以省去；当局部变量与实例变量重名时，需要添加this. 加以区分。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token class-name">String</span> hobby<span class="token punctuation">;</span><span class="token comment">// 由于可以通过 this. 区分，所以没必要刻意取名</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> hobby<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hobby <span class="token operator">=</span> hobby<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了访问字段，this 也可以调用方法，this.方法名(实际参数列表）。</p><blockquote><p>this 在实例方法中作为第一个参数（隐含）</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">U</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token class-name">U</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// this. 可以省略</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>调用其它构造器</strong></p><p>this(实际参数列表），只能在构造方法中的第一句出现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> hobby<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hobby <span class="token operator">=</span> hobby<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以减少重复代码，不过这种方式，当实例变量太多时，很容易就不小心就传错参数，看着也很累赘。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"爱好：打篮球"</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token string">"姓名：坊仓"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以使用链式编程，想要初始化哪些字段，就调用对应方法完成赋值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">U</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">U</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">U</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">U</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">U</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">=</span> d<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">U</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">U</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>this 只能在实例方法、构造器中使用。（因为访问静态方法不需要实例）</p></blockquote><h2 id="x-总结回顾">10.x 总结回顾</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">数据类型 引用名 <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>引用名<span class="token punctuation">.</span>实例变量名引用名<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span>实际参数列表<span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>构造方法用于完成实例变量的初始化；this指代自身，只能出现在与实例相关的地方。</p><p>同一个类中，方法名相同但形式参数列表不同（顺序、个数、类型至少有一个不同）的方法构成重载。</p><p>每调用一个方法就是开启了一个新的栈，栈中存储局部变量及运行过程需要的内存；不同方法内创建的局部变量即使名字相同，也不是同一块内存空间，互不影响。</p><p>创建的对象存储在堆中。</p><h2 id="y-头脑风暴">10.y 头脑风暴</h2><p>10.1 在 AA 类编写一个静态方法，判断一个整数是奇数还是偶数，奇数返回false，偶数返回 true。</p><p>10.2 分析如下代码，控制台上会输出什么？</p><p>1）在类 A 中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"swap 中 a："</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"swap 中 b："</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main 中 a："</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main 中 b："</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）在类 B 中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10.3 类 Person 中，分析输出什么？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    p <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>    <span class="token class-name">Person</span> p1 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p <span class="token operator">==</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age <span class="token operator">==</span> p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p1<span class="token punctuation">.</span>age <span class="token operator">=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token keyword">return</span> p1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>    <span class="token class-name">Person</span> p1 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p <span class="token operator">==</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age <span class="token operator">==</span> p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> p<span class="token punctuation">;</span>p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">333</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10.4 一共有 ？个桃子。每天猴子吃其中的一半加 1 个桃子，当第 10天时，准备吃，一看，只剩 1 个桃子了，请问 ？的值为？</p><p>10.5 有 1 个迷宫由二维数组组成。1 代表墙，0代表可通行。现有一球在左上角（1，1）处，要求到右下角（7，7），记录小球走过的路径。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token number">1</span> q <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10.6 如图，把 A 中的 n 个圆盘全部移到 C中。要求：大圆盘不能放在小圆盘上面，每次只能移动一个圆盘，如何移动。</p><figure><img src="https://s2.loli.net/2022/05/16/yxPd6p2v8YzDusw.png" alt="移动圆盘"><figcaption aria-hidden="true">移动圆盘</figcaption></figure><p>10.7 在一个 8*8 格的棋盘摆放 8个棋子，要求：任意两个棋子之间不能处于同一行、同一列、同一斜线。共有几种摆法？</p><p>10.8设计一个类，完成与电脑的猜拳，电脑随机出石头、布、剪刀，要求显示输赢次数。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1 语法入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1. JavaSE </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.b 面向对象中级-继承</title>
      <link href="/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.b-mian-xiang-dui-xiang-zhong-ji-ji-cheng/"/>
      <url>/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.b-mian-xiang-dui-xiang-zhong-ji-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="第十一章-面向对象中级-继承">第十一章 面向对象中级-继承</h1><p>内容导视：</p><ul><li>包机制</li><li>封装</li><li>继承</li><li>多态</li><li>顶级父类 Object</li></ul><h2 id="包机制">11.1 包机制</h2><p>内容导视：</p><ul><li>包的介绍</li><li>包的命名规则</li><li>导入类</li><li>有可能遇见的错误</li><li>打 jar 包</li></ul><h3 id="包的介绍">11.1.1 包的介绍</h3><p>那么多类，如果我创建的类刚好与导入的类的名字一样怎么办？如我经常创建Test 类测试 demo 代码，那么多的 Test 类如何区分？</p><p>为了解决上述问题，Java引入了包（package）机制，提供了类的多层命名空间，用于解决类的命名冲突、类文件管理等问题。</p><p>包允许将类组合成较小的单元（类似文件夹），它基本上隐藏了类，并避免了名称上的冲突。包允许在更广泛的范围内保护类、数据和方法。你可以在包内定义类，而在包外的代码不能访问该类。这使你的类相互之间有隐私，但不被其他世界所知。</p><p>有时，开发人员还可能需要将处理同一方面的问题的类放在同一个包下，以便于管理。</p><p>比如关于我创建的有序集合类都放在 com.cqh.list下，本质是把类放在了模块的绝对路径/src/com/cqh/list 下。</p><p><strong>包的作用如下</strong>：</p><ol type="1"><li>区分相同名称的类。</li><li>能够较好地管理大量的类。</li><li>控制访问范围。</li></ol><h3 id="包的命名规则">11.1.2 包的命名规则</h3><p><strong>命令规则</strong></p><p>只能包含数字、字母、下划线、小圆点。不能以数字开头，不能是关键字，反例如下：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">com.12abc，错，不能以数字开头com.class.abc，错，class是关键字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>命名规范</strong></p><p>因为域名是唯一的，所以以域名的倒序作为包名可以确保唯一性。</p><p>小写字母+小圆点</p><p>com.公司名.项目名.业务模块名.功能名</p><p>如 com.baidu.egov.system.utils 是 egov项目的系统模块的工具类所在包名。</p><p><strong>java 中常用的包</strong></p><p>java.lang.*，lang 包是基本包，默认导入，不需要 import，如Math、System、String...</p><p>java.util.*，util 包下的类主要是常用的工具类，如Scanner、Arrays...</p><p>java.net.*，网络包，用于网络开发</p><p>java.awt.*， 图形用户界面开发，简称 GUI</p><p>java.swing.*，对 awt 的改良</p><p><strong>实际使用</strong></p><p>创建好目录，比如 com/cqh，在 cqh 目录下创建 .java源文件，在首行加入</p><p><code>package com.cqh;</code></p><p>package 是一个关键字，声明本类所在包；package 语句只能写在 java源代码的 import 和类定义的上面，最多只能写一句；不写是默认包。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cqh</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导入类">11.1.3 导入类</h3><p>如 Scanner 在 java.util 下，那么 Scanner 的完整类名（全类名）为java.util.Scanner，即所在包+类名，那么 Scanner 是简单类名。</p><p><strong>导入单一类</strong></p><p>首行加上 <code>import 此类的完整类名;</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token class-name">Scanner</span> scanner<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>导入某包下的所有类</strong></p><p><code>import 包名.*;</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token class-name">Scanner</span> scanner<span class="token punctuation">;</span>    <span class="token class-name">Random</span> random<span class="token punctuation">;</span>    <span class="token class-name">Arrays</span> arrays<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>import java.util.*，导入 util 下的所有类，但不包括 util的子目录下的所有类</p></blockquote><p><strong>导入某类下的静态变量</strong></p><p><code>import static 此类的完整类名.静态变量名</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token static">out</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>细节</strong></p><ul><li>只能导入被 public 修饰的类</li><li>同一个包下的类直接使用，不需要导入</li><li>import 放在 package 下，类定义上，可以有多句，没有顺序要求</li><li>不可导入多个简单类名相同的类，其余简单类名相同的类，只能写完整类名</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cqh</span><span class="token punctuation">;</span><span class="token comment">// 导入了 junit 下的 Test</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 想要使用其它包下的 Test 类，就只能写完整类名</span>        <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>arr<span class="token punctuation">.</span></span>Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>arr<span class="token punctuation">.</span></span>Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 如果使用简单类名，会被当作是 org.junit.Test</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// org.junit.Test</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>arr<span class="token punctuation">.</span></span>Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// com.cqh.arr.Test</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="有可能遇见的错误">11.1.4 有可能遇见的错误</h3><p><strong>错误：找不到或无法加载主类</strong></p><p>通过类路径+完整类名可以定位类的位置，如<code>E:\cqh_demo01-javaSE\package\src\com\cqh\Scanner.class</code>，这个class 类的完整类名如果是<code>com.cqh.Scanner</code>，则<code>E:\cqh_demo\01-javaSE\package\src</code> 就是它的类路径。</p><p>运行时，要指定完整类名，如<code>java com.cqh.Scanner</code>，类路径默认是当前路径。他会在当前路径下找Scanner.class。</p><p>而通常会 cd进入<code>E:\cqh_demo\01-javaSE\package\src\com\cqh</code> 也就是 class文件所在目录，再使用这个运行命令，相当于在<code>E:\cqh_demo\01-javaSE\package\src\com\cqh\com\cqh</code> 找Scanner 类，一定找不到，除非你编译时，使用 -d 参数指定把生成的 class文件放在当前目录。</p><p>几种解决方法</p><ul><li><p>跳转至类路径，输入命令 <code>java 完整类名</code></p></li><li><p>加 -classpath 或 -cp 参数，指定类路径</p></li></ul><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">java -cp E:\cqh_demo\01-javaSE\package\src com.cqh.Scanner<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>配置环境变量 classpath，重启 DOS 窗口，输入<code>java 完整类名</code></p><p>. 代表当前路径，如果省去了，就不会在当前路径下寻找。</p><p><img src="https://s2.loli.net/2022/05/18/ZzGNaPsY1gubnHj.png"></p></li></ul><p><strong>找不到符号，程序包 xxx.xxx 不存在</strong></p><p>编译比较简单，可以跳转至 java 文件所在目录，直接<code>javac 源文件名.java</code> 就可以在当前目录下生成 class文件；或者运行时为了免去切换目录的麻烦，直接在类路径下输入<code>javac com/cqh/Scanner.java</code>，注意编译时路径以斜杆分隔，而不是. 号。</p><p>或者指定类路径<code>javac -cp E:\cqh_demo\01-javaSE\package\src Scanner.java</code></p><p>此外源文件，要保证包名与实际目录位置一致，如 M 的确在 com/cqh/util目录下；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">M</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编写的 Test 类导入 M 类时</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cqh</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>cqh<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">M</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">M</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译 Test 类时，会在当前路径的 com/cqh/util 寻找 M，如果你是跳转到Test.java 所在目录<code>E:\cqh_demo\01-javaSE\package\src\com\cqh</code>进行编译，那肯定找不到，要跳转至类路径下，<code>javac com/cqh/Test.java</code>。</p><h3 id="打-jar-包">11.1.5 打 jar 包</h3><p>目录层次结构</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">outsrccomcqhTest.java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>jar 包是一种压缩格式，主要把生成的有目录结构的 class文件合并到一个文件里，生成 .jar 的后缀。</p><p>先要得到不含源文件干净的目录</p><p>默认使用 javac 命令生成的 class 文件与源文件是同级目录，可以加 -d参数指定 class 文件生成的位置。</p><p>比如放在上级目录的 out 目录下，类路径下输入<code>javac -d ..\out com\cqh\Test.java</code></p><p>测试入口类依赖的 class 文件是否都编译进来了：进入 out目录下，使用命令<code>java com.cqh.Test</code>，如果找不到类，肯定某个字节码文件没有在out 目录正确的位置下，自己手动移下。</p><p>在 src 下创建 META-INF 文件夹，新建文件MANIFEST.MF，注意要在末尾添加一行空行</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">Manifest-Version: 1.0Created-By: cqhMain-Class: com.cqh.Test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Main-Class 是入口类的完整类名</p><p>到 out 目录下，输入命令<code>jar cvfm cqh.jar ..\src\META-INF\MANIFEST.MF .</code></p><p>out 目录下就生成了 cqh.jar 包，<code>java -jar cqh.jar</code>就可以运行。</p><p>如果在其它路径下，可以通过 classpath 变量或 -cp 参数指定类路径：</p><p><code>java -cp E:\cqh_demo\01-javaSE\package\out\cqh.jar com.cqh.Test</code></p><p>双击运行 jar 包，创建 runJar.bat 文件，内容如下：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">@echo offjava -jar %1pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>jar文件右键，打开方式/选择其它应用/在这台电脑上查找其它应用，选择使用runJar.bat 打开；以后双击 jar 包就行。</p><p><strong>IDEA 中打 jar 包</strong></p><p>打开 Project Structure/Artifacts，按下 + 号，JAR/From modules withdependencies...</p><figure><img src="https://s2.loli.net/2022/05/18/zVlsaSdCJi4U36I.png" alt="jar"><figcaption aria-hidden="true">jar</figcaption></figure><p>Module：选择将哪个模块下的类打成 jar 包</p><p>Main Class：选择入口类</p><p>OK 后指定 jar 包的生成位置，Output directory，去掉 Output Layout中多余的目录，只保留依赖的 jar 包和当前模块的 complie output</p><p>OK 后点击菜单栏的 Build Artifact/Build，在指定位置就生成了 jar文件。</p><h2 id="封装">11.2 封装</h2><p>内容导视：</p><ul><li>访问权限修饰符</li><li>封装实现步骤</li><li>JavaBean 与 Property</li></ul><p>面向对象编程三大特征：封装、继承、多态</p><h3 id="访问权限修饰符">11.2.1 访问权限修饰符</h3><p>一共有四种访问权限修饰符，用来控制类、方法、成员变量的访问范围。</p><p>public、protected、default、private</p><hr><p>public：公开的，所有地方的类都可以访问它。</p><p>protected：受保护的，只对同一个包下的类或子类公开，但子类中不能通过父类引用直接访问。</p><p>例，如果父类与子类不在同一个包下，则在子类中只能通过子类引用访问父类中的被protected 修饰的方法。</p><p>default：默认级别，不用写修饰符，只对同一个包下的类公开。</p><p>private：私有，只有本类才能访问。</p><p>比如私有级别的字段，同包下访问不了（即使是子类实例访问父类的实例相关的）</p><hr><p><strong>其它方面</strong></p><ul><li>类访问权限只有默认和 public 级别。</li><li>默认级别的类只能在同包下的类中使用，其它包下的类导入不了此类。（因为默认级别只对本类和同包下的类的开放）</li><li>被 private 修饰的构造方法，其它类无法访问此构造方法，也就无法通过new创建此类的对象；同理，创建此类的子类时，由于子类的构造器会自动调用父类构造器，但又无法访问到，所以会报错。</li></ul><p>编写类实现功能的过程中，有部分方法只供开发者使用，由于外来者不可能详细地去了解每一个方面，这样也比较浪费精力；但如果随便公开，供他们调用，又很容易出错，所以将这些方法的权限设为private，不对外公开。</p><p>如堆排序的 adjust方法，第一次构建大顶堆时要从最后一个分支结点开始往前比较，第一次调用方法时传入的i 应等于 n / 2 - 1；创建好后就可以从第 1个结点开始与自己的子结点比较，此时调用 adjust 方法传入的 i 应等于0。</p><p>但是对不了解堆排序的人说，是不是太过于勉强，文档注释也不太可能描述的那么详细，清清楚楚告诉你什么时候传n / 2 - 1，什么时候再传0；是的，你当然可以学习排序，弄清楚该传什么，但是调一个方法就要求必须掌握底层原理后才能使用，否则很容易出错，未免显得太过于苛刻。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">adjust</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么我们可以将 adjust方法设为私有，隐藏它，禁止外来者调用，然后再提供一个公开的方法，隐藏内部的繁琐的实现细节，文档注释写好，提供API 文档供人翻阅。</p><p>也就是说使用者可以不用关心 adjust方法，了解内部原理；他们只需要知道调用 sort方法能够对数组进行排序就可以了。</p><p>由于使用者无法调用 adjust，即使删掉此方法，重新换个实现也是 OK的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 对 arr 数组内的元素进行排序（顺序） */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">adjust</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> n <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">adjust</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子：电视机里的关键部分被包裹在壳中，只提供外面的按钮供人开关、调台，不需要你关心内部的细节也可以使用。</p><h3 id="封装实现步骤">11.2.2 封装实现步骤</h3><p>封装（encapsulation），将字段私有化，然后对外提供访问入口；也就说只能通过提供的公开方法，才能够对数据进行操作，有效的保护了数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上例，年龄可以为负值吗？</p><p><strong>实现步骤</strong></p><ol type="1"><li>将字段私有化，外部无法直接修改和访问字段</li><li>提供公开的 set 方法（set +字段首字母大写），可以判断数据是否合理，对字段赋值</li><li>提供公开的 get 方法（get +字段首字母大写），用于外部类获取字段值</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment">// 将字段私有化</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 注意，这里不能用 this.age = age，否则就绕过了 set 方法的验证环节</span>        <span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 提供公开的 get 方法，供其他类读取 age 字段值</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 提供公开的 set 方法，对字段赋值</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> age <span class="token operator">&gt;</span> <span class="token number">130</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄应为 0 ~ 130 之间，已设默认值 20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在想要修改 Person 类的实例，只能通过 set方法，避免不合理的数据；类的内部数据操作细节自己控制，不允许外部干涉，仅对外暴露少量的方法使用。</p><p><strong>好处</strong></p><ul><li>隐藏实现细节</li><li>可以对数据进行验证，保证数据安全合理</li></ul><p><strong>其它</strong></p><p>布尔类型的字段生成的 get 方法名是 is +字段首字母大写，如果共同遵守规范，那么仅凭方法名就可以知晓是 boolean类型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> deleted<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDeleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> deleted<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="javabean-与-property">11.2.3 JavaBean 与 Property</h3><p><strong>JavaBean</strong></p><p>JavaBean 是符合一定规范的 Java类，是可重用组件。它的方法命名、构造以及行为必须符合特定的要求：</p><ol type="1"><li><p>类有 public 修饰</p></li><li><p>所有字段为 private 修饰</p></li><li><p>这个类必须具有一个公共的（public）无参构造函数</p></li><li><p>字段必须提供 public 的 get 和 set 方法供外界访问</p></li><li><p>这个类是可序列化的，要实现 Serializable 接口</p></li></ol><p>bean 通常作为DTO（数据传输对象），用来封装值对象，在各层之间传递数据。</p><p><strong>Property</strong></p><p>property 就是 JavaBean 中定义的 set 和 get 方法名去掉 set 或 get得到的字符串首字母小写。</p><p>如 getAge(）方法，属性是 age。</p><p>大多数情况，属性名和实例变量名保持一致，这样不会造成困惑。</p><p><img src="https://s2.loli.net/2022/05/18/cDJWif2v15xjLoN.png"></p><p>c：class 类</p><p>p：property 属性</p><p>m：method 方法</p><p>f：field 字段</p><h2 id="继承">11.3 继承</h2><p>内容导视：</p><ul><li>继承</li><li>super</li><li>方法重写</li></ul><h3 id="继承-1">11.3.1 继承</h3><p>重复的代码片段可以封装成方法供其它地方的类调用；那么如果是多个类中的代码重复呢？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"飞天遁地无所不能！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"看门守家我最行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时用继承可以解决代码复用，当多个类存在相同的字段和方法时，可以从这些类抽象出父类，在父类定义这些相同的字段和方法，然后子类使用关键字<code>extends</code>继承父类，就自动拥有了父类的字段和方法，只需要<mark>定义自己特有的字段和方法</mark>。</p><p>父类又称超类、基类；子类又称派生类、扩展类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>继承的好处</strong></p><ul><li>减少代码冗余，提高了代码的复用性</li><li>是方法重写与多态的前提</li><li>提高了代码的扩展性和维护性（给父类新增一个字段，全部子类就有了这个字段）</li><li>上面一条即是优点也是缺点，耦合度高，父类修改了，子类也会受牵连</li></ul><p><strong>细节</strong></p><ul><li>子类继承了父类的所有字段与方法（没有继承父类的构造器）</li><li>子类虽然不能直接访问父类中的私有字段和私有方法，但可以通过父类提供的非私有的方法访问（提供公开的get 方法供子类访问）</li></ul><p>所有类的顶级父类是 Object，（不写 extends，默认继承 Object）比如 Bextends A，那么 B 的父类是 A，A 的父类是 Object；A 拥有了 Object的方法，如 hashCode、toString、equals 方法，B 继承 A 的同时也就拥有了Object 的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> hashCode <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hashCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子类最多直接继承一个父类（单继承），不支持 extends A, B这种写法，那么如何让 A 继承 B 和 C 的字段和方法呢？答：让 A 继承 B，B继承 C。</p><blockquote><p>多继承会有些麻烦，如果直接继承的父类们有相同的字段，子类使用super.字段名会引用不明确。</p></blockquote><p>不能滥用继承，子类和父类之间必须满足 is a的逻辑关系，比如猫是一个动物，猫才能继承动物，Cat extendsAnimal；可以说子类是对父类的一种扩展。</p><p><strong>初始化父类字段</strong></p><p>子类的构造器默认在第一行调用父类的无参构造器（不可见），初始化从父类继承的字段。（父类字段由父类初始化，子类字段由子类初始化，因为父类字段有可能是private，子类访问不了）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A 类构造器执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以父类的无参构造器必须得有，同时能够被子类访问到，否则就会报错；如果不想有子类，就可以把构造器设为private。</p><p>好，接下来再看看如何指定调用父类的其它构造器。</p><h3 id="super">11.3.2 super</h3><p><code>super(实际参数列表);</code>只能出现在构造器的第一句，用来指定调用父类的对应构造器。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>this()</code> 与 <code>super()</code>都只能放在构造器的第一句，不能共存，但最后还是会调用父类的构造器。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果调用 B的无参构造，就会跳转至本类的另一个构造器，而此构造器如果没写<code>this()</code>，第一句默认还是 <code>super()</code>就会调用父类的无参构造，除非子类的构造器都有 <code>this()</code>且形成了一个循环，但显然不可能，因为构造器不允许递归调用。</p><p>由于在执行子类的构造器（可见部分）前会执行父类的构造器，那么往上追溯，直到Object 类的无参构造器。</p><p>super 除了可以访问父类构造器外，还可以访问父类的字段、方法</p><p><code>super.字段名</code>、<code>super.方法名(实际参数列表)</code></p><p>特别是父类与子类的方法、字段重名时：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，这里的父类并不仅限于直接父类。</p><p><strong>过程</strong></p><p>this 先看本类是否有此字段，如果没有就往上（父类）找，在父类中...</p><ul><li>如果有，但不能访问（private），报错</li><li>如果有，可以访问，直接返回值</li><li>如果没有，继续上找；如果直到顶级父类 Object类，还未能找到此字段，就报错</li></ul><p>而 super 直接从父类开始找，如果就往父类的上面找。</p><h3 id="方法重写">11.3.3 方法重写</h3><p>方法重写也称方法覆盖，子类中有一个方法与父类的某个方法的名称、返回类型、形式参数列表一样，就说子类的这个方法覆盖父类的此方法。</p><p>当父类的方法不能满足子类的要求，就需要在子类中重写它。<mark>创建子类对象，通过对象引用访问父类的实例方法时，就会调用子类重写后的方法</mark>。</p><p>继承开头的例子，父类 Animal 的 play方法很明显不能显示出子类的个性，需要重写，建议直接拷贝此方法的定义到子类处。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"飞天遁地无所不能！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"看门守家我最行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 飞天遁地无所不能！</span>        <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 看门守家我最行！</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如何重写</strong></p><ul><li><p>两个类要有继承关系</p></li><li><p>子类重写后的方法的形式参数列表、方法名称（方法签名）要与父类的完全一样，建议直接复制父类方法的定义</p></li><li><p>子类重写后的方法的返回值类型要么与父类方法的返回值类型一样，要么是父类方法返回值类型的子类（因为可以自动转成父类的返回值类型）</p></li><li><p>子类重写后的方法的访问权限不能比父类的更低（当通过父类引用调用此方法时，结果运行时子类对象因访问权限不足无法调用此方法，这不是很可笑吗？）</p></li><li><p>子类重写后的方法能够抛出的异常类型要么与父类抛出的异常一致，要么为父类异常的子类型（可以抛出多个）</p><blockquote><p>方法默认抛出 RuntimeException</p></blockquote></li></ul><p><strong>注意</strong></p><p>1）父类中无法被访问到的方法无法被子类重写，如 private修饰的方法；正常情况下，重写错误会给出提示：</p><figure><img src="https://s2.loli.net/2022/05/19/rVOMjcpNRBW1xaf.png" alt="如返回类型不兼容所以无法覆盖父类的此方法"><figcaption aria-hidden="true">如返回类型不兼容所以无法覆盖父类的此方法</figcaption></figure><p>但是当父类方法无法被直接访问到，如把这个方法的访问控制权限设为private，就不会报错。</p><p><img src="https://s2.loli.net/2022/05/19/aveQ4EUfNA8SpMg.png"></p><p>为了确定是否真的重写，可以在方法之上加一个注解 <span class="citation" data-cites="Override">@Override</span>，既可以验证是否重写，也是一个标记，标记这个方法是重写父类后的方法。如：</p><p><img src="https://s2.loli.net/2022/05/19/pS6f4xrl3TYcb5w.png"></p><p>2）不需要重写静态方法，因为静态方法使用类名.方法名访问，与实例无关。（在多态时再详细解释）</p><p><img src="https://s2.loli.net/2022/05/19/bxfXFSCWq3Bouh7.png"></p><p>3）不能重写 final （最终的，不可修改的）修饰的方法</p><p>4）构造方法不能被继承，自然也不能重写</p><p>5）方法重写与字段无关</p><h2 id="多态">11.4 多态</h2><p>内容导视：</p><ul><li>多态</li><li>例子</li><li>向上转型与向下转型</li><li>过程</li></ul><h3 id="多态-1">11.4.1 多态</h3><p>方法重写是配合多态使用的，否则完全可以定义另一个方法。</p><p><mark>父类型的引用允许指向子类型的对象</mark>，引用的编译类型可以与实例的类型不一致，即</p><p>允许 <code>Animal a = new Cat();</code> 。</p><p>Animal 称为编译类型，new Cat(）称为运行类型或引用的实际类型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 动物代码在方法重写中</span><span class="token keyword">class</span> dynamic <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 不确定调用的是哪个实例的 play 方法</span>        a<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果调用 some 方法传入的是 new Cat(），Animal a = new Cat(）。</p><p>some 方法内部调用了 a 的 play方法，大家都知道调用实例方法，得先有一个实例，然后调用此实例所在类的实例方法，a指向的是 Cat 类的实例，所以调用的是 Cat 类中的 play方法（本类没有就往父类找），所以输出<code>飞天遁地无所不能！</code>；</p><p>如果传入的是 new Dog(），同理调用的是 Dog 类的 play 方法，输出<code>看门守家我最行！</code>。</p><p>...</p><p>引用究竟指向哪个实例对象，编译期不确定，只有运行时才能确定调用的是哪个子类对象重写后的方法。这样仅改动一点代码就可以把引用绑定到不同的类实例上，让程序拥有了多个运行状态，这就是多态。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">play</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">play</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多态和方法重写配合使用，在定义方法时，形参类型定义为父类。使用时，无需修改父类的代码，如Animal 的 play 方法，只需要编写更多的子类重写 play方法就实现功能扩展。</p><p>由于这个方法的形参可以接收所有子类型的对象，运行时真正执行的方法是传入引用的实际类型的方法（即重写后的方法）。可以降低程序的耦合度，提高程序的扩展力。</p><p>多态是指：<mark>针对某个实例方法的调用，根据运行时引用的实际类型不同，展现的状态也不同。</mark></p><hr><p>之前说过，静态方法没必要重写，这是因为静态方法使用类名调用，与实例无关，传什么都是一样的状态，就算传null，也不会报空指针异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">other</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// A</span>        <span class="token function">other</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// A</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">other</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 调用静态方法时，会自动转成 A.some(); 与实例无关</span>        a<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对比下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">other</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// A</span>        <span class="token function">other</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// B</span>        <span class="token function">other</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// NullPointerException</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">other</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="例子">11.4.2 例子</h3><p>需求：收养不同的动物喂不同的食物</p><p>食物与它的子类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Food</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Fish</span> <span class="token keyword">extends</span> <span class="token class-name">Food</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Fish</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Bone</span> <span class="token keyword">extends</span> <span class="token class-name">Food</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Bone</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Rice</span> <span class="token keyword">extends</span> <span class="token class-name">Food</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Rice</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>动物与它的子类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"喵喵叫，在你臂上划了三条痕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"兴奋地摇起了尾巴，大舌头舔湿了你的脸~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Pig</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Pig</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"吭哧吭哧~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>人类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在人类中加入给动物喂食的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 给狗喂骨头</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span><span class="token class-name">Dog</span> dog<span class="token punctuation">,</span> <span class="token class-name">Bone</span> bone<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"给"</span> <span class="token operator">+</span> dog<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"喂食"</span> <span class="token operator">+</span> bone<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 给猫喂鱼</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span><span class="token class-name">Cat</span> cat<span class="token punctuation">,</span> <span class="token class-name">Fish</span> fish<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"给"</span> <span class="token operator">+</span> cat<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"喂食"</span> <span class="token operator">+</span> fish<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    cat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 给...喂...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Person</span> zs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Dog</span> wc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Bone</span> bone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bone</span><span class="token punctuation">(</span><span class="token string">"小骨头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zs<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span>wc<span class="token punctuation">,</span> bone<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 张三给旺财喂食小骨头</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果针对某一子类具体写代码，那么每来一种动物，都需要在 Person类新增一个喂食方法。代码复用性不高，不利于代码维护。</p><p>但是如果把它当作父类型处理，那么就能囊括所有子类型。（面向父类、抽象、接口编程，而不对具体编程）</p><p>将 feed 方法的形参改为父类型：使用多态（Polymorphic）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> a<span class="token punctuation">,</span> <span class="token class-name">Food</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"给"</span> <span class="token operator">+</span> a<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"喂食"</span> <span class="token operator">+</span> f<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 实例方法的调用根据运行类型，而不是编译类型。</span>    a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正是由于多态机制，父类型的引用可以容纳子类型的对象，更加通用了。</p><p>这样来再多的动物，不用新增 feed 方法，也可以对它喂食。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Person</span> ls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Cat</span> tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"汤姆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Bone</span> bone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bone</span><span class="token punctuation">(</span><span class="token string">"鱼骨头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               ls<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span>tom<span class="token punctuation">,</span> bone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要想达到多态的效果，必须要运行时才能确定调用哪个方法，编译时不知道哪一段代码会执行。</p><p>有人也许会说，不对啊，我明眼人一看，在 main 方法内调用 feed方法时传入了 Cat 类型的实例，编译器怎么可能不知道是调用 Cat 类的 eat方法，非要得到运行时才能确定？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> ww <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 随机生成 [0, 99] 内的整数</span><span class="token keyword">int</span> i <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">35</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"小黄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Bone</span> bone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bone</span><span class="token punctuation">(</span><span class="token string">"猪骨头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ww<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span>dog<span class="token punctuation">,</span> bone<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">65</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Pig</span> pig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pig</span><span class="token punctuation">(</span><span class="token string">"佩奇"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Rice</span> rice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rice</span><span class="token punctuation">(</span><span class="token string">"大米"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ww<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span>pig<span class="token punctuation">,</span> rice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token class-name">Cat</span> tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"汤姆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Bone</span> bone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bone</span><span class="token punctuation">(</span><span class="token string">"鱼骨头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ww<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span>tom<span class="token punctuation">,</span> bone<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，你还能在编译时就能确定调用的是哪个动物类的 eat 方法吗？</p><blockquote><p>前期绑定：在编译期时将一个方法调用与一个方法关联。</p><p>动态绑定：运行时才能根据实际类型确定调用哪个方法。</p></blockquote><h3 id="向上转型与向下转型">11.4.3 向上转型与向下转型</h3><p><strong>向上转型</strong></p><p>本质：父类的引用指向子类的对象</p><p>语法：<code>父类类型 引用名 = new 子类类型();</code></p><p>特点：编译类型看左边，运行类型看右边。调用实例方法的最终运行效果看子类的具体实现。</p><p>缺点：能访问哪些方法和字段主要看编译类型，不能访问子类中特有的字段和方法。</p><p>使用父类作为形参已然确定了作为实参的子类对象能够调用哪些方法。</p><p><strong>向下转型</strong></p><p>语法：<code>子类类型 引用名 = (子类类型)父类引用;</code></p><p>强转的是引用的数据类型，而不是对象的类型。并且只有当父类的引用指向的是子类类型的对象，才能强转成该子类类型，否则报java.lang.ClassCastException 异常。</p><p>可以通过 instanceof 关键字，判断引用指向的对象类型是否为 xxx 类型或xxx 类型的子类，然后再转成 xxx。</p><p>向下转型后，可以调用子类中的所有方法和字段（遵循访问控制权限）。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> b <span class="token operator">=</span> o <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token comment">// 如果 o 的实际类型是 String 类型，就将其强转为 String 类型</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>    <span class="token comment">// 强转后，就可以访问 String 类独有的方法</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="过程">11.4.4 过程</h3><p>引用能够访问哪些方法与字段，与编译类型有关（与实际类型无关）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> a<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token comment">// 找不到符号</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token class-name">String</span> s <span class="token operator">=</span> a<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token comment">// 找不到符号</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用引用调用实例方法：</p><ul><li>编译时，看编译类型是否有此方法，找不到就往上找，直到Object；如果还没有找到，报错</li><li>运行时，从引用的实际类型所在类开始找，找到了直接调用，没找到继续上找；</li></ul><p>使用引用访问字段：</p><ul><li>看编译类型是否有此字段，找不到就往上找，直到Object；如果还没有找到，报错</li><li>字段没有动态绑定机制，与实际类型无关</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token comment">// 55</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token comment">// 55</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="顶级父类-object">11.5 顶级父类 Object</h2><p>Object类是所有类的顶级父类、超类，常用的方法如下</p><p>内容导视：</p><ul><li>getClass</li><li>equals</li><li>hashCode</li><li>toString</li><li>finalize</li><li>clone</li></ul><h3 id="getclass">11.5.1 getClass</h3><p>获取引用的运行时类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//class java.lang.String</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="equals">11.5.2 equals</h3><p>equals 方法用于判断两个对象是否相等，默认比较两个对象的内存地址。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以根据自己的需要，重写此方法更改比较规则。</p><p>公认的：内容相等且是同一类型的两个对象，就认为它们相等，比如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Time</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> second<span class="token punctuation">;</span>    <span class="token keyword">int</span> minute<span class="token punctuation">;</span>    <span class="token keyword">int</span> hour<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果两个对象的内存地址相等，则返回 true</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/*        如果 o 为空，或者它们的运行类型不一致，就返回 false        如果需求是子类对象也可以参与比较，条件可以改为 !(o instanceof Time)        */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 往下转型，为了访问子类的特有字段</span>        <span class="token class-name">Time</span> time <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>                <span class="token comment">// 如果两个对象的时分秒都相同，则返回 true</span>        <span class="token keyword">return</span> second <span class="token operator">==</span> time<span class="token punctuation">.</span>second <span class="token operator">&amp;&amp;</span> minute <span class="token operator">==</span> time<span class="token punctuation">.</span>minute <span class="token operator">&amp;&amp;</span> hour <span class="token operator">==</span> time<span class="token punctuation">.</span>hour<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 有参构造略</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Time</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Time</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Time</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Time</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t1 <span class="token operator">==</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在内容相同就认为相等的前提下，引用数据类型的实例变量不能使用双等号比较，而是使用equals 方法。（确保重写过了）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">Time</span> time<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>                <span class="token comment">// String、Time 类的 equals 方法都已经重写过了，是内容相等就返回 true</span>        <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> time<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们总是习惯将肯定不为 null 的引用放在前面，以免出现空指针异常：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不会出现空指针异常</span>    <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 当传入的 s 为 null 时，就会出现空指针异常</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>又或者使用 Objects 的 equals、hashCode 方法...</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> a<span class="token punctuation">,</span> <span class="token class-name">Object</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> o <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> o<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>!(o instanceof Time）return false</strong></p><p>现在有子类 Date 继承了Time，<mark>如果子类有自己的比较规则</mark>，重写了 equals方法，<code>o instanceof Date</code>；</p><p>对于有着相同数据的 date 和 time 对象，time.equals(date）时，date作为参数 o，date 是 Time 的子类，所以 o instanceof Time 为 true，date 与time 相等。</p><p>date.equals(time），time 作为参数 o，Time 不是 Date 的子类，oinstanceof Date 为 false，date 与 time 不相等。</p><p>出现了矛盾，所以必须采用 getClass ==o.getClass，父类与子类比较，直接返回 false。</p><p>如果由父类决定相等的概念（不允许子类重写equals），允许在不同类型的子类中比较，就可以使用 instanceof。</p><h3 id="hashcode">11.5.3 hashCode</h3><p>返回对象的哈希码值。支持此方法是为了便于使用 java.util.HashMap提供的哈希表。</p><p>hashCode 方法重写的一般约定是： 在 Java应用程序执行期间，只要在同一个对象上多次调用它，hashCode方法必须始终返回相同的整数，前提是没有修改对象上 equals比较中使用的信息。该整数不需要从应用程序的一次执行到同一应用程序的另一次执行保持一致。</p><ul><li>同一对象调用 hashCode 必须返回同一整数</li></ul><p><mark>如果两个对象根据 equals方法比较相等，则对两个对象中的每一个，调用 hashCode方法必须产生相同的整数结果</mark>。没有要求不等的两个对象调用 hashCode方法时必须产生不同的整数结果。</p><ul><li>经 equals 比较相等的两个对象的 hashCode 必须一致，不相等的两个对象的hashCode 不要求一定不一致</li></ul><p>但是，程序员应该意识到，<strong>为不相等的对象生成不同的整数结果可能会提高哈希表的性能</strong>。在合理的范围内，类Object 定义的 hashCode 方法确实为不同的对象返回不同的整数。（这通常通过将对象的内部地址转换为整数来实现，但 Java编程语言不需要这种实现技术。</p><p>所以当 equals 重写后，hashCode方法也应该重写，相同的内容返回的哈希码值应一致。</p><p>在 equals 这节的例子当作，认为只要时分秒相等，则 equals 比较返回true，那么重写后的 hashCode方法也是一样，只要时分秒相等，就返回相同的整数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>second<span class="token punctuation">,</span> minute<span class="token punctuation">,</span> hour<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p>如果没有兴趣了解底层细节，可跳过。</p><p>Objects 类中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Objects.hash 方法实际调用的是 Arrays 类的 hashCode 方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里不得不说，当实参为基本数据类型时，如 4，会自动调用对应包装类型的valueOf 方法获得实例，把数据封装到实例的value，所以传入的实际是引用类型。</p><p>Arrays 类中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token class-name">Object</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 当什么都没传入，返回 0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 遍历一维数组，得到每一个元素</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> element <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 结果与元素的 hashCode 方法相关</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span>element <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> element<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如 Boolean 的 hashCode 方法：当 value 为 false 时，返回 1237；为 true时，返回 1231。</p><p>Integer 的 hashCode 方法返回 value。</p><p>String 的 hashCode 方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> hash<span class="token punctuation">;</span><span class="token comment">// hash 默认为 0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 如果 h 不等于 0，直接返回 h</span>        <span class="token keyword">char</span> val<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            h <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> h <span class="token operator">+</span> val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        hash <span class="token operator">=</span> h<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> h<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>求 hashCode：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> b<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 略</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> hashCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hashCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际是求 hashCode(5, false, "abc"）；</p><p>new Integer(5）的 hashCode 为 5；</p><p>new Boolean(false）的 hashCode 为 1237；</p><p>"abc".hashCode 为 96354。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">h = 0h = 31 * 0 + 'a' = 97h = 31 * 97 + 'b' = 3105h = 31 * 3105 + 'c' = 96354<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所以 <code>new A().hashCode</code> 为 169297</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">result = 1;result = 31 * 1 + 5 = 36;result = 31 * 36 + 1237 = 2353result = 31 * 2353 + 96354 = 169297<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p>对于int 类型的一维数组的实例变量，由于它们没有重写 hashCode方法，所以不可以直接传入 Objects.hash 方法，否则即使内容相同，返回的hashCode 也不一致：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 460141958</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1163157884</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以借助 Arrays 的 hashCode 方法，遍历 int 数组得到每个元素5，6，9，由此计算出 hashCode。</p><blockquote><p>如果直接将 arr 或 arr1 传入 Objects 的 hash方法，由于它是将一维数组当成了数组中的元素 Object[] o = {arr};那么得到的 hashCode 就与一维数组的 hashCode 相关。</p></blockquote><blockquote><p>对于 int类型的二维或更高维的数组，则需要遍历得到每个一维数组，再分别传入 Arrays的 hashCode 方法累加。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>重写过 hashCode 方法的引用类型的元素                              <span class="token punctuation">,</span> 基本数据类型的元素<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 一维数组单独拿出来计算 hashCode</span>    result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="tostring">11.5.4 toString</h3><p>直接输出引用时，会自动调用 toString 方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 完整类名@十六进制的 hashCode</span>    <span class="token keyword">return</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cqh</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// com.cqh.A@1b6d3586</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重写 toString 方法，一般用于显示该对象的字段等信息：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"大黄"</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Dog {年龄："</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"，姓名："</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Dog {年龄：5，姓名：大黄}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="finalize">11.5.5 finalize</h3><p>当某个对象没有任何引用时，JVM就认为这个对象是一个垃圾，使用垃圾回收器销毁该对象，销毁对象前，调用finalize 方法。</p><p>垃圾回收机制的调用由自己的 GC 算法决定（我的是大概超过 20万个垃圾才会清理），也可以尝试调用 System.gc 方法建议 JVM启动垃圾回收机制。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">System.gc()：运行垃圾收集器。调用 gc 方法表明 Java 虚拟机花费精力回收未使用的对象，以使它们当前占用的内存可用于快速重用。从方法调用到返回时，Java 虚拟机已尽最大努力从所有丢弃的对象中回收空间。调用 System.gc() 实际上等效于调用： Runtime.getRuntime().gc()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从 JDK 9 开始，finalize 方法被标记为deprecated，意味着废弃。由于我们没办法控制 GC 发生的时间，JVM也不一定会调用它，依赖此方法释放资源是有很大的不确定性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Test</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token string">"实例"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 断掉引用与对象的连接</span>            t <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"启动垃圾回收机制"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>System.gc 方法是异步的：不用等待 gc 方法执行完毕，就可以执行 gc后面的代码。</p></blockquote><h3 id="clone">11.5.6 clone</h3><p>创建并返回对象的副本，是浅拷贝，只拷贝字段保存的值（包括地址），并没有拷贝实例中的引用类型的变量指向的对象。</p><p>造成的后果是如果原有变量修改此实例指向的变量的内容，也会影响被克隆的实例。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Clone</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Clone</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>赋值：没有创建新的对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>                <span class="token class-name">Clone</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clone</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> i1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Clone</span> c2 <span class="token operator">=</span> c1<span class="token punctuation">;</span>                <span class="token comment">// 修改 c1 的实例的字段，会影响 c2 的字段</span>        c1<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1 <span class="token operator">==</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浅拷贝：没有创建新的实例变量指向的对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>                <span class="token class-name">Clone</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clone</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> i1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> c1<span class="token punctuation">.</span>a<span class="token punctuation">;</span>        <span class="token keyword">int</span> i2 <span class="token operator">=</span> c1<span class="token punctuation">.</span>b<span class="token punctuation">;</span>                <span class="token class-name">Clone</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clone</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 修改 c1 实例的 a 字段指向的数组的元素，会影响 c2 的 a 字段</span>        c1<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>深拷贝：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>                <span class="token class-name">Clone</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clone</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> i1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>c1<span class="token punctuation">.</span>a<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c1<span class="token punctuation">.</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c1<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> i2 <span class="token operator">=</span> c1<span class="token punctuation">.</span>b<span class="token punctuation">;</span>                <span class="token class-name">Clone</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clone</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 修改 c1 实例的 a 字段指向的数组的元素，不会影响 c2 的 a 字段</span>        c1<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重写 clone 方法，深拷贝：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>    <span class="token comment">// 得到浅拷贝的实例</span>    <span class="token class-name">Clone</span> clone <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Clone</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将实例变量 a 也拷贝一份赋给 clone 的 a 变量</span>    clone<span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> clone<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此方法是 protected修饰，所以只能在同包或本类中访问；同时被克隆的类要实现 Cloneable接口，否则会报 CloneNotSupportedException 不支持克隆异常。</p><p>Cloneable 接口不包含任何方法，只是作为标记，代表子类允许克隆。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>子类对象 <span class="token keyword">instanceof</span> <span class="token class-name">Cloneable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    开始浅拷贝<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    抛出异常<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Clone</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token class-name">Clone</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clone</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Clone</span> c2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Clone</span><span class="token punctuation">)</span> c1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1 <span class="token operator">==</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>        c1<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="x-总结回顾">11.x 总结回顾</h2><p>使用包机制用于解决类的命名冲突、类文件管理等问题，包名由小写字母组成。</p><table><thead><tr class="header"><th style="text-align: center;">访问控制修饰符</th><th style="text-align: center;">本类</th><th style="text-align: center;">同包</th><th style="text-align: center;">子类</th><th style="text-align: center;">任意位置</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">public</td><td style="text-align: center;">√</td><td style="text-align: center;">√</td><td style="text-align: center;">√</td><td style="text-align: center;">√</td></tr><tr class="even"><td style="text-align: center;">protected</td><td style="text-align: center;">√</td><td style="text-align: center;">√</td><td style="text-align: center;">√</td><td style="text-align: center;">×</td></tr><tr class="odd"><td style="text-align: center;"></td><td style="text-align: center;">√</td><td style="text-align: center;">√</td><td style="text-align: center;">×</td><td style="text-align: center;">×</td></tr><tr class="even"><td style="text-align: center;">private</td><td style="text-align: center;">√</td><td style="text-align: center;">×</td><td style="text-align: center;">×</td><td style="text-align: center;">×</td></tr></tbody></table><p>字段或方法不想被其它类访问到，使用 private 修饰符。</p><p>封装隐藏内部实现细节，保证数据安全。</p><p>继承解决多个类中代码重复的问题。子类会继承父类的字段与方法，但父类修改也会影响子类。</p><p>构造器第一句默认调用父类构造器，用于初始化子类的父类型特征。</p><p><strong>super 与 this 的比较</strong></p><p>当子类和父类有相同的字段和方法时，访问父类使用 super.xxx。</p><p>访问字段或方法时，this 是从本类开始寻找，如果没有才往上找，super是从父类开始寻找。</p><p>this 代表当前对象，使用 this.xxx 更多时候是为了区分同名局部变量。</p><p>都只能出现在实例方法和构造器中。</p><p><strong>重载与重写的区别</strong></p><p>重载为了减轻记名和取名的麻烦，让功能相似的方法的名一致；重写是父类的方法无法满足要求。</p><p>重载是在同一个类中，要求：方法名相同，形参列表不同（顺序、个数、类型至少有一个不同），对于返回类型与修饰符无要求。</p><p>重写在父子类中，要求：方法名相同，形参列表相同，子类返回类型与父类返回类型一致或是其子类，子类的访问控制权限不能比父类更低，子类抛出的编译时异常范围不能比父类的更大。</p><p>重写与字段、静态方法无关。</p><p><strong>多态</strong></p><p>父类的引用指向子类型的对象，运行时才能根据实际类型决定调用哪个实例方法。</p><p><strong>Object 的方法</strong></p><p>基本数据类型比较相等使用 “==”，引用类型使用 equals 方法。</p><p><strong>== 与 equals 的对比</strong></p><p>==可以判断两个基本类型的变量保存的值是否相等，也可以判断引用类型保存的内存地址是否相等，即是否指向的是同一个对象。</p><p>equals默认实现判断引用类型的内存地址是否相等，需要重写判断两个对象的内容是否相等。</p><p><strong>hashCode</strong></p><p>使用 equals 比较返回 true 的两个引用，调用 hashCode返回的整数应一致。</p><p><strong>finalize</strong></p><p>使用 finalize 完成资源释放不太可靠，已被废弃。</p><h2 id="脑海练习">11.7 脑海练习</h2><p>11.1 控制台上输出什么？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是 A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是 B 的无参构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"我是 B 的有参构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是 C 的无参构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"呵呵"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"我是 C 的有参构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Sub</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Base</span> b <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A类的some方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B类的some方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11.2 哪里有误？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">13.4</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> d<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">)</span> i<span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> objI <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> objI<span class="token punctuation">;</span>        <span class="token class-name">Integer</span> objI1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> objI<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 1.1 语法入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1. JavaSE </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.9 IntelliJ IDEA 使用</title>
      <link href="/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.9-intellij-idea-shi-yong/"/>
      <url>/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.9-intellij-idea-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="第九章-intellij-idea-使用">第九章 IntelliJ IDEA 使用</h1><p>内容导视：</p><ul><li>介绍</li><li>创建普通 JavaSE 项目</li><li>常用的设置</li><li>常用快捷键</li><li>自定义模板</li><li>断点调试</li><li>其它</li></ul><h2 id="介绍">9.1 介绍</h2><p>内容导视：</p><ul><li>介绍</li><li>下载与安装</li><li>卸载</li><li>详细的教程</li></ul><h3 id="介绍-1">9.1.1 介绍</h3><p>IDE 即<a href="https://baike.baidu.com/item/集成开发环境/298524">集成开发环境</a>，可以把编写代码、组织项目、编译、运行、调试放在一个环境下，极大提高开发效率。</p><p>有快捷键一键生成代码与注释；写代码会有自动提示补全方法名；会自动检查代码中有误的地方并给出提示选择方案修改错误；查看类与类的关系、此类的所有方法和字段等。</p><p>目前最流行用于 Java 开发的 IDE 是 IntelliJIDEA，因为确实好用，整合主流框架十分轻松，极大提升开发代码的效率。</p><p><strong>介绍</strong></p><p>IDEA 是 JetBrain 公司的其中一款产品，官网：<a href="https://www.jetbrains.com">https://www.jetbrains.com</a></p><p>其它产品如 WebStorm 用于开发 JavaScript、HTML5、CSS3 等前端技术。</p><p>IDEA 全称 IntelliJ IDEA，是 Java语言的集成开发环境，在业界被公认为是最好的 java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、Ant、JUnit、CVS 整合、代码审查、创新的 GUI设计等方面的功能可以说是超常的。</p><p>IDEA 也支持主流的技术与框架，擅长企业应用、移动应用和 WEB工具的开发。</p><p><strong>相比 Eclipse 的优势</strong></p><ul><li>强大的整合能力，比如 Git、Maven、Spring 等</li><li>提示功能的快速、便捷</li><li>提示功能的范围广</li><li>好用的快捷键与代码模板</li><li>精准搜索</li></ul><h3 id="下载与安装">9.1.2 下载与安装</h3><p>下载地址：<a href="https://www.jetbrains.com/idea/download/#section=windows">https://www.jetbrains.com/idea/download/#section=windows</a></p><p>有 Ultimate 旗舰版和 Community社区版，社区版是免费的，旗舰版支持的功能更多，如协同远程开发、数据库工具、前端语言、JavaEE等，两个版本的详细对比：<a href="https://www.jetbrains.com/products/compare/?product=idea&amp;product=idea-ce">JetBrainsProducts Comparison</a>，需要付费，可以先试用一个月，选择其一点击Download 下载，.exe 与 .zip 随意（exe 直接双击，zip 需要解压缩）</p><p>您不需要安装 Java 来运行 IntelliJ IDEA，因为 JetBrains 运行时与 IDE捆绑在一起（基于 JRE 11）。但是，如果要开发 Java应用程序，还需要一个独立的 JDK。</p><p>安装方法：<a href="https://www.cnblogs.com/along-technology/p/14767535.html">IDEA的安装 - 阿龙er</a>、<a href="https://zhile.io/">知了（zhile.io)</a>、<a href="https://www.yuque.com/docs/share/2769545b-0eec-44f7-a035-4de147736f6a?#">【汇总】Jetbrains全家桶</a></p><p><font style="color:red">请勿无限制重置，有能力请支持正版！本文中资源全部收集整理于网络并无偿提供，仅可用于个人学习交流；请勿转载、售卖或商用；侵权删！</font></p><p>汉化：<a href="https://blog.csdn.net/qq_35067322/article/details/105429832">https://blog.csdn.net/qq_35067322/article/details/105429832</a></p><p>目录结构</p><ul><li>bin：启动文件、虚拟机配置信息等</li><li>help：帮助文档</li><li>jbr：自带的 jre</li><li>lib：依赖的类库</li><li>license：插件的许可信息</li><li>plugins：插件</li></ul><p>bin 目录下的 idea64.exe.vmoptions 文件是虚拟机的配置信息</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">-Xmx750m// 最大内存，将数值调大可以提高程序性能-Xms128m// 初始内存-XX:ReservedCodeCacheSize=512m// 保留代码的缓存大小-XX:+UseG1GC// 垃圾优先收集器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><font style="color:red">请勿添加注释</font></p><p><code>C:\Users\用户名\AppData\Local\JetBrains\IntelliJIdea2021.2</code>存放（system）系统临时、缓存、本地历史文件等</p><p><code>C:\Users\用户名\AppData\Roaming\JetBrains\IntelliJIdea2021.2</code>存放（config）插件、文件模板、快捷键等文件</p><h3 id="卸载">9.1.3 卸载</h3><p>控制面板/卸载程序，或 Windows 设置/应用</p><p>点击要卸载的应用；且手动删除内容如下：软件的安装目录、system 与config、代码存放目录。</p><p>一个 project 项目就是一个工作窗口，一个项目可以有多个 module模块，每个模块里面都有 src 目录存放着 *.java源文件；除了创建空项目，每个项目都自带一个模块。</p><h3 id="详细的教程">9.1.4 详细的教程</h3><p>官方详细使用文档：<a href="https://www.jetbrains.com/help/idea/installation-guide.html#standalone">https://www.jetbrains.com/help/idea/installation-guide.html#standalone</a></p><p>IntelliJ IDEA使用教程：<a href="https://lixuekai.blog.csdn.net/article/details/77449117">https://lixuekai.blog.csdn.net/article/details/77449117</a>，作者：请叫我大师兄</p><h2 id="创建普通-javase-项目">9.2 创建普通 JavaSE 项目</h2><p>内容导视：</p><ul><li>创建普通项目</li><li>切换项目</li><li>删除项目、模块</li><li>窗口结构</li><li>可能会遇见的错误</li><li>创建 Java 源文件</li></ul><h3 id="创建普通项目">9.2.1 创建普通项目</h3><p>创建一个新项目：Projects/New Project/java</p><figure><img src="https://s2.loli.net/2022/05/08/dnMTeuQBkla2riC.png" alt="New Project"><figcaption aria-hidden="true">New Project</figcaption></figure><p>如果没有配置 JAVA_HOME 环境变量，就不会显示 SDK，需要 Add JDK... 指定JDK 的安装目录；</p><figure><img src="https://s2.loli.net/2022/05/08/jX48zatin7KPGuq.png" alt="下一步 next"><figcaption aria-hidden="true">下一步 next</figcaption></figure><p>Project name 是项目名，Project location 是此项目的路径，Finish即可。</p><p><strong>创建空项目</strong></p><p>还可以创建一个空项目，模块由自己手动创建。</p><figure><img src="https://s2.loli.net/2022/05/08/IpbFudq6Pl4aHQV.png" alt="空项目"><figcaption aria-hidden="true">空项目</figcaption></figure><p>会弹出一个 Project Structure 窗口，点击 New Module 创建模块。</p><figure><img src="https://s2.loli.net/2022/05/08/V4CPKuk9jfIdUTi.png" alt="New Module"><figcaption aria-hidden="true">New Module</figcaption></figure><p>或者 Alt + F 快捷键选择 New 可以创建 Module，或项目右键 NewModule，或 Ctrl + Shift + Alt + S 打开 Project Structure/Modules 按下 +号，点击 New Module。</p><figure><img src="https://s2.loli.net/2022/05/08/uRJX4bfpGNeSmqK.png" alt="File/New/Module..."><figcaption aria-hidden="true">File/New/Module...</figcaption></figure><h3 id="切换项目">9.2.2 切换项目</h3><p>在多个项目之间切换是 Open Recent，关闭项目 Close Project；</p><figure><img src="https://s2.loli.net/2022/05/08/PZrK1wkRopgSIAq.png" alt="项目之间切换"><figcaption aria-hidden="true">项目之间切换</figcaption></figure><h3 id="删除项目模块">9.2.3 删除项目、模块</h3><figure><img src="https://s2.loli.net/2022/05/08/o7p3Muk1dyfRUWB.png" alt="关闭项目后的界面"><figcaption aria-hidden="true">关闭项目后的界面</figcaption></figure><p>可以单击想要操作的项目即可进入或者点击 Open Selected。</p><p>Show in Explorer 可以打开文件资源管理器的项目所在目录；Remove fromRecent Projects是删除此项目，但硬盘上还在；删除此项目后把文件资源管理器对应的项目选中按下Shift + Del 快捷键永久删除。</p><p>而删除模块有两个步骤，右键模块 RemoveModule，可以看到模块右下角的蓝色方块消失，意味着它变成了普通目录，再次右键Delete（Del 是普通删除，Alt + Del 是安全删除）即可删除。</p><figure><img src="https://s2.loli.net/2022/05/08/IjeKYgaGsBl3qmR.png" alt="删除模块"><figcaption aria-hidden="true">删除模块</figcaption></figure><figure><img src="https://s2.loli.net/2022/05/08/oQIy5acFh9CHDmO.png" alt="再次 Delete"><figcaption aria-hidden="true">再次 Delete</figcaption></figure><h3 id="窗口结构">9.2.4 窗口结构</h3><p>分为菜单栏、工作列表、编辑区域、快捷栏。</p><figure><img src="https://s2.loli.net/2022/05/08/nwBp6Xq3QAacNYr.png" alt="窗口结构"><figcaption aria-hidden="true">窗口结构</figcaption></figure><p>在编辑区域编写源代码，按下 Ctrl + Shift + F10 即可运行 main方法。</p><h3 id="可能会遇见的错误">9.2.5 可能会遇见的错误</h3><p><strong>Java 版本问题</strong></p><p>打开项目结构，或快捷键 Ctrl + Alt + Shift + S</p><figure><img src="https://s2.loli.net/2022/05/08/b81IeBsXfd9LQmR.png" alt="打开 Project Structure"><figcaption aria-hidden="true">打开 Project Structure</figcaption></figure><figure><img src="https://s2.loli.net/2022/05/08/J6ueAVc7m8RPBCQ.png" alt="第 2 种打开方式"><figcaption aria-hidden="true">第 2 种打开方式</figcaption></figure><figure><img src="https://s2.loli.net/2022/05/08/Fqjrk6UCOi7HX1D.png" alt="Project"><figcaption aria-hidden="true">Project</figcaption></figure><p>这个地方没设置会出错无法运行代码。</p><p>Project name：当前项目的名字</p><p>Project SDK：控制项目使用的 JDK 版本</p><p>Project language level：项目语言级别</p><p>当使用的新特性所在版本超过设定的 JDK 版本，就会报错。</p><p>例：在 JDK7版本，新增了一个特性：自动类型推断机制（钻石表达式），使用泛型 new对象时后面的 <code>&lt;&gt;</code> 中可以省略数据类型，会通过前面<code>&lt;&gt;</code> 的内容自动推断类型。</p><figure><img src="https://s2.loli.net/2022/05/08/hfuXt5SZYKmL97N.png" alt="创建集合实例"><figcaption aria-hidden="true">创建集合实例</figcaption></figure><p>一旦设置 level 为小于 7，如 level 6 就会报错：</p><figure><img src="https://s2.loli.net/2022/05/08/G9gUdLeCZo6m4Ru.png" alt="level 6"><figcaption aria-hidden="true">level 6</figcaption></figure><p>Project language level 是编译时检查源码是否符合指定版本的语法。如果level 设置为 6，则代码使用的 JDK7 和 JDK8版本的新特性会被认为是语法错误。</p><p>一般 level 等级与 JDK 版本一致即可，但如果自己开发使用的 JDK版本大于部署时服务器的 JDK 版本，可以把 level 往下调至服务器的 JDK版本，且不使用高版本的新特性。</p><blockquote><p>JDK8 新增了 Lambda 表达式、函数式接口等新特性；特性只能往下兼容，如JDK8 版本可以使用 JDK7、JDK6 ... 的特性，而不能使用 JDK9 的特性。</p></blockquote><p>Project compiler output：用于指定项目中的 java 源文件编译后生成的这些*.class 文件存放的根目录</p><p>修改成如下即可，记得修改后点击 Apply 或 OK，否则不生效。如 01-module模块的 class 文件会在 out/production/01-module 下。</p><figure><img src="https://s2.loli.net/2022/05/08/OvrnmdJVeBLi9hl.png" alt="常规设置"><figcaption aria-hidden="true">常规设置</figcaption></figure><h3 id="创建-java-源文件">9.2.6 创建 Java 源文件</h3><p>module 下有个蓝色的 src 文件夹，用于存放源文件，src 右键/new/JavaClass</p><figure><img src="https://s2.loli.net/2022/05/08/gsE3IXHYTPjbpvf.png" alt="New Java Class"><figcaption aria-hidden="true">New Java Class</figcaption></figure><p>或按下 Alt + Ins scrlk 快捷键，此键在 Backspace 退格键的上面。</p><figure><img src="https://s2.loli.net/2022/05/08/R57DKfUPqhZwcti.png" alt="快捷方式"><figcaption aria-hidden="true">快捷方式</figcaption></figure><p>通过上下左右箭头定位到 Java Class 然后回车或点击 JavaClass，输入源文件名后回车。（不用写后缀 <code>.java</code>）</p><p><strong>导入其它模块的类</strong></p><p>在类中使用其它模块的类时，在错误处（将光标定位到红色波浪处）按下 Alt+ Enter，选择 Add dependency on module '模块名' 后回车。</p><blockquote><p>实际在模块下的 iml 文件中添加了<code>&lt;orderEntry type="module" module-name="模块名" /&gt;</code>标签。</p></blockquote><h2 id="常用的设置">9.3 常用的设置</h2><p>内容导视：</p><ul><li>Appearance &amp; Behavior</li><li>Editor</li><li>Build，Execution，Deployment</li><li>其它</li></ul><p>首先打开设置 File/Settings（快捷键：Ctrl + Alt + S）</p><figure><img src="https://s2.loli.net/2022/05/08/vrjmoPe6BXHtJLu.png" alt="Settings"><figcaption aria-hidden="true">Settings</figcaption></figure><p>从上至下依次为：外观与行为、快捷键、编辑、插件、版本控制、构建执行部署、语言和框架、工具、高级设置</p><p>依次介绍：</p><h3 id="appearance-behavior">9.3.1 Appearance &amp; Behavior</h3><p><strong>设置主题</strong></p><p>Appearance/Theme</p><figure><img src="https://s2.loli.net/2022/05/09/V3L1ZcJINRsYntj.png" alt="设置主题"><figcaption aria-hidden="true">设置主题</figcaption></figure><p><strong>设置菜单栏字体大小</strong></p><p>Appearance/Size</p><p>如果觉得菜单项或设置中的字体太小，Size 可以往上调，一般设置为12。</p><figure><img src="https://s2.loli.net/2022/05/09/4NEGxvSApIbZk6P.png" alt="设置字体大小"><figcaption aria-hidden="true">设置字体大小</figcaption></figure><p>重新启动项目时，如何打开一个项目</p><ul><li>New window：新创建一个窗口</li><li>Current window：使用当前窗口</li><li>Ask：总是询问</li></ul><figure><img src="https://s2.loli.net/2022/05/12/o629CidIzfFAYvW.png" alt="屏幕截图 2022-03-13 171254"><figcaption aria-hidden="true">屏幕截图 2022-03-13 171254</figcaption></figure><h3 id="editor">9.3.2 Editor</h3><p>内容如下：</p><ul><li>设置使用鼠标滚轮调节字体大小</li><li>自动导包</li><li>行号与分隔符</li><li>显示方法参数信息</li><li>忽略大小写提示</li><li>取消单行显示文件标签</li><li>设置悬浮提示</li><li>设置编辑区域字体</li><li>单独设置控制台字体</li><li>设置文档注释的字体颜色</li><li>添加文件头部信息</li><li>设置项目文件字符编码</li></ul><p><strong>设置使用鼠标滚轮调节字体大小</strong></p><p>General/Mouse Control，勾上 Change font size with Ctrl + MouseWheel，回到编辑页面按住 Ctrl 同时滚动鼠标滚轮即可调整字体大小。</p><p>Move code fragments withdrag-and-drop：可以拖拽选中的代码片段到别的位置</p><figure><img src="https://s2.loli.net/2022/05/09/QkCluVozSiIqTY9.png" alt="调节编辑区域字体大小"><figcaption aria-hidden="true">调节编辑区域字体大小</figcaption></figure><p><strong>自动导包</strong></p><p>General/Auto Import</p><ul class="task-list"><li><input type="checkbox" disabled="" checked="">Add unambiguous imports on thefly：编写代码时，写的简单类名是唯一的，自动添加 import 导入该类</li><li><input type="checkbox" disabled="" checked="">Optimize imports on the fly：当 import 导入的类没用上时，自动删去该import</li></ul><figure><img src="https://s2.loli.net/2022/05/09/CUp1SATgP5aWR42.png" alt="自动导包"><figcaption aria-hidden="true">自动导包</figcaption></figure><p>Insert imports onpaste（在粘贴时导入），Always：总是，Never：从不，Ask：询问</p><p>如想使用 Date 类，但有多个简单类名为 Date，需要 Alt + Enter 键 importclass 选择一个。</p><figure><img src="https://s2.loli.net/2022/05/09/spIMU5ZG9WQ4bfl.png" alt="例"><figcaption aria-hidden="true">例</figcaption></figure><p>输入 DateFormat，类名唯一，会自动在首行添加<code>import 此类的完整类名</code>；删去 DateFormat 会自动删除首行的import 导入语句。</p><p><strong>行号与分隔符</strong></p><p>General/Appearance，勾选 Show methodseparators，显示方法之间的分隔符；勾选 Show line numbers 显示行号。</p><p><strong>关闭文档弹窗</strong></p><p>General/Code Completion 取消勾选 Show the documentation popupin...</p><p><strong>显示方法参数信息</strong></p><p>General/Code Completion 勾选 Show the paramerter info...</p><p>Show parameter name hints...：提示方法参数名称和类型</p><p>Show the paramerter info...：弹出方法参数名和类型</p><p>Show full method signatures：弹出完整的方法签名</p><figure><img src="https://s2.loli.net/2022/05/09/me9xTJn8poZaEUM.png" alt="显示方法参数信息"><figcaption aria-hidden="true">显示方法参数信息</figcaption></figure><p><strong>忽略大小写提示</strong></p><p>General/Code Completion</p><p>老版将 Case sensitive completion 改为 None；</p><p>新版取消勾选 Match case（区分大小写）</p><figure><img src="https://s2.loli.net/2022/05/09/m8LCBHqUrwnSPOK.png" alt="忽略大小写"><figcaption aria-hidden="true">忽略大小写</figcaption></figure><p>First letter only：仅首字母区分大小写，如 String 等同于 STRing</p><p>All letters：所有都区分大小写，String 不等同于 string</p><p><strong>取消单行显示文件标签</strong></p><p>如果设置单行显示，当编辑区即代码书写区域，编辑了或者浏览很多文件，可以看到Number.java、Object.java ...这样展示不下的文件就会被隐藏。</p><figure><img src="https://s2.loli.net/2022/05/09/RZKyQYcgiGxTACv.png" alt="多出来的 Number.java ..."><figcaption aria-hidden="true">多出来的 Number.java ...</figcaption></figure><p>General/Editor Tabs 取消勾选 Show tabs in onerow（在同一行显示，可能会造成文件名显示不完全）</p><p>Hide tabs if there is no space：如果空间不足就隐藏标签</p><figure><img src="https://s2.loli.net/2022/05/09/k8DSbJrMaReTn9z.png" alt="显示标签"><figcaption aria-hidden="true">显示标签</figcaption></figure><p><strong>设置悬浮提示</strong></p><p>当指针停在方法或某处时，会自动显示对应的文档注释信息。</p><figure><img src="https://s2.loli.net/2022/05/09/HmwiWAyfTJ7qLV2.png" alt="悬浮提示"><figcaption aria-hidden="true">悬浮提示</figcaption></figure><p>Code Editing 勾选 Show quick documentation on hover</p><p>翻到最下面，Editor Tooltips/Tooltip delay：500，延迟 500毫秒后再提示。</p><figure><img src="https://s2.loli.net/2022/05/09/nqsOD3KMLaWEd1Q.png" alt="悬停 500ms 后才会显示"><figcaption aria-hidden="true">悬停 500ms 后才会显示</figcaption></figure><p><strong>设置编辑区域字体</strong></p><p>Font/Size</p><p>font 可以选择喜欢的字体，size 是字体大小，line height是每行间距。</p><figure><img src="https://s2.loli.net/2022/05/09/OFWxQNK8DJIl7HL.png" alt="设置字体"><figcaption aria-hidden="true">设置字体</figcaption></figure><p><strong>设置编辑区域主题</strong></p><p>Color Scheme/Scheme</p><p>Scheme 与整体主题风格一致即可，下面就不太搭。</p><figure><img src="https://s2.loli.net/2022/05/09/MEqQ4XCZasUnISu.png" alt="风格不搭，世界白给"><figcaption aria-hidden="true">风格不搭，世界白给</figcaption></figure><p>除了 Font/size 可以设置字体外，通过 Color Scheme/Color SchemeFont，勾选 Use color scheme font instead of the，也可以设置。</p><p><strong>单独设置控制台字体</strong></p><p>Color Scheme/Console Font 勾选 Usb console font instead of the</p><p><strong>设置文档注释的字体颜色</strong></p><p>Color Scheme/Language Defaults，Comments/Doc comment/Text</p><figure><img src="https://s2.loli.net/2022/05/09/fLbCdae2JH9uSzW.png" alt="绿色很健"><figcaption aria-hidden="true">绿色很健</figcaption></figure><p><strong>同一个包下超过指定个数的 import 会自动转为 </strong>*</p><p>Code Style/java/Imports</p><p>Class count to use import with '*'：5，导入同一个包的类累计 5次时，自动转为 *</p><p>Names count to use static import with'*'：3，导入同一个包下静态的类累次 3 次时，自动转为 *</p><p>例：导入 5 个 java.util 包下的类会转为<code>import java.util.*;</code></p><figure><img src="https://s2.loli.net/2022/05/09/uDfigJFbjAN6Myl.png" alt="* 是通配符，指代一切"><figcaption aria-hidden="true">* 是通配符，指代一切</figcaption></figure><p><strong>添加文件头部信息</strong></p><p>File and Code Templates/Includes/File Header写入信息，每当创建文件时，自动在头部加入这段文字，在<code>Description:</code> 中有各个变量的含义，如 ${DATE}是当前系统日期。</p><p>我习惯在 java 源文件头部添加文档注释；作者处可以使用 ${USER}替代。</p><figure><img src="https://s2.loli.net/2022/05/09/bmf3qL2z6djYSIO.png" alt="文件头部"><figcaption aria-hidden="true">文件头部</figcaption></figure><p><strong>设置项目文件字符编码</strong></p><p>File Encodings/Global Encoding 等为 UTF-8（统一编码才不会乱码，UTF-8是全球通用的）</p><p>勾选 Transparent native-to-ascii conversion：将 properties文件输入的所有字符转换成 ASCII 序列码保存</p><p>UTF-8 BOM 又叫 UTF-8 签名。（BOM：byte order mark）</p><p>UTF-8 的 BOM 是为了支援 UTF-16、UTF-32；BOM签名的意思就是告诉编辑器当前文件采用何种编码，方便编辑器识别。BOM虽然在编辑器中不显示，但是会产生输出，就像多了一个空行。</p><p>有很多软件不能识别 BOM，也会被当作编码的一部分造成乱码，所以最好选择with NO BOM。</p><figure><img src="https://s2.loli.net/2022/05/09/YCsAzbU2Ftvxd7j.png" alt="File Encodings"><figcaption aria-hidden="true">File Encodings</figcaption></figure><p><strong>取消方法形参名提示</strong></p><figure><img src="https://s2.loli.net/2022/05/09/sgn8RGXtIAMPqeh.png" alt="取消方法形参名提示"><figcaption aria-hidden="true">取消方法形参名提示</figcaption></figure><p>想要取消显示 second:、minute:、hour:</p><p>Inlay Hints，将 java 取消勾选，确定保存。</p><figure><img src="https://s2.loli.net/2022/05/09/RrkC7yQsKMWjnap.png" alt="取消形参提示"><figcaption aria-hidden="true">取消形参提示</figcaption></figure><p>或者右键 Disable Hints</p><figure><img src="https://s2.loli.net/2022/05/09/SJlYNQAsdrzCyEH.png" alt="隐藏提示"><figcaption aria-hidden="true">隐藏提示</figcaption></figure><p>若想重新显示提示，Inlay Hinst/java，Parameter hints，勾上 Showparameter hints for</p><figure><img src="https://s2.loli.net/2022/05/09/ZUFOqjPCpeEa6zc.png" alt="参数提示"><figcaption aria-hidden="true">参数提示</figcaption></figure><h3 id="buildexecutiondeployment">9.3.3Build，Execution，Deployment</h3><p><strong>自动编译</strong></p><figure><img src="https://s2.loli.net/2022/05/09/yYEtL4j6fsaRveP.png" alt="自动编译"><figcaption aria-hidden="true">自动编译</figcaption></figure><p>Build project automatically：项目自动编译</p><p>Compile independent modules in parallel：多个模块并行编译</p><h3 id="其它">9.3.4 其它</h3><p>内容导视：</p><ul><li>省电模式</li><li>文件的显示位置</li><li>保存及导入原有配置</li></ul><p><strong>省电模式</strong></p><p>File/Power Save Mode会关闭代码检查与提示等功能</p><figure><img src="https://s2.loli.net/2022/05/09/FUyLP3AmnI9KRCZ.png" alt="节电模式"><figcaption aria-hidden="true">节电模式</figcaption></figure><blockquote><p>如果没有了提示功能，可以看看是否误点了</p></blockquote><p><strong>文件的显示位置</strong></p><figure><img src="https://s2.loli.net/2022/05/09/LATrF8to59wsER3.png" alt="分隔在右边"><figcaption aria-hidden="true">分隔在右边</figcaption></figure><p>Split Right：将文件在右边分屏</p><p>Split and Move Right：将文件移到右边分屏</p><p>Split Down：将文件在下边分屏</p><p>Split and Move Down：将文件移到下边分屏</p><p><strong>设置单个文件的字符编码</strong></p><figure><img src="https://s2.loli.net/2022/05/09/3lnLusUfYm8wZpV.png" alt="设置单个文件的字符编码"><figcaption aria-hidden="true">设置单个文件的字符编码</figcaption></figure><p>编辑区右下角修改文件编码</p><p>Reload：暂时改成 xxx 编码显示，但文件还是原来的编码</p><p>Convert：真正的转换</p><p><strong>保存及导入原有配置</strong></p><figure><img src="https://s2.loli.net/2022/05/09/TrspMhJ8QyaxgNj.png" alt="File/Manage IDE Settings"><figcaption aria-hidden="true">File/Manage IDE Settings</figcaption></figure><p>File/Manage IDE Settings，Export Settings 导出设置；以后 ImportSettings 导入，恢复原本设置。</p><h2 id="常用快捷键">9.4 常用快捷键</h2><p>内容导视：</p><ul><li>文本编辑</li><li>查找浏览</li><li>修改快捷键</li><li>常见问题</li></ul><p>的确很便捷对吧。up、down、left、right 分别对应上下左右箭头。</p><h3 id="文本编辑">9.4.1 文本编辑</h3><table><colgroup><col style="width: 45%"><col style="width: 54%"></colgroup><thead><tr class="header"><th style="text-align: center;">选择要粘贴的内容</th><th style="text-align: center;">Ctrl + Shift + V</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">粘贴带包名的类名</td><td style="text-align: center;">先 Ctrl + Shift + Alt + C 复制类名，再Ctrl + Shift + Alt + V 粘贴</td></tr><tr class="even"><td style="text-align: center;">撤销</td><td style="text-align: center;">Ctrl + Z</td></tr><tr class="odd"><td style="text-align: center;">反撤销</td><td style="text-align: center;">Ctrl + Shift + Z</td></tr><tr class="even"><td style="text-align: center;">逐渐选中区域</td><td style="text-align: center;">Ctrl + W</td></tr><tr class="odd"><td style="text-align: center;">删除一行（Delete Line）</td><td style="text-align: center;">Ctrl + Y</td></tr><tr class="even"><td style="text-align: center;">向下复制一行（Duplicate Line OrSelection）</td><td style="text-align: center;">Ctrl + D</td></tr><tr class="odd"><td style="text-align: center;">在域的范围内上下移动行</td><td style="text-align: center;">Shift + Ctrl +上下箭头</td></tr><tr class="even"><td style="text-align: center;">上下移动行</td><td style="text-align: center;">Shift + Alt +上下箭头</td></tr><tr class="odd"><td style="text-align: center;">整体移动</td><td style="text-align: center;">Tab</td></tr><tr class="even"><td style="text-align: center;">向上开始新的一行（Start New Line BeforeCurrent）</td><td style="text-align: center;">Ctrl + Alt + Enter</td></tr><tr class="odd"><td style="text-align: center;">向下开始新的一行（Start New Line）</td><td style="text-align: center;">Shift + Enter</td></tr><tr class="even"><td style="text-align: center;">自动在语句末尾加上分号</td><td style="text-align: center;">Ctrl + Shift + Enter</td></tr><tr class="odd"><td style="text-align: center;">单行注释</td><td style="text-align: center;">Ctrl + /</td></tr><tr class="even"><td style="text-align: center;">多行注释</td><td style="text-align: center;">Ctrl + Shift + /，再按还原</td></tr></tbody></table><table><thead><tr class="header"><th style="text-align: center;">格式化代码</th><th style="text-align: center;">Ctrl + Alt + L</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">大小写转换</td><td style="text-align: center;">Ctrl + Shift + U</td></tr><tr class="even"><td style="text-align: center;">重命名</td><td style="text-align: center;">Shift + F6</td></tr><tr class="odd"><td style="text-align: center;">提示补全（Basic）</td><td style="text-align: center;">Ctrl + 空格</td></tr></tbody></table><table><thead><tr class="header"><th style="text-align: center;">收起代码块或方法</th><th style="text-align: center;">Ctrl + . 或 Ctrl + - 或右键/Folding</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">打开代码块或方法</td><td style="text-align: center;">Ctrl + . 或 Ctrl + +</td></tr><tr class="even"><td style="text-align: center;">收起全部代码块</td><td style="text-align: center;">Ctrl + Shift + -</td></tr><tr class="odd"><td style="text-align: center;">打开全部代码块</td><td style="text-align: center;">Ctrl + Shift + +</td></tr></tbody></table><table><colgroup><col style="width: 60%"><col style="width: 40%"></colgroup><thead><tr class="header"><th style="text-align: center;">提示方法形参类型（Parameter Info）</th><th style="text-align: center;">Ctrl +P（先将光标定位到方法的括号里）</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">查看文档（QuickDocumentation），将光标定位方法名或类名上</td><td style="text-align: center;">Ctrl + Q 、 Alt +鼠标中键</td></tr><tr class="even"><td style="text-align: center;">快速定位至错误处</td><td style="text-align: center;">F2 、 Shift + F2</td></tr><tr class="odd"><td style="text-align: center;">解决错误</td><td style="text-align: center;">Alt + Enter</td></tr></tbody></table><table><thead><tr class="header"><th style="text-align: center;">快速生成构造和其他方法如 getset 、toString 等方法</th><th style="text-align: center;">Alt + Ins Scrlk</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">局部变量抽取为成员变量</td><td style="text-align: center;">Ctrl + Alt + F</td></tr><tr class="even"><td style="text-align: center;">生成 try-catch 等常用代码块</td><td style="text-align: center;">Ctrl + Alt + T</td></tr><tr class="odd"><td style="text-align: center;">抽取成方法</td><td style="text-align: center;">Ctrl + Alt + M</td></tr><tr class="even"><td style="text-align: center;">自动分配变量名</td><td style="text-align: center;">Ctrl + Alt + V</td></tr><tr class="odd"><td style="text-align: center;">清除多余的 import</td><td style="text-align: center;">Ctrl + Alt + O</td></tr><tr class="even"><td style="text-align: center;">重写方法</td><td style="text-align: center;">Ctrl + O</td></tr><tr class="odd"><td style="text-align: center;">实现接口方法</td><td style="text-align: center;">Ctrl + i</td></tr></tbody></table><p><strong>选择单词填入</strong>（Cyclic Expand Word）： Alt +（Shift）+/，Shift 是反方向</p><p>当你什么都不写，按下此快捷键从当前行的上方选择并填入单词；当你已经输入开头，如s，就会寻找本类 s 开头的单词自动填人。（可以多按几次找到想要的单词）</p><figure><img src="https://s2.loli.net/2022/05/09/65MA3hBEKyk1Yi2.png" alt="自动填入"><figcaption aria-hidden="true">自动填入</figcaption></figure><p><strong>多行操作</strong>：Shift + Alt + Ins Scrlk，再按住 Shift和上下箭头，或者按住鼠标左键不放拖动鼠标，会增加光标个数。（期间左键单击光标变为1）</p><figure><img src="https://s2.loli.net/2022/05/09/aQERS24GANKPU3q.png" alt="多行操作"><figcaption aria-hidden="true">多行操作</figcaption></figure><p>另一种方法，按住 Alt 和鼠标左键不放，鼠标往下滑。</p><p><strong>快速生成方法</strong></p><p>Select None 是无参构造，如果想同时选中多个字段，可以通过 Shift +上下键或 Ctrl + A 或 Ctrl +鼠标点击选择生成的有参构造为哪些字段赋值。</p><figure><img src="https://s2.loli.net/2022/05/09/n3kstKrLTdIJoHc.png" alt="构造器"><figcaption aria-hidden="true">构造器</figcaption></figure><figure><img src="https://s2.loli.net/2022/05/09/AuZOrv7xLp4G5Km.png" alt="生成有参构造"><figcaption aria-hidden="true">生成有参构造</figcaption></figure><h3 id="查找浏览">9.4.2 查找浏览</h3><table><colgroup><col style="width: 41%"><col style="width: 58%"></colgroup><thead><tr class="header"><th style="text-align: center;">关闭当前编辑页面</th><th style="text-align: center;">Ctrl + F4、右键编辑区的文件标签点击Close、Shift + 单击标签</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">单独为编辑页面生成窗口</td><td style="text-align: center;">Shift + F4</td></tr><tr class="even"><td style="text-align: center;">关闭/隐藏页面</td><td style="text-align: center;">（Shift）+ Esc、Ctrl + Shift + F4</td></tr><tr class="odd"><td style="text-align: center;">编辑窗口全屏显示</td><td style="text-align: center;">Ctrl + Shift + F12</td></tr><tr class="even"><td style="text-align: center;">左右移动标签查看对应文件</td><td style="text-align: center;">Alt +左右箭头</td></tr><tr class="odd"><td style="text-align: center;">光标不动，上下翻页</td><td style="text-align: center;">按住 Ctrl 不松，按下 Up/Down</td></tr><tr class="even"><td style="text-align: center;">光标至当前显示的内容首尾</td><td style="text-align: center;">Ctrl + Pgup/Pgdn</td></tr><tr class="odd"><td style="text-align: center;">光标至文件首尾</td><td style="text-align: center;">Ctrl + Home/End</td></tr><tr class="even"><td style="text-align: center;">光标在方法之间移动</td><td style="text-align: center;">Alt + 上下箭头（up/down）</td></tr><tr class="odd"><td style="text-align: center;">光标返回上一次编辑的位置</td><td style="text-align: center;">Ctrl + Alt + 左右箭头（left+right）</td></tr><tr class="even"><td style="text-align: center;">查看光标最近到过的位置（RecentLocations）</td><td style="text-align: center;">Ctrl + Shift + E</td></tr><tr class="odd"><td style="text-align: center;">跳转至某行某列</td><td style="text-align: center;">Ctrl + G</td></tr></tbody></table><table><colgroup><col style="width: 41%"><col style="width: 58%"></colgroup><thead><tr class="header"><th style="text-align: center;">打开对应菜单栏</th><th style="text-align: center;">Alt + 划横线的字母</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">打开对应快捷栏</td><td style="text-align: center;">Alt + 数字</td></tr><tr class="even"><td style="text-align: center;">打开当前文件所在文件夹（Show InExplorer）</td><td style="text-align: center;">按住 Ctrl 点击文件标签 或 Ctrl + Alt +F12</td></tr><tr class="odd"><td style="text-align: center;">打开最近修改的文件</td><td style="text-align: center;">Ctrl + E 、Ctrl + Tab（Ctrl 不要松，按下Tab 键或按下画横线的字母和数字）</td></tr></tbody></table><p>Alt + 1 、 Alt + Home 进入工作列表，上下箭头选择文件，回车或按下F4。</p><table><thead><tr class="header"><th style="text-align: center;">查找所有文件</th><th style="text-align: center;">双击 Shift</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">查找类文件</td><td style="text-align: center;">Ctrl + N</td></tr><tr class="even"><td style="text-align: center;">查找文件</td><td style="text-align: center;">Shift + Ctrl + N</td></tr></tbody></table><table><thead><tr class="header"><th style="text-align: center;">查找（全局）</th><th style="text-align: center;">Ctrl +（Shift）+ F</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">选中查找的结果之一</td><td style="text-align: center;">（Shift）+ F3、 Ctrl +（Shift）+ L</td></tr><tr class="even"><td style="text-align: center;">替换</td><td style="text-align: center;">Ctrl + R</td></tr></tbody></table><table><thead><tr class="header"><th style="text-align: center;">标记某行</th><th style="text-align: center;">Ctrl + Shift + 数字（再按取消标记）</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">标记某行</td><td style="text-align: center;">Ctrl + F11，点击对应序号标记</td></tr><tr class="even"><td style="text-align: center;">跳转至标记的某行</td><td style="text-align: center;">Ctrl + 数字</td></tr></tbody></table><table><thead><tr class="header"><th style="text-align: center;">添加书签</th><th style="text-align: center;">F11</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">查看收藏与书签</td><td style="text-align: center;">Alt + 2</td></tr><tr class="even"><td style="text-align: center;">跳转书签所在位置</td><td style="text-align: center;">Shift + F11</td></tr></tbody></table><table><colgroup><col style="width: 60%"><col style="width: 39%"></colgroup><thead><tr class="header"><th style="text-align: center;">查找已有的模板缩写</th><th style="text-align: center;">Ctrl + J</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">查看源码</td><td style="text-align: center;">按住 Ctrl 再单击类名、Ctrl + B</td></tr><tr class="even"><td style="text-align: center;">查看父类方法（Go To Super Method）</td><td style="text-align: center;">将光标定位到子类方法名处，按下 Ctrl +U</td></tr><tr class="odd"><td style="text-align: center;">查看一个类的结构</td><td style="text-align: center;">Ctrl + F12、Alt + 7</td></tr><tr class="even"><td style="text-align: center;">查看类的继承关系</td><td style="text-align: center;">Ctrl + H</td></tr><tr class="odd"><td style="text-align: center;">查看有关所有实现或者覆写了当前方法的类的结构图（MethodHierarchy）</td><td style="text-align: center;">Ctrl + Shift + H</td></tr><tr class="even"><td style="text-align: center;">查看类的继承结构图（Show UMLDiagram）</td><td style="text-align: center;">Ctrl + Alt +（Shift）+ U、右键Diagrams</td></tr><tr class="odd"><td style="text-align: center;">呈现当前方法的调用层级结构（CallHierarchy）</td><td style="text-align: center;">Ctrl + Alt + H</td></tr></tbody></table><figure><img src="https://s2.loli.net/2022/05/09/klc1NEMCHqzm4hS.png" alt="Declaration or Usages"><figcaption aria-hidden="true">Declaration or Usages</figcaption></figure><p>查看此文件在磁盘的位置：按住 Ctrl 键，点击此文件标签，或者右键 OpenIn/Explorer</p><figure><img src="https://s2.loli.net/2022/05/09/lYqhw6bRWSDAKda.png" alt="打开文件所在目录"><figcaption aria-hidden="true">打开文件所在目录</figcaption></figure><p>添加到收藏（Add To Favorites）：Shift + Alt + F、或者文件右击 Add ToFavorites 选择已有的收藏夹，Add To New Favorites List创建新的收藏夹。</p><p>替换：Ctrl + R，Replace 一个个替换，All 全部替换，include排除（被排除的不会被替换）</p><figure><img src="https://s2.loli.net/2022/05/09/yrbPWXsiuqIBkS2.png" alt="替换"><figcaption aria-hidden="true">替换</figcaption></figure><h3 id="修改快捷键">9.4.3 修改快捷键</h3><p>打开Settings/keymap，有两个放大镜，左边输入功能名称；点击右边的放大镜按下快捷键，寻找快捷键对应的功能；</p><figure><img src="https://s2.loli.net/2022/05/09/O8Efr27xWoLKNq6.png" alt="快捷键"><figcaption aria-hidden="true">快捷键</figcaption></figure><p>比如修改复制当前行操作的快捷键，搜索 Duplicate，右键 Add keyboardShortcut，更换快捷键。不用输入字母，而是把你希望的组合键同时按下。</p><figure><img src="https://s2.loli.net/2022/05/09/sFzqyTRPkSlVjrd.png" alt="更改快捷键"><figcaption aria-hidden="true">更改快捷键</figcaption></figure><p>Add Keyboard Shortcut：键盘快捷键</p><p>Add Mouse Shortcut：鼠标快捷键，例 Ctrl + 左键单击</p><p>Add Abbreviation：添加操作的缩写</p><p>Remove：移除快捷键</p><p>Reset Shortcuts：重新设置快捷键</p><p>你怎么知道输入 Duplicate？在 IDEA 安装路径下有个 help目录，里面有两个 pdf 文件，打开查看对组合键作用的描述；如 Ctrl +D，Duplicate current line or selectedblock：复制当前行及选中的文本，与上面的解释大同小异，配合显示的快捷键即可快速定位想要修改的组合键。</p><figure><img src="https://s2.loli.net/2022/05/09/M1cBqNFrECWGygp.png" alt="keymap"><figcaption aria-hidden="true">keymap</figcaption></figure><p>如 Ctrl + Alt + L 格式化代码，在第一列第 19 个，搜索 Reformatcode</p><figure><img src="https://s2.loli.net/2022/05/09/uJnLyZ8HOaTqSzB.png" alt="Reformat code"><figcaption aria-hidden="true">Reformat code</figcaption></figure><p>如果习惯使用 Eclipse 的快捷键，可以将 keymap 改为 Eclipse。</p><figure><img src="https://s2.loli.net/2022/05/09/eJzFsTr2LfVkbqA.png" alt="Eclipse"><figcaption aria-hidden="true">Eclipse</figcaption></figure><h3 id="常见问题">9.4.4 常见问题</h3><p>按下快捷键时，如果没有反应，那么<mark>这组快捷键可能是被其他软件占用</mark>了，需要更改快捷键组合方式。</p><p>或者你觉得快捷键很别扭，易混淆；比如 Ctrl + D，在其他软件是 delete删除的意思，而在 IDEA 却是 add 增加一行的意思。</p><p>Ctrl + 空格、Ctrl + . 等快捷键已被 Windows 系统占用；</p><p>打开 Windows 设置，时间和语言/语言/键盘/输入语言热键，可以看到 Ctrl +空格已被占用，所以 IDEA 的自动补全失效了。</p><p>或者首选语言选择中文（简体、中国）选项，键盘/微软拼音/选项/按键，看看快捷键组合方式是否被占用了。</p><figure><img src="https://s2.loli.net/2022/05/09/xAsHFXltvioENLy.png" alt="陷阱"><figcaption aria-hidden="true">陷阱</figcaption></figure><figure><img src="https://s2.loli.net/2022/05/09/zSIOvP8nJ2gMNku.png" alt="都是陷阱"><figcaption aria-hidden="true">都是陷阱</figcaption></figure><figure><img src="https://s2.loli.net/2022/05/09/2Yz3MCj6rnTkpEh.png" alt="中英切换"><figcaption aria-hidden="true">中英切换</figcaption></figure><h2 id="自定义模板">9.5 自定义模板</h2><p>内容导视：</p><ul><li>常用模板缩写</li><li>后缀模板</li><li>实时模板</li></ul><p>Templates，代码片段对应的字母缩写，输入缩写按下 Tab键后可以出现预定义的固定模式的代码，提高了开发效率；如 sout 是<code>System.out.println()</code>，Ctrl + J快捷键可以查看所有模板缩写。</p><h3 id="常用模板缩写">9.5.1 常用模板缩写</h3><p>输入缩写后按下 Tab 键，如 main 方法的缩写：main、psvm。</p><table><thead><tr class="header"><th style="text-align: center;">输出语句</th><th style="text-align: center;">缩写</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">普通输出语句</td><td style="text-align: center;">sout</td></tr><tr class="even"><td style="text-align: center;">输出方法参数名及值</td><td style="text-align: center;">soutp</td></tr><tr class="odd"><td style="text-align: center;">输出方法名</td><td style="text-align: center;">soutm</td></tr><tr class="even"><td style="text-align: center;">输出变量值</td><td style="text-align: center;">soutv 或 xxx.sout</td></tr><tr class="odd"><td style="text-align: center;">输出变量名及值</td><td style="text-align: center;">xxx.soutv</td></tr></tbody></table><table><thead><tr class="header"><th style="text-align: center;">for 语句</th><th style="text-align: center;">缩写</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">i 从 0 到 ？，i++</td><td style="text-align: center;">fori</td></tr><tr class="even"><td style="text-align: center;">增强 for 循环</td><td style="text-align: center;">iter、xxx.for</td></tr><tr class="odd"><td style="text-align: center;">遍历数组</td><td style="text-align: center;">itar</td></tr><tr class="even"><td style="text-align: center;">迭代器遍历</td><td style="text-align: center;">itit</td></tr><tr class="odd"><td style="text-align: center;">顺序遍历</td><td style="text-align: center;">xxx.fori</td></tr><tr class="even"><td style="text-align: center;">逆序遍历</td><td style="text-align: center;">xxx.forr</td></tr></tbody></table><table><thead><tr class="header"><th style="text-align: center;">if 语句</th><th style="text-align: center;">缩写</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">if (xxx == null）</td><td style="text-align: center;">ifn、xxx.null</td></tr><tr class="even"><td style="text-align: center;">if (xxx != null）</td><td style="text-align: center;">inn、xxx.nn</td></tr></tbody></table><h3 id="后缀模板">9.5.2 后缀模板</h3><p>打开 Settings，Editor/General/PostfixCompletion，没法修改预定义的代码模板，倒是可以修改缩写（先选择要修改的地方，然后点击+ 右边的铅笔）。</p><figure><img src="https://s2.loli.net/2022/05/11/iksAal1Jb3OjfRZ.png" alt="启动后缀模板"><figcaption aria-hidden="true">启动后缀模板</figcaption></figure><p>Enable postfix completion：启动后缀模板</p><p>Expand templates with Tab：输入xxx.缩写后按下 Tab键后生成模板，一般还未输入完时 IDEA 会自动弹出提示回车就行。</p><p>打个比方，定义了一个 int 类型的数组 arr，fori 是后缀模板缩写，输入arr.fori 按下 Tab 键后出现预定义的代码。</p><p><strong>自定义后缀模板</strong></p><p>自定义后缀模板，按下 +，选择将模板应用在哪里，比如 java。</p><p>介绍含义：</p><p>key：缩写，这里我填写的是 <code>syso</code></p><p>Minimum language level：此模板生效的最低 JDK 版本。例：假如 level设置为 9，那么在 JDK8 中此模板不生效</p><p>Use static import if possible：如果可能的话使用静态导入</p><p><code>$EXPR$</code>：引用目标表达式</p><figure><img src="https://s2.loli.net/2022/05/11/pwUchkYjsEZSCV7.png" alt="创建后缀模板"><figcaption aria-hidden="true">创建后缀模板</figcaption></figure><p>点击 OK，在 java 源文件中，假设现在有变量，名为 i，输入<code>i.syso</code> 按下 Tab 键后生成<code>System.out.println("i的值：" + i);</code></p><p>那么 <code>$EXPR$</code> 就是 i。</p><p>Applicable expressiontypes：应用至哪些类型，如果不选择，默认任意类型都可以使用此模板；</p><p>​ void：没有返回类型才能使用此模板</p><p>​ not primitive type：包装类型</p><p>​ array：数组类型</p><p>​ choose class in xxx：选择自己的模块中哪些类可以使用此模板</p><p>​ enter class name：选择哪些类可以使用此模板</p><p><code>$END$</code>：生成模板后光标所在位置</p><p>例：设置只有数组类型的变量才能使用此模板，有 int 类型的数组 arr，输入<code>arr.cqhsort</code> 后按下 Tab 键才会生效。</p><figure><img src="https://s2.loli.net/2022/05/11/9ktSVrUqjvu16iC.png" alt="cqhsort"><figcaption aria-hidden="true">cqhsort</figcaption></figure><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>$EXPR$ <span class="token keyword">instanceof</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> $EXPR$<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> $EXPR$<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>$EXPR$<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> $EXPR$<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> $EXPR$<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>            $EXPR$<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> $EXPR$<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            $EXPR$<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>$EXPR$<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$END$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实时模板">9.5.3 实时模板</h3><p>Edit/Live Templates</p><p><strong>单词翻译</strong></p><figure><img src="https://s2.loli.net/2022/05/11/BUkxmsEnhdL6wJ4.png" alt="Live Templates"><figcaption aria-hidden="true">Live Templates</figcaption></figure><p>By default expand with Tab：默认情况按下 Tab 生成模板</p><p>Abbreviation：模板的缩写词</p><p>Description：模板的描述</p><p>Template text：预定义的模板文本</p><p>Applicable in Java: statement：将此模板应用至 java 中的语句声明</p><p>Expand with Tab：按下 Tab 键后生成模板</p><p>Reformat according to style：格式化预定义的模板</p><p>Use static import if possible：如果可能的话使用静态导入</p><p><strong>模板应用范围</strong></p><p>点击 Change 改变模板应用范围</p><p>Comment：注释</p><p>Consumer function：方法</p><p>Declaration：变量声明</p><p>Expression：表达式</p><p>Statement：语句声明</p><figure><img src="https://s2.loli.net/2022/05/11/CeRc1lUwdfL9hXG.png" alt="应用到 Java 的 xxx"><figcaption aria-hidden="true">应用到 Java 的 xxx</figcaption></figure><p><strong>自定义模板</strong></p><p>按下 + 号（Alt + Ins scrlk），创建组，任意取名如 cqh；</p><p>Live Template：定义模板</p><p>Template Group ... ：创建模板组</p><p>选中自己刚刚创建的组按下 + 号，点击 LiveTemplate，可以模仿如下设置：</p><figure><img src="https://s2.loli.net/2022/05/11/ehvdMPNTySl3FEm.png" alt="自己定义吧"><figcaption aria-hidden="true">自己定义吧</figcaption></figure><p>点击 Define 选择模板应用范围如 java；</p><figure><img src="https://s2.loli.net/2022/05/11/eP4pCIJchBRF16S.png" alt="填值"><figcaption aria-hidden="true">填值</figcaption></figure><p>点击 Edit variables，为变量 <code>$VAR$</code>设值为第一个变量名，默认值为 var，跳过定义（如果 skip if defined不勾选，光标会停在 <code>$VAR$</code> 处）</p><p><code>suggestFirstVariableName("Object")</code>：获取第一个变量名</p><p>常见的 Expression（预定义函数）请看<a href="https://www.jetbrains.com/help/idea/template-variables.html#predefined_functions">实时模板变量</a>。</p><p>点击 OK 后，在 java 文件中输入 try 按下 Tab 后即可生成模板。</p><h2 id="断点调试">9.6 断点调试</h2><ul><li>运行类</li><li>debug 设置</li><li>debug 调试快捷键</li><li>debug 实际操作</li></ul><h3 id="运行类">9.6.1 运行类</h3><p>run 即调用某个类的 main 方法，快捷键：Shift + Ctrl +F10，也可以右键或点击绿色三角图标也可以运行此类；运行过后右上角会多出此类的运行配置信息，下拉框选中此类，Shift+ F10 即可运行，Shift + F9 即可调试。</p><figure><img src="https://s2.loli.net/2022/05/11/Kzai7468SC2NYvc.png" alt="选中"><figcaption aria-hidden="true">选中</figcaption></figure><p>Edit Configurations 用来编辑每个类的运行配置</p><figure><img src="https://s2.loli.net/2022/05/15/T9avpJDxmZyweHq.png" alt="配置每个类的运行信息"><figcaption aria-hidden="true">配置每个类的运行信息</figcaption></figure><p>Alt + Shift + F9/F10，会列出已运行过的类，可以通过左右上下箭头选择Run 后回车。</p><figure><img src="https://s2.loli.net/2022/05/11/iQ1VzoON7LsneyP.png" alt="从已运行的类中选择"><figcaption aria-hidden="true">从已运行的类中选择</figcaption></figure><p>常用的 run 和 debug 快捷键</p><figure><img src="https://s2.loli.net/2022/05/11/LzIuGlvTQBFYJ9W.png" alt="常用快捷键"><figcaption aria-hidden="true">常用快捷键</figcaption></figure><h3 id="debug-设置">9.6.2 debug 设置</h3><p><strong>减少内存占用</strong></p><p>打开 Settings/Build，Execution，Deployment/Debugger，设置 Debug连接方式，默认是 Socket。</p><p>Shared memory 是 Windows 特有的一个属性，一般在 Windows系统下建议使用此设置，内存占用相对较少。</p><figure><img src="https://s2.loli.net/2022/05/11/GdqfItkZKHxeDNc.png" alt="Debugger"><figcaption aria-hidden="true">Debugger</figcaption></figure><p><strong>步入源码</strong></p><p>Debugger/Stepping</p><p>Do not step into the classes：不要进入此类</p><p>取消勾选 java.*、javax.*</p><figure><img src="https://s2.loli.net/2022/05/11/XVNJ6bOnAfsT8D7.png" alt="取消勾选 java.*"><figcaption aria-hidden="true">取消勾选 java.*</figcaption></figure><p><strong>显示完整实例信息</strong></p><p>Debugger/Data Views/Java</p><p>取消勾选 Enable alternative view for Collections classes</p><figure><img src="https://s2.loli.net/2022/05/11/K9nBG7rUILc5fE2.png" alt="集合实例的信息视图被简略过了"><figcaption aria-hidden="true">集合实例的信息视图被简略过了</figcaption></figure><h3 id="debug-调试快捷键">9.6.3 debug 调试快捷键</h3><figure><img src="https://s2.loli.net/2022/05/11/pNWJ5u3jKkSy48x.png" alt="开启 debug 后"><figcaption aria-hidden="true">开启 debug 后</figcaption></figure><p>1：step over（F8)：进入下一行，如果当前行断点是方法，不进入方法内2：step into（F7)：进入下一行，如果当前行断点是方法，则进入方法体内3：force step into（Alt + Shift+F7)：同上，但有些进不去的方法可以使用此键强制进入（比如源码) 4：stepout（Shift + F8)：跳出方法 5：Drop Frame：回退到上一个调用的方法 6：Runto Cursor（Alt + F9)：运行到光标位置，只能前进 7：Ctrl + F5：重新 debug8：ResumeProgram（F9)：恢复程序运行，但如果下面还有断点则停到下个断点处，没有断点直接跑完9：stop（Ctrl + F2)：结束进程 10：View Breakpoints（Ctrl + Shift +F8)：查看所有断点，Condition：为断点设置执行的条件</p><figure><img src="https://s2.loli.net/2022/05/11/2hNaRZ3UWfsrvMc.png" alt="条件断点"><figcaption aria-hidden="true">条件断点</figcaption></figure><p>11：Mute Breakpoints：忽略剩下的断点</p><p>12：Evaluate Expression ...（Alt+F8)：计算表达式，输入表达式查看结果。按下Alt + ↓或下拉框查看历史记录</p><figure><img src="https://s2.loli.net/2022/05/11/7RYHZVWiG8a3NEx.png" alt="求值"><figcaption aria-hidden="true">求值</figcaption></figure><h3 id="debug-实际操作">9.6.4 debug 实际操作</h3><p>debug 就是断点调试，在某一行设置一个断点，debug时，程序运行到这一行就会卡住，可以一步步执行代码（按下 F7 或F8），定位错误的地方。</p><p><strong>设置断点</strong></p><figure><img src="https://s2.loli.net/2022/05/11/dykUaRFQ3OXuD2e.png" alt="单击此处"><figcaption aria-hidden="true">单击此处</figcaption></figure><p>单击红点的位置处生成断点，再单击就是取消断点。点击绿色小虫图标开始debug，代码自动在断点处停下。</p><p><strong>设置条件</strong></p><figure><img src="https://s2.loli.net/2022/05/11/d3HrGFBDsvT7tUy.png" alt="设置条件"><figcaption aria-hidden="true">设置条件</figcaption></figure><p>当断点处于循环内时，右击红点，在条件处输入布尔表达式，如 i ==6，那么只有 i == 6 为 true 时，程序才会停下，不用 i = 1，2，3...慢慢步进。</p><p>或者点击 Set Value（F2）修改值加快进程。</p><figure><img src="https://s2.loli.net/2022/05/11/NRdrwfi4CXL2v5Y.png" alt="Set Value"><figcaption aria-hidden="true">Set Value</figcaption></figure><h2 id="其它-1">9.7 其它</h2><p>内容如下：</p><ul><li>展开包名</li><li>新增 JDK 与源码</li><li>生成 JavaDoc</li><li>清理缓存</li><li>取消更新</li><li>插件使用</li></ul><p><strong>展开包名</strong></p><p>使用 Alt + Ins scrlk 创建 package 后，包名都重叠在一起。</p><p>点击 Project 右边的设置图标，取消 Compact Middle Packages 的对勾</p><figure><img src="https://s2.loli.net/2022/05/11/vsJKSFdnurtzyRk.png" alt="随个人喜好"><figcaption aria-hidden="true">随个人喜好</figcaption></figure><p><strong>查看文件历史修改记录</strong></p><figure><img src="https://s2.loli.net/2022/05/11/xWbN8C3zJVPfFQH.png" alt="Show History"><figcaption aria-hidden="true">Show History</figcaption></figure><p><strong>对比两个文件</strong></p><p>右键 Compare with 选择比较的文件，或者按住 Ctrl不放选中两个文件，再按下 Ctrl + D</p><p>Do not ignore：不要忽视，Ignore whitespaces：忽略空格</p><p><a href="https://www.jetbrains.com/help/idea/comparing-files-and-folders.html#comparing_files">官方比较文件的详细说明</a></p><p><strong>新增 JDK 与源码</strong></p><p>Project Structure/SDKs，点击 +/Add JDK...</p><figure><img src="https://s2.loli.net/2022/05/11/piUEkF1BnLXh5eH.png" alt="选择 JDK 安装目录"><figcaption aria-hidden="true">选择 JDK 安装目录</figcaption></figure><blockquote><p>SDK是软件开发工具包，辅助开发某一类软件的相关文档、范例和工具的集合都可以叫做SDK；JDK是SDK的子集。</p></blockquote><p>SDKs/Sourcepath/+，导入源码，方便以后 Ctrl + B 查看。</p><figure><img src="https://s2.loli.net/2022/05/11/fXl4QTIqtzS1GeZ.png" alt="导入源码"><figcaption aria-hidden="true">导入源码</figcaption></figure><hr><p><strong>生成 JavaDoc</strong></p><p>Tools/Generate JavaDoc...</p><figure><img src="https://s2.loli.net/2022/05/11/gTJmpRNUGywZ8qx.png" alt="javadoc"><figcaption aria-hidden="true">javadoc</figcaption></figure><figure><img src="https://s2.loli.net/2022/05/11/alZWv21bp3P6nQR.png" alt="选择范围"><figcaption aria-hidden="true">选择范围</figcaption></figure><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">Generate JavaDoc Scope：生成 API 文档的范围Whole project：当前项目的所有模块Module '01-package'：当前模块File：当前文件Custome scope： 自定义范围Include JDK and library sources in -sourcepath：包含 JDK 源码Link to JDK documentation：链接 JDK 的 API 文档Output directory：生成的 API 文档的位置显示 protected 以上级别的内容：private 私有和 package 包级别不显示Locale：语言类型，如 zh_CNOther command line arguments：其它命令行参数：-encoding UTF-8 -charset UTF-8-charset 是告知浏览器此文件采用什么编码方式读取这个文件-encoding 是告知 java 源代码的字符编码Open generated documentation in browser：在浏览器打开生成的文档<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击 OK 后，生成了一大堆 html 文件，点击 index.html 即可。</p><p><strong>清理缓存</strong></p><blockquote><p>我没有经历过，用的挺好，下面是尚硅谷资料的原话。</p></blockquote><p>IntelliJ IDEA首次加载项目的时候,都会创建索引，创建索引的时间跟项目的文件多少成正比。IntelliJIDEA的<mark>缓存和索引主要是用来加快文件查询</mark>，从而加快各种查找、代码提示等操作的速度。</p><p>在某些特殊条件下，IntelliJ IDEA的缓存和索引文件也是会损坏的，比如：断电、蓝屏引起的强制关机，当你重新打开IntelliJ IDEA，很可能 IntelliJ IDEA会报各种莫名其妙错误，甚至项目打不开，IntelliJIDEA主题还原成默认状态。</p><p>即使没有断电、蓝屏，也会有莫名奇怪的问题的时候，也很有可能是 IntelliJIDEA缓存和索引出现了问题，这种情况还不少。遇到此类问题也不用过多担心。我们可以清理缓存和索引。</p><p>File/Invalidate Caches...</p><figure><img src="https://s2.loli.net/2022/05/11/zTlQcmqKHuLkCfE.png" alt="清理缓存"><figcaption aria-hidden="true">清理缓存</figcaption></figure><p>Invalidate Caches：清除缓存</p><p>Reload All from Disk：从磁盘重新加载所有内容</p><figure><img src="https://s2.loli.net/2022/05/11/8nVQj7BRlosWUzu.png" alt="删除所有项目的缓存和索引，当您重新打开项目时，将生成新的缓存。"><figcaption aria-hidden="true">删除所有项目的缓存和索引，当您重新打开项目时，将生成新的缓存。</figcaption></figure><p>Clear file system cache and LocalHistory：清除文件的系统缓存和本地历史修改记录（即清除C:/Users/用户名/AppData/Local/JetBrains/IntelliJIdea2021.2/LocalHistory，一般不建议勾选）</p><p>Clear VCS Log caches and indexes：清除 VCS（版本控制系统）日志缓存和索引</p><p>Clear downloaded shared indexes：清除下载的共享索引</p><p>Ask before downloading new sharedindexes：请在下载新的共享索引之前进行询问</p><p>Invalidate and Restart：清除并重启（老版会全部清除，记得备份config）</p><p>cancel：取消</p><p>Just Restart：仅重启</p><p><strong>取消更新</strong></p><p>打开 Settings，Appearance &amp; Behavior/System Settings/Updates</p><figure><img src="https://s2.loli.net/2022/05/11/YBpHLZI6T812Qg4.png" alt="取消更新"><figcaption aria-hidden="true">取消更新</figcaption></figure><p>老版取消勾选 Automatically check updates for</p><p>下面根据自己的情况取消勾选</p><p>Check IDE updates for Stable Releases：检查 IDEA 稳定版的更新</p><p>Check for plugin updates：检查插件的更新</p><p>Show What's New in the editor after an IDE updateidea：更新后显示更新的内容</p><p><strong>插件使用</strong></p><p>Settings/Plugins，在 Marketplace 中搜自己想要的插件，installed是已安装的插件。（官方的插件库：<a href="https://plugins.jetbrains.com/">https://plugins.jetbrains.com/</a>）</p><p>也可以点击设置从磁盘上安装插件。</p><figure><img src="https://s2.loli.net/2022/05/11/SeMUcuRL59f6odA.png" alt="市场"><figcaption aria-hidden="true">市场</figcaption></figure><table><colgroup><col style="width: 20%"><col style="width: 40%"><col style="width: 40%"></colgroup><thead><tr class="header"><th style="text-align: center;">插件名</th><th style="text-align: center;">功能</th><th style="text-align: center;">网址</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Key promoter</td><td style="text-align: center;">快捷键提示</td><td style="text-align: center;">https://plugins.jetbrains.com/plugin/4455?pr=idea</td></tr><tr class="even"><td style="text-align: center;">CamelCase</td><td style="text-align: center;">驼峰式命名和下划线命名交替变化</td><td style="text-align: center;">https://plugins.jetbrains.com/plugin/7160?pr=idea</td></tr><tr class="odd"><td style="text-align: center;">Checkstyle-IDEA</td><td style="text-align: center;">代码样式检查</td><td style="text-align: center;">https://plugins.jetbrains.com/plugin/1065?pr=idea</td></tr><tr class="even"><td style="text-align: center;">FindBugs-IDEA</td><td style="text-align: center;">代码 Bug 检查</td><td style="text-align: center;">https://plugins.jetbrains.com/plugin/3847?pr=idea</td></tr><tr class="odd"><td style="text-align: center;">Statistice</td><td style="text-align: center;">代码统计</td><td style="text-align: center;">https://plugins.jetbrains.com/plugin/4509?pr=idea</td></tr><tr class="even"><td style="text-align: center;">JRebel Plugine</td><td style="text-align: center;">热部署</td><td style="text-align: center;">https://plugins.jetbrains.com/plugin/?id=4441</td></tr><tr class="odd"><td style="text-align: center;">CodeGlance</td><td style="text-align: center;">在编辑代码最右侧，显示一块代码小地图</td><td style="text-align: center;">https://plugins.jetbrains.com/plugin/7275?pr=idea</td></tr><tr class="even"><td style="text-align: center;">Eclipse Code Formatter</td><td style="text-align: center;">使用 Eclipse的代码格式化风格，在一个团队中如果公司有规定格式化风格，这个可以使用</td><td style="text-align: center;">https://plugins.jetbrains.com/plugin/6546?pr=idea</td></tr><tr class="odd"><td style="text-align: center;">GsonFormate</td><td style="text-align: center;">把 JSON 字符串直接实例化成类</td><td style="text-align: center;">https://plugins.jetbrains.com/plugin/7654?pr=idea</td></tr><tr class="even"><td style="text-align: center;">IDE Eval Reset</td><td style="text-align: center;">重置 IDEA 使用</td><td style="text-align: center;">https://zhile.io/2020/11/18/jetbrains-eval-reset-deprecated.html</td></tr><tr class="odd"><td style="text-align: center;">Translation</td><td style="text-align: center;">中英文翻译 Ctrl + Shift + O，或选中单词后 Ctrl + Shift + Y</td><td style="text-align: center;">https://plugins.jetbrains.com/plugin/8579-translation</td></tr><tr class="even"><td style="text-align: center;">Xcode-Dark Theme</td><td style="text-align: center;">一种 IDEA 主题</td><td style="text-align: center;">https://plugins.jetbrains.com/plugin/13106-xcode-dark-theme</td></tr><tr class="odd"><td style="text-align: center;">Alibaba Java Coding Guidelines</td><td style="text-align: center;">阿里巴巴代码检查</td><td style="text-align: center;">https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines</td></tr></tbody></table><figure><img src="https://s2.loli.net/2022/05/11/P8eZYImkryDCGHt.png" alt="主题请到这更换"><figcaption aria-hidden="true">主题请到这更换</figcaption></figure><h2 id="x-总结回顾">9.x 总结回顾</h2><p>其实也没有什么好回顾的，我又不擅长做视频，内容也不太全面，大家百度就行。虽然使用IDEA 体验更好，方便整合，但是如果是因为 Eclipse 太卡了，才考虑使用IDEA，但 IDEA 占用内存只会更多，大概 40% 的内存。</p><h2 id="y-实战演练">9.y 实战演练</h2><p>9.1 使用 debug 测试创建对象时的代码执行顺序。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1 语法入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1. JavaSE </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.8 有序数组查找</title>
      <link href="/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.8-you-xu-shu-zu-cha-zhao/"/>
      <url>/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.8-you-xu-shu-zu-cha-zhao/</url>
      
        <content type="html"><![CDATA[<h1 id="第八章-有序数组查找">第八章 有序数组查找</h1><p>内容导视：</p><ul><li>二分查找</li><li>插值查找</li><li>斐波那契查找</li></ul><h2 id="二分查找">8.1 二分查找</h2><p><mark>前提：数组中的元素必须是顺序排列</mark></p><p><strong>Binary Search</strong></p><p>玩过猜数游戏吗？如给定一个数，让你在 [1，100]去猜，猜错了，会提示你猜的数是小了还是大了，最多只能猜 8 次。</p><p>如果使用前面的顺序查找，是不是有可能猜 100 次？</p><p>比较有效率的一种做法就是对半猜，每次都取范围内的中间数：猜50，大了，范围被限定在 [1，50）；向左猜 25，小了，答案在(25，50）区间；向右猜 37，小了，此时的答案就被限制在 (37，50）中...</p><p>那么查找元素时也可以使用这种方法，但是要求数组中<strong>元素必须是顺序</strong>。</p><p>思想：取中间元素与给定值比较，若相等，查找成功；若给定值大于中间元素，则在中间元素的右半部分查找，否则在左半部分查找。</p><p>找数 num，取中间数 arr[mid]，若 num &gt; arr[mid]，就在右边 [mid+1, n- 1] 范围内找；若 num &lt; arr[mid]，在左边 [0, mid - 1]找；重复以上过程，直到 num = arr[mid]或查找范围内无元素为止；记查找范围为 [start, end]。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> end <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 若 start &gt; end，则范围内无元素，查找失败，返回 -1</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 取范围内的中间值</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> midVal <span class="token operator">=</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/*        如果 num 小于猜的数，由于数组中元素是从小到大排序，所以 num 肯定在左边        往左猜，范围被限定在 [start，mid) 中，令 end = mid - 1    */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> midVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>            end <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> midVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">/*            如果 num 大于猜的数，所以 num 肯定在右边            范围被限定在 (mid，end] 中，令 start = mid + 1        */</span>            start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">/*            到这条分支，说明 num = arr[mid]，找到 num 且下标为 mid            结束方法执行，直接返回 num 的下标        */</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 到这里说明没有找到 num，返回 -1</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二分查找每次都将查找范围缩小一半，到一个元素为止，平均时间复杂度为O(log<sub>k</sub>n）。</p><h2 id="插值查找">8.2 插值查找</h2><p>Interpolation Search</p><p><mark>当元素分布均匀时</mark>，可以通过控制权重的方法，使得 mid更加接近要查找的元素 num 所在位置。</p><p>举例：{2、5、... 、1000000} 近百万长度的数组中，寻找元素 8的下标，如果使用二分查找，不偏不倚从 50 万、25 万、12.5 万...开始慢慢向左找，权重为 1/2，还是慢了。</p><p>我们可以观察到，8 相比 100万而言十分地小，应该从更靠左的地方开始找，而不是从中间。</p><p>只需改动一点代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> weight <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">-</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">*</span> weight<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当要查找的数 num 特别靠近范围的左端 arr[start]时，分子值、权重（weight）趋向于 0，那么 mid 趋向start，舍弃了右大半部分的查找范围；</p><p>当 num 处于中间时，weight 趋向 1/2，mid 也会在中间附近开始查找。</p><p>当 num 特别靠近 arr[end] 时，weight 趋向 1，mid 会更加接近 end。</p><p>可以验证，比如 {0，1，2，3，4，...，10000000} 中寻找 1 的下标：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">初始值：start = 0，end = 10000000;weight = (1 - 0) / (10000000 - 0) = 0;mid = 0 + (10000000 - 0) * 0 = 0;1 &gt; arr[0]，向右找，start = 0 + 1 = 1;下一次循环，weight = (1 - 1) / (1000000 - 1) = 0;mid = 1 + (1000000 - 1) * 0 = 1;1 = arr[1]，找到了，只需两次。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要是使用二分法，需要 ⌊log<sub>2</sub>10000000⌋ - 1 = 22 次。</p><p>但是需要注意由于这种方式依赖 num 得出下标，所以 num 的值要在arr[start]、arr[end] 之间，否则会计算出负数，导致下标越界。</p><p>可以在循环之前加入：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">||</span> num <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="斐波那契查找">8.3 斐波那契查找</h2><p>除了对半分，还有黄金分割；不知道你们听说过斐波那契数列没有，随着 n的增大，相邻两个斐波那契数的比值 f(n）/ f(n+1）会逐渐趋向黄金分割比0.61803398...，下面我们就利用斐波那契数列完成分割。</p><h3 id="斐波那契数列">8.3.1 斐波那契数列</h3><p>Fibonacci sequence：{1，1，2，3，5，8，13，21，34 ...}</p><p>性质：数组前两项的和等于后一项，用递归描述：f(n）= f(n-1）+f(n-2），n &gt; 2 且是整数；</p><p><strong>递归</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取第 n 项的斐波那契数</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 前一项</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果 n 是第 1 项，返回 1，否则返回 0</span>        <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>循环</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n2 <span class="token operator">=</span> n0 <span class="token operator">+</span> n1<span class="token punctuation">;</span><span class="token comment">// 后移一位</span>    n0 <span class="token operator">=</span> n1<span class="token punctuation">;</span>n1 <span class="token operator">=</span> n2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> n2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>循环比递归效率高些。</p><h3 id="斐波那契查找-1">8.3.2 斐波那契查找</h3><p>Fibonacci Search：前提是有序数组。</p><p>{0，1，1，2，3，5，8，13，21，34 ...}，0 是第 0 项。</p><blockquote><p>引子：数组长度为 n，下标从 0 到 n - 1，总范围：[0, n - 1]；从 start开始取出 8 个元素，则它们的下标分别为 start、start + 1、start + 2、...start + 7 即 [start, start + 7]。</p></blockquote><blockquote><p>引子 2：记第 k 项的斐波那契数为 f(k），则 k &gt; 2 时，有 f(k）= f(k- 1）+ f(k - 2）</p></blockquote><p>设 k 为正整数，从个数为 f(k）- 1 的元素集合中寻找 num的下标，记最左边的元素下标 start，则查找范围为 [start, start + f(k）-2]，取 mid = start + f(k - 1）- 1，将其分割成两个部分，左边范围：[start,mid - 1] 即 [start, start + f(k - 1）- 2]；右边范围：[mid + 1, f(k）- 2]即 [start + f(k - 1）, start + f(k）- 2]；</p><p>左边部分的元素个数为 (start + f(k - 1）- 2）- start + 1 = f(k - 1）-1；</p><p>右边部分的元素个数为 (start + f(k）- 2）- (start + f(k - 1））+ 1 =f(k）- f(k - 1）- 1 = f(k - 2）- 1；</p><p>无论是左部分还是右部分，都可以重复上述过程，如从元素个数为 f(m）- 1的集合中寻找 num 的下标，记最左边的元素下标为 start ... （左半部分 m = k- 1，右半部分 m = k - 2）</p><p>直到 arr[mid] = num 为止。</p><p>需要注意的是数组长度 n 并不一定等于 f(k）- 1，这需要将其扩容至 f(k）-1（保证 f(k）- 1 要大于等于 n）；多出来的部分补最大值 arr[n -1]，以保证是有序数组，所以如果查到的 num 的下标大于等于 n，则 arr[num] =arr[n - 1]，返回 n - 1 即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fibonacciSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> end <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 如果 f(k) - 1 &lt; n，则 k++，一直到 f(k) - 1 &gt;= n 为止</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token function">f</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 前 n 个元素与 arr 一致</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 多出来的部分补 arr[n - 1]（下标大于等于 n 的元素都为 arr[n - 1]）</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">f</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> midVal <span class="token operator">=</span> temp<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// num 在左半部分，k 应减一</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> midVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>            end <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            k<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token comment">// num 在右半部分，k 应减二    </span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> midVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>            start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            k <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment">// arr[mid] = num    </span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// mid &lt; n</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token comment">// mid &gt;= n    </span>            <span class="token comment">/*            当下标大于等于 n 时，补的都是 arr[n - 1]，所以有 arr[mid] = arr[n - 1];            即 num = arr[n - 1]，应返回 n - 1；            */</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>f(k）可以使用备好的斐波那契数组 f[k] 取代。</p></blockquote><p>这种六四分的方式，如果要查找的元素偏右边一些，当然会比二分查找效率高；否则还不如二分查找。</p><h2 id="x-总结回顾">8.x 总结回顾</h2><p>一片朦胧选二分，分布均匀选插值，偏右选黄金分割。</p><h2 id="y-脑海练习">8.y 脑海练习</h2><p>8.1 编写方法返回长度为 n 的斐波那契数组。（包括 0）</p>]]></content>
      
      
      <categories>
          
          <category> 1.1 语法入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1. JavaSE </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.7 排序优化</title>
      <link href="/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.7-pai-xu-you-hua/"/>
      <url>/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.7-pai-xu-you-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="第七章-排序优化">第七章 排序优化</h1><p>内容导视：</p><ul><li>快速排序</li><li>堆排序</li><li>希尔排序</li></ul><p>分别对应冒泡、选择、插入排序。</p><ul><li>归并排序</li><li>桶排序</li><li>基数排序</li></ul><h2 id="快速排序">7.1 快速排序</h2><p>内容导视：</p><ul><li>递归</li><li>快速排序</li><li>快速排序复杂度分析</li><li>快速排序优化</li><li>快速排序变体</li></ul><h3 id="递归">7.1.1 递归</h3><p>方法调用自身称为递归。将大问题拆解为与原问题相似且规模较小的问题，直到拆分到可以求解的规模，然后合并的过程。</p><p>一定要设置结束条件，否则会无限循环。（结束条件：即当满足某种条件时，不再调用方法）（每次调用方法就是开启了一个新栈，压在原有栈上面）</p><p><strong>问题 1</strong>：T(n）= T(n - 1）+ (n - 1），n &gt; 1，其中T(0）、T(1）等于 1，求 T(100）。</p><p>解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 这里通常写成 n &lt; 2</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token class-name">T</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4951</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4952</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法 T(100），它返回的值应为 T(99）+ 99，但是需要先求出T(99）后才能返回；</p><p>调用了方法 T(99），它返回的值为 T(98）+ 98；</p><p>...</p><p>调用了 T(2），它返回的值为 T(1）+ 1；</p><p>调用 T(1），满足 if 条件，返回 1，回到上一层；</p><p>T(2）= T(1）+ 1 = 1 + 1 = 2，返回 2，回到上一层；</p><p>T(3）= 2 + 2 = 4，返回 4；</p><p>...</p><p>T(99）= 4754 + 98 = 4852，返回 4852；回到最顶层；</p><p>T(100）= 4852 + 99 = 4951，这就是调用 T(100）得到的结果。</p><p>注意了，这里的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>就是结束条件，可以想象如果没有这段代码，程序还会继续求 T(0）+0、T(-1）-1、... 一直到内存不够用，报 java.lang.StackOverflowError栈溢出错误。</p><p>当然如果 n 很大或者不往结束条件逼近，你在等待T(100）返回结果，T(100）在等待 T(99）返回结果，T(99）等待 T(98） ...当等待个数过多时，也会内存不足；所以我们尽量使用循环代替递归。</p><hr><p>解法 2：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">T(n) = T(n - 1) + (n - 1)；T(n - 1) = T(n - 2) + (n - 2);...T(3) = T(2) + 2;T(2) = T(1) + 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上面方程相加： T(2）+ T(3）+ ... + T(n - 1）+ T(n）= T(1）+ T(2）+... + T(n - 2）+ T(n - 1）+ <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.366ex" xmlns="http://www.w3.org/2000/svg" width="4.162ex" height="5.807ex" role="img" focusable="false" viewBox="0 -1520.9 1839.6 2566.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo" transform="translate(136,0)"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(90.2,-887.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(0,950) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1494.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span></p><p>整理得：T(n）= T(1）+ <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.366ex" xmlns="http://www.w3.org/2000/svg" width="4.162ex" height="5.807ex" role="img" focusable="false" viewBox="0 -1520.9 1839.6 2566.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo" transform="translate(136,0)"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(90.2,-887.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(0,950) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1494.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> = 1 + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="6.204ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 2742.3 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(989,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1589,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2367,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2867,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(1194.4,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="2502.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></p><p>将 100 代入得：1 + 4950 = 4951。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> n <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>问题 2</strong>：T(n）= 2 * T(n/2）+ n，n 为 2的幂，T(0）、T(1）= 1，求 T(1024）。</p><p>解：</p><p>T(n）= 2 * T(n/2）+ n；</p><p>第 1 个式子：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex" xmlns="http://www.w3.org/2000/svg" width="4.326ex" height="3.167ex" role="img" focusable="false" viewBox="0 -1047.1 1912.2 1399.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mi" transform="translate(744,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1672.2" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> =<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.238ex" xmlns="http://www.w3.org/2000/svg" width="5.926ex" height="3.607ex" role="img" focusable="false" viewBox="0 -1047.1 2619.3 1594.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1693,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(2193,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(744,-370.3) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(600,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(1100,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><rect width="2379.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + 1；</p><p>第 2 个式子：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.238ex" xmlns="http://www.w3.org/2000/svg" width="5.926ex" height="3.607ex" role="img" focusable="false" viewBox="0 -1047.1 2619.3 1594.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1693,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(2193,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(744,-370.3) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(600,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(1100,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><rect width="2379.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>= <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.238ex" xmlns="http://www.w3.org/2000/svg" width="5.926ex" height="3.607ex" role="img" focusable="false" viewBox="0 -1047.1 2619.3 1594.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1693,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(2193,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(2693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(744,-370.3) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(600,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(1100,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><rect width="2379.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + 1；</p><p>第 3 个式子：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.238ex" xmlns="http://www.w3.org/2000/svg" width="5.926ex" height="3.607ex" role="img" focusable="false" viewBox="0 -1047.1 2619.3 1594.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1693,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(2193,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(2693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(744,-370.3) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(600,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(1100,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><rect width="2379.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>= <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.238ex" xmlns="http://www.w3.org/2000/svg" width="5.926ex" height="3.607ex" role="img" focusable="false" viewBox="0 -1047.1 2619.3 1594.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1693,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(2193,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mo" transform="translate(2693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(744,-370.3) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(600,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(1100,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g><rect width="2379.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + 1；</p><p>...</p><p>第 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="9.093ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 4019 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(1696.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2518.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3519,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span> 个式子：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="4.166ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 1841.5 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(744,-345) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><rect width="1601.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="4.166ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 1841.5 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(744,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="1601.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + 1；</p><p>第 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="5.196ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 2296.6 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(1696.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> 个式子：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="4.166ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 1841.5 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(744,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="1601.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="4.166ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 1841.5 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(744,-345) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><rect width="1601.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + 1；</p><p>上式相加得：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex" xmlns="http://www.w3.org/2000/svg" width="4.326ex" height="3.167ex" role="img" focusable="false" viewBox="0 -1047.1 1912.2 1399.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mi" transform="translate(744,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1672.2" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> =<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="4.166ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 1841.5 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(744,-345) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><rect width="1601.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="5.196ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 2296.6 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(1696.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> * 1 = 1 + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="5.196ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 2296.6 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(1696.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>。</p><p>整理得：T(n）= n * (1 + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="5.196ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 2296.6 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(1696.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>）；</p><p>T(1024）= 1024 * (1 + 10）= 11264</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token class-name">T</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一共多少个式子的求法</p></blockquote><p>第 i 个式子：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.254ex" xmlns="http://www.w3.org/2000/svg" width="7.895ex" height="3.757ex" role="img" focusable="false" viewBox="0 -1106.5 3489.5 1660.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1693,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="msup" transform="translate(2193,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3923.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(744,-377.4) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(600,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="msup" transform="translate(1100,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><rect width="3249.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.248ex" xmlns="http://www.w3.org/2000/svg" width="6.449ex" height="3.746ex" role="img" focusable="false" viewBox="0 -1104 2850.5 1655.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1693,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="msup" transform="translate(2193,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3020,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(744,-374.9) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(600,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="msup" transform="translate(1100,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g><rect width="2610.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + 1;</p><p>令 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.404ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2830.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(600,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="msup" transform="translate(1100,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></span> = 2，求得 i = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="5.196ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 2296.6 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(1696.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span></p><h3 id="快速排序-1">7.1.2 快速排序</h3><p>Quick Sort是对冒泡排序的一种改良，不再是相邻元素之间的比较交换，并采用了分而治之（divideand conquer）的思想。</p><p>算法思路：将数组分割（partition）为独立的两部分，保证左边部分的所有元素都小于右边部分的所有元素；然后对这两部分元素的集合继续分割，如此反复操作，直到无法分割（待分割的元素个数为0、1 时）。</p><p><strong>如何分割？</strong></p><p>在待分割的集合中选择一个基准数，使得左边的元素都比基准数小，右边的元素都比基准数大，这就是左右两部分了；下面的代码，只是为了更好理解分而治之的思想：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 只有保存的元素个数大于 1 时才能进入，才能分割</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 选择中间的元素为基准数</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> middle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 得到每一个元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> item <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 大于 base 的元素放入 left 中</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&lt;</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>                left<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等于 base 的元素放入 middle 中                </span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">==</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>                middle<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 大于 base 的元素放入 right 中                      </span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&gt;</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>                right<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 对 left、right 集合重复上述操作</span>        <span class="token function">sort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 清空传入集合保存的元素</span>        items<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 添加 left、middle、right 集合的所有元素</span>        items<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        items<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>middle<span class="token punctuation">)</span><span class="token punctuation">;</span>        items<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//System.out.println(items);</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以 {51，4，2，20，7，12} 为例，基准数为 20，调用 sort方法后被分为三块空间（小于基准数的元素放进 left 中、大于基准数的元素放进right 中）：left{4，2，7，12}、middle{20}、right{51}；</p><p>调用方法 sort(left），对 left 进行上述操作，此时 left 中基准数为7，把 left 分为三块空间：left{4，2}、middle{7}、right{12}...</p><figure><img src="https://s2.loli.net/2022/04/16/Miazjs1AhSB9CEr.png" alt="不断分割，再合为一"><figcaption aria-hidden="true">不断分割，再合为一</figcaption></figure><p>到此已经不可再分，再将其合并；先把第二层的 left 清空，添加第三层的left、middle、right 所有的元素，则第二层的 left 为 {2，4}，同理第一层的left 为 {2，4，7，12}；最终得到 {2，4，7，12，20，51}。</p><hr><p><strong>在数组中如何分割</strong></p><p>以 8，4，7，5，6，10，2，3，11 为例，选择基准数arr[0]：8，我们需要把小于 8 的放在左边，大于 8 的放在右边。</p><p>所以从待分割的集合两端开始向中间找，直到交汇：从<mark>右往左负责找到小于8 的数</mark>，然后交换到左边；从<mark>左往右负责找到大于 8的数</mark>，然后交换到右边；每次交换后，换另一个队伍来。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">先定义 base 变量，保存基准数 8从右往左找比较 arr[8] 与 8，11 &gt; 8，继续比较 arr[7] 与 8，3 &lt; 8，停下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个 3 该交换到左边的哪？</p><p>与最左边的基准数交换吧，反正我们定义了变量保存着它，不怕它不见。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">arr[7] 与 arr[0] 交换，交换后：(3)，4，7，5，6，10，2，(8)，11然后从左往右找比较 arr[0] 与 8，3 &lt; 8，继续（多余的比较）比较 arr[1] 与 8，4 &lt; 8，继续比较 arr[2] 与 8，7 &lt; 8，继续比较 arr[3] 与 8，5 &lt; 8，继续比较 arr[4] 与 8，6 &lt; 8，继续比较 arr[5] 与 8，10 &gt; 8，停下将它与 8 交换即 arr[5] 与 arr[7] 交换，交换后：3，4，7，5，6，(8)，2，(10)，11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">从右往左找，上一次是 arr[7]，这次接着往左找比较 arr[6] 与 8，2 &lt; 8，停下arr[6] 与 arr[5] 交换，交换后：3，4，7，5，6，(2)，(8)，10，11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">从左往右找，上一次是 arr[5]，这次接着往右找比较 arr[6] 与 8，...等等，这已经比较过了，不能继续了，否则就越界了交汇处为 arr[6]，下标记为 pivot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>至此 3，4，7，5，6，2，(8），10，11。</p><p>8 之前元素的都是小于 8 的，之后的元素都是大于 8的，这就是两部分了：{3，4，7，5，6，2}、{10，11}</p><p>然后对这两部分重复以上操作。</p><p><strong>代码实现</strong></p><p>由于待分割的不只是整个数组（头尾下标分别为 0、length -1），为了方便两个队伍寻找，需要使用变量 start、end指定待分割集合的头尾下标，那么先选头为基准数，再定义两个变量 i =start、j = end，队伍 1 每找一个就 i++，队伍 2 每找一个就j--，找到了就停下，此刻的 i、j 就是待交换元素的下标。</p><p>分割过程中，两个队伍寻找的范围不能越界，即保证 i &lt; j。</p><p>分割后的两部分的范围：[start，pivot - 1]、[pivot +1，end]，直到分无可分，也就是待分割的集合的元素个数为 0 或 1。</p><p>同时可以观察到 base 的位置一直在变：基准数下标默认为start，在最左边；</p><p>从右往左找到了小数，交换元素位置，记为 swap(j，start），由于 i初始值为 start，可以替换为 swap(j，i），此时基准数的下标为 j；</p><p>从左往右找到了大数，下标为i，与基准数交换位置，swap(i，j），此时基准数下标为 i...如此循环反复。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 一开始分割整个数组时的头尾分别为：0、length - 1</span>    <span class="token function">qSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">qSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/*    只有元素个数大于 1，才有必要分割；    end = start，如 [0，0] 有 1 个元素，且下标为 1，没必要分    end &gt; start，如 [3，4] 有 2 个元素，下标为 3、4，需要分割*/</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&gt;</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 头为基准数</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> end<span class="token punctuation">;</span>        <span class="token keyword">int</span> temp<span class="token punctuation">;</span>        <span class="token comment">// 左、右队伍轮流找</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 从右往左找，如果找到小于 base 的数，循环会终止</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 小数放左边</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 从左往右找，找到大于 base 的数</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 大数放右边</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 到这里，说明 i = j，也就是交汇处，那么 i 之前的部分与 i 之后的部分，再继续以上操作</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速排序复杂度分析">7.1.3 快速排序复杂度分析</h3><p><strong>最差情况</strong></p><p>待排序的数组为逆序或顺序时，为最差情况；每次分割后得到的其中一个集合总是为空，如{1，2，3，4，5，6，...，n}，因为我们默认选用最左边的 1作为基准数，得到的两部分为 {}、{2，3，4，5，...，n}；</p><p>空集与个数为 1 的集合无法分割所以不计入，另一个部分选取基准数为2，继续分为两部分：{}、{3，4，5，...，n}...</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">第 1 次分割 {1，2，3，...，n}第 2 次分割 {2，3，...，n}...第 n - 1 次分割 {n - 1，n}    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里只谈与基准数比较的次数，以顺序为例。（逆序比较次数会比顺序多1）</p><p>第 1 次分割：先从右往左找，arr[n - 1] 与 1 比较、arr[n - 2] 与 1 比较... arr[1] 与 1 比较时，2 &gt; 1，进入循环 j--，j 为 0，下次循环时 i&lt; j 为 false，退出循环；一共比较了 n - 1 次；然后调用方法qSort(arr，1，n - 1）进行第二次分割；</p><p>第 2 次分割：从右往左，arr[n - 1] 与 2 比较 ... arr[2] 与 2 比较时，3&gt; 2，进入循环 j--，j 为 1，下次循环时 i &lt; j 为false，退出循环；一共比较了 n - 2 次；</p><p>...</p><p>第 n - 1 次分割：一共比较 1 次。</p><p>一共比较了 1 + 2 + ... + (n - 1）= <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="6.204ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 2742.3 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(989,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1589,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2367,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2867,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(1194.4,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="2502.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> 次，时间复杂度为O(n<sup>2</sup>）；其中每次分割时需要定义 4 个变量存放值，空间复杂度为O(n），然而很可能却什么都没干。</p><p>太依赖 base 的取值，比如对 n个相同的数进行排序，你可能注意到这是创建了 n - 1 个栈，当 n过大时，很容易栈溢出 StackOverflowError。</p><p><strong>最好情况</strong></p><p>最好情况，每次都是对半分，当然这还是过高估计了，选中间元素作为基准数，如偶数个集合{1，2，3，4} 分为{1，2}、{4}，其中一个少于一半；只是为了简化运算而已，结果不算精确。</p><p>先以小见大，{1，2，3，4，5} 选取中间的 3 作为基准数，从右往左，arr[4]与 3 比较、arr[3] 与 3 比较，arr[2] 与 3 比较、arr[1] 与 3比较，停下；从左往右 ，arr[0] 与 3 比较，已到交汇处，停下；一共 5次。</p><p>j 先移动，当比较结果为 true 时，j 往左移；比较结果为 false 时，换 i往右移 ... 换着来，直到 i 与 j 移动的次数正好将整个待分割的集合覆盖（i =j），比较次数即为总移动次数，为待分割集合元素的个数。</p><hr><p>第 1 次分割 {1，2，3，...，n}，比较 n 次 第 2 次分割{1，2，...，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.955ex" height="2.379ex" role="img" focusable="false" viewBox="0 -706.5 864.3 1051.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(220,394) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(255.4,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>} * 2，比较n / 2 * 2 = n 次 第 3 次分割 {1，2，...，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.955ex" height="2.379ex" role="img" focusable="false" viewBox="0 -706.5 864.3 1051.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(220,394) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(255.4,-345) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>} * 4，比较 n / 4 * 4 = n 次第 4 次分割 {1，2，...，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex" xmlns="http://www.w3.org/2000/svg" width="1.955ex" height="2.414ex" role="img" focusable="false" viewBox="0 -706.5 864.3 1067.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(220,394) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(255.4,-345) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>} * 8，比较 n / 8 * 8 = n 次...</p><p>第 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="5.196ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 2296.6 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(1696.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> 次分割 {1，2} * <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="7.038ex" height="1.932ex" role="img" focusable="false" viewBox="0 -853.7 3110.6 853.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(1696.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2296.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3074.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></span>，比较 2 * <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="7.038ex" height="1.932ex" role="img" focusable="false" viewBox="0 -853.7 3110.6 853.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(1696.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2296.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3074.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></span> = n 次</p><p>一共 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="6.553ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 2896.6 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(898,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(1383,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(2296.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> 次。时间复杂度为O(<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="6.587ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 2911.4 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(898,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(1383,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mi" transform="translate(2311.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>），空间复杂度为 O(<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="6.587ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 2911.4 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(898,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(1383,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mi" transform="translate(2311.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>）。</p><hr><blockquote><p>第二次分割的分别是 {1，2，...，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.955ex" height="2.379ex" role="img" focusable="false" viewBox="0 -706.5 864.3 1051.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(220,394) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(255.4,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>}、{<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.955ex" height="2.379ex" role="img" focusable="false" viewBox="0 -706.5 864.3 1051.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(220,394) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(255.4,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>，...，n}，只是问题规模相同，于是就相当于2 个 {1，2，...，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.955ex" height="2.379ex" role="img" focusable="false" viewBox="0 -706.5 864.3 1051.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(220,394) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(255.4,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>}。</p><p>第 i 次分割 {1，2，...，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.854ex" xmlns="http://www.w3.org/2000/svg" width="3.764ex" height="2.452ex" role="img" focusable="false" viewBox="0 -706.5 1663.7 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(619.7,394) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msup" transform="translate(220,-377.4) scale(0.707)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><rect width="1423.7" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>} * <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="3.915ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 1730.6 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></span>，令最后一项等于2，就是最后一次分割，然后求 i 即可。</p></blockquote><p><strong>平均复杂度</strong></p><p>T(n）为本次分割时的比较次数 + 继续分割两部分时的比较次数；k为左部分元素的个数，则另一部分元素个数为 n - k -1；有 T(n）= n + T(k）+T(n - 1 - k）；其中 T(0）、T(1）无法分割，记为 1。</p><p>分割后的两部分元素个数有如下 n 种情况：</p><p>(0，n - 1）、(1，n - 2）、...、(n - 2，1）、(n - 1，0）；</p><p>每种情况出现的概率为 1/n；把所有情况累加，除以 n 算出平均值。</p><hr><p>左部分求和 T(0）+ T(1）+ T(2）+ ... + T(n - 2）+ T(n - 1）= <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.561ex" xmlns="http://www.w3.org/2000/svg" width="7.667ex" height="6.003ex" role="img" focusable="false" viewBox="0 -1520.9 3388.6 2653.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo" transform="translate(136,0)"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(66.5,-887.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(0,950) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1494.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(2198.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2587.6,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2999.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>左部分的平均值：(1/n）* <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.561ex" xmlns="http://www.w3.org/2000/svg" width="7.667ex" height="6.003ex" role="img" focusable="false" viewBox="0 -1520.9 3388.6 2653.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo" transform="translate(136,0)"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(66.5,-887.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(0,950) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1494.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(2198.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2587.6,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2999.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>；</p><p>右部分的平均值：(1/n）* <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.561ex" xmlns="http://www.w3.org/2000/svg" width="7.667ex" height="6.003ex" role="img" focusable="false" viewBox="0 -1520.9 3388.6 2653.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo" transform="translate(136,0)"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(66.5,-887.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(0,950) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1494.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(2198.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2587.6,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2999.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>；</p><p>所以 T(n）= n + (2/n）* <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.561ex" xmlns="http://www.w3.org/2000/svg" width="7.667ex" height="6.003ex" role="img" focusable="false" viewBox="0 -1520.9 3388.6 2653.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo" transform="translate(136,0)"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(66.5,-887.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(0,950) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1494.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(2198.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2587.6,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2999.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>；</p><p>等式两边乘以 n 得：n * T(n）= n<sup>2</sup> + 2 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.561ex" xmlns="http://www.w3.org/2000/svg" width="7.667ex" height="6.003ex" role="img" focusable="false" viewBox="0 -1520.9 3388.6 2653.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo" transform="translate(136,0)"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(66.5,-887.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(0,950) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1494.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(2198.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2587.6,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2999.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>；</p><p>将 n-1 代入式子得：(n-1）* T(n-1）= (n-1）<sup>2</sup> + 2 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.561ex" xmlns="http://www.w3.org/2000/svg" width="7.667ex" height="6.003ex" role="img" focusable="false" viewBox="0 -1520.9 3388.6 2653.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo" transform="translate(136,0)"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(66.5,-887.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(0,950) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1494.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(2198.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2587.6,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(2999.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>；</p><p>两个式子相减得：n * T(n）- (n-1）* T(n-1）= 2n - 1 + 2 * T(n-1）</p><p>略去常数：n * T(n）= 2n + (n+1）* T(n-1）</p><p>等式两边同时除以 n(n+1）得：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="4.326ex" height="3.281ex" role="img" focusable="false" viewBox="0 -1047.1 1912.2 1450.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(292.1,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1672.2" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex" xmlns="http://www.w3.org/2000/svg" width="6.371ex" height="3.167ex" role="img" focusable="false" viewBox="0 -1047.1 2815.9 1399.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2471,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2971,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mi" transform="translate(1195.8,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="2575.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="4ex" height="2.869ex" role="img" focusable="false" viewBox="0 -864.9 1767.9 1267.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(707.2,394) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1527.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> ①</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex" xmlns="http://www.w3.org/2000/svg" width="6.371ex" height="3.167ex" role="img" focusable="false" viewBox="0 -1047.1 2815.9 1399.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2471,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2971,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mi" transform="translate(1195.8,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="2575.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="6.371ex" height="3.281ex" role="img" focusable="false" viewBox="0 -1047.1 2815.9 1450.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2471,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2971,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(744,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="2575.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex" xmlns="http://www.w3.org/2000/svg" width="1.955ex" height="2.755ex" role="img" focusable="false" viewBox="0 -864.9 864.3 1217.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(255.4,394) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="6.371ex" height="3.281ex" role="img" focusable="false" viewBox="0 -1047.1 2815.9 1450.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2471,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2971,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(744,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="2575.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="6.371ex" height="3.281ex" role="img" focusable="false" viewBox="0 -1047.1 2815.9 1450.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2471,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(2971,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(744,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><rect width="2575.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="4ex" height="2.869ex" role="img" focusable="false" viewBox="0 -864.9 1767.9 1267.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(707.2,394) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1527.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></p><p>...</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="4.166ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 1841.5 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(744,-345) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><rect width="1601.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex" xmlns="http://www.w3.org/2000/svg" width="4.166ex" height="3.185ex" role="img" focusable="false" viewBox="0 -1047.1 1841.5 1407.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(744,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><rect width="1601.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex" xmlns="http://www.w3.org/2000/svg" width="4.166ex" height="3.185ex" role="img" focusable="false" viewBox="0 -1047.1 1841.5 1407.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(744,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><rect width="1601.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="4.166ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 1841.5 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(744,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="1601.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.773ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1225.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> ②</p><p>① 到 ② 的式子相加得：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="4.326ex" height="3.281ex" role="img" focusable="false" viewBox="0 -1047.1 1912.2 1450.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(292.1,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1672.2" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="4.166ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 1841.5 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1093,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1593,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(744,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="1601.5" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + 2 * (<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="21.616ex" height="2.869ex" role="img" focusable="false" viewBox="0 -864.9 9554.2 1267.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1015.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(2016,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(2809.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(3587.6,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4032.2,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4476.9,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4921.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(5699.6,0)"><g data-mml-node="mn" transform="translate(255.4,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(6786,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(7786.3,0)"><g data-mml-node="mn" transform="translate(707.2,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1527.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>)</p><p>=<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + 2 * (<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="30.074ex" height="2.869ex" role="img" focusable="false" viewBox="0 -864.9 13292.6 1267.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(1722.4,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(2738.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(3738.4,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(4754.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(5754.4,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(6548,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(7326,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(7770.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(8215.3,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(8660,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(9438,0)"><g data-mml-node="mn" transform="translate(255.4,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(10524.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(11524.7,0)"><g data-mml-node="mn" transform="translate(707.2,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1527.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>)- 2 - 1</p><p>= 2 * (<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="30.074ex" height="2.869ex" role="img" focusable="false" viewBox="0 -864.9 13292.6 1267.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(1722.4,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(2738.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(3738.4,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(4754.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(5754.4,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(6548,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(7326,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(7770.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(8215.3,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(8660,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(9438,0)"><g data-mml-node="mn" transform="translate(255.4,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(10524.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(11524.7,0)"><g data-mml-node="mn" transform="translate(707.2,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1527.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>)- <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></p><p>其中 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.601ex" xmlns="http://www.w3.org/2000/svg" width="4.159ex" height="3.171ex" role="img" focusable="false" viewBox="0 -694 1838.5 1401.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munder"><g data-mml-node="mo" transform="translate(224.7,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(278,0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(556,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(0,-600) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1600,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></g></g></svg></mjx-container></span>(1+ <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.773ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1225.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + ... + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex" xmlns="http://www.w3.org/2000/svg" width="1.955ex" height="2.755ex" role="img" focusable="false" viewBox="0 -864.9 864.3 1217.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(255.4,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>) = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="3.621ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 1600.7 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(834,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(1000.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex" xmlns="http://www.w3.org/2000/svg" width="1.229ex" height="1.486ex" role="img" focusable="false" viewBox="0 -441 543 657"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FE" d="M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z"></path></g></g></g></svg></mjx-container></span></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="24.765ex" height="3.281ex" role="img" focusable="false" viewBox="0 -1047.1 10946.1 1450.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(292.1,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1672.2" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(2190,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="mn" transform="translate(3245.8,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(3968,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mo" transform="translate(4690.2,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(4968.2,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(5802.2,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(5802.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6191.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(7013.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(8013.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(8513.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(9124.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(10125.1,0)"><path data-c="1D6FE" d="M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z"></path></g><g data-mml-node="mo" transform="translate(10668.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>- <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></p><p>略去系数：</p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="16.059ex" height="3.281ex" role="img" focusable="false" viewBox="0 -1047.1 7098.2 1450.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(292.1,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1672.2" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(2190,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3245.8,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(4008.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4397.8,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(4695.8,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(5180.8,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(510,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mi" transform="translate(6109.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6709.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="17.801ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7868 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2359.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3415.6,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(4178.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4567.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5167.6,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(5465.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(5950.6,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mi" transform="translate(6879,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(7479,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p><p>所以时间、空间复杂度都为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="10.073ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4452.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1752,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(2050,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(2535,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mi" transform="translate(3463.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4063.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>。</p><blockquote><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex" xmlns="http://www.w3.org/2000/svg" width="1.229ex" height="1.486ex" role="img" focusable="false" viewBox="0 -441 543 657"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FE" d="M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z"></path></g></g></g></svg></mjx-container></span> 称为 Euler常数（欧拉常数），约等于 0.57721566490...</p></blockquote><hr><p>是不稳定排序。</p><h3 id="快速排序优化">7.1.4 快速排序优化</h3><p><strong>优化不必要的交换</strong></p><p>以之前的数组分割为例：</p><figure><img src="https://s2.loli.net/2022/04/18/tWv6q3XBz1sPNIp.png" alt="之前的例子"><figcaption aria-hidden="true">之前的例子</figcaption></figure><p>可以看到 8 就像个沙包一样被扔来扔去，但最终的位置是 pivot 处（i = j处）；干脆舍弃掉这个中转站，让队伍 2 找到的小数与队伍 1找到的大数进行交换...最后再把 8 与 pivot处元素交换，这样简化了很多不必要的交换。</p><p>上图等同如下：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">基准数 与 3 交换10 与 基准数 交换...基准数 与 arr[pivot] 交换<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以简化为：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">10 与 3 交换...基准数 与 arr[pivot] 交换<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到的结果稍许不同，但大致上令人满意，改动原来的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>        j<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 让队伍 1 与队伍 2 找到的数（arr[i]、arr[j]）进行交换</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 基准数与 arr[pivot] 交换</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 递归中...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>关于基准数的选择</strong></p><p>如果选用第一个元素为基准数，当待排序的数组为逆序或有序时，基准数是最大或最小的元素，分割的其中一部分总是为空，时间复杂度为O(n<sup>2</sup>），之前已经论证过，所以最好避免这种策略。</p><p>更常见的做法是在待分割的集合中取 k个数，在里面选择一个中间数作为基准数。</p><p>以 3 个数为例，取 arr[start]、arr[（start+end）/ 2]、arr[end]</p><p>我们需要做的就是让中间数移动到 start 处，然后我们还是以 arr[start]作为基准数。</p><p>假如我们取出的三个数为：arr[0]、arr[5]、arr[10] 分别对应a、b、c；这里不探究相等的情况。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">如果 arr[0] &gt; arr[10]，a &gt; c让它们交换位置：c、b、a，保证 arr[0] &lt; arr[10]当然如果不满足条件，不用交换，也保证了 arr[0] &lt; arr[10]如果 arr[5] &gt; arr[10]，b &gt; a交换：c、a、b，保证 arr[5] &lt; arr[10]如果 arr[0] &lt; arr[5]，c &lt; a交换：a、c、b，保证 arr[0] &gt; arr[5]结合：arr[5] &lt; arr[0] &lt; arr[10]arr[0] 为中间数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*当数组长度过大时，为了避免越界，使用 start + (end - start) / 2 或 start + ((end - start) &gt;&gt; 1) 代替 (start + end) / 2。*/</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 保证 arr[start] &lt; arr[end]</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> m<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 保证 arr[m] &lt; arr[end]</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 保证 arr[start] &gt; arr[m]</span><span class="token punctuation">}</span><span class="token comment">/*arr[m] &lt; arr[start] &lt; arr[end]所以 arr[start] 为中间数*/</span><span class="token keyword">int</span> base <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 剩下照旧</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用循环代替递归</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">qSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 将 if 改成循环</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>end <span class="token operator">&gt;</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 略...</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        start <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对左部分排好序后，接着执行 start = i + 1，开始下一次循环，int base =arr[i + 1]，相当于调用方法 qSort(arr，i +1，end）；然后对右部分排序。</p><h3 id="快速排序变体">7.1.5 快速排序变体</h3><p>我们之前只选择第一个元素作为基准数，你有没有想过这是为什么？</p><p>以 1、9、10、3、7、8、9 为例，使用优化后的排序，假设以 3为基准数：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">i = 0;j = 6;队伍 2 开始向左找一个小于 3 的数：略...比较 arr[1] 与 基准数，9 &gt; 3 继续循环，j--，j = 0，进入下一次循环此时 i &lt; j 为 false，退出循环队伍 1 开始寻找，也被迫退出循环此时 i、j 相等都是 0，不用交换最后 3 与交汇处的元素交换：3、9、10、1、7、8、9分割的前部分：{}后部分：9、10、1、7、8、9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一次失败的分割，原因是因为队伍 2 探测的元素都是大于等于 3的，最后还未来得及探测第一个元素，就被 i &lt; j这个条件驳回了，之前我们选用第 1个元素作为基准数，遇见这种情况时，交汇处正是基准数所在位置，右边都是大于等于基准数的元素，左边为空，所以不用担心；既然现在要使用其它位置的元素作为基准数，不妨大胆一点，去掉这个条件。</p><p>但可能会导致下标越界，请看代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>    j<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果待分割的元素都 &gt;= base，j不停地减减，直至变为负数，会导致越界；不妨将等号去掉，使用基准数限制住它的移动，这样当j 移动到基准数处时，arr[j] = base，直接退出循环。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 现在等于 base 也会终止循环</span>        j<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是随之又产生了新的问题，如果数组中存在多个与基准数相等的元素，当队伍2、1 由于这个原因都停下时，此时 arr[i] = arr[j] = base，然后arr[i]、arr[j] 交换，进入下一次循环；</p><p>队伍 2 寻找时，此时 arr[j] 还是等于 base，直接退出循环，队伍 1也是如此，程序就进入无限循环。</p><p>可能还有人不明白我在说什么，以 3、4、4、5 为例，取基准数为 4；</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">队伍 2 的 j = 2 时，arr[2] = 4，不满足条件退出循环，没有执行 j--队伍 1 的 i = 1 时，arr[1] = 4，同样退出循环i &lt; j，arr[1]、arr[2] 交换位置，交换后：3、4、4、5进入下一次循环，注意此时 i = 1、j = 2队伍 2，arr[2] = 4，不满足条件退出循环，没有执行 j--队伍 1，arr[1] = 4，同样退出循环i &lt; j，arr[1]、arr[2] 交换位置，交换后：3、4、4、5...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于 i 、j都不移动，所以造成了无限循环。常见的做法是交换位置后，如果某个队伍所在位置上的元素等于基准数，就让另一个队伍下标移动。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>为什么不移动自己队伍的下标，如上面代码改为 j-- 可不可以？</p><p>不可以，因为 j 可能指向的是基准数，一移动正好错开了。以 3、1、3、1、2为例验证 j-- 的可行性：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">基准数：3队伍2 找 &lt;= 3 的数，j = 4，arr[4] &lt; 3，停下队伍1 找 &gt;= 3 的数，i = 0，arr[0] = 3，停下swap(arr, 0, 4)后：2、1、3、1、3此时 arr[4] = 3，满足条件，进入 if 语句，执行 j-- 后 j = 3队伍 2 继续向左找，j = 3，arr[3] &lt; 3，停下队伍 1 向右找，i = 2，arr[2] = 3，停下swap(arr, 2, 3)后：2、1、1、3、3此时 arr[3] = 3，满足条件，j-- 后 j = 2i、j 都是 2，退出循环前部分：{2，1}分割点：1后部分：{3，3}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本来 j 不移动，就会被 arr[j] &gt; base 条件卡住，j不会越界，但是现在使用了 j--，让 j 成功越过 base，现在 i、j 指向的元素为1，1 成为了 pivot 点，失败的分割。</p><p>所以应让另一个队伍移动。由于满足 i &lt; j 条件才能进来，此时的 j如果指向的元素是基准数，即使移动了一步，也最多只是让 i = j而已，不会越界，两个队伍都指向基准数，并以此作为分割点。</p><p>qSort 方法修改后代码如下：</p><p>注意基准数所在下标能够确定在 [start、end] 范围内，若设 base = end -10，是不被允许的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>end <span class="token operator">&gt;</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> base <span class="token operator">=</span> arr<span class="token punctuation">[</span>start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> end<span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> base<span class="token punctuation">)</span><span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 此时 i = j 相等且都指向 pivot 处，i、j 可以随意替换</span>    <span class="token function">qSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    start <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆排序">7.2 堆排序</h2><p>内容导视：</p><ul><li>树</li><li>二叉树</li><li>堆排序</li></ul><p>由于堆排序需要使用到树这种数据结构，所以简单过一下。</p><h3 id="树">7.2.1 树</h3><p>树（Tree）是 n 个结点的集合，n = 0 时称为空树；若不是空树，则树 T由被称作根 R 的结点以及 0 个或多个互不相交的非空子树T<sub>1</sub>、T<sub>2</sub>、...、T<sub>k</sub> 组成。</p><figure><img src="https://s2.loli.net/2022/04/15/V3YeQEDvWjPBsfg.png" alt="树的定义"><figcaption aria-hidden="true">树的定义</figcaption></figure><p>每棵子树的根被称作根 R 的<strong>子结点</strong>，而 R是每棵子树的根的<strong>父结点</strong>。</p><p>由于T<sub>1</sub>、T<sub>2</sub>...它们也是树，同样也是由根结点与若干个子树组成，举例：</p><figure><img src="https://s2.loli.net/2022/04/15/mzH3SLRo6GFOaU4.png" alt="完整的树"><figcaption aria-hidden="true">完整的树</figcaption></figure><p>A 的子结点有 D、E、F，G 的父结点有 C；那些没有子结点的结点，如D、E、F、B...称为<strong>树叶结点</strong>，也称叶子结点；有子结点的结点称为<strong>分支结点</strong>，除根结点R 外，分支结点也被称为<strong>内部结点</strong>。</p><p>树的层次：从根 R 为第一层开始算，R 的子结点 A、B、C 为第二层，A、B、C的子结点 D、E、F、G为第三层；最大层次称为树的<strong>高度</strong>。</p><h3 id="二叉树">7.2.2 二叉树</h3><p><strong>二叉树</strong>是一颗树，树中的每个结点最多只能有两个子结点，称为左结点、右结点。（每个结点的子结点有0 或 1 或 2 个）</p><p><strong>满二叉树</strong>的所有树叶结点都在最后一层，所有的分支结点都有两个子结点，此时结点总个数= 2<sup>k</sup> - 1。（k 为树的高度）如图：</p><figure><img src="https://s2.loli.net/2022/04/15/EsUc2p8dtjJPaK9.png" alt="满二叉树"><figcaption aria-hidden="true">满二叉树</figcaption></figure><p>此满二叉树的结点个数为 2<sup>4</sup> - 1 =15；同样高度的二叉树中，满二叉树的结点个数最多，树叶结点个数最多，每一层都是满的。</p><p><strong>完全二叉树</strong></p><p>对树中的 n 个结点按从上至下、从左到右的顺序进行编号，如果编号为 i（1<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.751ex" role="img" focusable="false" viewBox="0 -636 778 774"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g></g></g></svg></mjx-container></span> i <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.751ex" role="img" focusable="false" viewBox="0 -636 778 774"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g></g></g></svg></mjx-container></span>n）的结点与同样高度的满二叉树中编号为 i的结点在二叉树中的位置相同，则这棵二叉树称为完全二叉树，如下：</p><figure><img src="https://s2.loli.net/2022/04/15/PyRNEcVJzfDWFQG.png" alt="完全二叉树"><figcaption aria-hidden="true">完全二叉树</figcaption></figure><p>可以画出同样高度的满二叉树，编下号，看看两个二叉树的编号是否对应上了。</p><p>从图像上看，必须从左至右将每层铺满，才能继续在下一层放置结点；如下就不是完全二叉树：</p><figure><img src="https://s2.loli.net/2022/04/17/3H7TRlihGkr9jpY.png" alt="错误案例 1"><figcaption aria-hidden="true">错误案例 1</figcaption></figure><p>第三层并没有放满，便开始在第四层放置结点，不是完全二叉树。</p><figure><img src="https://s2.loli.net/2022/04/17/VnZjJoaqkPxmGCb.png" alt="错误案例 2"><figcaption aria-hidden="true">错误案例 2</figcaption></figure><p>第四层并没有从最左边开始放置，前面还空了三个位置，不是完全二叉树。</p><p><strong>二叉树性质</strong></p><ol type="1"><li><p>在第 i 层最多有 2<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="2.784ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 1230.6 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"></g><g data-mml-node="TeXAtom" transform="translate(33,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></span>个结点。（1、2、4、8、16...）</p></li><li><p>高度为 k 的二叉树最多有 2<sup>k</sup> - 1个结点。（1、3、7、15、31...）</p></li><li><p>高度为 k 的完全二叉树至少有 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="4.197ex" height="1.932ex" role="img" focusable="false" viewBox="0 -853.7 1855.1 853.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></span> 个结点。（1、2、4、8...）</p><p>证明：最少结点的完全二叉树就是（k - 1）高度的满二叉树的结点个数 + 1 =<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="19.205ex" height="2.117ex" role="img" focusable="false" viewBox="0 -853.7 8488.6 935.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2077.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3077.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3799.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4800,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(5577.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(6633.5,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></span>。</p></li><li><p>树叶结点个数为 n<sub>0</sub>，有两个子树的结点个数为n<sub>2</sub>，有 n<sub>0</sub> = n<sub>2</sub> + 1。</p><p>证明：设一共 n个结点，每个结点都通过一条线连接着它的父结点，除了根结点，则一共有 n - 1条线。</p><p>定义 n<sub>1</sub> 为有一个子树的结点个数，有 n - 1 = n<sub>1</sub> +2 *n<sub>2</sub>；（一个结点有两个子树代表两条线，有一个子树代表一条线，把它们都加起来）</p><p>因为二叉树结点只包括这三种类型，所以有 n = n<sub>0</sub> +n<sub>1</sub> + n<sub>2</sub>，</p><p>n - 1 = n<sub>1</sub> + 2 * n<sub>2</sub> = n<sub>0</sub> +n<sub>1</sub> + n<sub>2</sub> - 1，整理得到 n<sub>2</sub> =n<sub>0</sub> - 1。</p></li><li><p>具有 n 个结点的完全二叉树的高度为 ⌊log<sub>2</sub>n⌋ + 1。</p><p>证明：设完全二叉树的高度为 k，n 一定小于（k +1）高度的完全二叉树的结点个数；根据性质 3 得：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex" xmlns="http://www.w3.org/2000/svg" width="13.741ex" height="2.244ex" role="img" focusable="false" viewBox="0 -853.7 6073.6 991.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2132.9,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(3188.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4066.4,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="msup" transform="translate(5122.2,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></svg></mjx-container></span>，两边取对数：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="17.484ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 7728.1 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(743.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1743.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2521.2,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(3577,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(3875,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(4360,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(5273.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6151.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(7207.1,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></svg></mjx-container></span>，整理得：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="21.501ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 9503.7 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(1696.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2574.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(3630.1,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(4428.9,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(5484.7,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(5782.7,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(6267.7,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mn" transform="translate(510,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(7181.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(8003.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(9003.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span>，又因 k是整数，当 log<sub>2</sub>n 为整数时，k = log<sub>2</sub>n +1；不为整数时，k = ⌊log<sub>2</sub>n⌋ + 1。</p><p>综合 k = ⌊log<sub>2</sub>n⌋ + 1。</p><blockquote><p>⌊⌋ 是向下取整（floor），⌈⌉ 是向上取整（ceiling），如 ⌊3.5⌋ = 3。</p></blockquote></li><li><p>一共有 n 个结点的完全二叉树，序号从 1开始，则最后一个内部结点的序号为 n / 2。</p><figure><img src="https://s2.loli.net/2022/04/15/PyRNEcVJzfDWFQG.png" alt="完全二叉树"><figcaption aria-hidden="true">完全二叉树</figcaption></figure><p>证明：首先最后一个叶子结点的父结点为最后一个内部结点。</p><p>观察规律，对任意结点 i，它的左结点序号应为 2i，右结点序号应为 2i +1。最后一个叶子结点序号为 n，它的父结点序号为 ⌊n / 2⌋。</p></li></ol><h3 id="堆排序-1">7.2.3 堆排序</h3><p>Heap Sort 是对简单选择排序的改进。</p><p>之前的选择排序并没有<mark>将每轮的比较结果保存</mark>，后几轮的比较其实前面已经做过了；你可以回看之前的数组中的简单排序的那个例子，如第2 轮中又重新拿 2 与其它数比较了一次；简单选择排序最好最差时间复杂度都是O(n<sup>2</sup>）。</p><p>而堆天然具有这种优势。</p><p><strong>堆</strong>是具有以下性质的二叉树：</p><ul><li><mark>每个结点的值都大于等于其左右子结点的值</mark>，称为大顶堆（根结点为最大值）</li><li>每个结点的值都小于等于其左右子结点的值，称为小顶堆（根结点为最小值）</li></ul><p>heap sort算法思想：将待排序的数组构造成一个大顶堆，此时根结点为最大值，让根结点与树中的最后一个结点交换位置（删去根结点）；剩下的n - 1个元素重新构造成一个大顶堆，取出第二大值，与倒数第二个元素交换位置（删去根结点）...如此反复操作，得到有序数组。</p><p><strong>不构造大顶堆（不利用堆保存比较结果的性质）</strong></p><p>1、如何调整使得根结点为最大值？</p><p>调整：从最后一个分支结点开始，使它与自己的子结点比较、交换，保证此分支结点为最大值；然后继续往前找其它的分支结点... 重复以上操作，直到根结点为最大值；</p><p>将根结点与最后一个结点交换，剩下的 n - 1个结点继续调整，找出第二大值，与倒数第二个结点交换 ...直至整个数组有序。</p><p>2、如何得到最后一个分支结点的下标？</p><p>因为数组下标 i 从 0 开始，所以根据之前的二叉树性质 6，再加上 int类型可以略去小数，做了一些修改：（将长度为 n的数组看作成一个完全二叉树）</p><figure><img src="https://s2.loli.net/2022/05/01/FPtCLk8cZQRnoXp.png" alt="记二叉树结点个数为 n，第一轮中 n = 15"><figcaption aria-hidden="true">记二叉树结点个数为 n，第一轮中 n =15</figcaption></figure><p><mark>对任意分支结点 i，它的左结点应为 2 * i + 1，右结点序号应为 2 *i + 2。最后一个叶子结点下标为 n -1，它的父结点即最后一个分支结点的下标为 n / 2 - 1。</mark></p><p>在这个图中，也就是拿 arr[6] 与它的子结点比较、交换，使得 arr[6]为这三个结点中的最大值；arr[5]、arr[4] ... 同样如此；直到 arr[0] 与arr[1]、arr[2] 比较、交换成为最大值后，将 arr[0] 与最后一个元素 arr[14]交换，则末尾元素为最大值；</p><p>删除根结点后，将剩下的 14个元素看作一个完全二叉树，再次调整，找出此树的最大值（相当于整个数组的第二大值），并与arr[13] 交换 ... 剩下的 2 个元素中找出大值，与 arr[1]交换，至此数组有序。</p><p>一根连线就相当于一次比较，第一轮中 15 个元素为一颗树，14次比较；第二轮 14 个元素为一颗树，13 次比较 ... 第十四轮 2 个元素，1次比较，很明显时间复杂度为 O(n<sup>2</sup>）；</p><p>但是需要考虑到最后一个分支结点没有右结点，即 2 * i + 1 = n - 1时，访问 arr[2 * i + 2] 会导致越界，此时不能进行左右结点的比较。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 总轮数为 n - 1</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> n <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 从最后一个分支结点开始进行比较、交换，直到 arr[0] 为树中的最大值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 将最大值与树中的最后一个结点交换位置</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">adjust</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 获取分支结点的左右结点下标</span>    <span class="token keyword">int</span> leftChild <span class="token operator">=</span> <span class="token function">leftChild</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rightChild <span class="token operator">=</span> leftChild <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 指针默认指向左结点</span>    <span class="token keyword">int</span> pointer <span class="token operator">=</span> leftChild<span class="token punctuation">;</span>        <span class="token comment">// 代表只有左结点，没有右结点，不用进行左右结点的比较</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftChild <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 两个结点都有</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 若左结点小于右结点，指针指向右结点，保证了指针指向的结点为大值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>leftChild<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>rightChild<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pointer<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token comment">// 若分支结点小于大值结点，则交换它们位置，保证分支结点最大</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>pointer<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> pointer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 获得 i 对应的左结点下标</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">leftChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这种方式并没有调整成大顶堆，以 {1，2，3，4，5} 为例：</p><figure><img src="https://s2.loli.net/2022/05/02/5UfPTKGnQEIiJmc.png" alt="例 1"><figcaption aria-hidden="true">例 1</figcaption></figure><p>从最后一个分支结点开始，arr[5 / 2 - 1] = arr[1] = 2，与arr[3]、arr[4] 比较后，arr[1] 与 arr[4] 交换位置：</p><figure><img src="https://s2.loli.net/2022/05/02/pRTMVLa1ENKxvD2.png" alt="2、5 交换位置"><figcaption aria-hidden="true">2、5 交换位置</figcaption></figure><p>往前找分支结点即 arr[0]，与 arr[1]、arr[2] 比较后，arr[0] 与 arr[1]交换位置：</p><figure><img src="https://s2.loli.net/2022/05/02/8uC9sa3vTGJtbWy.png" alt="1、5 交换位置"><figcaption aria-hidden="true">1、5 交换位置</figcaption></figure><p>此时根结点 arr[0] 为最大值，很明显 1 与 5 交换后，1 小于 4 和2，不是大顶堆；应该拿被替换的 1 继续与它的两个子结点比较，让 1、4替换，我们之前的代码没有这一步。</p><figure><img src="https://s2.loli.net/2022/05/02/hFKaOu845oQ6DjR.png" alt="1、4 交换位置"><figcaption aria-hidden="true">1、4 交换位置</figcaption></figure><p>也就是说 arr[i] 不仅要与 arr[2 * i + 1]、arr[2 * i + 2] 比较，在arr[i] 与其中一个结点交换后（记 arr[i] 交换后的下标为pointer），arr[pointer] 应继续往下与它的子结点比较。（别越界）</p><p>在没有交换的情况下，以上图为例，arr[0] &gt; arr[1、2]，由于 arr[1]&gt; arr[3、4]，所以肯定有 arr[0] &gt; arr[3、4]，不用继续往下比较。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 以 arr[i] 为根节点的二叉树，经过调整后，使得 arr[i] 为这个二叉树的最大值 * * @param arr 待调整的数组 * @param i 开始调整的位置 * @param n 二叉树结点的个数 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">adjust</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/*    pointer 默认指向 i 的左结点。当 arr[i]、arr[pointer] 交换后，arr[pointer] 应该继    续与它的左结点 arr[2 * pointer + 1]、arr[2 * pointer + 2] 比较，在其期间保证别越    界（小于 n）。    */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> pointer <span class="token operator">=</span> <span class="token function">leftChild</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> pointer <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> pointer <span class="token operator">=</span> <span class="token function">leftChild</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> leftChild <span class="token operator">=</span> pointer<span class="token punctuation">;</span>        <span class="token keyword">int</span> rightChild <span class="token operator">=</span> leftChild <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leftChild <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>leftChild<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>rightChild<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                pointer<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>pointer<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> pointer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// i 指向被交换的元素，此时 pointer 应为 leftChild(i)，arr[i] 继续与它的子结点比较</span>            i <span class="token operator">=</span> pointer<span class="token punctuation">;</span>                    <span class="token comment">// 若 arr[i] &gt; arr[pointer]，没有交换，没有必要继续往下比较 </span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>构建大顶堆的好处</strong></p><p>以此图为例：</p><figure><img src="https://s2.loli.net/2022/05/02/1Ep6q8Ob3MPfVal.png" alt="大顶堆"><figcaption aria-hidden="true">大顶堆</figcaption></figure><p>构建大顶堆后，将根结点与末尾结点交换位置，剩下的 n - 1个元素成一颗树：</p><figure><img src="https://s2.loli.net/2022/05/02/fP6CXvDoysdF4eZ.png" alt="删去根结点"><figcaption aria-hidden="true">删去根结点</figcaption></figure><p>再重新构建大顶堆，此时就不用那么繁琐，而是从根结点 arr[0]开始与左右子结点比较：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">arr[0] 与 arr[1]、arr[2] 比较arr[0] 与 arr[1] 交换，即 8、14 交换<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/05/02/gdDkhP9vEXSmx2A.png" alt="8、14 交换"><figcaption aria-hidden="true">8、14 交换</figcaption></figure><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">arr[1] 与 arr[3]、arr[4] 比较arr[1] 与 arr[3] 交换，即 8、9 交换<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/05/02/P9CpKIe3aWBbMQx.png" alt="8、9 交换"><figcaption aria-hidden="true">8、9 交换</figcaption></figure><p>这个调整过程正好对应修改后的 adjust 方法所做的操作。</p><p>可以看到只有被交换后的结点无法保证是三个结点中的最大值，所以才需要继续往下与它的左右结点比较；那么还有另一边的结点，如arr[2]，由于大顶堆的性质，再加上它一直没被动过，arr[2] &gt; arr[5]这是确定的，不用再次比较。</p><p>每次构建成大顶堆后，只需将根结点与末尾结点交换（每次都取出大顶堆中的最大值放在后面），重复操作，直至数组有序。</p><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">// 构建大顶堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">adjust</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/*    先将根结点与末尾结点交换，剩下的 n - 1 个元素重新构建成大顶堆（n &gt; 1）    */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> n <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">adjust</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 上面的循环可以替换为如下代码</span>    <span class="token comment">/*    for (n--; n &gt; 0; n--) {            swap(arr, 0, n);            adjust(arr, 0, n);        }    */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了第一轮使用 O(n）次比较构建成了大顶堆，之后的 n - 2轮每次只比较了一半的结点，为 O（log<sub>2</sub>n），总时间复杂度为O(nlog<sub>k</sub>n），是不稳定排序。</p><p>另外提一句：</p><p>adjust 方法中循环条件 pointer &lt; n除了控制防止越界，还有其它讲究。</p><p>当 n = 2 时，因为在上一次循环中，调用 adjust方法使得只剩两个结点的二叉树中的 arr[0]为最大值（被删除的结点不算）；在这次循环中，swap(arr，0，1），交换两个结点位置，使得 arr[0] 为最小值，接着调用adjust(arr，0，1），在此方法中的 n =1，只有一个结点的二叉树没有必要调整，应退出循环。</p><p>但是 adjust 并没有加上 n &gt; 1 作为循环条件，因为 i = 0 时，pointer= leftChild(0）= 1，pointer &lt; n，1 &lt;1，不满足条件直接退出了循环，结束了 adjust 方法的执行；再回到这里，执行n--，n = 1，不满足条件，退出循环，至此排序结束。</p><blockquote><p>你如果学过了面向对象，就知道 heapSort 与 adjust 方法中的 n变量分别是两块独立的内存空间，互不影响。</p></blockquote><h2 id="希尔排序">7.3 希尔排序</h2><p>插入排序中在逆序的情况下，每次都需要将新元素都移动到最前面，那么有没有一种办法，让大数基本在后面，小数基本在前面，这样使用insert sort 时就无需比较、交换太多次。</p><p>Shell Sort 也称缩小增量排序（diminishing increment sort），是对insert sort 的一种优化；在相距增量个元素中进行比较、交换，试图达到insert sort 中的最好情况（小的在前大的在后），再使用 insert sort完成排序。</p><p>让我们试下最糟糕的情况：逆序。</p><p>第一轮：10，9，8，7，6，5，4，3，2，1</p><p>设增量初始值为 length，每次都除以 3 + 1，第一轮时的元素间隔为 10 / 3+ 1 = 4。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">arr[4] 与 arr[0] 比较，6 &lt; 10，需要交换：(6)，9，8，7，(10)，5，4，3，2，16，10 有序arr[5] 与 arr[1] 比较，5 &lt; 9，需要交换：6，(5)，8，7，10，(9)，4，3，2，15，9 有序arr[6] 与 arr[2] 比较，4 &lt; 8，需要交换：6，5，(4)，7，10，9，(8)，3，2，14，8 有序arr[7] 与 arr[3] 比较，3 &lt; 7，需要交换：6，5，4，(3)，10，9，8，(7)，2，13，7 有序arr[8] 与 arr[4] 比较，2 &lt; 10，需要交换：6，5，4，3，(2)，9，8，7，(10)，1arr[4] 与 arr[0] 比较，2 &lt; 6，需要交换：(2)，5，4，3，(6)，9，8，7，10，12，6，10 有序备注：如果 arr[8] &gt; arr[4]，不会交换，就无需比较 arr[4]、arr[0]因为之前已经比较过了arr[9] 与 arr[5] 比较，1 &lt; 9，需要交换：2，5，4，3，6，(1)，8，7，10，(9)arr[5] 与 arr[1] 比较，1 &lt; 5，需要交换：2，(1)，4，3，6，(5)，8，7，10，91，5，9 有序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/14/b7EVM4QmeYhAytF.png" alt="第一轮交换"><figcaption aria-hidden="true">第一轮交换</figcaption></figure><p>第一轮交换 8 次、比较 8 次；4 种颜色。</p><p>第二轮：2，1，4，3，6，5，8，7，10，9</p><p>元素间隔（增量）为 4 / 3 + 1 = 2。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">arr[2] 与 arr[0] 比较，4 &gt; 2，无需交换2，4，8 有序arr[3] 与 arr[1] 比较，3 &gt; 1，无需交换1，3，7 有序arr[4] 与 arr[2] 比较，6 &gt; 4，无需交换无需比较 arr[2] 与 arr[0]2，4，6，10 有序arr[5] 与 arr[3] 比较，5 &gt; 3，无需交换1，3，5，9 有序arr[6] 与 arr[4] 比较，8 &gt; 6，无需交换2，4，6，8 有序arr[7] 与 arr[5] 比较，7 &gt; 5，无需交换1，3，5，7 有序arr[8] 与 arr[6] 比较，10 &gt; 6，无需交换2，4，6，8，10 有序arr[9] 与 arr[7] 比较，9 &gt; 7，无需交换1，3，5，7，9 有序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/14/8ZvGV67M4QAhXD3.png" alt="第二轮交换"><figcaption aria-hidden="true">第二轮交换</figcaption></figure><p>有人可能会疑惑，为什么颜色一直在变？以倒数第 3行为例，arr[0]、arr[2]、arr[4]、arr[8]（2、4、6、10）有序，所以统一使用粉色标识；当arr[6] &gt; arr[4] 时，可以证明arr[0]、arr[2]、arr[4]、arr[6]（2、4、6、8）有序，但无法证明 arr[6]一定小于 arr[8]，所以倒数第 2 行，2、4、6、8使用了浅绿，而不是粉色。</p><p>第二轮没有一次交换，因为整个排序在第一轮跳跃式的交换下已经基本有序；比较8 次；2 种颜色。</p><p>第三轮：2，1，4，3，6，5，8，7，10，9</p><p>元素间隔为 2 / 3 + 1 = 1，那么就等同于 insert sort。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">arr[1] 与 arr[0] 比较，1 &lt; 2，逆序，需要交换，交换后：(1)，(2)，4，3，6，5，8，7，10，9arr[2] 与 arr[1] 比较，4 &gt; 2，顺序，不需要交换arr[3] 与 arr[2] 比较，3 &lt; 4，交换后：1，2，(3)，(4)，6，5，8，7，10，9arr[2] 与 arr[1] 比较，3 &gt; 2，不需要交换arr[4] 与 arr[3] 比较，6 &gt; 4，不需要交换arr[5] 与 arr[4] 比较，5 &lt; 6，交换后：1，2，3，4，(5)，(6)，8，7，10，9arr[4] 与 arr[3] 比较，5 &gt; 4，不需要交换arr[6] 与 arr[5] 比较，8 &gt; 6，不需要交换arr[7] 与 arr[6] 比较，7 &lt; 8，交换后：1，2，3，4，5，6，(7)，(8)，10，9arr[6] 与 arr[5] 比较，7 &gt; 6，不需要交换arr[8] 与 arr[7] 比较，10 &gt; 8，不需要交换arr[9] 与 arr[8] 比较，9 &lt; 10，交换后：1，2，3，4，5，6，7，8，(9)，(10)arr[8] 与 arr[7] 比较，9 &gt; 8，不需要交换<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里就不画图了；</p><p>本轮交换了 5 次，比较 13 次。</p><p>统计，交换次数：13，比较次数：29。</p><p>如果直接用 insert sort，交换次数：45，比较次数：45。</p><p>代码实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 设 gap 初始值为 arr.length：10</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 第一轮，gap = gap / 3 + 1 = 4</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 第二轮，gap = gap / 3 + 1 = 2</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 第三轮，当元素间隔为 1 时，就是 insert sort，可以对比以前，发现有什么不同吗？</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>合并：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> gap <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    gap <span class="token operator">=</span> gap <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> gap <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>gap <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解释为何使用 do while：如果使用 while 或 for，判断条件为 gap &gt;1，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> gap <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> gap <span class="token operator">=</span> gap <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> gap <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当第二轮结束，gap = 1 时，判断条件为false，进行不了第三轮排序（最后一轮元素间隔必须为 1）；如果判断条件为gap &gt;= 1，第三轮结束，执行更新表达式 gap = 1 / 3 + 1 = 1，判断条件为true，继续第四轮、第五轮...排序，无限循环。</p><p>如果先执行后判断，第二轮结束时，gap = 2，满足条件继续第三轮循环，gap= 1，执行完后判断条件为 false，退出循环。</p><p>关于增量的取值，至今也没有个说道，我一般常用的为 gap = gap / 2、gap =gap / 3 + 1、gap = gap / 4 + 1;</p><p>最坏情况为 O(n<sup>2</sup>），最好情况为 O(n），平均时间复杂度为O(n<sup>3/2</sup>），是不稳定排序。shell sort 是第一个平均时间复杂度突破O(n<sup>2</sup>）的排序算法。</p><p>变体：这里按 insert sort 的第二种实现，照猫画虎。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> gap <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    gap <span class="token operator">=</span> gap <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> insertIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">int</span> insertVal <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> gap <span class="token operator">&amp;&amp;</span> insertVal <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>            insertIndex <span class="token operator">=</span> j <span class="token operator">-</span> gap<span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> insertIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>insertIndex<span class="token punctuation">]</span> <span class="token operator">=</span> insertVal<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>gap <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="归并排序">7.4 归并排序</h2><p>内容导视：</p><ul><li>递归版本</li><li>循环版本</li></ul><h3 id="递归版本">7.4.1 递归版本</h3><p>merge sort 算法思想：合并两个有序的数组成一个有序的数组。</p><p><strong>如何得到有序数组</strong></p><p>基于分治（divide and conquer）策略，不断的将数组一分为二，如{6，3，5，4，7，1，9，8} 拆分成{6，3，5，4}、{7，1，9，8}，然后继续对子数组拆分下去，直至分无可分，得到{6}、{3}、{5} ...</p><p>得到的 {6}、{3} ... 分别可以看作是有序数组。</p><p>下面以 {1，3，7，8}、{2，4，5，9}为例，演示如何合并成有序数组，不过需要先得准备一个临时数组 temp。</p><p><strong>临时数组的创建</strong></p><p>有两种方案：</p><p>a：记数组 arr 中待排序的部分元素的开始下标为 start，中间元素的下标为mid，结尾下标为 end，将 [start，mid] 看作是数组 1，[mid+1，end]看作是数组 2，在每次合并时创建一个长度为 end - start + 1 的 temp数组保存 [start，end] 内的元素。</p><p>b：只创建一个长度为 arr.length 的 temp 数组，将 [start，end]范围内的元素拷贝到 temp数组的对应位置，避免频繁创建数组造成的性能开销，比 a 效率高些。</p><p>下面以方案 a 为例：</p><p><strong>如何合并有序数组</strong></p><p>有三种方案：</p><p>1）记数组 1 初始下标为 i，数组 2 初始下标为 j；比较arr[i]、arr[j]，较小值存入临时数组，然后相关的下标移动，接着进行下一轮比较。</p><figure><img src="https://s2.loli.net/2022/05/03/eBDYE74i2FSZpRG.png" alt="合并有序数组"><figcaption aria-hidden="true">合并有序数组</figcaption></figure><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">1 与 2 比较，小值为 1 存入临时数组，i++<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/05/03/qjr5pBbi8tgSn2J.png" alt="1 入临时数组"><figcaption aria-hidden="true">1 入临时数组</figcaption></figure><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">3 与 2 比较，2 存入临时数组，j++<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/05/03/pmFAk7OBj58NvEc.png" alt="2 入临时数组"><figcaption aria-hidden="true">2 入临时数组</figcaption></figure><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">3 与 4 比较，3 存入临时数组，i++7 与 4 比较，4 存入临时数组，j++7 与 5 比较，5 存入临时数组，j++7 与 9 比较，7 存入临时数组，i++8 与 9 比较，8 存入临时数组，i++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/05/03/trBle67Ns52YVE4.png" alt="一套组合拳"><figcaption aria-hidden="true">一套组合拳</figcaption></figure><p>此时 i已经越界，无法继续比较，将另一个数组的所有元素（如果有）依次拷贝到 temp中，此时的 temp：{1，2，3，4，5，7，8，9} 已是有序数组。（在代码中是对arr 排序，需要将有序数组中的元素拷贝到 arr）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 分割数组</span>    <span class="token function">split</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 只有两个元素及以上才需要分割、排序</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 中间点</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment">// 对 [start, mid] 继续分割</span>        <span class="token function">split</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 对 [mid + 1, end] 继续分割</span>        <span class="token function">split</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 合并 [start, mid]、[mid + 1, end]</span>        <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 对 arr 中的 [start, end] 范围内的元素进行排序</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// i 指向数组 1 的初始位置，数组 1 范围：[start, mid]</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token comment">// j 指向数组 2 的初始位置，数组 2 范围：[mid + 1, end]</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// temp 的开始下标为 0</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 创建长度为 end - start + 1 的临时数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// i、j 不能越界</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 比较 arr[i]、arr[j]，较小值存入 temp 中，对应下标移动</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">// 若数组 1 还有元素，全部存入 temp 中</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 若数组 2 还有元素，全部存入 temp 中</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">// 到此 temp 数组已然有序</span>        <span class="token comment">// 将 temp 中 [0, end - start] 内的元素拷贝至 arr 的 [start, end] 中</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> start<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">,</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方案 b：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 长度为 arr.length 的临时数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">split</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">split</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">split</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 此时 temp 从下标 start 开始存放元素</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 将 temp 中 [start, end] 内的元素拷贝到 arr 中的 [start, end]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> start<span class="token punctuation">;</span> m <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）将数组 1、2 的所有元素拷贝到 temp 中。</p><figure><img src="https://s2.loli.net/2022/05/03/sAZI1XCliTB9ucU.png" alt="反客为主"><figcaption aria-hidden="true">反客为主</figcaption></figure><p>比较 temp[i]、temp[j]，较小值放入数组 1 中，同时对应下标移动；若数组1 放满了，放入数组 2 中。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">1 与 2 比较，小值为 1，存入数组 1，i++3 与 2 比较，小值为 2，存入数组 1，j++3 与 4 比较，小值为 3，存入数组 1，i++7 与 4 比较，小值为 4，存入数组 1，j++数组 1 已满7 与 5 比较，小值为 5，存入数组 2，j++7 与 9 比较，小值为 7，存入数组 2，i++8 与 9 比较，小值为 8，存入数组 2，i++此时 i 已经越界（i &gt;= j 的初始位置），无法继续比较将 j 对应的及之后的元素都拷贝到数组 2 中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/05/03/DgsVZ7zqwbin9fR.png" alt="一气呵成"><figcaption aria-hidden="true">一气呵成</figcaption></figure><p>数组 1、2 合起来看，就是有序数组。（数组 1、2 本就一体）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 将 [start, end] 内的元素拷贝到 temp 中</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 使得 arr [start, end] 内的元素有序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> start<span class="token punctuation">;</span> m <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果 i &gt; mid，代表数组 1 元素已空，应将数组 2 剩下的元素拷贝到 arr 中</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 如果 j &gt; end，代表数组 2 元素已空，应将数组 1 剩下的元素拷贝到 arr 中</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 比较 temp[i]、temp[j]，较小值存入 arr 中</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）将数组 1、2 的所有元素拷贝到 temp 中，只不过拷贝数组 2时，是倒序拷贝。</p><figure><img src="https://s2.loli.net/2022/05/03/wNAMDc6udl3eEi9.png" alt="颠倒数组 2"><figcaption aria-hidden="true">颠倒数组 2</figcaption></figure><p>比较 arr[i]、arr[j]，小值放入数组 1，若放满了，放入数组2；对应下标的移动变成 i++、j--，两端往中间逼近。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 对 [start, end] 内的元素进行排序</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 记录开始下标 i</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token comment">// 记录结束下标 j</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> end<span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token comment">// 将 [start, mid] 内的元素拷贝到 temp</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 将 [mid + 1, end] 内的元素倒序拷贝到 temp</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    i <span class="token operator">=</span> start<span class="token punctuation">;</span>    j <span class="token operator">=</span> end<span class="token punctuation">;</span>    <span class="token comment">// 记录开始下标 </span>    <span class="token keyword">int</span> m <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token comment">// m 不得越界</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/*        比较 temp[i]、temp[j]，较小值放入 arr 中，使 arr        [start, end] 范围的元素有序*/</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述三种方案，性能都差不多，任选一种。</p><p><strong>复杂度分析</strong></p><p>对 n 个数排序所用时间记为T(n），每次递归都将其一分为二（再对这两部分继续排序），然后进行合并；每次合并作n - 1 次比较，拷贝到 arr 里又是 n 次，是 n 的一次项，可以记为 O(n）；有T(n）= 2 * T(n/2）+ n - 1 + n；</p><p>当 n = 1 时，不用排序，记 T(1）为 1。</p><pre class="line-numbers language-n" data-language="n"><code class="language-n">T(n) = 2T(n/2) + 2n - 1T(n/2) = 2T(n/4) + n - 1T(n/4) = 2T(n/8) + n/2 - 1T(n/8) = 2T(n/16) + n/4 - 1...将 T(n/2) 代入到 T(n) 中T(n) = 2(2T(n/4) + n - 1) + 2n - 1     = 4T(n/4) + 4n - 3     将 T(n/4) 代入得：T(n) = 4(2T(n/8) + n/2 - 1) + 4n - 3 = 8T(n/8) + 6n - 7 将 T(n/8) 代入得：T(n) = 8(2T(n/16) + n/4 - 1) + 6n - 7 = 16T(n/16) + 8n - 15...  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>T(n）= 2<sup>k</sup>T(n/2<sup>k</sup>）+ 2kn - (2<sup>k</sup>-1）</p><p>令 k = log<sub>2</sub>n，T(n）= nT(1）+ 2nlog<sub>2</sub>n - (n-1）=2nlog<sub>2</sub>n - 1，省略系数、常数得：T(n）=O(nlog<sub>k</sub>n）。</p><p>可以换种简单的方式理解：</p><p>整个过程可以看作是对 1 个长度为 n 的数组排序、对 2 个长度为 n/2的数组排序、对 4 个长度为 n/4 的数组排序 ... 对 n/2 个长度为 2的数组排序，每步所需时间都是 O(n），一共 log<sub>2</sub>n步，所以时间复杂度为 O(nlog<sub>k</sub>n）。</p><p>这种一分为二的方式，并不依赖中间元素的大小，最佳、最差都是此复杂度。</p><p>从空间上看，每次合并时生成的变量 start、mid、end 等变量的个数与 n无关，记为 O(1），一共 log<sub>k</sub>n 次合并，共为O(log<sub>k</sub>n）；此外还创建了长度为 n 的 temp 数组，总共为 O(n +log<sub>k</sub>n）；是稳定排序。</p><h3 id="循环版本">7.4.2 循环版本</h3><p>思想：将每个元素看作是一个有序数组，然后<mark>两两合并</mark>成一个大的有序数组，如此反复操作。之前使用递归，现在我们主动分析规律，使用循环解决。</p><p>先考虑最简单的情况，当数组长度 n 为 2 的幂时；</p><p>主要观察 [start, end] 的变化：</p><p>第一轮：对 [0, 1]、[2, 3]、[4, 5]、[6, 7]、[8, 9] ...内的元素排序（只要 end 还小于 n，就可以往前推）</p><p>第二轮：[0, 3]、[4, 7]、[8, 11]、[12, 15]、[16, 19] ...</p><p>第三轮：[0, 7]、[8, 15]、[16, 23]、[24, 31]、[32, 39] ...</p><p>第四轮：[0, 15]、[16, 31]、[32, 47]、[48, 63] ...</p><p>第五轮：[0, 31]、[32, 63] ...</p><p>...</p><p>第 i 轮：[0, 2<sup>i</sup>-1]、[2<sup>i</sup>, 2<sup>i+1</sup>-1]...</p><p>...</p><p>直到 2<sup>i</sup>-1 &gt;= n-1 为止，代表这轮仅一个 [0,2<sup>i</sup>-1] 就可以装下所有元素，这是最后一轮；因为只有最后一轮时2<sup>i</sup> 才大于等于 n，说明最后一轮及之前的轮数一定有2<sup>i-1</sup> &lt; n。</p><p>定义辅助变量 k，设第 i 轮时 k = 2<sup>i-1</sup>，k 从 1开始，每次都乘等 2；start 从 0 开始，以 2k 递增；end = start + 2k -1。</p><p>由于在合并时，还需要确定中间元素的下标 mid，方便看作是两个有序数组[start, mid]、[mid+1, end]合并；合并的方法之前已经写过了，接下来就是确定 mid 的值。</p><p>mid = (start + end）/ 2 = (2start + 2k - 1）/ 2 = start + k -0.5，由于我接下来使用 int 类型保存变量，不是整数会舍去小数部分，如 5 -0.5 = 4.5，4.5 被舍去小数为 4，相当于 5 - 1 = 4，所以 mid = start + k -1。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// k &lt; n 即 2^(i-1) &lt; n，用来控制轮数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">// 只要 end &lt; n，就可以往前推</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> end <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>            start <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> k<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 理想状况</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着考虑数组长度 n 不为 2 的幂的情况：</p><p>在第一轮中，两个元素一组最多剩余 1 个元素，记为它的下标为a<sub>n</sub>（即 n - 1），其它的两个一组的都是有序数组；在第二轮，4个一组，最多剩余 3 个元素，记它们的下标分别为a<sub>n-2</sub>、a<sub>n-1</sub>、a<sub>n</sub>，其它的 4个一组的都是有序数组；在第三轮中，8 个元素一组，最多剩下 7 个元素，记作a<sub>n-6</sub>、a<sub>n-5</sub>、... a<sub>n</sub>，其它的 8个一组的都是有序数组；略。</p><p>第二轮当 start = a<sub>n-2</sub> 时，end 正好越界，退出循环，剩下 3个元素 [a<sub>n-2</sub>, a<sub>n</sub>]；而 [a<sub>n-2</sub>,a<sub>n-1</sub>] 正好上一轮排过序，是有序数组，可以将 [a<sub>n-2</sub>,a<sub>n-1</sub>] 与 a<sub>n</sub> 合并成有序数组 [a<sub>n-2</sub>,a<sub>n</sub>]，中间元素的下标就是 a<sub>n-1</sub>；a<sub>n-1</sub>在上一轮是 a<sub>n-2</sub> + 2 * k - 1，这轮中由于 k *= 2 了，所以a<sub>n-1</sub> = start + k - 1。</p><p>第三轮当 start = a<sub>n-6</sub> 时，end 越界，退出循环，剩下 7个元素 [a<sub>n-6</sub>, a<sub>n</sub>]；而 [a<sub>n-6</sub>,a<sub>n-3</sub>] 在第二轮中排过序，[a<sub>n-2</sub>, a<sub>n</sub>]也是有序数组，将其合并成有序数组 [a<sub>n-6</sub>,a<sub>n</sub>]；同理中间元素的下标 a<sub>n-3</sub> = a<sub>n-6</sub> + k- 1。</p><p>...</p><p>添加补丁代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 理想状况</span><span class="token comment">// 中间元素下标</span><span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 将剩余的元素合并成一个有序数组</span>    <span class="token keyword">int</span> end <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="桶排序">7.5 桶排序</h2><p>内容导视：</p><ul><li>小例子</li><li>完整代码</li><li>优化</li><li>计数排序</li></ul><h3 id="小例子">7.5.1 小例子</h3><p>受《啊哈算法》启发，先看一个简单的例子。</p><p>将要排序的数看成是另一个数组 temp 的下标 i，temp[i]代表此数的出现的次数；遍历 temp 时，输出 temp[i] 个 i。</p><p>当待排序的数范围很小分布均匀且是正整数时，可以试试，挺有意思。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 对范围在 [0, 9] 之间的整数排序</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> m <span class="token operator">=</span> temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">// n 次比较</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 将 arr[i] 看成是 temp 的下标</span>    temp<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token comment">/*此时 temp：{1, 1, 0, 1, 4, 1, 1, 1, 0, 2}代表 0 出现了 1 次1 出现了 1 次2 出现了 0 次3 出现了 1 次4 出现了 4 次5 出现了 1 次6 出现了 1 次7 出现了 1 次8 出现了 0 次9 出现了 2 次次数总和为 n*/</span><span class="token comment">// m 次比较</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// n 次比较（？）</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 可以在外部定义变量 index = 0，改为 arr[index++] = i</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一共 T(2n + m）次比较，时间复杂度为 O(n+m）；当 m &lt; n 时，可以记为O(n）。</p><p>缺点是如果数组中有一个特别大的数 max，m 也会特别大（m = max +1），会造成 temp 中大部分元素值都是空（即 0），遍历 temp时花费时间将会更多；空间复杂度为O(m），这种版本的桶排序无法保存对象，只能记录相同 key的对象的个数，讨论是不是稳定排序没有意义（如果可以保存，则是稳定排序），桶排序的完整代码在最后面。</p><p>？处的解释：temp：{1, 1, 0, 1, 4, 1, 1, 1, 0, 2}；</p><p>j = 0 时，j &lt; temp[0]，遍历 1 次；j &lt; temp[1] 时，遍历 1 次；j&lt; temp[2] 时，遍历 0 次，... j &lt; temp[9] 时，遍历 2 次，总共 n次。（temp[i] 记录了 i 在 arr 中出现的次数，总和为 n）</p><blockquote><p>i = 0，i &lt; m，其实是 m + 1 次比较：0 &lt; m、1 &lt; m、2 &lt;m、... m - 1 &lt; m、 m &lt; m 为fasle，退出循环，为了简化计算，忽略了。</p></blockquote><h3 id="完整代码">7.5.2 完整代码</h3><p>桶排序（bucket sort）的完整代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token function">findMax</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建长度为 max + 1 的数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>arr[i] 为整数时，可以作为 temp 的下标，temp 只需保存重复的 arr[i]的个数即可，temp[arr[i]]++；然后遍历 temp，记下标为 j，只有 j = arr[i]时，temp[j] != 0，为重复元素的个数，然后将 temp[j] 个 j 保存到 arr中。</p><p>当 arr[i] 为对象时，只能选取对象的整数型的字段 key作为下标，temp[arr[i].key] 保存 arr[i]；</p><p>如果使用一维数组，当 key 重复时，会将之前的元素覆盖。于是用二维数组temp 保存每个元素，还需一个一维数组 count 保存重复的元素的个数。</p><table><colgroup><col style="width: 50%"><col style="width: 50%"></colgroup><thead><tr class="header"><th>arr[0][0]：student{key:0, name:"张三"}</th><th>arr[0][1]：student{key:0, name:"李四"}</th></tr></thead><tbody><tr class="odd"><td>arr[1][0]：null</td><td>arr[1][1]：null</td></tr><tr class="even"><td>arr[2][0]：student{key:2, name:"王五"}</td><td>arr[2][1]：null</td></tr></tbody></table><p>下面只是以 int 类型的数组作为示例；以 arr[i] 自身当key，由于不确定重复元素的个数，考虑最差情况定为 n。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">ArrayUtils</span><span class="token punctuation">.</span><span class="token function">findMax</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> m <span class="token operator">=</span> max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>count<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用集合代替，自动扩容，可以节省很大部分空间，我将测试代码放在了 test目录的 com.cqh.sort.radix 下。</p><h3 id="优化">7.5.3 优化</h3><p>如果数组中的元素在 [0，max] 内分布均匀，如{9，2，3，1，5，6，3，4，8}，使用桶排序没有太大问题；但待排序的数组是{9993，9996，9999，9998，9998，9997}，创建长度为 10000 的 temp数组，太浪费空间。</p><p>就以上面的数组为例：</p><p>找出最小值：9993，最大值：9999，创建长度为 9999 - 9993 + 1 = 7 的temp 数组。</p><p>将要排序的数 num 看成是数组 temp 的下标 num - min，temp[i] 代表 i +min 的出现的次数；遍历 temp 时，输出 temp[i] 个 i + min。</p><p>temp：{1，0，0，1，1，2，1} 分别代表 9993、9994、... 9999出现的次数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>            max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>            min <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> min<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="计数排序">7.5.4 计数排序</h3><p>counting sort，接上文；</p><p>temp：{1，0，0，1，1，2，1}</p><p>由于 temp 内的元素总和为 n，不妨让 temp[i] = temp[i] + temp[i -1]，得到它们实际的排名。</p><p>temp：{1，1，1，2，3，5，6}，如 9993 排第 1 个，9996 是第 2 个，9997第 3，9998 第 4、5，9999 第 6，存入时将其减一。</p><p>新创建一个数组 b，遍历 arr，有 b[--temp[arr[i] - min]] =arr[i]；arr[i] - min 是 arr[i] 的排名在 temp 数组中的下标；--temp[arr[i]- min] 即是 arr[i] 对应的排名。</p><p>以 9998 为例，将其代入，b[--temp[9998 - 9993]] =b[--temp[5]]，先减减，temp[5] = temp[5] - 1 = 4；b[4] = 9998，此 9998排第 5；然后又有一个 9998，将其代入 b[--temp[5]]，由于之前 temp[5]减减变为 4，这次有减减变为 3，所以 b[3] = 9998，此 9998 排第 4，这样两个9998 在 b 中就排好序了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>        max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>        min <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> m <span class="token operator">=</span> max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> temp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 因为是对 arr 排序，所以将 arr、b 互换了</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr<span class="token punctuation">[</span><span class="token operator">--</span>temp<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>T(n）= 5n + m，S(n）= n +m；比桶排序稍微好一点的是，可以保存对象。</p><h2 id="基数排序">7.6 基数排序</h2><p>基数排序（RadixSort）算法思想：按元素的各个位上的数，将元素分配到不同的 “桶”中，从个位数开始，到最高位结束。</p><p>以 {6，56，5，125，84，2，9，58，981} 为例：</p><p>第一轮排序取元素的个位数：6，6，5，5，4，2，9，8，1</p><p>把元素的个位数当作下标，个位数决定了元素在 temp 中的位置：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">temp[6][0] = 6，temp[6][1] = 56temp[5][0] = 5，temp[5][1] = 125temp[4][0] = 84temp[2][0] = 2temp[9][0] = 9temp[8][0] = 58temp[1][0] = 981<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设元素的个位数为 digit，因为有多个 digit为同一个值的元素，为了防止元素被覆盖，使用二维数组保存这些元素；同时需要定义一个count 数组记录个位数为 digit 的元素的个数；</p><p>temp[i][j]，i 是元素的个位数，j+1 是重复元素的个数。</p><p>例：count[6] 默认为 0，temp[6][count[6]] = temp[6][0] = 6，随后count[6]++ 变为 1，表示个位数为 6 的元素有 1 个，再 temp[6][count[6]] =temp[6][1] = 56，count[6]++ 变为 2，表示个位数为 6 的元素有 2 个...</p><p>此时的 temp 为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">981</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">84</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">58</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时个位数已有序。</p><p>将其放回到原来的数组 arr；因为 count[i] 代表个位数为 i 的元素有count[i] 个，如 count[0] = 0，代表 temp[0] 中一个元素都没有；count[5] =2，代表 temp[5] 中有两个元素：temp[5][0]、temp[5][1]。</p><p>当 count[i] 不等于 0 时才需要将元素放入 arr。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">.</span>length<span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// count[5] = 2，进入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// j &lt; 2 时，j = 0、1</span>        <span class="token comment">// 得到 temp[5][0]、temp[5][1] 赋给 arr[index]</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 清空 count[i] 以便保存下一轮 temp[i] 元素的个数</span>        count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时 arr 为：{981，2，84，5，125，6，56，58，9}。</p><p>按顺序取出元素的十位数：8，0，8，0，2，0，5，5，0</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">temp[8][0] = 981temp[0][0] = 2temp[8][1] = 84temp[0][1] = 5, temp[2][0] = 125temp[0][2] = 6, temp[5][0] = 56temp[5][1] = 58temp[0][3] = 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时 temp 为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">125</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">981</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时 arr 为：{2，5，6，9，125，56，58，981，84}，十位数已有序。</p><p>按顺序取出元素的百位数（最大元素的最高位）：0，0，0，0，1，0，0，9，0</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">temp[0][0] = 2, temp[0][1] = 5, temp[0][2] = 6, temp[0][3] = 9temp[1][0] = 125temp[0][4] = 56, temp[0][5] = 58temp[9][0] = 981, temp[0][6] = 84<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此时 temp 为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 百位数都为 0</span>    <span class="token punctuation">{</span><span class="token number">125</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">981</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此 2，5，6，9，56，58，84，125，981 有序。</p><p>因为某位上的值的范围在 [0, 9] 内，所以可以定义 temp 为一个长度为 10的二维数组，但一维数组的长度无法确定，先考虑最差情况，所有元素的某位数上的值都相同时，需要长度为n 的一维数组才能装下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">981</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 保存某位数相等的元素的个数</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 取元素的个位数</span>    <span class="token keyword">int</span> digit <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>    temp<span class="token punctuation">[</span>digit<span class="token punctuation">]</span><span class="token punctuation">[</span>count<span class="token punctuation">[</span>digit<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 将 temp 中的元素放入 arr</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 取元素的十位数</span>    <span class="token keyword">int</span> digit <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>    temp<span class="token punctuation">[</span>digit<span class="token punctuation">]</span><span class="token punctuation">[</span>count<span class="token punctuation">[</span>digit<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 取元素的百位数</span>    <span class="token keyword">int</span> digit <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">100</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>    temp<span class="token punctuation">[</span>digit<span class="token punctuation">]</span><span class="token punctuation">[</span>count<span class="token punctuation">[</span>digit<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为我们事先知道最大数的最高位是百位，所以三轮结束。否则就需要找到数组中的最大值max，来确定轮数。</p><p>不妨让 max = 101，一共三轮；记 k = 1，每次乘等 10，第三轮时 max / 100= 1，第四轮 max / 1000 = 0，所以只要满足 max / k &gt; 0 就继续循环。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用前，先确定数组长度不是 0</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">findMax</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>            max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">// temp 是长度为 10 的二维数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// n 次，暂时忽略不计</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token function">findMax</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 轮数与最大值的位数有关，记为 p，比较 p 次</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> max <span class="token operator">/</span> k <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 比较 n 次</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> digit <span class="token operator">=</span> num <span class="token operator">/</span> k <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            temp<span class="token punctuation">[</span>digit<span class="token punctuation">]</span><span class="token punctuation">[</span>count<span class="token punctuation">[</span>digit<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 比较 10 次</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 这轮一共将 n 个元素重新装回 arr 中，所以一共 n 次</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记 temp 的长度为 k，则 count 的长度也应为 k，count[i] 记录着 temp[i]数组中元素的实际个数。</p><p>从比较次数上看，T(n）= p*(k+2n）+ p，记为 O( p(k+n）），这个版本的 k是确定的，为 10，即 O(pn）。</p><p>从空间上看，S(n）= kn+k，记为 O(kn），是稳定排序。</p><p>与桶排序一样，基数排序不能对负数排序。当 k 太大时，没有足够的空间存放temp 数组，会报 OutOfMemoryError堆空间不足错误。（实例都在堆中分配空间）</p><h2 id="x-总结回顾">7.x 总结回顾</h2><table><colgroup><col style="width: 5%"><col style="width: 25%"><col style="width: 23%"><col style="width: 4%"><col style="width: 41%"></colgroup><thead><tr class="header"><th style="text-align: center;">使用排序</th><th style="text-align: center;">时间复杂度（最差、平均、最好）</th><th style="text-align: center;">空间复杂度（最差、平均、最好）</th><th style="text-align: center;">稳定性</th><th style="text-align: center;">注意</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">冒泡排序</td><td style="text-align: center;">O(n<sup>2</sup>）、O(n<sup>2</sup>）、O(n）</td><td style="text-align: center;">O(1）</td><td style="text-align: center;">稳定</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">选择排序</td><td style="text-align: center;">O(n<sup>2</sup>）</td><td style="text-align: center;">O(1）</td><td style="text-align: center;">不稳定</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">插入排序</td><td style="text-align: center;">O(n<sup>2</sup>）、O(n<sup>2</sup>）、O(n）</td><td style="text-align: center;">O(1）</td><td style="text-align: center;">稳定</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">快速排序</td><td style="text-align: center;">O(n<sup>2</sup>）、O(nlog<sub>k</sub>n）、O(nlog<sub>k</sub>n）</td><td style="text-align: center;">O(n）、O(nlog<sub>k</sub>n）、O(nlog<sub>k</sub>n）</td><td style="text-align: center;">不稳定</td><td style="text-align: center;">特别依赖基准数的取值，最差情况时容易栈溢出</td></tr><tr class="odd"><td style="text-align: center;">堆排序</td><td style="text-align: center;">O(nlog<sub>k</sub>n）</td><td style="text-align: center;">O(1）</td><td style="text-align: center;">不稳定</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">希尔排序</td><td style="text-align: center;">O(n<sup>2</sup>）、O(n<sup>1.5</sup>）、O(n）</td><td style="text-align: center;">O(1）</td><td style="text-align: center;">不稳定</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">归并排序</td><td style="text-align: center;">O(nlog<sub>k</sub>n）</td><td style="text-align: center;">O(n + log<sub>k</sub>n）</td><td style="text-align: center;">稳定</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">桶排序</td><td style="text-align: center;">O(n + m）</td><td style="text-align: center;">O(m）</td><td style="text-align: center;">稳定</td><td style="text-align: center;">m = max + 1，当 m特别大时，容易堆内存不足，哪怕 n 很小；只能对非负整数排序</td></tr><tr class="odd"><td style="text-align: center;">基数排序</td><td style="text-align: center;">O( p(n+k））</td><td style="text-align: center;">O(kn）</td><td style="text-align: center;">稳定</td><td style="text-align: center;">p 为 max 的位数，k是桶的个数；只能对非负整数排序</td></tr><tr class="even"><td style="text-align: center;">计数排序</td><td style="text-align: center;">O(n + m）</td><td style="text-align: center;">O(n + m）</td><td style="text-align: center;">稳定</td><td style="text-align: center;">m = max - min +1；只能对非负整数排序</td></tr></tbody></table><h2 id="y-脑海练习">7.y 脑海练习</h2><p>7.1 b<sub>n</sub> = 1 + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.773ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1225.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> + ... + <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex" xmlns="http://www.w3.org/2000/svg" width="1.955ex" height="2.755ex" role="img" focusable="false" viewBox="0 -864.9 864.3 1217.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(255.4,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="624.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> - <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="3.621ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 1600.7 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(834,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(1000.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span>，n 为正整数，证明 {b<sub>n</sub>}收敛。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1 语法入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1. JavaSE </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.6 数组</title>
      <link href="/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.6-shu-zu/"/>
      <url>/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.6-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="第六章-数组">第六章 数组</h1><p>内容导视：</p><ul><li>一维数组</li><li>多维数组</li><li>简单排序</li><li>简单查找</li></ul><h2 id="一维数组">6.1 一维数组</h2><p>内容导视：</p><ul><li>数组介绍</li><li>一维数组的声明</li><li>一维数组的遍历</li><li>数组元素默认值</li><li>数组赋值机制</li></ul><h3 id="数组介绍">6.1.1 数组介绍</h3><p>数组是一种数组结构，当成一个容器吧，只能存放同一类型的元素。如 int数组只能存放 int 类型的元素。（包括自动转换成 int 的元素）</p><p>数组一旦创建，长度不可变。如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此数组实例的长度被确定为 5 了，不可改变。</p><p>数组中的元素的内存地址是连续的，数组拿<mark>首元素的内存地址</mark>作为整个数组的内存地址。</p><p>数组对象都有 length属性，可以获取数组的长度。<code>int length = arr.length;</code></p><p>每个元素都有下标，从 0 开始，以 1 递增，如最后一个元素的下标是 length- 1，首元素的下标为 0。</p><blockquote><p>下标也被称为索引、index。</p></blockquote><p><strong>为什么数组长度不可变</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 在堆空间开辟一块空间存储数组的元素</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/*这并不是改变了原数组的长度，而是重新在堆中创建了一个新的数组实例将地址重新赋给引用，原来的数组实例由于没有引用指向被回收*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>堆是一块内存空间，用来存放实例（我有时候也称对象）。引用是指保存了实例的内存地址的变量，可以通过引用操纵实例，如同遥控器控制电视一样。</p></blockquote><p>语言设计者对需要执行的任务分配给不同的结构，数组具有固定长度，因为它旨在成为开发人员可以构建的低级别、简单的实现。</p><p>计算机内存有限，如果可以延长数组，但旁边的内存已经存了另一个对象怎么办？数组各个元素是彼此相邻存储，延长不了。</p><p>固定长度后，如果数组没有足够的空间存放元素，那么可以找到更大的空白空间创建一个新的更大的数组存放原有数组的数据，同时也可以腾出原数组的空间。</p><p>如果不确定数组长度多大，可以使用 List 集合存放数据。</p><p>集合底层已经实现好了，当数组快装满时，会在更大的空白处创建一个长度更大的数组，将原有数据复制到新数组，不需要我们手动实现。</p><p><strong>为什么数组下标从 0 开始</strong></p><ol type="1"><li><p>历史原因</p><p>之前 C 语言数组下标也是从 0开始，没有必要出一种语言就改一次下标，增加额外的学习和理解成本。</p></li><li><p>减少 CPU 指令运算</p><p>1）下标从 0 开始，计算第 i 个元素的地址，arr[i] = 首地址 + i *单个元素所占字节。</p><p>2）下标从 1 开始，计算第 i 个元素的地址，arr[i] = 首地址 +（i - 1）*单个元素所占字节。</p><p>每次寻找地址时，多了一次 i - 1 即减法的指令运算，更加消耗 CPU资源。（把大脑想象成 CPU，每次寻址时多计算一次二进制的减法）</p></li></ol><p><strong>使用数组存放元素的优点</strong>：根据下标查询元素效率极高</p><ul><li>每个元素的内存地址在空间上是连续的。</li><li>数组中每个元素类型相同，占用空间大小一样。</li><li>知道首元素的内存地址、每个元素的占用空间大小，通过下标可以算出元素的内存地址，直接通过内存地址定位元素。</li></ul><p><strong>缺点</strong>：</p><ul><li><mark>由于保证数组中每个元素的内存地址连续</mark>，随机增删元素时，会涉及到后面元素统一向后或向前位移的操作，效率较低。</li><li>数组不能存储大数据量，因为很难在内存中找一块特别的大的连续的空间。</li></ul><p><strong>简化版本如下</strong>：</p><p><strong>数组是什么</strong></p><ul><li>存储同一类型元素的容器，引用类型。</li></ul><p><strong>数组的优缺点</strong></p><ul><li>根据下标查询元素效率极高</li><li>随机增删元素效率低</li></ul><p><strong>为什么数组下标从 0 开始</strong></p><p>前提：</p><ul><li><p>数组的每个元素的内存地址是连续的</p></li><li><p>每个元素占用空间一样</p></li></ul><p>知道首元素内存地址，可以算出第 i 个下标的元素的内存地址。设元素是 int类型：（首地址即第一个元素的内存地址）</p><ul><li>如果下标从 1 开始，arr[i] 的地址 = 首地址 +（i - 1）* 4</li><li>如果下标从 0 开始，arr[i] 的地址 = 首地址 + i * 4</li></ul><p>很明显从 1 开始多算了一次减法，消耗的 CPU 更多。</p><p><strong>为什么数组长度不可变</strong></p><ul><li><p>数组是连续不断的</p><ul><li>如果数组可以延长，如果旁边恰好存了一个对象怎么办？</li><li>如果数组可以缩减，那么突然空出来了一小块空间，别人如何利用？</li></ul></li><li><p>解决</p><p>固定数组长度，如果数组满了：</p><p>另寻一个更大的空间创建更大的数组，把原有数据填入新数组。旧数组无引用指向被当作垃圾回收，释放空间。</p></li></ul><h3 id="一维数组的声明">6.1.2 一维数组的声明</h3><p><strong>静态初始化</strong></p><p>在声明时，同时确定了元素的值。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">数组存放的元素类型[] 变量名 = {元素1, 元素2, ...};<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/*也可以这么写：int[] array = new int[]{1, 2, 92, 64, 90};有时候传参，或者先声明了 array，需要用到这样的方式赋值*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般称这是存储 int 类型的元素的数组，为了表达方便，简略为如下：</p><p>创建了一个 int 类型、长度为 5 的数组，引用名为 array，存放了 5 个 int类型的元素，分别为 1、2、92、64、90。</p><blockquote><p>int 类型的数组是指数组中的每个元素的类型是 int 类型，而不是数组是 int类型。</p></blockquote><figure><img src="https://s2.loli.net/2022/04/24/LTuGOnc41W7FCwb.png" alt="array"><figcaption aria-hidden="true">array</figcaption></figure><p>上面图的元素，下标从左到右，依次为 0、1、2、3、4。</p><p>通过引用访问下标对应的元素：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 访问第 1 个元素</span><span class="token keyword">int</span> a1 <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 访问第 5 个元素</span><span class="token keyword">int</span> a5 <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 获取数组的长度</span><span class="token keyword">int</span> length <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 90</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>动态初始化</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">数组存放的元素的类型<span class="token punctuation">[</span><span class="token punctuation">]</span> 变量名 <span class="token operator">=</span> <span class="token keyword">new</span> 元素类型<span class="token punctuation">[</span>数组长度<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/*可以先声明，后分配空间int[] array2;array2 = new int[3];*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建了一个 int 类型、长度为 3 的数组，引用名为 array2，存放了 3 个int 类型的元素，值都默认为 0。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/24/I8qUztax3f1bmuJ.png" alt="array2"><figcaption aria-hidden="true">array2</figcaption></figure><p>赋值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 把 53 赋给下标为 0 的元素</span>array2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">53</span><span class="token punctuation">;</span>array2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>array2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 53</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>空</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">;</span><span class="token comment">// 此变量没有保存任何值，必须赋值（初始化）才能够访问</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 此变量保存了 null，代表空</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 创建了一个长度为 0 的数组（数组无元素），地址赋给了 arr3</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 同上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一维数组的遍历">6.1.3 一维数组的遍历</h3><p>数组中的元素下标从 0 到 length - 1，可以使用 for循环访问每个元素。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：当访问不存在的下标时，会报数组索引越界异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">Exception <span class="token function">in</span> thread <span class="token string">"main"</span> java.lang.ArrayIndexOutOfBoundsException<span class="token punctuation">:</span> <span class="token number">3</span>        <span class="token function">at</span> Hello.main<span class="token punctuation">(</span>Hello.java<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="数组元素默认值">6.1.4 数组元素默认值</h3><p>使用动态初始化时，不同类型的元素会有默认值。</p><table><thead><tr class="header"><th style="text-align: center;">数据类型</th><th style="text-align: center;">默认值</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">short、byte、int、long</td><td style="text-align: center;">0</td></tr><tr class="even"><td style="text-align: center;">float、double</td><td style="text-align: center;">0.0</td></tr><tr class="odd"><td style="text-align: center;">boolean</td><td style="text-align: center;">false</td></tr><tr class="even"><td style="text-align: center;">char</td><td style="text-align: center;">'\u0000'</td></tr><tr class="odd"><td style="text-align: center;">引用类型包括 String、数组</td><td style="text-align: center;">null</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 报错：从 long 转换到 byte 可能会有损失</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>特别说明一下：</p><p>char 的 '\u0000' 并不是空格，而是空字符，代表什么都没有。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">' '</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>'\u0000' 对应整数 0，另一种写法'\0'，是字符的八进制表示。打个比方，'a' 对应的 8、10、16 进制分别为0141、97、0x0061，如下都是一个意思。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token number">0141</span><span class="token punctuation">;</span><span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token number">0x0061</span><span class="token punctuation">;</span><span class="token keyword">char</span> c4 <span class="token operator">=</span> <span class="token char">'\141'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c5 <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组赋值机制">6.1.5 数组赋值机制</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 将 arr1 保存的值拷贝一份，赋给 arr2</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>arr1 保存的值为数组实例的内存地址，假设为0x1111，然后拷贝一份地址（创建副本）给 arr2，本质还是值传递，arr1、arr2指向的堆中的对象是同一个。（通过值传递实例地址）</p><figure><img src="https://s2.loli.net/2022/04/24/Q38nVbfSTONlUtR.png" alt="数组"><figcaption aria-hidden="true">数组</figcaption></figure><p>修改 arr2 保存的值，arr1 不会受到影响。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">arr2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [I@15db9742（等同于实例的内存地址）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>本来应该就此打住，但是有人可能还接触过引用传递这个概念：</p><p>值传递（pass byvalue）：赋值时将值拷贝一份赋给另一个变量，这样在另一个变量中修改自己保存的值，不会影响到最初的变量；</p><p>类似 Ctrl + C、Ctrl + V。</p><p>引用传递（pass byreference）：赋值时将值的地址赋给另一个变量，另一个变量通过内存地址定位到此值，如果修改此值，会影响原来变量保存的值；</p><p>类似 Windows 系统的创建桌面快捷方式。</p><table><thead><tr class="header"><th style="text-align: center;">值传递</th><th style="text-align: center;">引用传递</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">会创建副本</td><td style="text-align: center;">不会创建副本</td></tr><tr class="even"><td style="text-align: center;">无法改变原变量保存的值</td><td style="text-align: center;">可以改变原变量保存的值</td></tr></tbody></table><p>有人就问了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">;</span><span class="token comment">// 使用 arr2 改变了数组中第一个元素的值</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token comment">// 你看看，这不影响了 arr1 吗？</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 99</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不不不，不是这个意思，把 arr1、arr2当成两个独立的遥控器吧，电视只有一个，arr2 换台，受影响的是电视，而不是arr1。</p><p>arr1 与 arr2指向的是同一个对象，通过任一引用修改对象内的数据后，再通过任一引用访问对象内保存的数据当然会受到影响。</p><p>但这里修改的是数组中的元素，而不是 arr1 保存的值，arr1保存的值还是这个实例的地址，没受影响。要想真正的拷贝而不受原变量影响，即相互独立，需要手动创建一个新的数组，然后手动赋值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结论：arr1把自己保存的值拷贝一份赋给了arr2，只不过这个值恰好是地址，就当作是值传递吧。</p><p>数组实例 {6, 62, 2} 把地址赋给 arr1，才有点引用传递的味道。</p><p>由于不能直接通过实例访问到元素，必须借助引用；当没有引用时，再也不可能访问到此实例，等同于垃圾。</p><p>有人说，不对啊？必须借助引用访问元素这我知道，如arr[0]；可当没有引用时，我可以重新把这个实例的地址赋给另一个变量，又来了一个引用，这不就可以访问到了吗？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 保存实例的地址的变量称为引用</span><span class="token comment">// 现在 arr1 不是 {5, 6, 2} 的引用了</span>arr1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 重新将此实例的地址赋给 arr2</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 我访问到了！</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可是，你确定第 1 行与第 6 行的 {5, 6, 2} 是同一个实例吗？</p><p>要想确认是否是同一个实例，需要借助引用修改这个实例的值，再看看实例是否被修改了。如果被修改了，说明是同一个实例。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 修改 arr1 对应的实例第一个元素为 9</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token comment">// 访问 arr2 对应的实例第一个元素，还是 5</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然而并没有被修改，说明不是同一个实例（包括之后面对对象中 new出来的对象也是一样）。所以第 1 行的 {5, 6, 2}永远不可访问到了，这种访问不到的实例已经没有用处，会在垃圾回收时被清理。</p><p>也可通过直接输出引用、双等号比较，查看是否是同一个实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// arr1 与 arr2 保存的值一样</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1 <span class="token operator">==</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token comment">// arr1 与 arr3 保存的值不一样，说明保存的不是同一个实例的内存地址</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1 <span class="token operator">==</span> arr3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [I@15db9742</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [I@15db9742</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [I@6d06d69c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>于是我们通常说：基本数据类型使用双等号比较的是值，引用类型使用双等号比较的是内存地址。</p><p>那如果有人只认为保存的内容相等就行，不在乎是否为不同实例，在源代码最上面加入<code>import java.util.Arrays;</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// equals 比较内容</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1 <span class="token operator">==</span> arr3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1 <span class="token operator">==</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记住了，我们一般说拷贝数组，并不是说 int[] a2 = a1赋值，而是重新创建一个与拷贝源数据相同的数组（使用 == 比较为 false，但equals 比较为 true）。</p><h2 id="多维数组">6.2 多维数组</h2><p>内容导视：</p><ul><li>二维数组声明</li><li>遍历二维数组</li><li>静态方法调用</li></ul><h3 id="二维数组声明">6.2.1 二维数组声明</h3><p>二维以上的数组用的很少，故略去。</p><p><strong>声明二维数组</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">;</span><span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>arr3<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一般使用第一种。</p><p><strong>静态初始化</strong></p><p>二维数组由多个一维数组组成（二维数组的每一个元素是一维数组），三维数组由多个二维数组组成...</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> i1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> i2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">262</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> i3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">,</span> i3<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token number">252</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>动态初始化</strong></p><p>语法：</p><p><code>数据类型[][] 数组名 = new 数据类型[二维数组的长度][一维数组的长度];</code></p><p>例：</p><p><code>int[][] arr =  new int[2][3];</code></p><p>代表创建了一个 int 类型、长度为 2的二维数组；（对于引用类型，只保存内存地址）</p><p>二维数组中的每个元素都保存着 int 类型、长度为 3的一维数组的内存地址。（但通常说二维数组里的每个元素是一维数组）</p><figure><img src="https://s2.loli.net/2022/04/24/qJecXLyDdMVZb86.png" alt="arr"><figcaption aria-hidden="true">arr</figcaption></figure><blockquote><p>二维数组本质是一维数组，只不过每个元素是一维数组的引用。</p></blockquote><p><strong>访问</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 二维数组中的每一个元素都是一维数组，如 arr[0] 是 int[] 类型</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// arr[0] 代表二维数组中下标为 0 的元素，也就是一维数组，把一维数组的地址赋给 arr1</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 给 arr1 数组的下标为 0 的元素赋值 67</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">67</span><span class="token punctuation">;</span><span class="token comment">// 获取 arr1 数组下标为 0 的元素</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>合并</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 下标为 0 就是数组中的第一个元素</span><span class="token comment">// 给 arr 下标为 0 的一维数组中的下标为 0 的元素赋值 67</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">67</span><span class="token punctuation">;</span><span class="token comment">// 访问 arr 下标为 0 的一维数组中的下标为 0 的元素</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 赋值</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">52</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">62</span><span class="token punctuation">;</span><span class="token comment">// 现在下标为 0 的一维数组：{52, 5, 62}</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">// 现在下标为 1 的一维数组：{2, 8, 6}</span><span class="token comment">// 访问下标为 0 的数组的所有元素</span><span class="token keyword">int</span> n1 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n3 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 访问下标为 1 的数组的所有元素</span><span class="token keyword">int</span> m1 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> m2 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> m3 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 注意二维数组长度为 2，一维数组长度为 3，下标别越界。（下标别超过 length - 1）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当一维数组的长度不确定时，就不能使用上述方式动态初始化。</p><p><strong>动态初始化 2</strong></p><p>假如确定了二维数组的长度为 4，</p><p><code>int[][] arr = new int[4][];</code>此时内存图如下：（因为一维数组是引用类型，不赋值默认为 null）</p><figure><img src="https://s2.loli.net/2022/04/24/xsjDdB7iIZ3vwUt.png" alt="arr"><figcaption aria-hidden="true">arr</figcaption></figure><p>提示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// null</span><span class="token comment">// 使用 null 获取什么都会抛出 java.lang.NullPointerException 空指针异常</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这类运行时异常，编译时检查不出来。</p><p>以后需要时再创建一维数组：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="遍历二维数组">6.2.2 遍历二维数组</h3><p>先得到每一个元素，也就是一维数组，再遍历一维数组：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> total <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> total<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> total<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"，"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一维数组遍历完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>合并</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> total <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> total<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> total<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>total<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态方法调用">6.2.3 静态方法调用</h3><p>每次都是重复的代码，有点厌倦了，所以需要方法封装重复的代码了；只讲一点点。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a1 <span class="token operator">+</span> a2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>方法的第 3 个单词 void、int...代表返回值类型，如果没有返回值就写void；有返回值，就写返回值的类型，然后在方法结尾处写上<code>return 要返回的值</code>;</p><p>f1、sum 是方法名，自己定义，符合标识符规则就行。</p><p>方法名后的是形式参数列表，可以定义任意个变量，变量之间使用英文逗号分隔，将来调用时传入实际参数，注意实际参数的个数和类型要与形式参数对应上。</p><p>如何使用方法？（调用方法）</p><p>在同一个类中，直接通过<code>方法名(实参)</code>调用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 使用 int 类型的变量接收返回值</span>        <span class="token comment">// int num1 = 4; int num2 = 5;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 9</span>    <span class="token punctuation">}</span>    <span class="token comment">// 返回 num1 + num2</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在同一个包下（同级目录），不同类中，使用<code>类名.方法名(实参)</code>调用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不同包下的类需要使用 import 导入，如使用其它包下的 Arrays类，关于方法详细请看 API文档；如果以后编译时说找不到符号，想一想自己导入了此类没有。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [5, 26, 3]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外我还会涉及到成员变量：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token punctuation">{</span>    <span class="token comment">// 成员变量：类体中，方法外定义的变量，作用域为整个类</span>    <span class="token class-name">String</span> s1<span class="token punctuation">;</span>        <span class="token comment">// 带 static 的成员变量称为静态变量</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> s2<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 在带 static 的方法中访问普通成员变量，需要使用 new 创建实例，再用引用.变量名访问</span>        <span class="token class-name">T</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span>s1 <span class="token operator">=</span> <span class="token string">"你好"</span><span class="token punctuation">;</span><span class="token comment">// 不赋值默认为 null，与数组元素默认值一样</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 你好</span>                <span class="token comment">// 访问静态变量，本类中直接通过变量名访问，其它类需要使用类名.变量名访问</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// null</span>                <span class="token comment">// 与数组一样，这是一个新的实例，与 t 无关</span>        <span class="token class-name">T</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t <span class="token operator">==</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="简单排序">6.3 简单排序</h2><p>内容导视：</p><ul><li>时间复杂度</li><li>空间复杂度</li><li>冒泡排序</li><li>简单选择排序</li><li>直接插入排序</li></ul><p>我们知道了如何定义数组来存放元素，那就试试对数组中的元素排序吧。</p><p>排序：一组元素按指定顺序排列的过程。生活中，排序无处不在，我会依次介绍，默认顺序：从小到大排。</p><p>对于初学者，只需要了解简单排序，其它不用看，因为大部分人不可能一次学会；如果是天才当我没说。（怨念~_~）</p><p>排序算法分为：</p><ul><li>交换排序<ul><li>冒泡排序</li><li>快速排序</li></ul></li><li>选择排序<ul><li>简单选择排序</li><li>堆排序</li></ul></li><li>插入排序<ul><li>直接插入排序</li><li>希尔排序</li></ul></li><li>归并排序</li><li>基数排序</li></ul><p>在完成功能的情况下，我们需要考虑如何让程序运行时间更短，占用空间更小。（你也不希望软件卡半天没响应，又特别占用内存，对吧）</p><p>由此引申出来时间复杂度与空间复杂度，接下来一一介绍。</p><h3 id="时间复杂度">6.3.1 时间复杂度</h3><p>描述了解决特定问题的步骤称为算法，如排序算法解决了元素无序的问题。只不过在计算机上，可以使用代码描述。</p><p>解决问题的方法有多种，不同算法的效率有高有低；最直观的方法就是编写不同的程序实现不同的算法，然后输入不同数据，进行编译，运行时对它们进行计时，用时最短的就是最好的。但这种事后测量的方法有很大的缺点与不确定性：</p><ul><li>实现不同程序需要耗费大量时间，而我们只需保留其中之一。</li><li>数据的不同，可能对某个算法更加有利；如使用顺序与逆序查找，如果查找的数就在开头，顺序唰的一下找到了，就能说明顺序一定比逆序好吗？如何选择测试数据以及数据量的多少，才能能够保证结果的公平性，很难判断的。</li><li>在不同的运行环境、硬件性能情况下得到的结果可能相差会很大；即使在同台机器上，也有可能测试时CPU负荷突然过高、运行内存忽高忽低、计算机电量不足...代码运行速度慢了下来，你究竟要测试几次，在不同的机器上，配置一个怎么样的的环境，才能得出令人信服的结果？</li></ul><p>这时就需要我们自己在编写程序前，能够粗略估计代码的运行时间。（事前分析估算方法）</p><p><strong>语句执行次数</strong></p><p>也称语句频度、时间频度，记为 T(n），n代表数据的个数。假设运行一行基础代码就算执行一次语句。代码花费的时间与语句执行次数成正比例，执行的语句越多，花费时间越多。</p><p>求 m1 方法内语句执行次数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行 1 次</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我饿了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行 1 次</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>T(n）= 2；</p><p>此时数组中元素的个数 n 不会对语句执行次数产生影响，也就是说无论arr.length 有多大，语句执行次数也就是 2。</p><p>求 for 内的语句执行次数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">// 从 0 到 n - 1，一共循环 n 次，每次循环执行 2 个语句</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我不想排序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 一共执行 n 次</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我想睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 一共执行 n 次</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>T(n）= 2n；</p><p>求 for 内的语句执行次数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没想到吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"还有乘等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>for 循环执行了几次？</p><p>每次循环 i *= 2 第 1 次循环 i = 1 = 2<sup>0</sup>; 第 2 次循环 i = 2= 2<sup>1</sup>; 第 3 次循环 i = 4 = 2<sup>2</sup>; ... 第 x+1 次循环 i= 2<sup>x</sup>;</p><p>假设第 x+1 次循环时，i &gt;=n，不满足条件，退出循环，得出不等式：</p><p>2<sup>x</sup> &gt;= n</p><p>解出：x &gt;= log<sub>2</sub>n</p><p>第 log<sub>2</sub>n + 1 次循环时，i 正好等于n，退出了循环，这次不算，那么一共执行了 log<sub>2</sub>n次循环，每次循环时执行 2 个语句。</p><p>T(n）= 2 * log<sub>2</sub>n；</p><blockquote><p>若循环次数不是整数，向上取整，如 2.321928 记作 3。</p><p>对数：<a href="https://baike.baidu.com/item/%E5%AF%B9%E6%95%B0/91326">https://baike.baidu.com/item/%E5%AF%B9%E6%95%B0/91326</a></p><p>对数公式：<a href="https://baike.baidu.com/item/%E5%AF%B9%E6%95%B0%E5%85%AC%E5%BC%8F/5557846">https://baike.baidu.com/item/%E5%AF%B9%E6%95%B0%E5%85%AC%E5%BC%8F/5557846</a></p></blockquote><p>求方法中输出语句的执行次数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m4</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i="</span> <span class="token operator">+</span> i                <span class="token operator">+</span> <span class="token string">"，j="</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>外层 for 一共循环 n 次，里层 for 一共循环 n次，里面的输出语句被执行了 n * n 次。</p><p>T(n）= n<sup>2</sup>；</p><p>有了语句执行次数的函数，难道就能比较不同代码的运行时间吗？</p><p>比如 T(n）= 100n + 1 与 T(n）= n<sup>2</sup> +7，依然无法清晰看出谁的运行时间更短，此时需要看运行时间如何随 n的增长而变化，选出增速最小的算法。</p><p>引出渐进时间复杂度（asymptotic time complexity）这个概念：</p><p><strong>渐进时间复杂度</strong></p><p>简称时间复杂度，定义如下：</p><p>代码执行语句次数记作 T(n）；存在函数 f(n），当 n 趋近无穷大时，T(n）/f(n）的比值为一个不等于 0 的常数，说明 f(n）与T(n）的增长率相同，是同一量级；如 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.601ex" xmlns="http://www.w3.org/2000/svg" width="10.091ex" height="3.567ex" role="img" focusable="false" viewBox="0 -868.9 4460.4 1576.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munder"><g data-mml-node="mo" transform="translate(214.8,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(278,0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(556,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(0,-600) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1572,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g><g data-mml-node="mfrac" transform="translate(1985.3,0)"><g data-mml-node="mrow" transform="translate(220,398) scale(0.707)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1100,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1878,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g><g data-mml-node="mi" transform="translate(1025.4,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="2235.1" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>= 2。</p><p>记作 T(n）= O( f(n）），称 O(f(n））为代码的时间复杂度；时间复杂度描述了代码执行时间随数据量增长的变化趋势。</p><p>如何推出 f(n）？</p><table><thead><tr class="header"><th style="text-align: center;">次数 n</th><th style="text-align: center;">a：2n + 10</th><th style="text-align: center;">a`：n</th><th style="text-align: center;">b：2n<sup>2</sup> + 5</th><th style="text-align: center;">b`：n<sup>2</sup></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">1</td><td style="text-align: center;">12</td><td style="text-align: center;">1</td><td style="text-align: center;">7</td><td style="text-align: center;">1</td></tr><tr class="even"><td style="text-align: center;">100</td><td style="text-align: center;">210</td><td style="text-align: center;">100</td><td style="text-align: center;">20005</td><td style="text-align: center;">10000</td></tr><tr class="odd"><td style="text-align: center;">10000</td><td style="text-align: center;">20010</td><td style="text-align: center;">10000</td><td style="text-align: center;">200000005</td><td style="text-align: center;">100000000</td></tr><tr class="even"><td style="text-align: center;">1000000</td><td style="text-align: center;">2000010</td><td style="text-align: center;">1000000</td><td style="text-align: center;">2000000000005</td><td style="text-align: center;">1000000000000</td></tr></tbody></table><p>当 n 越来越大时，常数、低次数项已经变得不太重要，如同 a再怎么努力，也追不上 b，因此被可以省略。</p><ul><li>如果函数是常数，使用 1 代替</li><li>若不是常数，只保留最高次数的那一项，并去除最高次数的系数</li></ul><p>如 T(n）= 20，记作 T(n）= O(1）；</p><p>T(n）= 2 * log<sub>2</sub>n + 98 = 2 * log<sub>2</sub>k *log<sub>k</sub>n + 98，只保留最高次数那项，且去掉系数，记作 T(n）=O(log<sub>k</sub>n）；</p><blockquote><p>设 k 为任意常数，由换底公式得：log<sub>2</sub>n = log<sub>2</sub>k *log<sub>k</sub>n</p></blockquote><p>T(n）= 2n<sup>2</sup> + 3n + 9，记作 T(n）= O(n<sup>2</sup>）。</p><figure><img src="https://s2.loli.net/2022/04/05/PWATt6ebQxlKcDk.png" alt="三种函数的增长趋势"><figcaption aria-hidden="true">三种函数的增长趋势</figcaption></figure><p>很明显随着 n的增大，O(n<sup>2</sup>）的时间复杂度（增长速度）远大于其它两个。</p><p><strong>常见的时间复杂度</strong></p><p>从小到大排（n 趋向无穷大时）：</p><p>常数时间：O(1）</p><p>对数时间：O(log<sub>k</sub>n）</p><p>线性时间：O(n）</p><p>线性对数时间：O(n * log<sub>k</sub>n）</p><p>平方时间：O(n<sup>2</sup>）</p><p>立方时间：O(n<sup>3</sup>）</p><p>指数时间：O(2<sup>n</sup>）</p><p>阶乘时间：O(n!）</p><p>n 的 n 次方：O(n<sup>n</sup>）</p><p>一般代码的时间复杂度为指数阶及以上，就不用考虑了，哪怕 n 只有10000，结果也是天大的数字，除非你确定 n 十分的小，将来也不会增加。</p><p>计算 1 到 n 的数之和，来看看哪种算法时间效率高：</p><p>普通人想到的是一个个累加，用代码描述：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// n + 1</span>    sum <span class="token operator">+=</span> i<span class="token punctuation">;</span><span class="token comment">// n</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记录所有语句执行次数：2n + 4，时间复杂度：O(n）；</p><blockquote><p>前 n 次顺利通过 for 循环的判断条件，第 n + 1次时判断失败，没有进入。</p></blockquote><p>高斯想到的是首尾相加 * 个数 / 2：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>时间复杂度：O(1）；</p><p>很明显高斯给出的算法效率更高；那么如果在某个程序中，需要解决求和问题，就可以选择此算法；而不是等到程序写好了，才掐着秒表，运行一下，一个个比哪个算法用的时间少。</p><p>我们可以看到，执行的代码就算有再多行，但如果与 n 的取值无关，通通记为O(1），所以我只计算循环内某段语句的执行次数（受 n 影响），如 sum +=i，其外的忽略不计，这样方便点。</p><p>算法优劣、数据的不同、数据量决定了程序的运行时间长短。</p><blockquote><p>当数据量很少时，如 n = 2，计算机运行速度很快的，时间差异几乎是0；使用事后计时的方法，是无法准确区分算法优劣的。</p></blockquote><p>备注，高斯思路描述如下：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex"> sum =   1 +   2 + ... + 100 sum = 100 +  99 + ... +   12sum = 101 + 101 + ... + 101 = 101 * 100  sum = 101 * 50 = 5050<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="空间复杂度">6.3.2 空间复杂度</h3><p>代码耗费的存储空间，记作 S(n），同样也有 S(n）= O( f(n）），O(f(n））记为空间复杂度。</p><p>要求：记录一张 n * n 棋盘上的黑白棋子。</p><figure><img src="https://s2.loli.net/2022/04/05/qEYPx7gBM8dAroj.png" alt="棋盘"><figcaption aria-hidden="true">棋盘</figcaption></figure><p>代码 1：使用二维数组记录棋盘，空记为 0，黑记为 1，白记为 2；假设 n =9：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组所占空间：一个 int 类型是 4 个字节，S(n）= 4 *n<sup>2</sup>，空间复杂度为 O(n<sup>2</sup>）;</p><p>想要获取第 row 行、第 column 列的信息：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> column<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 注意下标从 0 开始，并不是 1，所以需要减去 1</span>    <span class="token comment">// 例：第 1 行第 1 列，即 arr[0][0]</span>    <span class="token keyword">int</span> data <span class="token operator">=</span> arr<span class="token punctuation">[</span>row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>column <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第 "</span> <span class="token operator">+</span> row <span class="token operator">+</span> <span class="token string">" 行、第 "</span> <span class="token operator">+</span> column <span class="token operator">+</span> <span class="token string">" 列的棋子为："</span> <span class="token operator">+</span> <span class="token function">printChess</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">printChess</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> state <span class="token operator">=</span> <span class="token string">"？"</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span> <span class="token operator">:</span>            state <span class="token operator">=</span> <span class="token string">"空"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span> <span class="token operator">:</span>            state <span class="token operator">=</span> <span class="token string">"黑"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span> <span class="token operator">:</span>            state <span class="token operator">=</span> <span class="token string">"白"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>    <span class="token punctuation">}</span><span class="token keyword">return</span> state<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度为 O(1）。</p><p>代码 2：创建二维数组保存数据</p><p>第一行记录数组一共 i 行 j 列，有 count 个棋子（目前是 9、9、5）；剩下count 行记录这些棋子的位置（下标从 0 开始）与保存的值；数组长度为 1 +count。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 棋盘的总行、列数、棋子的个数</span>    <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 第一个棋子的行数 - 1、列数 - 1、保存的值</span>    <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>count 的范围处于 [0, n<sup>2</sup>] 之间；</p><p>如果棋盘上没有一个棋子，最好情况；只记录棋盘几行几列、棋子的个数为0，数组所占空间：S(n）= 4 * 3 = 12，空间复杂度为 O(1）；如果棋盘上放满了棋子，最差情况；需要记录 n<sup>2</sup>个棋子的位置，数组所占空间：S(n）= 4 * 3 * (n<sup>2</sup> + 1）=12n<sup>2</sup> + 12，空间复杂度为 O(n<sup>2</sup>）。</p><p>获取第 row 行、第 column 列的信息，比如获取第 3 行第 6列的信息，如果棋子存在，那么二维数组中肯定记录了2、5、棋子保存的值。</p><p>我们需要从头遍历，找到开头为 2、5的一维数组；如果找到，说明棋子存在，获取这个一维数组第 3个元素（保存的值）；</p><p>如果没有找到，棋子不存在，记为空。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> column<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> column <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> i <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            data <span class="token operator">=</span> arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第 "</span> <span class="token operator">+</span> row <span class="token operator">+</span> <span class="token string">" 行、第 "</span> <span class="token operator">+</span> column <span class="token operator">+</span> <span class="token string">" 列的棋子为："</span> <span class="token operator">+</span> <span class="token function">printChess</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式时间复杂度十分不稳定，最好情况 count =0，不需要遍历，得到结果为空，时间复杂度为 O(1）；最差情况 count =n<sup>2</sup>，且对应一维数组在最后一个，时间复杂度为O(n<sup>2</sup>）。</p><p>当棋子较少时，使用代码 2 更节省空间；想要获取某行某列的信息，使用代码1 时间效率更高。到底是用空间换时间，还是用时间换空间，凭自己取舍。</p><p>也可以组合：当用户下棋时，为了提升时间效率，用空间换时间，使用代码1；退出棋盘时并不需要获取某行某列的信息，只需记录棋盘位置，使用代码 2更节省空间。</p><h3 id="冒泡排序">6.3.3 冒泡排序</h3><p>规定从小到大排序，那么小的要在前面，否则就需要交换。</p><p>Bubble Sort 算法思路：比较相邻元素，逆序就交换。</p><p>以 5，6，74，2，36，7 为例，每次比较中，我会用灰色标记大数。</p><p>第一轮：5，6，74，2，36，7</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">首先比较第 1 个与第 2 个元素的大小，5 &lt; 6，不需要交换；比较第 2 个与第 3 个，6 &lt; 74，不需要交换；比较第 3 个与第 4 个，74 &gt; 2，需要交换，交换后：5，6，2，74，36，7比较第 4 个与第 5 个，74 &gt; 36，需要交换，交换后：5，6，2，36，74，7比较第 5 个与第 6 个，74 &gt; 7，需要交换，交换后：5，6，2，36，7，74<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/06/hLZ3JAiBEa4gNwd.png" alt="第一轮"><figcaption aria-hidden="true">第一轮</figcaption></figure><p>可以看到第一轮只是把最大的数归位了，继续找出第二大数吧。</p><p>第二轮：5，6，2，36，7，74</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">比较第 1 个与第 2 个，5 &lt; 6，不需要交换；比较第 2 个与第 3 个，6 &gt; 2，需要交换，交换后：5，2，6，36，7，74比较第 3 个与第 4 个，6 &lt; 36，不需要交换；比较第 4 个与第 5 个，36 &gt; 7，需要交换，交换后：5，2，6，7，36，74<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/06/Sr7zB8iQNwY69MH.png" alt="第二轮"><figcaption aria-hidden="true">第二轮</figcaption></figure><p>这一轮找出了第二大数 36。</p><p>有人这时可能会问，需不需要比较第 5 个与第 6 个？</p><p>要知道我们第一轮排序时，已经把最大的数放在了最后面，其它的数肯定不会大于最大数，所以没有必要进行比较了，剩下几轮同理，如下一轮只需比较到第3 个与第 4 个，找出第三大数。</p><p>第三轮：5，2，6，7，36，74</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">比较第 1 个与第 2 个，5 &gt; 2，需要交换，交换后：2，5，6，7，36，74比较第 2 个与第 3 个，5 &lt; 6，不需要交换；比较第 3 个与第 4 个，6 &lt; 7，不需要交换；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第三轮找出了第三大数 7。</p><figure><img src="https://s2.loli.net/2022/04/06/m3VYdB6xjZJRiuI.png" alt="第三轮"><figcaption aria-hidden="true">第三轮</figcaption></figure><p>第四轮：2，5，6，7，36，74</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">比较第 1 个与第 2 个，2 &lt; 5，不需要交换；比较第 2 个与第 3 个，5 &lt; 6，不需要交换；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/06/d8LmWIObx6VJhRA.png" alt="第四轮"><figcaption aria-hidden="true">第四轮</figcaption></figure><p>找出了第四大数 6。</p><p>第五轮：2，5，6，7，36，74</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">比较第 1 个与第 2 个，2 &lt; 5，不需要交换；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/06/HdqQ82C4gnVTANG.png" alt="第五轮"><figcaption aria-hidden="true">第五轮</figcaption></figure><p>找出了第五大数 5，接下来就只剩2，没必要比了，到此结束。可以看出一个长度为 6 的数组，需要 5轮才能排好序，轮数正是数组长度 - 1。</p><p>使用代码实现：</p><blockquote><p>之前在整数类型中讲过两数如何交换值，这里借助第三个变量 temp。</p></blockquote><p>注意下标从 0 开始，如第一轮，arr[0] 与 arr[1] 比较、arr[1] 与 arr[2]比较、...、arr[4] 与 arr[5] 比较，一共 5 次，那么定义一个变量从 0 到 4即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 第一轮</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 如果逆序就交换</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 比较 5 次</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 第二轮</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 比较 4 次</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">// 第三轮</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 比较 3 次</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">// 第四轮</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 比较 2 次</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">// 第五轮</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 比较 1 次，即 arr[0] 与 arr[1]</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">// 遍历arr</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"，"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可是你发现了，每轮对应的 for 循环都几乎一模一样，只是判断条件从 j&lt; 5，j &lt; 4 ... 到 j &lt; 1，可以考虑使用外层循环将其包裹，定义一个i 从 5 到 1，让 j &lt; i，而这个 5 正是数组的长度 - 1。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改进：</p><p>可以发现第三轮时就已经排好序了，再也没有交换元素，剩下几轮都是无用功。可以定义一个boolean 变量，默认为 true。</p><p>每次循环开始赋值 false；如果交换了，说明有逆序，需要继续循环，改为true；如果没有交换，证明已经排好序了，需要退出循环。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// flag 为 false 时，退出循环</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 逆序就交换</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token comment">// 还要继续循环</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改进后，设参与排序的数组长度为 n；</p><p>分析排序算法时，传统方式是衡量元素之间的比较和交换的次数。</p><p>最坏情况：数组为逆序，每次比较都是逆序，需要交换，比较次数为：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.366ex" xmlns="http://www.w3.org/2000/svg" width="41.549ex" height="5.807ex" role="img" focusable="false" viewBox="0 -1520.9 18364.5 2566.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo" transform="translate(136,0)"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(90.2,-887.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(0,950) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1494.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2117.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3173.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3895.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4895.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(5395.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(6173.6,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(6618.3,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(7062.9,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(7507.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(8285.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(8674.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(9496.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(10497.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(10997.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(11663.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(12719.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(13541.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mo" transform="translate(14264.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(14653.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(15475.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(16475.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(16975.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(17364.5,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(17864.5,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container></span>，时间复杂度为 O(n<sup>2</sup>）；</p><p>最好情况：数组为顺序，逆序数为 0，当 i = n - 1 时，进入外循环，里循环j 从 0 到 n - 2，一共 n - 1 次比较，没有进入 if 语句内，flag =false，下一次外循环直接退出。时间复杂度为 O(n）。</p><p>平均情况：数组平均逆序数为最好与最坏的情况的一半：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="6.204ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 2742.3 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(989,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1589,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2367,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2867,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(1194.4,-345) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><rect width="2502.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>，每次交换最多减少一个逆序，至少需要O(n<sup>2</sup>）次交换。</p><p>空间复杂度为 O(1）。（temp 与 n 无关，记为 O(1））</p><p>属于稳定排序。</p><blockquote><p>输入的数据如数组arr，只取决于问题本身，与算法无关，不计入空间复杂度，只需计入算法实现所用的辅助空间，如temp。</p><p>包括输出数组的内容（查看数组是否已经排序好了），都不计入。</p></blockquote><p>稳定排序：对于相等的元素，排序前后的先后顺序不会变。</p><p>举例，怕踢校园学生的数学成绩如下：</p><table><thead><tr class="header"><th style="text-align: center;">庄库</th><th style="text-align: center;">奶奶</th><th style="text-align: center;">阿衰</th><th style="text-align: center;">大脸妹</th><th style="text-align: center;">小冲</th><th style="text-align: center;">阿帅</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">100</td><td style="text-align: center;">0</td><td style="text-align: center;">100</td><td style="text-align: center;">70</td><td style="text-align: center;">100</td></tr></tbody></table><p>100 分成绩的同学的先后顺序：奶奶、大脸妹、阿帅。</p><hr><p>使用不稳定的排序得到结果如下：</p><table><thead><tr class="header"><th style="text-align: center;">庄库</th><th style="text-align: center;">阿衰</th><th style="text-align: center;">小冲</th><th style="text-align: center;">大脸妹</th><th style="text-align: center;">奶奶</th><th style="text-align: center;">阿帅</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">70</td><td style="text-align: center;">100</td><td style="text-align: center;">100</td><td style="text-align: center;">100</td></tr></tbody></table><p>100 分成绩的同学的先后顺序：大脸妹、奶奶、阿帅。</p><hr><p>使用稳定的排序得到结果如下：</p><table><thead><tr class="header"><th style="text-align: center;">庄库</th><th style="text-align: center;">阿衰</th><th style="text-align: center;">小冲</th><th style="text-align: center;">奶奶</th><th style="text-align: center;">大脸妹</th><th style="text-align: center;">阿帅</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">0</td><td style="text-align: center;">70</td><td style="text-align: center;">100</td><td style="text-align: center;">100</td><td style="text-align: center;">100</td></tr></tbody></table><p>100 分成绩的同学的先后顺序：奶奶、大脸妹、阿帅。</p><h3 id="简单选择排序">6.3.4 简单选择排序</h3><p>Simple Selection Sort 算法思路：找出小数，放在前面；第 i 轮找出第 i小数，放在第 i 个位置。</p><blockquote><p>小数：两数比较中，更小的数，我说的并不是 1.241 这种小数。</p></blockquote><p>以 {5，2，6，252，1} 为例；小数使用灰色标记。</p><p>第一轮：5，2，6，252，1</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">比较第 1 个与第 2 个元素大小，5 &gt; 2，小数为第 2 个；比较第 2 个与第 3 个，2 &lt; 6，小数为第 2 个；比较第 2 个与第 4 个，2 &lt; 252，小数为第 2 个；比较第 2 个与第 5 个，2 &gt; 1，小数为第 5 个；结束。最小数在第 5 个位置上，应该放在第 1 个位置上。交换第 5 个与第 1 个元素位置后：1，2，6，252，5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/07/8NcB5lHOe7nAkQo.png" alt="第一轮"><figcaption aria-hidden="true">第一轮</figcaption></figure><p>第一轮，找出了最小数并放在了合适的位置，那么接着找第二小数。</p><p>第二轮：1，2，6，252，5</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">比较第 2 个与第 3 个，2 &lt; 6，小数为第 2 个；比较第 2 个与第 4 个，2 &lt; 252，小数为第 2 个；比较第 2 个与第 5 个，2 &lt; 5，小数为第 2 个；结束。第二小数在第 2 个位置上，正好合适，不需要交换：1，2，6，252，5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/07/dZRy7kTiWsoOg6v.png" alt="第二轮"><figcaption aria-hidden="true">第二轮</figcaption></figure><p>不需要比较第 1 个与第 2 个，因为第 1个是最小数，但我们找的是第二小数，下面同理。</p><p>第三轮：1，2，6，252，5</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">比较第 3 个与第 4 个，6 &lt; 252，小数为第 3 个；比较第 3 个与第 5 个，6 &gt; 5，小数为第 5 个；结束。第三小数在第 5 个位置上，应该放在第 3 个位置上。交换第 5 个与第 3 个元素位置：1，2，5，252，6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/07/LRGvr4jdciFytNC.png" alt="第三轮"><figcaption aria-hidden="true">第三轮</figcaption></figure><p>第四轮：1，2，5，252，6</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">比较第 4 个与第 5 个，252 &gt; 6，小数为第 5 个；结束。第四小数在第 5 个位置上，应该放在第 4 个位置上。交换第 5 个与第 4 个元素位置：1，2，5，6，252<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/07/R6ODwMZejAi2cyK.png" alt="第四轮"><figcaption aria-hidden="true">第四轮</figcaption></figure><p>5 个数，已经确定了 4 位，剩下一个数自动归位；轮数为数组长度 - 1。</p><p>使用代码实现：</p><p>我们可以看到每轮都是拿小数与其它数进行比较，所以需要定义变量如min，记录小数的下标；设数组长度为 n。</p><p>如第 1 轮假设最小数下标也就是 min 为 0，然后让 arr[min]与剩下的数，即与下标为 1、2、3 ... n - 1的元素比较；期间，若发现更小数，将 min 替换为此数的下标，然后拿 arr[min]继续与其它数比较。</p><p>第 2 轮设 min 为 1；</p><p>第 3 轮设 min 为 2；</p><p>...</p><p>第 n - 1 轮设 min 为 n - 2。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">252</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">// n = 5</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 第一轮：找最小数，假设最小数下标为 0</span><span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 下标为 0 的数，与下标为 1、2、3、4 的元素进行比较</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 比较过程中，发现有更小的，将 min 替换为此数下标，保证 min 一直记录的是最小数的下标</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 比较 4 次</span>        min <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 如果 min 不等于 0，证明最小数的下标不是 0，需要将最小数与下标为 0 的元素交换位置</span><span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 第二轮：找出第二小数，假设第二小数下标为 1（因为下标为 0 的元素已经被确定为最小数，无需参与比较）</span>min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 下标为 1 的数，与下标为 2、3、4 的元素进行比较</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 比较 3 次</span>        min <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 第三轮</span>min <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 比较 2 次</span>        min <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 第四轮</span>min <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 比较 1 次</span>        min <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 利用 Arrays 类的 toString 方法输出 arr 的内容</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每轮对应的 for 循环几乎一致，观察每轮的变化之处：min = 0、1、2 ... n- 2，j = 1、2、3 ... n - 1。</p><p>考虑外层 for，定义 i 从 0 到 n - 2，让 min = i，j = i + 1。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            min <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单选择排序，比较时没有交换元素，分开讨论：</p><p>比较次数是固定的，一共为 1 + 2 + ... + (n - 1) = n * (n - 1) /2。</p><p>交换次数，最好情况不用交换，次数为0；最坏情况，每次位置都不对，需要交换，次数为 n - 1。</p><p>所以平均、最好、最坏时间复杂度都为 O(n<sup>2</sup>），空间复杂度为O(1），属于不稳定排序。</p><hr><p>备注：跳跃式交换的排序一般是不稳定的。以之前的数学成绩为例：</p><p>第一轮选出庄库，不用交换；</p><p>第二轮选出阿衰，与奶奶交换；</p><p>第三轮选出小冲，与奶奶交换，这时相同成绩的同学先后顺序已被打乱；</p><p>第四、五轮选出大脸妹、奶奶，不用交换；结束。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">【庄库：0】, 【奶奶：100】, 【阿衰：0】, 【大脸妹：100】, 【小冲：70】, 【阿帅：100】 【庄库：0】, 【阿衰：0】, 【奶奶：100】, 【大脸妹：100】, 【小冲：70】, 【阿帅：100】【庄库：0】, 【阿衰：0】, 【小冲：70】, 【大脸妹：100】, 【奶奶：100】, 【阿帅：100】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>有兴趣的话，复制以下源码测下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Person</span> as1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"阿衰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> zk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"庄库"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> xc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token string">"小冲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> dlm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"大脸妹"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> as2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"阿帅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> nn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"奶奶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> persons <span class="token operator">=</span> <span class="token punctuation">{</span>zk<span class="token punctuation">,</span> nn<span class="token punctuation">,</span> as1<span class="token punctuation">,</span> dlm<span class="token punctuation">,</span> xc<span class="token punctuation">,</span> as2<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前："</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bubbleSort</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"冒泡排序后："</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> persons2 <span class="token operator">=</span> <span class="token punctuation">{</span>zk<span class="token punctuation">,</span> nn<span class="token punctuation">,</span> as1<span class="token punctuation">,</span> dlm<span class="token punctuation">,</span> xc<span class="token punctuation">,</span> as2<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">selectionSort</span><span class="token punctuation">(</span>persons2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"选择排序后："</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>persons2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token class-name">Person</span> temp<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>scope <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">.</span>scope<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    min <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token class-name">Person</span> temp<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">// flag 为 false 时，退出循环</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 逆序就交换</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>scope <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>scope<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    <span class="token comment">// 还要继续循环</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> scope<span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> scope<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>scope <span class="token operator">=</span> scope<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"{"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"："</span> <span class="token operator">+</span> scope <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="直接插入排序">6.3.5 直接插入排序</h3><p>Insertion Sort算法思路：新元素与前面已排序的元素进行比较，并将它插入到正确的位置。</p><p>以 {25, 6, 50, 26}一共四个元素为例，灰色元素的集合代表有序序列，当所有元素都为灰色时代表已经排好序了。</p><p>第一轮：25，6，50，26</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">arr[1] 与 arr[0] 比较，6 &lt; 25，逆序，需要交换，交换后：6，25，50，26<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/12/YwuvZj4hGBaWf1L.png" alt="第一轮"><figcaption aria-hidden="true">第一轮</figcaption></figure><p>那么前面两个元素已经排好序了。</p><p>第二轮：6，25，50，26</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">arr[2] 与 arr[1] 比较，50 &gt; 25，顺序，不需要交换<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/12/Rt4ajI9OgeHSkKu.png" alt="第二轮"><figcaption aria-hidden="true">第二轮</figcaption></figure><p>arr[2] 不需要跟 arr[0] 比较，因为通过第一轮排序，确定了 arr[1] &gt;arr[0]，如果 arr[2] &gt; arr[1]，必然有 arr[2] &gt;arr[0]，大小已经确定，无需比较，下面同理。（如果后面的元素大于前面，不需要交换，说明顺序是对的，无需比较，直接终止操作）</p><p>前面三个元素排好序了。</p><p>第三轮：6，25，50，26</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">arr[3] 与 arr[2] 比较，26 &lt; 50，交换后：6，25，26，50arr[2] 与 arr[1] 比较，26 &gt; 25，不需要交换<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/12/WxeUiDVPTSkac8g.png" alt="第三轮"><figcaption aria-hidden="true">第三轮</figcaption></figure><p>前面四个元素排好序了；到此为止，一共 arr.length - 1 轮。</p><p>代码描述：</p><p>只有后面元素小于前面元素才需要交换，否则就终止循环；在循环期间，需要保证后面元素即arr[j - 1] 不能越界，所以 j <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.751ex" role="img" focusable="false" viewBox="0 -636 778 774"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g></g></g></svg></mjx-container></span>1，注意 j 是整数，可以写成 j &gt; 0。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 第一轮</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 第二轮，最差情况比较 2 次。</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 第三轮</span><span class="token comment">/*最差情况，比较 3 次；即 arr[3]、arr[2] 比较，arr[2]、arr[1] 比较，arr[1]、arr[0] 比较。*/</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>j 从 1 到 arr.length - 1，考虑定义外层 for 循环，i 从 1 到 arr.length- 1；让 j = i。</p><p>结合：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最差情况：参与排序的数组为逆序，每次的新元素都比前面所有的元素小，需要移动到数组最前面，设数组长度为n，一共 n - 1 轮排序，比较次数为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="27.803ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 12288.8 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1722.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2222.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(3000.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(3445.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(3889.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(4334.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(5112.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5501.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6323.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(7323.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(7823.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8490.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(9546.4,0)"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(989,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1589,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2367,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2867,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(1194.4,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="2502.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>；时间复杂度为O(n<sup>2</sup>）。</p><p>最好情况：参与排序的数组为顺序，每次新元素都大于前面的元素，刚进入for 循环，比较结果为 false，直接退出循环；一共 n - 1 比较，交换次数为0，时间复杂度为 O(n）。</p><p>平均：前面的元素有一半比新元素大，那么就是最差情况下的比较次数除以2，时间复杂度为 O(n<sup>2</sup>)。</p><p>空间复杂度为 O(1），是稳定排序。</p><p>在简单排序中，插入排序性能最好；一般待排序元素个数较少时，使用直接插入排序最快。</p><hr><p>变体：</p><p>将新元素与前面的元素比较，获取新元素应该插入的位置，并把已有元素往后移，给新元素腾出一个空间。</p><p>以 {6，3，5，7，1} 为例：</p><p>第一轮：6，3，5，7，1</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">记录新元素的值：insertVal = arr[1] = 3insertVal 与 arr[0] 比较，3 &lt; 6，记录新元素应该插入的位置：insertIndex = 0将 arr[0] 后移腾出空间：6，6，5，7，1结束根据记录的下标插入新元素：arr[insertIndex] = arr[0] = insertVal = 3插入后：3，6，5，7，1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/13/PF6VS5yBdAcG4QH.png" alt="第一轮"><figcaption aria-hidden="true">第一轮</figcaption></figure><p>第二轮：3，6，5，7，1</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">记录 insertVal = arr[2] = 5insertVal 与 arr[1] 比较，5 &lt; 6，记录下标 1，将 arr[1] 后移：3，6，6，7，1insertVal 与 arr[0] 比较，5 &gt; 3，结束插入新元素，arr[1] = insertVal = 53，5，6，7，1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/13/pT3tsLGufDnB6PZ.png" alt="第二轮"><figcaption aria-hidden="true">第二轮</figcaption></figure><p>第三轮：3，5，6，7，1</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">记录 insertVal = arr[3] = 7insertVal 与 arr[2] 比较，7 &gt; 6，结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/13/x85fIMWcr9Ejehd.png" alt="第三轮"><figcaption aria-hidden="true">第三轮</figcaption></figure><p>第四轮：3，5，6，7，1</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">记录 insertVal = arr[4] = 1insertVal 与 arr[3] 比较，1 &lt; 7，记录下标 3，将 arr[3] 往后移：3，5，6，7，7insertVal 与 arr[2] 比较，1 &lt; 6，记录下标 2，将 arr[2] 往后移：3，5，6，6，7insertVal 与 arr[1] 比较，1 &lt; 5，记录下标 1，将 arr[1] 往后移：3，5，5，6，7insertVal 与 arr[0] 比较，1 &lt; 3，记录下标 0，将 arr[0] 往后移：3，3，5，6，7结束arr[0] = insertVal = 11，3，5，6，7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/13/Q9qYplLgG8Uo2Ah.png" alt="第四轮"><figcaption aria-hidden="true">第四轮</figcaption></figure><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 记录下标</span>    <span class="token keyword">int</span> insertIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token comment">// 新元素的值</span>    <span class="token keyword">int</span> insertVal <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 拿新元素与之前的元素比较</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> insertVal <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 记录新元素应该插入的下标</span>        insertIndex <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 将 arr[j - 1] 后移，即让 arr[j] 保存 arr[j - 1] 的值</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> insertIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>insertIndex<span class="token punctuation">]</span> <span class="token operator">=</span> insertVal<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码的第 16 行说明：insertIndex 默认为 i（新元素的下标），经过循环后insertIndex 如果还是 i，说明新元素的位置正合适，不用变动。</p><p>这种实现比第一种方式，由于交换次数的减少，稍微快一点点。</p><h2 id="简单查找">6.4 简单查找</h2><p>内容导视：</p><ul><li>顺序查找</li></ul><h3 id="顺序查找">6.4.1 顺序查找</h3><p>Sequential Search：从头到尾遍历得到所有元素，依次与给定值比较。</p><p>考试结束了，所有人的成绩都被记录在数组当中，老师想要查找一位成绩为 70的学生，该如何做？</p><p>最先想到的办法就是从头到尾（从尾到头）遍历所有元素，获取每位同学的成绩与70 比较；若某位同学的成绩等于70，OK，查找成功，返回这位同学的信息；若查找到最后一个元素都没有找到成绩为70 的同学，则查找失败，返回 null。</p><p>先定义一个学生类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment">// 学生成绩</span><span class="token keyword">double</span> scope<span class="token punctuation">;</span>    <span class="token comment">// 学生姓名</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> scope<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>scope <span class="token operator">=</span> scope<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从头到尾遍历，一个个比对。（这里就不考虑浮点数的精度问题，依然使用双等号比较）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Student</span> <span class="token function">getStudentByScope</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> students<span class="token punctuation">,</span> <span class="token keyword">double</span> scope<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> students<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 得到每位学生</span>        <span class="token class-name">Student</span> stu <span class="token operator">=</span> students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 获取学生的成绩与 scope 比较，若相等返回这位学生</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stu<span class="token punctuation">.</span>scope <span class="token operator">==</span> scope<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> stu<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 否则就返回 null</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试程序：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Student</span> as1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"阿衰"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Student</span> zk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"庄库"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Student</span> xc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小冲"</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Student</span> dlm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"大脸妹"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Student</span> as2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"阿帅"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Student</span> nn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"奶奶"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stus <span class="token operator">=</span> <span class="token punctuation">{</span>nn<span class="token punctuation">,</span> as2<span class="token punctuation">,</span> dlm<span class="token punctuation">,</span> xc<span class="token punctuation">,</span> zk<span class="token punctuation">,</span> as1<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> scope <span class="token operator">=</span> <span class="token number">70.0</span><span class="token punctuation">;</span>    <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token function">getStudentByScope</span><span class="token punctuation">(</span>stus<span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stu <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"分数为 "</span><span class="token operator">+</span>scope<span class="token operator">+</span><span class="token string">" 的同学："</span> <span class="token operator">+</span> stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"抱歉，没有分数为 "</span><span class="token operator">+</span>scope<span class="token operator">+</span><span class="token string">" 的同学"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>复杂度分析</strong></p><p>最好情况：元素就在开头，一次找到，时间复杂度为 O(1）；</p><p>最差情况：元素在末尾，O(n）；</p><p>平均：元素在中间，需要比较前 n/2 位同学的成绩，O(n）；</p><p>每次循环都要与数组长度、分数做比较，为了减少比较次数，取消与数组长度的比较，受《大话数据结构》启发，让数组<strong>空一个位置</strong>，如students[0]，让这个哨兵保存 70，i 从尾到头遍历，只要当前同学的成绩不等于70，就继续遍历，直到找到为止。（因为 i 减到 0时，哨兵的成绩与给定值相等，所以循环会终止，不会越界）</p><p>如果一直到 i = 0 才找到，证明没有成绩为 70 的同学，于是就返回null。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Student</span> <span class="token function">getStudentByScope</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> students<span class="token punctuation">,</span> <span class="token keyword">double</span> scope<span class="token punctuation">)</span> <span class="token punctuation">{</span>    students<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> students<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>scope <span class="token operator">!=</span> scope<span class="token punctuation">)</span> <span class="token punctuation">{</span>        i<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意使用这种方法，必须空出一个位置，不能存放元素，如<code>Student[] stus = {null, nn, as2, dlm, xc, zk, as1};</code></p><h2 id="x-总结回顾">6.x 总结回顾</h2><p>数组是一种引用类型，一旦创建，长度不可变，只能存放同一类型的元素；数组中的元素的内存地址是连续的，可以通过下标快速定位到某个元素，但随机增删元素时，涉及到大量元素的位移，效率较低，适合经常查询而增删少的场景。</p><p>一维数组静态初始化：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>动态初始化：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 此时 5 个元素默认值为 0</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>获取数组长度：<code>int length = arr.length;</code></p><p>遍历：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="y-实战演练">6.y 实战演练</h2><p>6.1 编写方法用于拷贝数组。</p><p>6.2 编写方法用于反转数组，例：{12，25，67，2} -----&gt;{2，67，25，12}。</p><p>6.3 编写一个类，有成员变量 int size、int[] arr；</p><ul><li><p>编写方法使用 arr添加元素，要求：能够自动扩容，而不会越界。</p></li><li><p>可以通过 size 获取已添加元素的个数。</p></li><li><p>编写方法删除元素，要求：数组长度同时也跟着缩减。示例：{42, 26, 6,4, 9, 97} 删除 6 后，得到 {42, 26, 4, 9, 97}。</p></li></ul><p>6.4 创建一个任意类型的一维数组，不手动赋值，元素的默认值为？</p><p>6.5 输出如下图形：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">    1   1 1  1 2 1 1 3 3 11 4 6 4 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.6 x 是二维数组，y 是一维数组。以下语句能够通过编译的有：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">a) x[0] = y;b) x[0][0] = y[0];c) x = y[0];d) x[0][0] = y;e) x = y;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 1.1 语法入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1. JavaSE </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.5 流程控制语句</title>
      <link href="/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.5-liu-cheng-kong-zhi-yu-ju/"/>
      <url>/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.5-liu-cheng-kong-zhi-yu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="第五章-流程控制语句">第五章 流程控制语句</h1><p>内容导视：</p><ul><li>输入与输出</li><li>分支控制语句</li><li>循环控制语句</li><li>转向控制语句</li></ul><h2 id="输入与输出">5.1 输入与输出</h2><p>内容导视：</p><ul><li>接收输入</li><li>普通输出</li><li>格式化输出</li><li>输出不同颜色的文字</li></ul><h3 id="接收输入">5.1.1 接收输入</h3><p>我们需要用到 java.util 包下的 Scanner 类，非 lang包下的类需要导入，在首行加 import：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建一个扫描仪实例，扫描指定输入流产生的值（System.in 流对应于键盘输入）</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"等待你的输入，请按下任意键："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 等待输入字符串，使用 String 类型的变量 name 接收</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你输入的字符串为："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"等待你输入整数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 等待输入整数，使用 int 类型的变量 num 接收</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你输入的整数为："</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">/*scanner.nextDouble() 是接收小数        scanner.next().charAt(0) 是接收字符        */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不想输入，请按 Ctrl + C 结束程序。</p><p>注意，让你输入整数时，你却输入了其它字符，会报java.util.InputMismatchException 输入不匹配异常。</p><p>可以使用如下方法避免：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"等待输入中："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果输入的是整数，此方法会返回 true，执行第一条分支</span><span class="token keyword">if</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你输入的是个整数："</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你输入的不是整数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>以下内容可跳过</p></blockquote><p>可以自定义 Readable 的实现类，next 方法内部会调用getCompleteTokenInBuffer 方法以空格为分隔点读取字符串缓冲区 cb中的内容，返回的内容称为 token；</p><p>当 cb 中无内容或无空格作为分隔点，会调用 read 方法往字符串缓冲区 cb填充内容，现在字符串缓冲区内容为：<code>随意内容 随意内容2 随意内容3</code></p><p>再次调用 getCompleteTokenInBuffer 方法，返回<code>随意内容</code></p><p>如果调用 read 方法时返回了 -1（规定读到末尾返回 -1），cb不再填充内容，getCompleteTokenInBuffer 会以空格为分隔点读取 cb中的内容并返回（如果没有空格，直接读取剩余的所有内容），直至无内容可以读取；</p><p>这时再调用 next 方法就会抛出 NoSuchElementException没有更多的元素异常，可以使用 scanner.hasNext方法判断是否还有内容可以读取；</p><p>如果 cb 一直填充内容，直到 char 数组容量超出 1024 后，报BufferOverflowException 缓冲区溢出异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestScanner</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 随意内容</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 随意内容2</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 随意内容3随意内容</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyReadable</span> <span class="token keyword">implements</span> <span class="token class-name">Readable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">CharBuffer</span> cb<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"随意内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"随意内容2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"随意内容3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 没有返回 -1，cb 无限填充内容</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>System.in 的实际类型为 java.io.BufferedInputStream，可以使用InputStreamReader 转换成字符流，将输入存入 char 数组。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">InputStreamReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> length <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>没想到啊，handle 是随机生成的唯一句柄😑</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 调用 read 方法等待键盘输入，将结果存入 bytes 数组中 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">FileDescriptor</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Field</span> handle <span class="token operator">=</span> <span class="token class-name">FileDescriptor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"handle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    handle<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    handle<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token function">getHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileInputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* * 获取 obj 的某个字段值，从 obj 的实际类型开始找，找不到就往上找 * 一直到 Object 还没有，抛出异常 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Object</span> <span class="token function">getFieldValue</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> fieldName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> currentClass <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>currentClass <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Field</span> field <span class="token operator">=</span> currentClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>            field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            currentClass <span class="token operator">=</span> currentClass<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Object</span> <span class="token function">getCurrentClassField</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> fieldName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchFieldException</span> <span class="token punctuation">{</span>    <span class="token class-name">Field</span> field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">cast</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> toClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>toClass<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> toClass<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassCastException</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" cannot be cast to "</span> <span class="token operator">+</span> toClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 在 BufferedInputStream 的父类 FilterInputStream 中找到 in 字段</span>        <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span><span class="token punctuation">)</span> <span class="token function">getFieldValue</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">,</span> <span class="token string">"in"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileDescriptor</span> fd <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">getFD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">getFieldValue</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token string">"handle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">NoSuchFieldException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="普通输出">5.1.2 普通输出</h3><p>输出与打印是一个意思，就是使用标准输出流 System.out在控制台上显示一些文本信息。</p><p><code>System.out.println("向控制台输出一些内容");</code></p><p>println 是 printline，即打印并换行：如果接着打印，内容会在下一行显示；如果想下次打印时，文本在同一行，去掉ln。</p><h3 id="格式化输出">5.1.3 格式化输出</h3><p>就是把数据按指定格式输出，使用 printf 配合占位符%，先把地方占着，再接收数据填充上去；</p><p>由于没有 ln，需要使用转义字符 <code>\n</code>手动换行，<code>%d</code> 是给整数占位置，<code>%s</code>是给字符串占位置。占位后，需要传入值，从左至右，顺序不可颠倒，数据类型必须要对应上。</p><p>下面是常用的占位符：</p><table><thead><tr class="header"><th style="text-align: center;">占位符</th><th style="text-align: center;">类型</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">%d</td><td style="text-align: center;">十进制整数</td></tr><tr class="even"><td style="text-align: center;">%x</td><td style="text-align: center;">十六进制整数</td></tr><tr class="odd"><td style="text-align: center;">%o</td><td style="text-align: center;">八进制整数</td></tr><tr class="even"><td style="text-align: center;">%f</td><td style="text-align: center;">浮点数</td></tr><tr class="odd"><td style="text-align: center;">%e</td><td style="text-align: center;">以科学计数法表示的浮点数</td></tr><tr class="even"><td style="text-align: center;">%s</td><td style="text-align: center;">字符串</td></tr><tr class="odd"><td style="text-align: center;">%c</td><td style="text-align: center;">字符</td></tr><tr class="even"><td style="text-align: center;">%b</td><td style="text-align: center;">布尔类型</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> ln <span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"班级人员详情："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"序号：%d，姓名：%s"</span> <span class="token operator">+</span> ln<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">"猛男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">"武丑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token number">3.14256</span><span class="token punctuation">;</span><span class="token keyword">double</span> num2 <span class="token operator">=</span> <span class="token number">100123450.0</span><span class="token punctuation">;</span><span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数字测试："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"这是小数：%f"</span> <span class="token operator">+</span> ln<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f 保留 2 位小数：%.2f"</span> <span class="token operator">+</span> ln<span class="token punctuation">,</span> num<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f 的科学计数法显示：%e"</span> <span class="token operator">+</span> ln<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d 对应的十六进制：%x"</span> <span class="token operator">+</span> ln<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>printf 方法底层调用 format 方法实现，所以使用System.out.format(）效果也一样。</p></blockquote><h3 id="输出不同颜色的文字">5.1.4 输出不同颜色的文字</h3><p>我一般使用两种颜色打印内容，已足够用了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正常内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 白色</span><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"警告内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 红色</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也许你不满足这两种颜色，可以输出以下字符串修改字体样式：</p><p><code>"\33[?m"</code></p><p>问号取值如下：（多个 ? 使用 ; 分隔）</p><pre class="line-numbers language-none"><code class="language-none">0：原本样式1：粗体3：斜体4：下划线7：背景颜色与字体颜色互换9：中划线21：粗下划线51、52：方框30 ~ 37：字体颜色分别为黑色、红色、绿色、黄色、蓝色、紫色、蓝绿色、灰色40 ~ 47：背景颜色分别为黑色、红色、绿色、黄色、蓝色、紫色、蓝绿色、灰色90 ~ 97：字体颜色，同 30 ~ 37，但更深<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大致分为三类：</p><p>fontColor：字体颜色，在 30 ~ 37 范围内，默认白色</p><p>background：背景颜色，在 40 ~ 47 范围内，默认黑色</p><p>fontStyle：字体样式：1、3、4、9</p><p>假如我现在想要输出带中划线的红色粗斜体，选用 9、31、1、3 这 4种：（顺序不分先后）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\33[9;31;1;3m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"指定样式的字体"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"指定样式的字体2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>想要恢复为原本样式，输出如下字符串：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\33[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原本样式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以配合占位符使用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 格式化输出字符串</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> fontColor<span class="token punctuation">,</span> <span class="token keyword">int</span> background<span class="token punctuation">,</span> <span class="token keyword">int</span> fontStyle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 前半部分使用占位符，指定输出字体的样式，后半部分 \33[0m 还原样式，\n 换行</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\33[%d;%d;%dm%s\33[0m\n"</span><span class="token punctuation">,</span> fontColor<span class="token punctuation">,</span> background<span class="token punctuation">,</span> fontStyle<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 返回格式化的字符串</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getColorString</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> fontColor<span class="token punctuation">,</span> <span class="token keyword">int</span> background<span class="token punctuation">,</span> <span class="token keyword">int</span> fontStyle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"\33[%d;%d;%dm%s\33[0m"</span><span class="token punctuation">,</span> fontColor<span class="token punctuation">,</span> background<span class="token punctuation">,</span> fontStyle<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 输出的字符串为蓝色</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printlnBlueFont</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getColorString</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 输出的字符串为紫色</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printlnPurpleFont</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printlnBlueFont</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printlnPurpleFont</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出蓝色背景、带下划线的红色字体</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分支控制语句">5.2 分支控制语句</h2><p>分支控制语句也称选择语句。</p><p>内容导视：</p><ul><li>if else</li><li>switch case</li></ul><p>程序一般自上而下，逐行执行，但是有时也需要特殊操作；比如根据条件选择性地执行某段代码、循环执行某段代码...</p><h3 id="if-else">5.2.1 if else</h3><p>if else语句最多只会执行一条分支，类似走路遇见岔路，只能选一条通过。先从最简单的if 讲起。</p><p><strong>单条分支</strong></p><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>布尔类型的值<span class="token punctuation">)</span> <span class="token punctuation">{</span>    java 语句<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当布尔类型的值为 true 时，才会执行 {} 中的 java 语句，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> age1 <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token keyword">int</span> age2 <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age1 <span class="token operator">&gt;</span> age2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我比你大"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此句话会输出</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 {} 中只有一条语句时，可以省略{}；但是最好不要那么做，以免别人误解。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>age1 <span class="token operator">&gt;</span> age2<span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我比你大"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>if else</strong></p><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>布尔类型的值<span class="token punctuation">)</span> <span class="token punctuation">{</span>    分支一<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    分支二<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>布尔类型的值为 true，执行第一条分支；为 false，执行第二条分支。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> sex <span class="token operator">=</span> <span class="token char">'1'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sex <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此句会输出</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>多条分支</strong></p><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    分支一<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>值<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    分支二<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>值<span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    分支三<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上至下，只执行第一个值为 true 的分支；else if 可以无限追加。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> scope <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的成绩不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的成绩一般"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的成绩良好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的成绩优秀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的分支都不会执行，因为从上至下，没有布尔表达式为 true 的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"未成年人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">35</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"青年人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此句将会输出</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中年人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行第二条分支。</p><p><strong>if else if ... else</strong></p><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    分支一<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>值<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    分支二<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>值<span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    分支三<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    最后的分支<span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当所有分支括号里的值都为 false 时，执行最后的分支。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">888</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"未成年人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">35</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"青年人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此句将会输出</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中年人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老年人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"妖怪吧！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 由于上面分支都不满足，执行此条分支</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>嵌套分支</strong></p><p>if 语句中有 if 语句。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> scope <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> scope <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 语句块 1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的成绩不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的成绩一般"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的成绩良好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的成绩优秀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// 语句块 2</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是人能考出的成绩？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*只有分数在 [0 ~ 100] 之间才会执行语句块 1，否则执行语句块 2*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>嵌套最好不要超过三层，否则人容易迷惑，可读性太差。（可以使用 ifelse）</p><p>if else 不是新的关键字，而是嵌套的简单写法，因为当 if 或 else中只包含一条 java 语句时，大括号可以省略。（建议不要省略）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"差"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> scope <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"差"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"良"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"优"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把被省略的大括号加上：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> scope <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"差"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"良"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"优"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="switch-case">5.2.2 switch case</h3><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span> <span class="token punctuation">(</span>值<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> 字面量<span class="token number">1</span><span class="token operator">:</span>语句块<span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> 字面量<span class="token number">2</span><span class="token operator">:</span>    语句块<span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> 字面量<span class="token number">3</span><span class="token operator">:</span>    语句块<span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">default</span><span class="token operator">:</span>    语句块<span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上至下，执行字面量等于 switch 括号中的值的 case 分支语句，遇见break 跳转至 switch 主体的末尾，然后结束 switch 语句。</p><p>default 如同 else一样，可以不写；当没有一个匹配上，就执行此分支的语句。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> key <span class="token operator">=</span> <span class="token char">'s'</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token char">'w'</span> <span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token char">'s'</span> <span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此条将会被输出</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> <span class="token char">'a'</span> <span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"左"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token char">'d'</span> <span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"右"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"其它"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：</p><ol type="1"><li>case 后的字面量对应的数据类型必须与 switch括号中的值的类型一致，或者可以自动转成此类型。</li><li>case 后的字面量值不能重复。</li><li>switch 括号中的值的数据类型只能是int、String、Enum。（能够自动转换为这三种类型的也算）</li><li>case 后的值不能是变量，只能是字面量与常量。</li></ol><blockquote><p>JDK7 之前只能是 int。</p></blockquote><p><strong>case 穿透现象</strong></p><p>当执行某条 case 分支的语句时，如果没有 break语句结尾，直接顺序执行之下的所有 case、default 分支的语句；只有执行了break 语句，才会退出 switch 语句。</p><p>看清楚了，我把每条分支的 break 都略去了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> weather <span class="token operator">=</span> <span class="token string">"sunny"</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>weather<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"cloudy"</span> <span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"阴天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"sunny"</span> <span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"晴天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"rain"</span> <span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"雨天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"其它天气"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当输出 “晴天” 时，由于没有遇到 break 语句，继续执行之下语句，输出“雨天”、“其它天气”。</p><p>打个比方吧：</p><p>在一个神奇的小区，房子一排排却单向连通，一旦进入其中一家，便可以由内部通道去往下一家。有的住户觉得很不安全，偷偷做了防范措施。</p><p>一个小偷捡到了一把锁，尝试着用它开启一户户门，从巷头走到巷尾。诶，有一扇门开了，进去拿了东西，但是主人安了警报铃，小偷马上GG了。另一个小偷也来了，也打开扇门，恰好主人家忽视了防护，小偷偷完这家后，直接顺着通道前往下一家，居然都没防范措施，直接全部偷完。<img src="https://s2.loli.net/2022/03/30/HvCiWIS3DGKPrak.png" alt="小偷溜滑梯"> <strong>case 合并</strong></p><p>如果多个 case 分支执行的是相同的语句，可以将其合并：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> sex <span class="token operator">=</span> <span class="token char">'男'</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token char">'0'</span> <span class="token operator">:</span> <span class="token keyword">case</span> <span class="token char">'女'</span> <span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我有四个蛋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token char">'1'</span> <span class="token operator">:</span> <span class="token keyword">case</span> <span class="token char">'男'</span> <span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"咖喱？什么咖喱？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"快还给我！这是我的！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"只想守护你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 sex 等于 '0' 或 '女' 时，执行第一条分支；sex 等于 '1' 或 '男'执行第二条分支；都不满足执行默认分支。</p><p>这不是新语法，只是 case '0' 分支中没有语句，包括 break 语句；当 sex ='0' 时，会出现 case 穿透现象，接着执行下个 case 分支中的语句，也就是case '女'，直到遇见 break 退出 switch 语句。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span> <span class="token punctuation">(</span>sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token char">'0'</span> <span class="token operator">:</span>     <span class="token keyword">case</span> <span class="token char">'女'</span> <span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我有四个蛋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token char">'1'</span> <span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token char">'男'</span> <span class="token operator">:</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>default</strong></p><p>同理，default 分支不一定非要在最后一条，也可以与第一条的 case语句合并，都不匹配时，case 穿透，执行第一条分支。</p><p>如下例，都不满足，应执行 default 中的语句，由于 default 中没有 break语句，接着执行 case 0 分支，输出 <code>0</code>，遇到 break，结束 switch语句。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">default</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="循环控制语句">5.3 循环控制语句</h2><p>内容导视：</p><ul><li>for</li><li>while</li></ul><p>有些时候，我们需要重复执行某些事情...</p><h3 id="for">5.3.1 for</h3><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>初始化表达式<span class="token punctuation">;</span> 布尔值（循环条件）<span class="token punctuation">;</span> 更新表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    循环体中的语句<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行顺序：</p><p>先执行初始化表达式 initialization，如果循环条件 boolean expression 为true，执行循环体中的语句；</p><p>执行完后，执行更新表达式 step，如果循环条件为true，执行循环体中的语句...</p><p>直到循环条件为 false，退出 for 语句。</p><figure><img src="https://s2.loli.net/2022/04/24/NznJZOBY8G7T2kK.png" alt="for 循环"><figcaption aria-hidden="true">for 循环</figcaption></figure><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"两指夫人"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>分析：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">i --&gt; 0；此时 i 小于 2，为 true，执行循环体中的语句，输出：两指夫人0执行更新表达式 i++i --&gt; 1；此时 i 小于 2，为 true，执行循环体中的语句，输出：两指夫人1执行更新表达式 i++i --&gt; 2；此时 i 小于 2 为 false，退出循环<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小技巧：</p><p>1）由于定义在 <code>for ()</code> 中的变量的作用域仅在 for循环体内：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">Hello.java<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span> 错误<span class="token punctuation">:</span> 找不到符号<span class="token keyword">System</span>.<span class="token keyword">out</span>.println<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为了能够在其它地方能够访问到此变量，可以将其提取出来。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2）初始化语句与更新表达式可以有多个，使用 <code>,</code>隔开，但是要求变量的类型相同。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i："</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"，j："</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>分析：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">i --&gt; 1，j --&gt; 2i &lt; 4 &amp;&amp; j &lt; 6 为 true，执行循环体，输出：i：1，j：2执行更新表达式：i++、j += 2i --&gt; 2，j --&gt; 4i &lt; 4 &amp;&amp; j &lt; 6 为 true，执行循环体，输出：i：2，j：4执行更新表达式：i++、j += 2i --&gt; 3，j --&gt; 6i &lt; 4 &amp;&amp; j &lt; 6 为 false，结束 for 循环<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="while">5.3.2 while</h3><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>布尔值（循环条件）<span class="token punctuation">)</span> <span class="token punctuation">{</span>    循环体中的语句<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果布尔值为 true，执行循环体；执行结束后再判断布尔值...直到布尔值为false，退出循环。</p><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出 0、1、2；因为当 i = 3 时，i &lt; 3 为 false，退出循环。</p><p><strong>do while</strong></p><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">do</span> <span class="token punctuation">{</span>    循环体中的语句<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>布尔值<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>先执行循环体，执行结束后判断布尔值，如果为true，执行循环体，再判断布尔值...直到布尔值为 false，退出循环。</p><p>与 while 不同的是，do while 是先执行再判断，所以一定会执行一次。</p><figure><img src="https://s2.loli.net/2022/04/24/FHM9JISPdl41jrQ.png" alt="do while"><figcaption aria-hidden="true">do while</figcaption></figure><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出 0、1、2</p><p><strong>嵌套循环</strong></p><p>以 for循环为例。之前先讲过嵌套，你就理解为套娃就行了，看到阿衰他妈给阿衰做了一笼包子，结果大脸妹打开包子一看，包子里有多个小包子，继续打开，更小的包子...无穷尽也，很影响食欲。嵌套最好不要超过三层，怕人发昏。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">当 i = 0 时，执行循环体输出 0、1、2，当 j = 3 时，不满足条件，结束内层 for 循环当 i = 1 时，执行循环体输出 0、1、2...当 i = 2 时，执行循环体输出 0、1、2...当 i = 3 时，不满足循环条件，退出外层 for 循环<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>外层的 for 一共循环执行 3 次；每次外层循环时，内层的 for 会循环执行 3次；也就是内层的循环体中的语句一共执行 3 * 3 = 9 次。</p><h2 id="转向控制语句">5.4 转向控制语句</h2><p>内容导视：</p><ul><li>break</li><li>continue</li><li>return</li></ul><p>终止或跳过循环...</p><h3 id="break">5.4.1 break</h3><p>break 代表终止语句块的执行（不再执行），一般用于 switchcase、for、while 中。</p><p>举例：当 i = 2 时，终止循环。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"终止了循环"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出 0、1；当 i 等于 2 时，执行 if 语句，输出 “终止了循环”，接着执行break 终止 for 循环。</p><p>当 break 用在嵌套循环中，默认终止最近的循环体。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">当 i = 0 时，输出 0当 i = 1 时，输出 0当 i = 2 时，输出 0因为当 j = 1 时，满足了 if 条件，执行了 break，终止了里层的 for 循环。（只是代表里层的循环执行结束，但外层循环还在继续执行）当 i = 3 时，不满足条件，退出外层循环。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以自定义标签，终止标签对应的循环。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">key1<span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    key2<span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token keyword">break</span> key1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出 0；当 j = 1 时，执行了 break，终止 key1 对应的 for 语句。</p><h3 id="continue">5.4.2 continue</h3><p>跳过本次循环。（提前结束本次循环，开始下一次循环）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 i = 3 时，执行了continue，跳过本次循环，没有执行剩下的代码，直接进入下一次循环。所以输出1、2、4、5、6。</p><p>需要注意的是，此时我把 “i++” 放在了前面；因为 i++ 如果在 continue后，当 i = 3 时，跳过本次循环，没有执行 i++，下次循环 i 还是3，一直跳过，无限循环，永远执行不到 i++。</p><h3 id="return">5.4.3 return</h3><p>当方法没有返回值（void）时，使用 <code>return;</code>代表结束当前方法的执行。（结束当前方法意味着其它语句不再执行；在 main方法中使用代表结束程序）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// for</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">// 同一个域中，此语句必须放到结尾处，因为之后的语句执行不到，没有意义</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment">// 其它语句</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出 0、1、2、3、4 后，当 i = 4 时，执行 if 语句中的 return，结束main 方法的执行。</p><p>如果把 return 换成 break，只结束了 for 循环，接着还会输出“代码块”。</p><p>return以后讲方法返回值时还会用到，现在只需了解它能够终止方法执行即可。</p><h2 id="x-总结回顾">5.x 总结回顾</h2><p>switch case 语句注意 break 不可省略，以免出现 case 穿透现象。</p><p>for 与 while 循环注意控制循环结束条件，防止循环条件一直为true，避免无限循环。</p><h2 id="y-掀起波澜">5.y 掀起波澜</h2><p>5.1 打印 [n，m] 之间的所有是 x 倍数的整数，统计个数及总和。</p><p>5.2 输出 1 + (n - 1）= n、2 + (n - 2）= n、...、50 + (n - 50）=n。</p><p>5.3 打印九九乘法口诀表。</p><p>5.4 打印一个 n 层的空心金字塔。例：当 n = 5 时，输出如下：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">    *   * *  *   * *     **********<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.5 找出 3 位数的水仙花数，水仙花数是各位数的三次方之和等于此数，比如153 = 1<sup>3</sup> + 5<sup>3</sup> + 3<sup>3</sup> = 153。</p><p>5.6 计算 1 - 1/2 + 1/3 - 1/4 + ... - 1/100。</p><p>5.7 计算 1 + (1 + 2）+ (1 + 2 + 3）+ ... + (1 + 2 + 3 + 4 + ... +100）。</p>]]></content>
      
      
      <categories>
          
          <category> 1.1 语法入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1. JavaSE </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.4 运算符</title>
      <link href="/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.4-yun-suan-fu/"/>
      <url>/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.4-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<h1 id="第四章-运算符">第四章 运算符</h1><p>内容导视：</p><ul><li>算术运算符</li><li>赋值运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>条件运算符</li><li>运算符优先级</li></ul><h2 id="算术运算符">4.1 算术运算符</h2><p>内容导视：</p><ul><li>四则运算：+、-、*、/</li><li>求余数：%</li><li>++、--</li></ul><h3 id="四则运算加减乘除">4.1.1 四则运算：加减乘除</h3><p>这个不用过多介绍，与初等数学一致，直接使用即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> add <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token keyword">int</span> sub <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token keyword">int</span> mult <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token keyword">int</span> divide <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7、3、10、2；注意 int 类型只能保存整数，会被削去小数部分。</p><p>此外 “+” 除了能够计算加法，还能拼接字符串，之前已经说过：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"字符串"</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>“102字符串24”；从左至右，遇到字符串就拼接，拼接后还是字符串；记得乘法优先。</p><h3 id="求余数">4.1.2 求余数：%</h3><p>求余数也称取模。得到的余数一定小于除数。</p><p>如 10 % 3 = 1、11 % 3 = 2、12 % 3 = 0；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">11</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>11 除以 4，商为 2，余数为 3；所以 i = 3。</p><p><strong>% 的本质</strong></p><p>a % b = a - a / b * b</p><p>知道了上面的式子，自己试着算一下吧：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>计算结果如下：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">-10 % 3 = -10 - (-10) / 3 * 3        = -10 - (-3) * 3        = -1        10 % -3 = 10 - 10 / (-3) * (-3)        = 10 - (-3) * (-3)        = 1        -10 % -3 = -10 - (-10) / (-3) * (-3)         = -10 - 3 * (-3)         = -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="section">4.1.3 ++、--</h3><p>++ 是让变量保存的值，自加一。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// i = 11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// i = 11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>++ 放在变量前后的区别</strong></p><p>++ 放在变量前：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// j = 11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>等价于</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 先自加一，后赋值</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// j = 11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>++ 放在变量后：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// j = 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">// 先返回值，后自加一</span>i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// j = 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结论：</p><p>当 ++ 出现在<mark>变量前，先自加一，再返回值</mark>；所以 i自加一等于 11，再赋值给 j 为 11；</p><p>当 ++ 出现在<mark>变量后，会先返回值，再自加一</mark>；把 i 赋值给 j即 10，再 i 自加 1。</p><p>反正 i 一定是 11；使用 ++ 或 --时，<mark>不会改变运算结果类型</mark>。</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>b <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>会报错从 int 转成 byte 可能会有损失</p><p>换成如下就可以了，但是要注意别超了 byte的取值范围，否则强转后会有精度损失。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>b<span class="token operator">++</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>-- 同理：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">// i = 3</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">// j = 3、i = 2</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token operator">--</span>j<span class="token punctuation">;</span><span class="token comment">// j = 2、z = 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>i = 2、j = 2、z = 2。</p><blockquote><p>建议++、--，最好单独一行，很直观地就能判断是加一或减一，放在表达式中分不清谁前谁后容易让人困扰。</p></blockquote><h2 id="赋值运算符">4.2 赋值运算符</h2><p>内容导视：</p><ul><li>基本赋值运算符：=</li><li>扩展赋值运算符：+=、-=、*=、/=、%=</li></ul><h3 id="基本赋值运算符">4.2.1 基本赋值运算符：=</h3><p>之前用过很多次了，通过 “=” 把字面量赋给变量、完成值传递。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// 10 被赋给了 int 类型的 a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token comment">// j 保存的 10 被赋给了 int 类型的 i</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="扩展赋值运算符-">4.2.2 扩展赋值运算符：+=、-=、*=、/=、%=</h3><p>只要学会了 +=，其它触类旁通。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>x <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// x = 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>相当于将自保存的值加 2：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// x = 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用扩展运算符，不会改变运算结果类型，与 ++ 一样，++ 就等同于 +=1。</p><p>看看下面的 i 的值为多少？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> i <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>i <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>i = (byte)(i * 2) = 16</code>。</p><h2 id="关系运算符">4.3 关系运算符</h2><p>就是判断对错。判断会得到结果；为真： true，假：false。</p><p>使用的符号都是英文半角符号，字符之间没有空格。</p><p><code>！=</code> <code>！＝</code> <code>! =</code> 都错。</p><h3 id="section-1">4.3.1 &gt;、&lt;、&lt;=、&gt;=</h3><p>大于号、小于号...如同初等数学使用即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> result1 <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> result2 <span class="token operator">=</span> <span class="token number">79</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="section-2">4.3.2 ==</h3><p>双等号 “==” 是判断保存的值是否相等。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token string">"你好"</span> <span class="token operator">==</span> <span class="token string">"你好"</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> b2 <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span> <span class="token operator">==</span> <span class="token string">"你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意别把 “==” 与 “=” 混用了。我知道在日常生活中，使用 “=”判断是否相等，但是在程序里 “=” 是用来赋值的，“==”才是用来判断是否相等。</p><p>我举个例子，if 旁边的括号中的值只允许为 boolean 类型，当值为 true时，才会执行 if {} 中的语句。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>假如你的原意是想 i 等于 5 时，就输出“Hello”，但是由于你使用的是单等号，代表赋值，此时的 i =5，所以原意成了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 Java 中，正好 boolean类型不能参与转换，所以编译时直接报错，你可以及时发现，但不是次次都是这么好运气。</p><p>如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Hello</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原意是当 b1 等于 true 时，输出“Hello”，但是你的意图被扭曲了，这只是你不小心丢了一个等号而已。</p><blockquote><p>在 JDK源码中，经常看到赋值、判断混合在一起，令人头晕，完全可以单独提取出来，可读性好些。</p></blockquote><p>你的原意可能如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b1 <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说了这么多，只为说一句：判断两个值是否相等，请用 “==”。但是我私底下或写注释时，还是习惯用单等号代表两个值相等。</p><h3 id="section-3">4.3.3 !=</h3><p>判断两个值是否不相等。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span> <span class="token operator">!=</span> <span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5 的确不等于 4，判断为真，所以为 true。</p><p>之所以把 “==”、“!=” 单独拿出来，是因为它们与 “&lt;”、“&gt;=”之类的符号不大一样，“!=” 与 “==”不仅可以判断数值是否相等，还可以比较引用类型是否相等。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hel"</span> <span class="token operator">!=</span> <span class="token string">"hell"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"u"</span> <span class="token operator">==</span> <span class="token string">"u"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"u"</span> <span class="token operator">&lt;</span> <span class="token string">"u"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 报错，&lt; 的两边只能为数值，如整数、小数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>这里不得不提：'a' &lt; 'b' 为什么可以编译通过，因为这是 char类型，可以转成 int 类型，比较大小。</p></blockquote><h2 id="逻辑运算符">4.4 逻辑运算符</h2><p>就是与或非逻辑，<mark>逻辑运算符的两边要求都是布尔类型，且最终的结果也是布尔类型</mark>，下面是我高中时记的口诀：</p><p>and 与（&amp;）：一假为假</p><p>or 或（|）：一真为真</p><p>not 非（!）：真即假，假即真</p><p>xor 异或（^）：不同为真，相同为假</p><p>上面的符号还是位运算符，由于不常用，略去用法。</p><blockquote><p>我经常使用 &gt;&gt;（右移运算符）代替除法，效率较高；因为现在删去了二进制内容，可以粗略理解为向右移1 位是除以 2，移 2 位是除以 4，移 3 位是除以 8，依次类推。如 6 &gt;&gt;1 = 3、5 &gt;&gt; 1 = 2，分别对应 6 / 2 = 3、5 / 2 = 2。</p></blockquote><h3 id="section-4">4.4.1 &amp;</h3><p>a &amp; b：当 a 和 b 同时为 true 时，结果才为真，否则为 false。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> b2 <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1 <span class="token operator">&amp;</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>翻译成人话：5 大于 3 且 8 小于 9，命题为真。</p><p>需要注意的是，不同的运算符优先级不同，优先级高的先运算。之前通过乘法与加法的混合运算中就能看出来乘法优先。</p><p>思考如下输出结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> b2 <span class="token operator">=</span> <span class="token number">79</span> <span class="token operator">&gt;</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> b3 <span class="token operator">=</span> <span class="token string">"我"</span> <span class="token operator">!=</span> <span class="token string">"我"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1 <span class="token operator">&amp;</span> b2 <span class="token operator">==</span> b3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>b1、b2、b3 都为 false；b1 &amp; b2 为 false，false 等于b3，所以结果为 true？</p><p>但你没有想到 “==” 的优先级高于 “&amp;”，所以是 b2 == b3 先运算为true，b1 &amp; true，结果为 false。</p><p>上面的一句相当于：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1 <span class="token operator">&amp;</span> <span class="token punctuation">(</span>b2 <span class="token operator">==</span> b3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那该怎么办？扭曲了原意！可以加小括号提升优先级：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b1 <span class="token operator">&amp;</span> b2<span class="token punctuation">)</span> <span class="token operator">==</span> b3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>短路与：&amp;&amp;</strong></p><p>short circuiting</p><p>&amp;&amp;相比于逻辑与，效率更高：如果整个表达式结果已经确定，就停止并返回结果，剩下式子不再执行与判断。</p><p>什么意思？</p><p>一假为假，当左边的值为 false时，还需要去执行去判断右边吗？完全可以推出结果为 false。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">++</span>x <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">++</span>x <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>x &lt; 2 为 false，那么整个式子已经可以确定为false，不需要再判断。通过上面的例子可以看出，短路与并没有去执行右半部分的++x，所以 x 的结果不变，还是为3。利用短路可以省去不必要的计算，从而提高效率。</p><h3 id="section-5">4.4.2 |</h3><p>a | b：当 a 和 b 同时为 false 时，结果才为 false，否则为 true。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">9</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命题：8 小于 1 或者 9 大于 3，命题为真。</p><p>与 &amp; 一样的是，| 也有对应的短路或。</p><p><strong>||</strong></p><p>如果整个表达式的结果已经确定，后面不再执行判断。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">&lt;</span> <span class="token number">9</span> <span class="token operator">|</span> <span class="token operator">++</span>x <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">&lt;</span> <span class="token number">9</span> <span class="token operator">||</span> <span class="token operator">++</span>x <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一般我们使用的是短路与和短路或，我几乎没有看见单个的，除非你想把所有的式子都执行一遍。</p><h3 id="section-6">4.4.3 !</h3><p>!a：对 a 取反；a 为 true，结果为 false；a 为 false，结果为 true。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3 &lt; 5 为 true，再取反为 false。</p><h3 id="section-7">4.4.4 ^</h3><p>a ^ b：当 a 不等于 b，结果为 true，否则为 false。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">&lt;</span> <span class="token number">9</span> <span class="token operator">^</span> <span class="token number">9</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8 &lt; 9 为 true，9 &gt; 3 为 true，它们相等，所以为 false。</p><h2 id="条件运算符">4.5 条件运算符</h2><p>算是条件语句的简化版吧，可以根据表达式的真假返回不同的值。</p><p>条件运算符又称三目运算符，因为有三个运算对象。</p><p>语法：布尔值 ? 值1 : 值2</p><p>当布尔值为 true，返回值 1；为 false，返回值 2。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> isBoy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">char</span> zhangSan <span class="token operator">=</span> isBoy <span class="token operator">?</span> <span class="token char">'男'</span> <span class="token operator">:</span> <span class="token char">'女'</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zhangSan<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 男</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> scope <span class="token operator">=</span> <span class="token number">99.5</span><span class="token punctuation">;</span><span class="token class-name">String</span> evaluate <span class="token operator">=</span> scope <span class="token operator">&lt;</span> <span class="token number">60</span> <span class="token operator">?</span> <span class="token string">"不及格"</span> <span class="token operator">:</span> <span class="token string">"及格"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>evaluate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 及格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>很明显 scope 小于 60 为 false，所以返回值2：“及格”。</p><p>三目运算符与之后讲的 if-else 类似，但是它是有返回结果的，而 if-else没有。</p><h2 id="运算符优先级">4.6 运算符优先级</h2><p>优先级高的先运算。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">优先级从高到低. ()++ -- ~ !单目运算符* / %算术运算符+ -&lt;&lt; &gt;&gt; &gt;&gt;&gt;位移运算符&lt; &gt; &lt;= &gt;= instanceof比较运算符== !=逻辑运算符&amp;^|&amp;&amp;||? :三目运算符= *= /= %=赋值运算符+= -= &lt;&lt;= &gt;&gt;=&gt;&gt;&gt;= &amp;= ^= |=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如：<code>int a = 1 + 2 * 1;</code>先算乘法，接着加法，最后赋值。</p><h2 id="x-总结回顾">4.x 总结回顾</h2><p>使用 ++、--、+=等扩展赋值运算符时不会改变运算结果类型。（使用了强制转换运算符，可能会造成精度损失）</p><p>判断两个值是否相等请用 “==”。</p><p>逻辑运算符中一般使用短路与、短路或。</p><p>一定要注意不同运算符之间的优先级，最好亲自测一下，看是否与预期一致，或者直接加小括号提升优先级。</p><h2 id="y-实战演练">4.y 实战演练</h2><p>4.1 <code>double i = 5 / 2;</code> 中的 i 的值为？</p><p>4.2 输出什么？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">++</span>x <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">34</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token operator">--</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>6）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>7）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>8）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b1 <span class="token operator">=</span> b<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token operator">--</span>b<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>10）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> x <span class="token operator">&lt;</span> y <span class="token operator">?</span> x <span class="token operator">+</span> y <span class="token operator">:</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a<span class="token operator">++</span> <span class="token operator">:</span> b<span class="token operator">--</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.3 利用三目表达式求出三个数之间的最大数。</p><p>4.4 利用所学知识求出 33 天是多少个星期零几天？</p><p>4.5 <code>3 / 9 * (242.2 - 100)</code> 的结果是什么？</p><p>4.6 下面代码输出什么？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> x <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> y <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">byte</span> num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">++</span>num <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">342</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">++</span>i <span class="token operator">+</span> i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">342</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> i<span class="token operator">++</span> <span class="token operator">+</span> <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 1.1 语法入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1. JavaSE </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.3 变量</title>
      <link href="/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.3-bian-liang/"/>
      <url>/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.3-bian-liang/</url>
      
        <content type="html"><![CDATA[<h1 id="第三章-变量">第三章 变量</h1><p>内容导视：</p><ul><li>变量</li><li>数据类型</li><li>类型转换</li></ul><h2 id="变量">3.1 变量</h2><p>内容导视：</p><ul><li>字面量</li><li>变量</li></ul><h3 id="字面量">3.1.1 字面量</h3><p>值（数据）被称为字面量（Literal），一眼就能看到值的量。如 3是整数型字面量，'a' 是字符型字面量；有些人把它叫做常量，无可非议。</p><p>字面量类型如下：</p><p>1）整数类型：如 1、2、3...这些整数。</p><p>2）浮点类型：如 22.4、3.2...这些小数。</p><p>3）布尔类型：只有两个值，true、false 分别代表真和假。</p><p>4）字符类型：'a'、'b'、'c'...用英文单引号括起来的<mark>单个字符</mark>。</p><p>5）字符串类型："abc"、"b"、"北京欢迎你"...用英文双引号括起来的是字符串。</p><h3 id="变量-1">3.1.2 变量</h3><p>使用如下方式，也不是不可以，但是你不怕一个个复制粘贴不小心漏了吗？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">327501510</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">327501510</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我们的花园真漂亮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我们的花园真漂亮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>为了使字面量得到重复利用，下面使用变量保存这些值。</p><p>内容如下：</p><ul><li>变量的声明</li><li>变量含义</li><li>变量按声明位置分类</li></ul><p><strong>变量声明</strong></p><p>每个变量都需要先声明（定义）自己将要保存的数据的类型，后再给变量赋值。（放心，数据类型之后有讲，现在先看看，别管int、String 是什么）</p><p>例：想要保存整数类型的值，需要先声明整数类型的变量，假如取名为i：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再给变量赋一个整数值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用等号（赋值运算符）把等号右边的字面量赋给左边的变量</span>i <span class="token operator">=</span> <span class="token number">327501510</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以访问这个变量保存的值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此时 i 为 327501510</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以重新给 i 变量赋值，把之前保存的值覆盖。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">i <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">// 把 6 赋给 i</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此时 i 为 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>两者结合，在声明的同时赋值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">327501510</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么就可以把开头的例子转变了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">327501510</span><span class="token punctuation">;</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"我们的花园真漂亮"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>num1、num2、str是变量名，作为标识符，我们有权力命名，只要符合命名规则就行。</p><p>很明显通过以上例子看到变量有三个要素：</p><ul><li>变量的数据类型，如 int</li><li>变量名，如 num1</li><li>变量值，如 327501510</li></ul><p><code>数据类型 变量名 = 字面量;</code></p><p>如果不考虑类型转换，那么变量的数据类型必须与字面量类型一致。</p><p>比如整数型的 int类型不能保存浮点型的字面量，<code>int i = 3.23;</code>是错误的写法。由于现在还没有讲数据类型，听着迷惑很正常。</p><p><strong>变量含义</strong></p><p>变量是内存中存储数据的最基本的单元，任何变量都有数据类型，不同的数据类型在内存中分配的空间大小不同。</p><p>如 <code>int a = 3;</code> 在内存里分配 4 个字节空间，空间存放着 3，a就代表这个空间。</p><p>变量相当于内存中的一小块数据存储空间，通过变量名可以访问到这个区域。可以把a 理解成你家的门牌号，通过门牌号定位你家。</p><figure><img src="https://s2.loli.net/2022/04/24/nPrVmXNaKjF7Zsy.png" alt="a 变量"><figcaption aria-hidden="true">a 变量</figcaption></figure><p>int 类型会被分配 4 个字节大小的空间，1 个字节（byte）= 8个比特位（bit）</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">1 TB = 1024 GB1 GB = 1024 MB1 MB = 1024 KB1 KB = 1024 Byte1 Byte = 8 Bit1 Bit = 0 或 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用 0 和 1的不同的组合代表各式各样的数据，等学了进制之间的转换、原码补码就明白了，但你也可以跳过，节省时间。</p><p><strong>变量按声明位置分类</strong></p><p>分为成员变量与局部变量。之间说过类名 Hello 后跟的 {} 是类体，方法名main 后跟的 {} 是方法体。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token comment">// 方法体外、类体中声明的变量是成员变量</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 方法体中声明的变量是局部变量</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>值得注意的地方</strong></p><p>1）局部变量必须赋值（显式初始化）后才能访问，错误示范：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你得先给 i 赋值，比如 <code>int i = 10;</code> 后再访问。</p><p>2）同一个域中，局部变量不能重复声明。</p><blockquote><p>域：{} 包起来的范围。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 错误示范</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你得换个名字，以免冲突。比如把后面改成 <code>int j = 6;</code></p><p>3）变量需要先声明，后访问，错误示范：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你应该把它俩的顺序换过来，毕竟 java 语句是自上而下逐行执行的。</p><h2 id="数据类型">3.2 数据类型</h2><p>内容导视：</p><ul><li>整数类型</li><li>浮点类型</li><li>字符类型</li><li>布尔类型</li><li>基本数据类型转换</li><li>基本数据类型与 String 类型的转换</li></ul><p><code>数据类型 变量名 = 字面量;</code>...变量的数据类型必须与字面量类型一致？留个疑问。</p><p>字面量讲了，变量名你可以随便取，接下来该说一说数据类型了。</p><p>Java支持的数据类型有两种，<strong>基本数据类型</strong>与<strong>引用数据类型</strong>。</p><p>基本数据类型加上引用数据类型中的 String类，正好与我们之前讲的字面量类型一一对应。</p><p><strong>基本数据类型</strong></p><p>1）整数类型</p><ul><li>byte（字节）：在内存中分配 1 个字节的空间。（8 位）</li><li>short（短整型）：在内存中分配 2 个字节的空间。（16 位）</li><li>int（整型）：在内存中分配 4 个字节的空间。（32 位）</li><li>long（长整型）：在内存中分配 8 个字节的空间。（64 位）</li></ul><p>2）浮点类型</p><ul><li>float：在内存中分配 4 个字节的空间。</li><li>double：在内存中分配 8 个字节的空间。（double 精度比 float更高）</li></ul><p>3）布尔类型</p><ul><li>boolean：在内存中分配 1 个字节（数组中）或 4个字节的空间（单个定义时）。</li></ul><p>4）字符类型</p><ul><li>char：2 个字节。</li></ul><p><strong>引用数据类型</strong></p><p>1）类（class）包括枚举</p><ul><li>JDK 自带类库，如 java.lang.String、集合、包装类...</li><li>用户自定义的类型，如我们之前写的 class Hello...</li><li>第三方类库</li></ul><p>2）接口（interface）包括注解</p><p>3）数组（array）</p><p>对于基本数据类型，如定义 int类型的变量，就可以接收整数型的字面量：<code>int i = 4;</code>；定义 char类型的变量，可以接收字符型的字面量：<code>char c = '中';</code>；定义boolean 类型的变量可以接收 true 或false：<code>boolean b = true;</code>...</p><p>对于引用类型的 String，定义 String类型的变量，就可以接收字符串型的字面量：<code>String str = "我是什么样";</code>。</p><blockquote><p>正常情况下，占用字节空间越大，表示的数越多；如整数类型的 byte只占一个字节，只能表示 -128 ~ 127 内的整数，所以才需要int、long，用以存储更大的整数。当然存储的数很小时，没必要使用long，太浪费空间。</p></blockquote><p>引用类型可以赋值null，代表空、什么都没有；等面向对象时讲，现在先看基本数据类型：</p><h3 id="整数类型">3.2.1 整数类型</h3><p>整数类型用来存储整数类型的字面量。</p><p>以 1 个字节为例，1 个字节 8 位，每位是 0 或 1，那么就是有2<sup>8</sup> 种可能，即表示 256 个数。</p><p>下面是不同整数类型的取值范围：</p><table><colgroup><col style="width: 19%"><col style="width: 15%"><col style="width: 65%"></colgroup><thead><tr class="header"><th style="text-align: center;">类型</th><th style="text-align: center;">占用存储空间</th><th style="text-align: center;">取值范围</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">byte（字节）</td><td style="text-align: center;">1 个字节</td><td style="text-align: center;">[-128 ~ 127] 即 [-2<sup>7</sup> ~2<sup>7</sup> - 1]</td></tr><tr class="even"><td style="text-align: center;">short（短整型）</td><td style="text-align: center;">2 byte</td><td style="text-align: center;">[-32768 ~ 32767] 即 [-2<sup>15</sup> ~2<sup>15</sup> - 1]</td></tr><tr class="odd"><td style="text-align: center;">int（整型）</td><td style="text-align: center;">4 byte</td><td style="text-align: center;">[-2147483648 ~ 2147483647] 即[-2<sup>31</sup> ~ 2<sup>31</sup> - 1]</td></tr><tr class="even"><td style="text-align: center;">long（长整型）</td><td style="text-align: center;">8 byte</td><td style="text-align: center;">[-2<sup>63</sup> ~ 2<sup>63</sup> -1]</td></tr></tbody></table><hr><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">34</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>定义了 int 类型的变量，变量名为 i，保存的值为 3。</p><p>定义了 byte 类型的变量，变量名为 b，保存的值为 45。</p><figure><img src="https://s2.loli.net/2022/04/24/Ii1wBW4JuNTobCh.png" alt="两个变量"><figcaption aria-hidden="true">两个变量</figcaption></figure><p>把 34 赋给 b 变量，原来保存的 45 被修改了。</p><figure><img src="https://s2.loli.net/2022/04/24/xPgQpstVR2LUq1S.png" alt="赋值"><figcaption aria-hidden="true">赋值</figcaption></figure><p><code>System.out.println(i);</code>表示把 i保存的值输出到控制台（目前是 DOS 窗口）上。</p><blockquote><p>由于现在你们可能还不懂二进制，于是使用十进制表示，同时也是为了方便，避免写太多的0、1。</p></blockquote><hr><p>有人可能会问超过了整数类型的取值范围会怎么样？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">Hello.java<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span> 错误<span class="token punctuation">:</span> 不兼容的类型<span class="token punctuation">:</span> 从 <span class="token function">int</span> 转换到 byte 可能会有损失    byte b <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这下就更疑惑了，什么叫 int 转成 byte 会有损失？难道这个 128也就是整数型字面量默认被当作 int 类型处理吗？</p><p>让我们试一试：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> num1 <span class="token operator">=</span> <span class="token number">2147483648</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>推测：就算 long 类型可以保存这么大的数，但如果后面的 2147483648真的被当作 int 类型处理的话，那肯定由于超过 int 的范围，会报错。</p><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">Hello.java<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span> 错误<span class="token punctuation">:</span> 过大的整数<span class="token punctuation">:</span> <span class="token number">2147483648</span>    <span class="token keyword">long</span> num1 <span class="token operator">=</span> <span class="token number">2147483648</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>好的，大概明白了。得出结论：</p><ul><li>整数型字面量默认被当作 int 类型处理。</li><li>为了方便，当被当作 int类型处理的字面量的值没超过整数类型的范围时，可以直接赋值。如<code>byte b = 1;</code></li></ul><p>有人就问了，超出 int 范围的值？那能不能让整数型字面量被当作 long类型处理？</p><p>答：在声明整数型字面量时在其后加 l 或 L，作为标识。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> num1 <span class="token operator">=</span> <span class="token number">2147483648L</span><span class="token punctuation">;</span><span class="token keyword">long</span> num2 <span class="token operator">=</span> <span class="token number">2147483648l</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是你也看见了，由于小写的 l 感觉就像1，为了避免混淆，统一使用大写表示。</p><blockquote><p>long a1 = 1000_0000_0000L;为了易读，可以加下划线。规则：不能出现在开头或结尾；不允许出现在标识前后。</p></blockquote><p>这里插一条概念：</p><p>值传递：把变量保存的值重新复制一份，传递给另一个变量；而另一个变量修改自己保存的值，不会影响原来变量保存的值。&gt;值传递也称值拷贝</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">// 把 i1 保存的值 100 复制一份，传给 i2，此时 i2 保存的值为 100</span><span class="token keyword">int</span> i2 <span class="token operator">=</span> i1<span class="token punctuation">;</span><span class="token comment">// 修改 i2 保存的值，不会对 i1 有影响</span>i2 <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i1 = "</span> <span class="token operator">+</span> i1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// i1 = 100</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i2 = "</span> <span class="token operator">+</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// i2 = 55</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/24/mIileq4o5QkBX9N.png" alt="值传递"><figcaption aria-hidden="true">值传递</figcaption></figure><p>好，有了这个概念，让我们试着互换两个变量保存的值。</p><p>大家想一想，如果现在有两个杯子 a、b，都装满了水，该如何互换？</p><figure><img src="https://s2.loli.net/2022/03/24/jHI6xGWioZNRDkm.png" alt="三个杯子"><figcaption aria-hidden="true">三个杯子</figcaption></figure><p>是不是要准备第 3 个杯子 c，先把 a 倒进 c 中，然后把 b 倒进 a中，最后把 c 倒进 b 中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">433</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment">// c = 22</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token comment">// a = 433</span>b <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token comment">// b = 22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以不借助第三个变量 c 吗？</p><p>有聪明的小伙伴想到了：让 a 保存两值之和（a + b），让 b = 两值之和 - b= a；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">433</span><span class="token punctuation">;</span>a <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token comment">// a = 22 + 433</span>b <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token comment">// b = (22 + 433) - 433 = 22</span>a <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token comment">// a = (22 + 433) - 22 = 433</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浮点类型">3.2.2 浮点类型</h3><p>浮点类型的变量可以接收一个小数，如 6.2、32.2。</p><p>由于使用指数的形式表示值，表示的数比相同字节下的整数类型更大，但是精度有限，结果可能有误差，无法精确表示。</p><p>现在看看浮点类型的取值范围，的确比整数类型的取值范围大多了：</p><table><colgroup><col style="width: 8%"><col style="width: 10%"><col style="width: 80%"></colgroup><thead><tr class="header"><th style="text-align: center;">类型</th><th style="text-align: center;">占用空间</th><th style="text-align: center;">范围</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">float</td><td style="text-align: center;">4 个字节</td><td style="text-align: center;">[1.4E-45 ~ 3.4028235E38] 即[2<sup>-149</sup> ~ 2<sup>128</sup>]</td></tr><tr class="even"><td style="text-align: center;">double</td><td style="text-align: center;">8 个字节</td><td style="text-align: center;">[4.9E-324 ~ 1.7976931348623157E308] 即[2<sup>-1074</sup> ~ 2<sup>1024</sup>]</td></tr></tbody></table><p>以下内容可以不看：</p><hr><p><strong>科学计数法（指数计数法）</strong></p><p>由于数太大了，为了更好表示数值不浪费空间，使用科学计数法表示。这个 E大写小写都可以。</p><p>1.4E-45 = 1.4 * 10<sup>-45</sup>，1.4 称为尾数（Mantissa），10为基数（Base），-45为指数（Exponent），都是十进制表示。（10<sup>-45</sup> = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.068ex" xmlns="http://www.w3.org/2000/svg" width="3.859ex" height="3.025ex" role="img" focusable="false" viewBox="0 -864.9 1705.8 1336.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(676.1,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msup" transform="translate(220,-456.4) scale(0.707)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"></path></g></g></g><rect width="1465.8" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span>）</p><p>尾数在 [1.0，10) 之间的表示方法称为 modified normalized form，正是Java 所使用的。</p><p>尾数在 [0.0，1.0) 之间的表示方法称为 true normalizedform，这时的尾数称为 normed significand。</p><p>3.4028235E38 = 3.4028235 * 10<sup>38</sup></p><blockquote><p>有人说为何使用科学计数法表示？以 2 的幂表示，如 2<sup>-149</sup>是不是更节省空间？</p><p>7777777 保留 2 位有效数字，使用科学计数法表示：7.78 *10<sup>6</sup>（7.78E6）；你此时可能还在算它是 2 的几次方吧？</p></blockquote><p>Java 中，当小数超出 [-9999999，9999999]范围时，会使用科学计数法表示。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10000000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>控制台上会输出 <code>-1.0E7</code>；</p><p>有聪明的伙伴可能注意到了两点，题干中的“小数”、字面量后的“.0”，注意啊这两个条件不能丢，否则会被当作int 类型处理。那么下面这道题就可能做错：</p><p>思考控制台输出什么结果？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">500e-2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>答：500e-2 = 500 * 10<sup>-2</sup> = 500 / 10<sup>2</sup> = 5.0</p><p>别说结果是 5 啊，科学计数法默认被当作 double类型来处理，所以小数不能掉。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//float f = 5.0E7;java: 不兼容的类型: 从double转换到float可能会有损失</span><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">5.0E7f</span><span class="token punctuation">;</span><span class="token comment">// 稍后解释 f 是什么</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下面呢？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">500E-7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第 1 个明显不是小数，还是原样输出。第 2个你可能会觉得这既然超过上述所说的范围，那使用科学计数法表示，还是原样输出。</p><p>我留的坑啊，并且也说过是 modified normalized form表示，而不是使用这种方式 <code>500E-7</code> 表示的，而是<code>5.0E-5</code>。</p><p>举个例子，a * 10<sup>n</sup>，那么 |a| 是 [1 ~ 10) 之间的数。</p><p>如 <code>-78937935.2</code>，一看超过了范围，用科学计数法表示：<code>-7.89379352E7</code>，<code>7.89379352</code>大于等于 1，小于10。你要是这样表示就错了：<code>-78.9379352E6</code>。</p><blockquote><p>以前我接触的 e 是自然对数的底数，在这里被当作 10 稍微有点不习惯。</p></blockquote><p><strong>指数表示法的十六进制表示</strong></p><p>在十六进制表示中，2 为基数，采用十进制；指数采用十进制，用 p 而不是 e表示；尾数使用十六进制表示。</p><p>例，0xa.0p-1，16 进制的 a 转为 10 进制即 10，相当于 10.0 *2<sup>-1</sup> = 5.0</p><p>这个十六进制转十进制会吧...</p><p>0x19.0p-2，0x19 = 1 * 16<sup>1</sup> + 9 * 16<sup>0</sup> = 25，25.0* 2<sup>-2</sup> = 25.0 * 1/4 = 6.25</p><p>0x0.12p1，0x0.02 = 1 * 16<sup>-1</sup> + 2 * 16<sup>-2</sup> =0.0703125，0.0703125 * 2<sup>1</sup> = 0.140625</p><hr><p><strong>小数类型的字面量默认被当作什么类型处理？</strong></p><p>回过头来，小数类型的字面量又被当作什么类型处理？</p><p>做个实验：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">Hello.java<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span> 错误<span class="token punctuation">:</span> 不兼容的类型<span class="token punctuation">:</span> 从<span class="token keyword">double</span>转换到float可能会有损失   float f <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>看来默认被当作 double 类型处理。同样想要指定字面量被当作 float处理，需要在字面量后加上 f 或 F。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">3.14F</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同理，指定字面量被当作 double 类型处理。（其实 D、d去掉也可以，在基本类型的转换中有讲）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">5D</span><span class="token punctuation">;</span><span class="token keyword">double</span> d2 <span class="token operator">=</span> <span class="token number">3d</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有时候你会看见这种写法：<code>double d = .12;</code>不要疑惑，这等同于 <code>double d = 0.12</code> ，这个 0可以省略不写，但一般不要这么做，否则其他人可能会疑惑。</p><p><strong>精度</strong></p><p>浮点数存放形式：浮点数 = 符号位 + 指数位 +尾数位，尾数部分很可能会丢失，造成精度损失。（小数都是近似值）（有兴趣去扩充知识了解，这里不赘述）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0.11111111111111111111111111111F</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0.11111111111111111111111111111D</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic"><span class="token number">0.11111111</span><span class="token number">0.1111111111111111</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>大概可以这么理解：</p><p>float 的精度是保留 8 位有效数字。</p><p>double 的精度是保留 16 位有效数字。通常使用 double 类型。</p><blockquote><p>有效数字是一个数从左边第一个不为 0的数字起，直到末尾止的数字称为有效数字，如 0.009210，有效数字 4位：9、2、1、0。</p><p>保留两位有效数字：0.0092。</p></blockquote><p>由于浮点数运算得到的结果可能有误差，所以如下就成了错误做法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">9.9</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">double</span> d2 <span class="token operator">=</span> <span class="token number">3.3</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d1 <span class="token operator">==</span> d2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"它们相等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的意思是：如果 d1 等于 d2，就输出“它们相等”。</p><p>但试着运行，控制台什么都没有输出...</p><p>此时再试下访问 d1 的值：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3.3000000000000003</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到没有？9.9 / 3 不等于 3.3，而是十分接近 3.3 的小数。</p><p><mark>当对运算结果是小数的进行相等判断时，应该以两个数的差值的绝对值，在某个精度范围类判断</mark>。这个精度由自己决定，如人民币数值比较，人民币最低面额1 分 = 0.01 元，只要两数差值小于 0.01，就认为它们相等。</p><p>现在该改一下了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">9.9</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">double</span> d2 <span class="token operator">=</span> <span class="token number">3.3</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>d1 <span class="token operator">-</span> d2<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1.0E-2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"它们相等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>还记得如何查 API 文档吗？当导入 java.lang 包下的类时，可以不用import。哦，对了，你们还不懂，这节在面向对象的包机制中。</p><p>那我直接说含义，<code>Math.abs(a)</code>：求 a 的绝对值。当 d1 - d2的绝对值小于 0.01 时，我们姑且认为它们相等。</p></blockquote><p>我还是说说怎么找吧：</p><p>打开 JDK API 文档，如果知道 Math 在哪个包下，比如 Math 在 java.lang包下，点击 java.lang；</p><figure><img src="https://s2.loli.net/2022/04/24/TuBItjdzNgnQRZl.png" alt="java.lang.Math"><figcaption aria-hidden="true">java.lang.Math</figcaption></figure><p>如果不知道，点击索引找 M 开头的类：</p><figure><img src="https://s2.loli.net/2022/04/24/T1Kfi7wmnG5Ml2N.png" alt="索引查找 Math"><figcaption aria-hidden="true">索引查找 Math</figcaption></figure><p>找到后点击 Math，看看 abs 方法的介绍。</p><p><strong>特殊的浮点数值</strong></p><p>之前大家可能试过了整数类型的除0：<code>System.out.println(5 / 0);</code> 报了 ArithmeticException算术异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 因为参与运算的字面量会转成容量最大的那种后再计算，所以可以只有一个浮点数，3.3 节中有讲</span><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">5.0</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">double</span> d2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">double</span> d3 <span class="token operator">=</span> <span class="token number">0.0</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Infinity</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// -Infinity</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// NaN</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d3 <span class="token operator">==</span> d3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d3 <span class="token operator">!=</span> d3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个正数或负数除以 0.0 是无限大 Infinity，对负数求平方根或 0.0 / 0.0结果不是个数字（is not a numer）</p><p>需要注意的是任意两个 NaN 都不相等（包括自己），所以在 Double 类中的isNaN 方法，使用了自己与自己比较，只有为 NaN 时，自己才不等于自己。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">double</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>true：真，false：假</p></blockquote><h3 id="字符类型">3.2.3 字符类型</h3><blockquote><p>输出、打印是一个意思。</p></blockquote><p>char 类型的变量可以保存单个字符，占用 2 个字节，取值范围：[0 ~ 65535]即 [0 ~ 2<sup>16</sup> - 1]。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">'中'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span><span class="token comment">// 字符类型可以直接存放数字，当输出 c2 时，会输出 97 代表的字符，扩充内容中有讲</span><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你们可能会在其他地方遇到如<code>char c = '\n';</code>，这叫<strong>转义字符</strong>；</p><p>一般使用 <code>\</code>开头，代表着将某某转义得到单个字符。<font style="color:red">注意，会先转义，哪怕是在字符串中。</font></p><figure><img src="https://s2.loli.net/2022/05/11/tJgS1eAM7RNYywd.png" alt="部分字库表"><figcaption aria-hidden="true">部分字库表</figcaption></figure><p>在 unicode 字符表中查到 A 对应的 16 进制为 0x0041，' 对应的 16 进制为0x0027，" 对应的为 0x0022，+ 对应 0x002b。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\u0041\u0022\u002b\u0022\u0041"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//                 "   A     "     +     "     A  "</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所以结果不是 <code>\u0041\u0022\u002b\u0022\u0041</code>，而是<code>"A"+"A"</code>，字符串之间会拼接，输出 <code>AA</code>。</p><hr><p><code>\n</code>：换行 <code>\t</code>：制表符 tab<code>\r</code>：回车 <code>\u</code>：把十六进制数转成对应的字符</p><hr><p>1）<code>\n</code>：</p><p>什么叫换行？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好\n我好\n大家好\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里不得不提一下 ln：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 代表换行</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic"><span class="token number">21</span><span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ln 表示当前行结束输出，如果要继续输出，就要移到下行。</p><p>回过头来，"你好"换行，"我好"换行，"大家好"换行，ln 代表换行。<code>System.out.println(c);</code>，c 是<code>'\n'</code>，代表换行，ln 代表换行。 结果如下：</p><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">你好我好大家好<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）<code>\t</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗\t猫\t鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">狗      猫      鱼<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到狗与猫、鱼之间隔了一个制表符的距离。</p><p>3）<code>\r</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是什么\r人呢"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>回车：回到行首，输出文本。由此产生分歧，有人认为一个 <code>\n</code>足以表示回车加换行，两个字符太浪费了，而 Windows系统中还保留原来概念，Enter键（我们通常叫回车键），实际用两个字符表示：<code>\r\n</code>；对应的ASCII 码用十进制表示分别为 13、10。</p><p>Windows 系统换行 Carriage return and linefeed（CRLF）：回车加换行</p><p>Linux 系统换行 Line feed（LF）：换行</p><p>回到这里，如果回车但不换行，<code>\r</code> 后的 “人呢”还在同行首个位置上输出，把 “我是” 覆盖，最后结果："人呢什么"。</p><p>4）<code>\u</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\u5929"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">天<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>16 进制的 5929对应的字符为天，有兴趣请在扩充内容中的字符编码了解。</p><p>这个 <code>\</code> 作用不止如此。</p><p>问想要使用 char 类型保存单个字符：英文单引号 <code>'</code>怎么做？</p><p><code>char c = ''';</code>这样？</p><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">Hello.java<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span> 错误<span class="token punctuation">:</span> 未结束的字符文字                char c <span class="token operator">=</span> '''<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>像这类具有特殊含义的字符，需要使用 <code>\</code>转成普通的字符，使其不再被认为是代表字符开始的单引号。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'\''</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同理，打印 <code>\</code>、" 等特殊符号，都需要在字符前加上<code>\</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">"\<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="布尔类型">3.2.4 布尔类型</h3><p>boolean 类型只有两个值：true 或 false，用于逻辑运算：2 &lt; 3 为true。</p><p>一般放在 if 、for 等语句的条件处，控制程序的流程，现在不用深究。</p><h2 id="类型转换">3.3 类型转换</h2><p>内容导视：</p><ul><li>基本数据类型转换</li><li>基本数据类型与 String 类型的转换</li></ul><h3 id="基本数据类型转换">3.3.1 基本数据类型转换</h3><p>缘起</p><p><code>double d = 3;</code> 唉呀，字面量 3 不是被当作 int类型处理吗？怎么就可以赋给 double 类型的d？别急，看完以下实验就明白规则了。</p><p>boolean 除外，不同类型容量（取值范围）按从小到大排列：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> <span class="token operator">-&gt;</span> <span class="token keyword">short</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span> <span class="token operator">-&gt;</span> <span class="token keyword">long</span> <span class="token operator">-&gt;</span> <span class="token keyword">float</span> <span class="token operator">-&gt;</span> <span class="token keyword">double</span><span class="token keyword">char</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span> <span class="token operator">-&gt;</span> <span class="token keyword">long</span> <span class="token operator">-&gt;</span> <span class="token keyword">float</span> <span class="token operator">-&gt;</span> <span class="token keyword">double</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>基本数据类型的转换规则</strong></p><p>前提：基本数据类型</p><p>当所赋值的字面量类型与变量的数据类型不一致时，会发生数据类型转换，从一种数据类型转成另一种数据类型。分为<strong>自动类型转换</strong>、<strong>强制类型转换</strong>。除了boolean 类型不能参与转换，其他基本数据类型可以互相转换。</p><p>小容量赋给大容量，会发生自动类型转型，如 int 类型自动转为 long类型：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// int 类型自动转换为 long</span><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">// long 类型自动转为 float</span><span class="token keyword">float</span> d <span class="token operator">=</span> <span class="token number">3L</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3.0</span><span class="token comment">// char 自动转 int</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token char">'中'</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 20013</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>'中'在 Unicode 字库的序号是 4E2D，使用 UTF-16 编码存储的二进制码为0100111000101101，即 20013。</p></blockquote><p>大容量赋给小容量，自动转换无法进行，溢出了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 错误: 不兼容的类型: 从 double 转换到 int 可能会有损失</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3.13</span><span class="token punctuation">;</span><span class="token comment">// 错误: 不兼容的类型: 从 long 转换到 int 可能会有损失</span>i <span class="token operator">=</span> <span class="token number">3L</span><span class="token punctuation">;</span><span class="token comment">// 错误: 不兼容的类型: 从 int 转换到 byte 可能会有损失</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">532</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时就需要强制转换符()，但可能会有精度损失，想想如果用 16位才能表示的数强行赋给只有 8位的空间，又或者将小数赋给只能保存整数的空间，那么很抱歉，只能截去多余的部分。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 强制把 double 类型转成 int</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">3.13</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// i = 3</span><span class="token comment">// 强制把 long 类型转成 int</span>i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">3L</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// i = 3</span><span class="token comment">// 强制把 int 类型转成 byte</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">532</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// b = 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于溢出，并不是每次都会有提醒：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2147483647</span><span class="token punctuation">;</span><span class="token comment">// int 类型能够保存的最大的整数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// -2147483648</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果对结果有兴趣，可以了解下原码、补码、反码。</p><p><strong>补充细节</strong></p><p>1）如果字面量的值没有超出 byte、short、char的取值范围，可以直接赋值给它们。（除了被当作 long 类型处理的字面量）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span><span class="token comment">// 'a' 表示 97</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 超出 byte 的取值范围，从 char 转换到 byte 可能会有损失</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token char">'中'</span><span class="token punctuation">;</span><span class="token comment">// '中' 表示 20013</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>需要注意，我指的是以字面量形式赋值，而不是值传递，自己试试报什么错？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span><span class="token keyword">char</span> letter <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b <span class="token operator">=</span> i1<span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> i2<span class="token punctuation">;</span><span class="token keyword">byte</span> b1 <span class="token operator">=</span> letter<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之前有人问你怎么知道 'a' 代表的整数，我又不想了解 ASCII码，有什么简单的方法吗？这就是第 2 点，请看：</p><p>2）byte、short、char 类型的变量混算时，会自动升级到 int 类型。</p><p>怎么得出的这个结论？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b3 <span class="token operator">=</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">Hello.java<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span> 错误<span class="token punctuation">:</span> 不兼容的类型<span class="token punctuation">:</span> 从 <span class="token function">int</span> 转换到 byte 可能会有损失byte b3 <span class="token operator">=</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>是吧，两个 byte 类型的变量相加，竟然升级了。那我可以利用这一点，让char 类型的变量升级成 int 变量，自然就知道该字符对应的整数了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'中'</span><span class="token punctuation">;</span><span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 20013</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token char">'1'</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 49</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）多种类型混算时，先把字面量转成容量大的那种数据类型，再进行计算。</p><p>如果你不知道这点，以后计算很容易吃亏。比如 10 / 4，你本来想得到2.5，但是这参与运算的数，容量最大的也只是 int 类型，而 int类型只能保存整数，所以 2.5 被削去了小数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// i = 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时就需要浮点类型的参与，改一下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> i <span class="token operator">=</span> <span class="token number">10.0</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// i = 2.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>思考如下语句可以通过编译吗？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>b <span class="token operator">=</span> b <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>b 保存的 10 对应 byte 类型，2 对应 int 类型，这就是混算；让 10 升级到int 类型，与 2 相乘，结果还是 int 类型，再赋给 byte 类型的变量，报错：从int 转换到 byte 可能会有损失。</p><p>思考输出什么？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4.0</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有人说这不就是 1 吗？有什么难的？当然也有其他人看出来了：1 / 4 是两个int 类型的字面量参与运算，结果为 0；（你难道忘了 int类型只能保存整数吗？）接着算，0 * 4.0 = 0.0；</p><p>所以结果为 0.0。（忘记带小数，哪怕只是 .0，结果就完全不同）</p><p>你的原意可能是这：<code>double d = 1.0 / 4 * 4.0;</code></p><h3 id="基本数据类型与-string-类型的转换">3.3.2 基本数据类型与 String类型的转换</h3><p>没想到吧，"+"号除了能计算两数之和外，还能拼接字符串。哦，我好像之前已经用过了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"我"</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"和"</span><span class="token punctuation">;</span><span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token string">"你"</span><span class="token punctuation">;</span><span class="token class-name">String</span> str4 <span class="token operator">=</span> str1 <span class="token operator">+</span> str2 <span class="token operator">+</span> str3<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 我和你</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思考输出什么？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">"2"</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4 + 6 = 10；10 + "2" = "102"；"102" + 25 = "10225"；</p><p>没看晕吧？从左至右，乘号优先；字符串加谁，谁就被拼接在一起。那么就利用这个"+"，将基本数据类型转成字符串吧。</p><p><strong>基本数据类型转成字符串</strong></p><blockquote><p>""代表空字符串。输出字符串时，是不会输出双引号的，这你应该早就知道了。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">3L</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'中'</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">3.243</span><span class="token punctuation">;</span><span class="token class-name">String</span> str1 <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token class-name">String</span> str3 <span class="token operator">=</span> c <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token class-name">String</span> str4 <span class="token operator">=</span> d <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 中</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3.243</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字符串转成基本数据类型</strong></p><p>别看，等到包装类时就懂了。（或者你会查 API 文档，它们在 java.lang包下）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span><span class="token keyword">byte</span> num1 <span class="token operator">=</span> <span class="token class-name">Byte</span><span class="token punctuation">.</span><span class="token function">parseByte</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">short</span> num2 <span class="token operator">=</span> <span class="token class-name">Short</span><span class="token punctuation">.</span><span class="token function">parseShort</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> num4 <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">float</span> num5 <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> num6 <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*    取下标为 0 的字符（得到 str 的第一个字符）下标是从 0 开始，以 1 递增，并不是从 1 开始哦*/</span><span class="token keyword">char</span> num7 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果解析不是"true"的字符串，那么返回结果是 false</span><span class="token keyword">boolean</span> num8 <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 123</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 123</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 123</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 123</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 123.0</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 123.0</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意不要想着把字符串 "abc" 转成整数，编译虽然可以通过，但运行时会报java.lang.NumberFormatException异常（数字格式化异常），程序会在抛出异常的位置终止执行。（异常中有讲）</p><p>编译时只是检查语法，并不会解析 "abc" 是否能够转成整数。</p><h2 id="x-总结回顾">3.x 总结回顾</h2><p><strong>变量</strong></p><p><code>数据类型 变量名 = 值;</code> 先声明后访问。</p><p><strong>数据类型</strong></p><p>分为基本数据类型（byte、short、int、long、float、double、char、boolean）与引用数据类型（类、接口、数组）。</p><p>不能直接以双等号判断两个浮点类型的值。应该让两数相减得到差值，如果差值在设定的精度范围内就认为它们相等。</p><h2 id="y-脑海练习">3.y 脑海练习</h2><p>3.1 下面语句能够通过编译吗？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>b <span class="token operator">=</span> b <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">10L</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">float</span> f <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2.22</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">231</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">3.23</span><span class="token punctuation">;</span><span class="token keyword">long</span> l2 <span class="token operator">=</span> i <span class="token operator">+</span> l <span class="token operator">+</span> d<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">3.14</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">6.2</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token number">34</span><span class="token punctuation">;</span><span class="token keyword">short</span> s2 <span class="token operator">=</span> s1 <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>7）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b2 <span class="token operator">=</span> b1 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">short</span> s <span class="token operator">=</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>8）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>d <span class="token operator">+</span> <span class="token number">.234F</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>9）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">3L</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token number">3.24F</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.2 下面输出结果？</p><p>1）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">3.14</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3.14</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">6.2</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.3 想在控制台上输出 \，怎么写？</p><p>3.4 想在控制台上输出如下，怎么写？</p><figure><img src="https://s2.loli.net/2022/04/24/XRSwDZ49Jkiyou5.png" alt="特别厉害的那个迦"><figcaption aria-hidden="true">特别厉害的那个迦</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> 1.1 语法入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1. JavaSE </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.2 编写第一个程序</title>
      <link href="/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.2-bian-xie-di-yi-ge-cheng-xu/"/>
      <url>/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.2-bian-xie-di-yi-ge-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章-编写第一个程序">第二章 编写第一个程序</h1><p>内容导视：</p><ul><li>编写源代码并运行</li><li>代码书写规范</li><li>注释</li></ul><h2 id="编写源代码并运行">2.1 编写源代码并运行</h2><p>内容导视：</p><ul><li>创建 .java 文件编写源码</li><li>配置环境变量</li><li>查看命令使用帮助</li><li>解释代码含义</li><li>编译与运行</li></ul><h3 id="创建-.java-文件编写源码">2.1.1 创建 .java 文件编写源码</h3><p>我们要开始写源代码啦！但只是在 DOS 窗口中输出一句话而已...</p><p>创建以 .java 结尾的文件，如Hello.java。（以后统称为后缀或扩展名，打开文件资源管理器，查看，勾上文件扩展名）文件右击选择打开一种打开方式。（EditPlus或其他文本编辑器，找不到选择其它应用，然后选中“始终使用此应用打开此类型的文件”复选框）这样你以后双击.java 文件就可以直接使用此软件打开啦。</p><p>双击此文件，输入如下。还是直接复制、粘贴吧，记得保存。（Ctrl +S）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开 DOS 窗口，使用 <mark>cd 命令切换到此文件的所在目录</mark>。</p><p>（如果你在桌面上创建的文件，路径是<code>C:\Users\自己的用户名\Desktop</code>，你可以自己打开文件资源管理器，点击左边的桌面图标，在地址栏上输入cmd 后回车）</p><figure><img src="https://s2.loli.net/2022/03/22/WHQ2T35axDCckqX.png" alt="最方便的一种方法"><figcaption aria-hidden="true">最方便的一种方法</figcaption></figure><p>在 DOS 窗口中输入<code>javac Hello.java</code>，得到如下诡异的结果。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">'javac' 不是内部或外部命令，也不是可运行的程序或批处理文件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>你可能会疑惑？怎么没有找到这个命令，不是在 JDK 的安装路径/bin目录下有 <code>javac.exe</code> 命令吗？你说找不到？那为什么之前 DOS窗口查看 IP 时，也就是 <code>C:\Windows\System32</code> 下的<code>ipconfig</code> 命令就可以执行？</p><p>此电脑右键/属性/高级系统设置/环境变量/系统变量/Path 下看到了<code>%SystemRoot%\system32</code>，即<code>C:\Windows\System32</code>。</p><p>(如果桌面上没有此电脑图标)</p><ul><li>打开文件资源管理器，此电脑的图标在左边。</li><li>或者 <code>Windows + i</code>打开设置，点击系统/关于，往下翻，相关设置/高级系统设置。</li><li>右键/个性化/主题/桌面图标设置，勾选计算机图标后点击应用和确定。</li></ul><p>猜想：难道系统只会在 Path指定的路径下寻找命令吗？我随手就删了它（别试，否则手动还原），确定保存刚刚的修改操作，重新打开DOS 窗口，再次执行 <code>ipconfig</code>，很明白了。</p><figure><img src="https://s2.loli.net/2022/04/23/OB7RyUQclzf8LSe.png" alt="ipconfig"><figcaption aria-hidden="true">ipconfig</figcaption></figure><p>得出结论：执行的程序<mark>如果在当前目录下不存在，系统会在名为 Path的环境变量指定的目录下查找</mark>。</p><p>好的，大概明白了，但我的电脑上有多个用户，那么为了不影响其他用户，我只配置用户变量的Path，优先级当然没有系统变量的高。（系统变量针对所有用户生效）</p><h3 id="配置环境变量">2.1.2 配置环境变量</h3><p>上节知道了 Path 变量的作用，现在该把命令地址添加到 Path 中了。</p><p>双击 Path，添加 javac 命令所在路径。（如果你还记得 JDK安装的位置，打开 bin 目录，复制地址栏上的地址）</p><figure><img src="https://s2.loli.net/2022/04/23/DIAuLwFzJY8pcyb.png" alt="Path"><figcaption aria-hidden="true">Path</figcaption></figure><p>如果这个 JDK安装目录，以后会重复使用（不用怀疑，肯定了）。为了方便，新建变量<code>JAVA_HOME</code> 保存 JDK 安装目录，供其它地方使用。</p><figure><img src="https://s2.loli.net/2022/04/23/aNjyxB49z12h6tO.png" alt="JAVA_HOME"><figcaption aria-hidden="true">JAVA_HOME</figcaption></figure><p>再把之前的 javac 命令所在路径替换成<code>%JAVA_HOME%\bin</code>。</p><figure><img src="https://s2.loli.net/2022/04/23/O1Y5IBdgSak4hD3.png" alt="Windows 10 下的变量"><figcaption aria-hidden="true">Windows 10 下的变量</figcaption></figure><p><code>%JAVA_HOME%</code> 代表变量 <code>JAVA_HOME</code>对应的值。以后 JavaEE、开发工具需要获取 JDK的安装目录，这样就不需要再手动设置了。</p><p>有的人可能版本较老，Path变量值在一行文本框上显示。那么添加路径时，注意<mark>路径与路径之前使用;分隔</mark>，注意这个分号是<mark>英文状态下</mark>的半角符号，你按下Shift，看看电脑右下角是否中英在切换。写成 <code>；</code>就错了。以后如果不说明，统一使用英文状态下的符号。</p><p>例：<img src="https://s2.loli.net/2022/04/23/N1JWtzUi2RvqPjF.png" alt="老版本下的变量"></p><p>检查自己是否配置好了：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">打开 DOS 窗口，输入 java -version 和 javac 等命令如果显示版本信息，证明 java.exe 是可以用的再输入 echo %Path%查看刚刚配置的 JDK的家\bin 路径是否在其中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有的人可能有疑惑，明明自己没配环境变量，为什么 java.exe可以使用？</p><p>答：使用 exe 文件安装 JDK 后，会自动在系统变量 Path添加如下图路径：</p><p><code>C:\Program Files (x86)\Common Files\Oracle\Java\javapath</code></p><figure><img src="https://s2.loli.net/2022/04/23/dpQgis9RYVoCNqb.png" alt="其它的 java.exe"><figcaption aria-hidden="true">其它的 java.exe</figcaption></figure><p>所以没有手动配置环境变量时，java 命令可以用，但 javac 不行。</p><p><mark>每次改动，都需要重新打开 DOS 窗口，配置才能生效</mark>。输入<code>javac Hello.java</code>，如果你的语法正确，就会在当前路径下生成class（字节码）文件，再输入 <code>java Hello</code> ，此时别带后缀。</p><figure><img src="https://s2.loli.net/2022/04/23/R4OVLAEptcxUvik.png" alt="编译与运行"><figcaption aria-hidden="true">编译与运行</figcaption></figure><p>有人就说了，每次运行 class 文件，都要使用 cd命令进入此目录，再执行命令很麻烦。那么可以通过 classpath变量指定字节码文件所在位置。</p><p>新建环境变量 classpath：</p><figure><img src="https://s2.loli.net/2022/04/23/KYDAIMvPCJQrmpn.png" alt="classpath"><figcaption aria-hidden="true">classpath</figcaption></figure><p>.是英文输入的句号，代表<mark>当前路径</mark>，如果不写就不会从当前路径寻找class 文件。 由于我习惯把 class文件放在桌面上，于是新增了桌面的路径，路径和路径直接使用;分隔，<mark>别使用中文的分号</mark>。</p><p>这样不管在任何地方，输入 <code>java Hello</code> 就可以执行了。</p><p><strong>总结</strong></p><p><strong>Path 是 Windows 查找 .exe 文件的路径；classpath 是 JVM 查找.class 文件的路径</strong>；如果你以后学会了如何打 jar包，假如它的绝对路径为 <code>E:\a\c\d\Tool.jar</code>，如果想任何位置敲<code>java -jar Tool.jar</code> 让 jar 包执行，就可以把<code>E:\a\c\d\Tool.jar</code> 加到 classpath 变量值里。</p><blockquote><p>javac Te*.java 会将文件名开头为 Te 的所有 .java 文件都编译</p></blockquote><h3 id="查看命令使用帮助">2.1.3 查看命令使用帮助</h3><p>也许你总是会忘记，此命令应该携带什么参数...</p><p><code>想要执行的命令 -help</code>，例举了可加的参数，如-encoding。（对不起，我要给你埋坑了，如果你事先不知道此参数的作用...）</p><p>如 <code>javadoc -help</code>、<code>javac -help</code>。（其实不加-help 也行)</p><p>看，这不就出来了：</p><figure><img src="https://s2.loli.net/2022/03/22/KnFd5U6Jv9R7TzS.png" alt="命令使用帮助"><figcaption aria-hidden="true">命令使用帮助</figcaption></figure><h3 id="解释代码含义">2.1.4 解释代码含义</h3><p>看不懂很正常，学完面向对象就懂了。突然遇到看不懂的不要怀疑自己智力有问题，只是还没到这步而已，大不了直接跳过。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token comment">// args 是变量名，可以根据标识符的命名规则取名</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从头开始说吧。</p><ul><li>关键字 public是访问修饰符，表明该类是一个公共类，可以控制其他对象对类成员的访问。</li><li>关键字 class 用于声明一个类，其后所跟的 Hello 是类名。</li><li>Hello 后跟的 {} 称为类体，包含了方法、字段...</li><li><code>public static void main(String[] args) {}</code>：这个是 main方法，由于被 JVM 调用，也被称为主方法、入口方法。所有 java代码都是最先从入口方法开始执行的。<ul><li>main 后的 {} 称为方法体，包含了 java 语句。</li><li>关键字 static表示该方法是一个静态方法，无须创建类的实例即可调用。</li><li>关键字 void 表示此方法没有返回值。</li><li>void 后面的是方法名 main。</li><li>main 后的括号包含一个形式参数，这个形参是 String类型的数组，参数名是 args。</li><li><code>System.out.println("");</code> 是 java语句，代表打印（输出）括号中的内容到控制台（DOS 窗口）。</li><li>"hello world!" 是一个字符串。</li><li>; 代表一条 java 语句的结束。</li></ul></li></ul><h3 id="编译与运行">2.1.5 编译与运行</h3><p>（字节码文件是 class 文件，由源代码中定义的 class 生成）</p><p>过程如下：</p><p>首先新建后缀为 java 的文件，编写出符合语法规则的代码。</p><p>编译：经过 <code>javac 源文件名.java</code>命令编译生成字节码文件；</p><p>运行：使用 <code>java 类名</code>命令在 JVM虚拟机上运行此字节码文件，JVM 会调用此类的 main 方法。</p><p>（补充：因为一个源文件可以定义多个类，编译后生成多个 class 文件，所以java 命令后面跟的不一定是源文件名）</p><figure><img src="https://s2.loli.net/2022/04/23/mTSKFjtJogrA2yX.png" alt="编译"><figcaption aria-hidden="true">编译</figcaption></figure><p><strong>编译</strong></p><p>.java 文件是 java的源文件，但是<strong>不能直接运行</strong>，必须先被编译成为 .class文件才能够执行。别问，问就是电脑太笨，看不懂。</p><p>class 文件也称为字节码文件，上面的 <code>javac 源文件名.java</code>就是编译的过程。</p><p>编译期将源码交给编译器，编译成可以被 JVM识别的字节码，如果源代码不符合语法规则，就会报错（错误提示很智能，可以根据报错信息相应找到原因，自己试试比如删除一个大括号、引号等，看看javac 命令给你报什么错）</p><p><strong>运行</strong></p><p>（当源文件修改后，<mark>必须重新编译</mark>才能生效）</p><p>编译后生成 class 字节码文件，使用 <code>java class文件名</code>运行，别加 .class 后缀。</p><p>运行期类加载器（Class Loader）找字节码文件（如果没有配classpath，默认从当前路径下找），找到了就<mark>加载字节码文件到 JVM虚拟机</mark>，JVM启动解释器对字节码文件进行解释，生成的二进制码读到内存中，由 CPU进行二进制码的执行。</p><p><mark>字节码文件是一种和任何具体机器环境及操作系统环境无关的中间代码</mark>，编程人员和计算机都无法直接读懂字节码文件。它是一种二进制文件，是Java 源文件由 Java 编译器编译后生成的目标代码文件。它必须由专用的 Java解释器来解释执行，因此 Java是一种在<mark>编译基础上进行解释运行</mark>的语言。</p><p>C 语言中文网下的解释，我觉得还行吧，我没玩过 C 语言。</p><hr><p>1）<strong>将所有源代码一次性转换成二进制指令</strong>（也就是生成一个可执行程序，如Windows 下的 .exe） 的转换工具称为<strong>编译器</strong>。</p><p>比如 C 语言、C++ 的 GCC、Golang 的 GCC GO等，源代码改动需要重新编译一次。</p><p>2）翻译一句，执行一句，不会生成可执行程序。 比如 Python 的 CPython等，这种的转换工具称为解释器。</p><p>3）Java 和 C# 是一种比较特殊的存在。 如 java 有编译器javac，但编译后的 class 文件计算机无法执行，还需要 java解释器进行翻译。</p><p>它们的源代码需要先转换成一种中间文件（字节码文件），然后再将中间文件拿到虚拟机中执行。Java 引领了这种风潮，它的初衷是在跨平台的同时兼顾执行效率；</p><p>C# 是后来的跟随者，但是 C# 一直止步于 Windows平台，在其它平台鲜有作为。</p><hr><p><mark>Java解释器负责将字节码文件翻译成具体硬件环境和操作系统平台下的机器代码</mark>，以便执行。因此Java 程序不能直接运行在现有的操作系统平台上，它必须运行在被称为 Java虚拟机的软件平台之上。</p><p><mark>Java 虚拟机（JVM）是运行 Java 程序的软件环境，Java 解释器是Java 虚拟机的一部分</mark>。在运行 Java 程序时，首先会启动JVM，然后由它来负责解释执行 Java 的字节码程序，并且 Java字节码程序只能运行于 JVM 之上。这样利用 JVM 就可以把 Java字节码程序和具体的硬件平台以及操作系统环境分隔开来，只要在不同的计算机上安装了针对特定平台的JVM，Java程序就可以运行，而不用考虑当前具体的硬件平台及操作系统环境，也不用考虑字节码文件是在何种平台上生成的。</p><p>JVM把这种不同软、硬件平台的具体差别隐藏起来，从而实现了真正的二进制代码级的跨平台移植。<mark>JVM是 Java 平台架构的基础，Java 的跨平台特性正是通过在 JVM 中运行 Java程序实现的。</mark></p><p>Java语言这种“一次编写，到处运行”的方式，有效地解决了目前大多数高级程序设计语言需要针对不同系统来编译产生不同机器代码的问题，即硬件环境和操作平台的异构问题，大大降低了程序开发、维护和管理的开销。</p><p>提示：Java 程序通过 JVM 可以实现跨平台特性，但 JVM是不跨平台的。也就是说，<mark>不同操作系统之上的 JVM是不同的</mark>，Windows 平台之上的 JVM 不能用在 Linux平台，反之亦然。</p><h2 id="代码书写规范">2.2 代码书写规范</h2><p>内容导视：</p><ul><li><p>代码细节</p></li><li><p>代码规范</p></li><li><p>标识符与关键字</p></li></ul><h3 id="代码书写细节">2.2.1 代码书写细节</h3><p>看不懂没关系，只挑能理解的。</p><p>1）<mark>字母严格区分大小写，如 class 不等于 Class。</mark></p><p>2）在 java 中任何有效的代码必须写在“类体”中，就是 public class Hello后的一对大括号 {} 中。</p><p>3）大括号必须要成对写，防止漏掉。</p><p>4）为了增加代码的可读性，大括号里的内容需要使用 tab 缩进，如 main方法就比 class Hello 低一个层次。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token comment">// 被 {} 包裹的部分选中，按下 tab</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 被 {} 包裹的部分选中，按下 tab</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 同理</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"为何"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）main 后的 {} 包裹的内容称为方法体，由一行行的 java语句构成，<mark>任何一条 java语句必须以分号结尾</mark>;。若无特别说明，默认为英文状态下的符号。</p><p>6）方法体中代码遵循<strong>自上而下</strong>的顺序依次逐行执行，不可随意颠倒顺序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行到这句时，还没有 i 变量</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>7）一个 java 源文件可以定义多个类。编译后，每一个类对应一个 class文件，如以下编译后会生成 A.class、B.class、C.class 三个字节码文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8）有 public 修饰的类可以没有，但如果有，<mark>被 public修饰的类名必须与源文件名一致</mark>。 例：源文件名为 Hello，则 publicclass 后的类名也应该为 Hello。</p><p>9）被 public修饰的类如果有，则最多只能有一个。类似一个家只有一个主人吧。</p><p>10）运行时，只会调用对应类的入口方法里面的内容，入口方法有固定的书写格式：</p><p><code>public static void main(String[] args) {}</code></p><p>那我偏不信邪，改下，再运行。</p><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">E<span class="token punctuation">:</span>\cqh_demo\<span class="token number">01</span><span class="token operator">-</span>JavaSE<span class="token operator">&gt;</span>java A错误<span class="token punctuation">:</span> 在类 A 中找不到 main 方法<span class="token punctuation">,</span> 请将 main 方法定义为<span class="token punctuation">:</span>   public <span class="token keyword">static</span> void main<span class="token punctuation">(</span><span class="token keyword">String</span>[] args<span class="token punctuation">)</span>否则 JavaFX 应用程序类必须扩展javafx.application.Application<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>好吧，再改回去了。</p><h3 id="代码规范">2.2.2 代码规范</h3><p>规范与规则不一样，不是必须遵守。但是如果你不遵守，代码可读性会很差。反例如下，虽然可以通过编译，但你看起来感觉如何？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span><span class="token class-name">Hello</span><span class="token punctuation">{</span><span class="token keyword">public</span>    <span class="token keyword">static</span><span class="token keyword">void</span>    main    <span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>       out<span class="token punctuation">.</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span>       <span class="token punctuation">;</span>     <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span>        <span class="token punctuation">;</span>    <span class="token keyword">if</span>                    <span class="token punctuation">(</span>i<span class="token operator">&gt;</span>                     <span class="token number">1</span><span class="token operator">&amp;&amp;</span>i                     <span class="token operator">&lt;</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1）类和方法上的注释，以 javadoc 的方式，方便生成文档注释。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 这个注释下节有讲，现在只是测试     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）非 javadoc注释，用于给代码的维护者和读者看。（为什么这么写，如何修改，注意事项）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 这就是注释，解释下面是将 10 赋给了 int 类型的变量 i；</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3）运算符如 &lt;、= 的两边使用空格与字符隔开，举出正反例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">20</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">&gt;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）代码编写使用次行风格或行尾风格。你可以理解为这就是对整齐风格的一种追求吧。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 行尾风格</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">333</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 次行风格</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span>    <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">333</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="标识符与关键字">2.2.3 标识符与关键字</h3><p>声明：由于每次使用 import、带上完整类、main方法比较繁琐。于是进行了简化，只提供关键部分，外面的类、方法等其它代码以后自己加吧，别直接复制代码，发现怎么跑不起来啊？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><mark>凡是程序员有权利命名的单词都是标识符</mark>。</p><p>比如：类名、方法名、参数名、变量名、接口名、常量名。（这些是什么，以后就知道了，现在只是看看）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// add 是方法名有权利命名</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// n 是变量名</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> num1<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以试试哪里可以修改，比如修改 public、int等单词，是否会报错。你就明白，你可以动的地方有哪些。可以动而不报错的那些单词就是标识符，不可以动的就是关键字。</p><p><strong>命名规则</strong></p><ul><li>标识符只能由数字、字母、_、$ 组成。(标识符中不能有空格)</li><li>标识符不能以数字开头。</li><li>关键字和保留字不能做标识符。</li><li>标识符<mark>严格区分大小写</mark>，理论上没有长度限制。（如 Public与 public 不一样）</li></ul><p>可以使用 Character 类的方法检验，isJavaIdentifierStart方法可以确定某字符是否可以作为变量名的开头；</p><p>isJavaIdentifierPart方法确定某字符是否可以作为变量名的一部分，不包括开头。</p><p><strong>命名规范</strong></p><p>见名知意，如 day 代表天数。</p><p>1）别用拼音与英语混合，那样很难理解。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">反例：tianKongBlue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）杜绝完全不规范的英文缩写，避免望文不知义。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">反例：AbstractClass “缩写”成 AbsClass；condition “缩写”成 condi；Function “缩写”成 Fu；此类随意缩写严重降低了代码的可阅读性。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>驼峰命名，多个单词连在一起时，单词首字母大写，增加识别和可读性，下面是阿里巴巴开发手册（黄山版）详细：</p><p>1）<strong>类名使用 UpperCamelCase风格</strong>（首字母大写，后面每个单词首字母大写），以下情形例外：DO /PO / DTO / BO / VO / UID 等。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">正例：ForceCode / UserDO / HtmlDTO / XmlService / TcpUdpDeal / TaPromotion反例：forcecode / UserDo / HTMLDto / XMLService / TCPUDPDeal / TAPromotion<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2）<strong>方法名、参数名、成员变量、局部变量都统一使用lowerCamelCase 风格</strong>（首字母小写，后面每个单词首字母大写）。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">正例：localValue / getHttpMessage() / inputUserId<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3）常量名全部大写，单词间用_连接，力求语义表达完整，不要嫌名字长。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">正例：MAX_STOCK_COUNT / CACHE_EXPIRED_TIME反例：MAX_COUNT / EXPIRED_TIME<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>枚举成员实际上也是常量，名称需要全大写，单词间用_连接。</p></blockquote><p>4）抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception结尾；测试类命名以它要测试的类的名称开始，以 Test 结尾；枚举类名带上Enum 后缀。</p><p>5）如果是形容能力的接口名称，取对应的形容词为接口名（通常是 –able结尾的形容词）。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">正例：AbstractTranslator 实现 Translatable 接口。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6）在常量与变量命名时，表示类型的名词放在词尾，以提升辨识度。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">正例：startTime / workQueue / nameList / TERMINATED_THREAD_COUNT反例：startedAt / QueueOfWork / listName / COUNT_TERMINATED_THREAD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>7）POJO 类中定义的布尔类型的变量，不要加 is前缀，否则部分框架解析会引起序列化错误。</p><p>备注：POJO（Plain Ordinary Java Object）：普通的 Java 对象。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">反例：定义为基本数据类型 Boolean isDeleted 的属性，它的方法也是 isDeleted()。框架在反向解析时，“误以为”对应的属性名称是 deleted，导致属性获取不到，进而抛出异常。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>8）包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">正例：应用工具类包名为 com.alibaba.ei.kunlun.aap.util；类名为 MessageUtils（此规则参考 Spring 的框架结构）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>9）避免在子父类的成员变量之间、或者不同代码块的局部变量之间采用完全相同的命名，使可理解性降低。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 反例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfusingName</span> <span class="token punctuation">{</span>     <span class="token keyword">protected</span> <span class="token keyword">int</span> stock<span class="token punctuation">;</span>     <span class="token keyword">protected</span> <span class="token class-name">String</span> alibaba<span class="token punctuation">;</span>    <span class="token comment">// 非 setter/getter 的参数名称，不允许与本类成员变量同名</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">access</span><span class="token punctuation">(</span><span class="token class-name">String</span> alibaba<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>            <span class="token comment">// ...</span>        <span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 在同一方法体中，不允许与其它代码块中的 money 命名相同</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token number">15978</span><span class="token punctuation">;</span>            <span class="token comment">// ...</span>        <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">ConfusingName</span> <span class="token punctuation">{</span>    <span class="token comment">// 不允许与父类的成员变量名称相同</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> stock<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说明：子类、父类成员变量名相同，即使是 public也是能够通过编译，而局部变量在同一方法内的不同代码块中同名也是合法的，但是要避免使用。对于非setter / getter 的参数名称也要避免与成员变量名称相同。</p></blockquote><p><strong>关键字</strong></p><p>Java 关键字是对 Java编译器有特殊含义的字符串，是编译器和程序员的一个约定，程序员利用关键字来告诉编译器其声明的变量类型、类、方法特性等信息。</p><p>关键字一律用小写字母标识，按其用途划分为如下几组。</p><p>1）用于数据类型的关键字有：</p><p>boolean、byte、char、 double、false、float、int、long、new、short、true、void、instanceof。</p><p>2）用于语句的关键字有：</p><p>break、case、 catch、 continue、 default 、do、else、 for、if、return、switch、try、 while、finally、 throw、this、 super。</p><p>3）用于修饰的关键字有：</p><p>abstract、final、native、private、protected、public、static、synchronized、transient、volatile。</p><p>4）用于方法、类、接口、包和异常的关键字有：</p><p>class、 extends、 implements、interface、package、import、throws。</p><p>5）保留字：</p><p>cat、 future、 generic、inner、 operator、outer、rest、var、goto、byValue、cast、const等都是Java尚未使用，但以后可能会作为关键字使用。</p><p>另外，Java还有3个保留字：true、false、null。它们不是关键字，而是文字，包含 Java定义的值。和关键字一样，它们也不可以作为标识符使用。</p><h2 id="注释">2.3 注释</h2><p>内容导视：</p><ul><li>单行注释</li><li>多行注释</li><li>文档注释</li><li>IDEA 工具自动快捷键添加注释</li><li>使用 javac 命令编译时出现的"错误: 编码 GBK 的不可映射字符"</li><li>浅入编码</li><li>查看系统编码</li><li>使用 API 文档</li></ul><p>注释是对代码的解释说明，方便理解代码的含义，提高代码的可读性。注释不是编程语句，因此被编译器忽略。如果不写注释，时间久了或代码过长本人也看不懂，所以编写注释是一个良好的习惯。</p><p>注释有三种，依次介绍。</p><h3 id="单行注释">2.3.1 单行注释</h3><p>使用双斜杠 //，// 后的就是注释（仅一行），不会被编译器当成 java语句。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 打印()中的话到控制台上，这个()中的字面量(数据)如果是字符串类型，需要用""包裹起来</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多行注释">2.3.2 多行注释</h3><p>对于很多内容，单行放不下，可以使用多行注释，在 /**/里内写下内容，星号别省略。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*System 是类，通过类名.调用 out 这个静态变量，这个静态变量保存的是堆内存中的对象地址，被称为对象引用再通过对象引用，调用对象的 println 方法*/</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文档注释">2.3.3 文档注释</h3><blockquote><p>下面看看就行，以后使用开发工具 IDE 自动生成，没必要手动敲。</p></blockquote><p>文档注释可以被 javadoc 命令解析，生成以网页形式（html）显示的 API文档。（Application Programming Interface：应用程序编程接口）。</p><p>当类又多又杂，一个个找类、看注释很麻烦，于是提取出来生成网页。</p><p>用来说明类、成员变量和方法的功能。不用在一个一个 java文件中查看注释，直接打开 html 查看想要的方法。</p><p>javadoc 默认只提取 public、protected修饰的部分，<code>javadoc -help</code> 查看可加的选项。</p><p>文档注释必须写在类、接口、方法、构造器、成员字段前面，写在其他位置无效。</p><p>文档注释中可以识别的标签如下：</p><table><thead><tr class="header"><th style="text-align: center;">标签</th><th style="text-align: center;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><span class="citation" data-cites="version">@version</span></td><td style="text-align: center;">指定类的版本，用于类上</td></tr><tr class="even"><td style="text-align: center;"><span class="citation" data-cites="author">@author</span></td><td style="text-align: center;">标注类的作者</td></tr><tr class="odd"><td style="text-align: center;"><span class="citation" data-cites="since">@since</span></td><td style="text-align: center;">从哪个版本起有了这个方法</td></tr><tr class="even"><td style="text-align: center;"><span class="citation" data-cites="param">@param</span></td><td style="text-align: center;">参数详细信息</td></tr><tr class="odd"><td style="text-align: center;"><span class="citation" data-cites="return">@return</span></td><td style="text-align: center;">说明返回值</td></tr><tr class="even"><td style="text-align: center;"><span class="citation" data-cites="throws">@throws</span></td><td style="text-align: center;">可能抛出的异常</td></tr><tr class="odd"><td style="text-align: center;"><span class="citation" data-cites="deprecated">@deprecated</span></td><td style="text-align: center;">表示不建议使用</td></tr><tr class="even"><td style="text-align: center;"><span class="citation" data-cites="see">@see</span></td><td style="text-align: center;">另请参阅</td></tr></tbody></table><p>文档注释的标签区分大小写，别写错了，也可以看看源码上的注释是怎么写的。（别省略* 号，注意观察下面的格式）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author 是在座的每一个人 * @version 2.0.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token comment">/** * 这个方法用来求两数之和 *     * @param  num1第一个参数 * @param  num2第二个参数     * @return 返回两个数的和     * @throws 测试用而抛出的异常     * @since  1.8.2     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>javadoc 命令只能提取文档注释</strong>。让我们试试吧。</p><figure><img src="https://s2.loli.net/2022/04/23/Vmq9BOYSg1XcKMe.png" alt="javadoc"><figcaption aria-hidden="true">javadoc</figcaption></figure><p><code>javadoc Hello.java -encoding UTF-8 -version -author -private -charset UTF-8 -docencoding GBK</code></p><p>当前目录会生成 index.html文件，双击此文件，交给浏览器解析（会自动打开浏览器），右键查看页面源代码，API文档里的信息是读取 Hello.java 文件得来的。</p><p>使用此命令还可以追加其他 java源文件的文档注释，例：<code>javadoc -encoding UTF-8 Hello.java H.java</code></p><figure><img src="https://s2.loli.net/2022/04/23/BrojKC98D2QiScA.png" alt="API 文档"><figcaption aria-hidden="true">API 文档</figcaption></figure><p><strong>javadoc 命令中的参数说明</strong></p><hr><p>-encoding 是告知 java 源代码所用的字符编码；</p><p>-version、-author 是显示版本和作者；</p><p>-private 是显示所有类和成员；（包括显示私有，一般显示 protected以上级别就行，可以不加此选项）</p><p>-charset 是告知浏览器此文件采用什么编码方式读取这个文件； 即 html文件生成<code>&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</code></p><p>-docencoding 是指定生成的 html 文件的字符编码，不写此选项，默认UTF-8。</p><hr><p>由于文件被保存时的编码和读取时采用的编码不一致会出现乱码，所以别掉坑。咳咳，你知道自己的文件编码吗？在哪如何查看？编码是什么？你可以先了解下相关知识，或者你之前已经掉坑了，不知道满屏的GBK 不可映射是啥意思，后面再讲好吗？</p><p><strong>指定文档生成的位置</strong></p><p>使用 <code>-d</code> 指定文件在 <code>E:\a\b\c</code>下生成，很抱歉让你的桌面生了一大堆 html 文件。</p><p><code>javadoc Hello.java -d E:\a\b\c -version -author</code></p><p>代码一改，注释说明也得跟着改；为了避免无用功，代码中给标识符命名，见名知意，最好让所有人看到这段代码就知道它是干什么的，避免冗余无效注释。</p><p>示例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">ReadableByteChannel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">CharsetDecoder</span></span><span class="token punctuation">;</span><span class="token comment">/** * 这是测试如何制作 API 文档的类 * * &lt;p&gt; p 标签包围的文字代表一段，ul 和 li 标签是无序列表&lt;/p&gt; * &lt;ul&gt; * &lt;li&gt;呵呵 {@code test} 呵呵&lt;/li&gt; * &lt;li&gt;呵呵 &lt;code&gt;test&lt;/code&gt; 呵呵&lt;/li&gt; * &lt;li&gt;被上面 code 标签包裹的内容会更显眼，更细，一般用于标识符&lt;/li&gt; * &lt;li&gt;see 标签另请参阅，格式：引用类的全类名#方法名(形参类型, 形参类型...) *     java.lang 包下的类可以省略包名。如果引用的类在 API 文档上，点击后会自动跳转 *     这个 H 类我也打包到了此文档&lt;/li&gt; * &lt;/ul&gt; * * @author  cqh * @author  作者甲 * @version 1.0.0 * @see     Object#wait(long) * @see     Object#toString() * @see     StringBuffer * @see     H#hh() * @since   0.8.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 介绍属性的作用     *     * @see java.util.Scanner#makeReadable(ReadableByteChannel, CharsetDecoder)     * @since 0.8.1     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> name<span class="token punctuation">;</span>    <span class="token comment">/**     * 说明方法的作用     *     * @param name 这个name是 {@code String} 类型     *          see参阅本类中其它方法省略类名。link如     *             {@link #getAge(int, int)}也可以跳转,例     *             {@link H#hh()}，{@link H}     * @return 返回一个人名     * @throws ArrayIndexOutOfBoundsException 下标越界抛出此异常     * @see #getAge(int, int)     * @see H     * @since 0.8.1     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 另一种格式,把解释放到下一行 {@link java.lang.Object#notify()} 你好     *     * @param age     *        这是人的年龄     *     * @param count     *        总个数             *     * @throws IndexOutOfBoundsException     *         如果满足如下几种条件之一就抛出该异常     *         &lt;ul&gt;     *           &lt;li&gt; {@code age} 不是整数     *           &lt;li&gt; {@code age} 没有填入     *           &lt;li&gt; {@code age+(end-begin)} 超过了      *                {@code name.length}     *         &lt;/ul&gt;     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="idea-工具自动快捷键添加普通注释">2.3.4 IDEA工具自动快捷键添加普通注释</h3><p>以后有了 IDEA 工具再试，现在不用看，直接跳过；放心 IDEA工具中会更详细地说明。</p><p><strong>在 IDEA 中每创建一个类时，自动在类上加注释</strong></p><p>左上角 File/Settings/Editor/File and Code Templates，includes/FileHeader</p><p>里面粘贴</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 现在北京时间：${YEAR}/${MONTH}/${DAY} ${TIME} * 本类用于某某某 * * @author  作者 * @version 版本 * @see     另请参阅 * @since   从哪个版本有的 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击 apply 和 OK。</p><figure><img src="https://s2.loli.net/2022/03/22/e1OmcdqDisgkb5I.png" alt="文件头"><figcaption aria-hidden="true">文件头</figcaption></figure><p><strong>在方法上加注释</strong></p><p>左上角 File/Settings/Editor/Live Templates</p><p>点击加号 Template Group 自己创建个组后，再选择你刚刚创建的组点击加号Live Template。</p><p>解释:</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">Abbreviation：**Description：解释快捷键的描述，自己填写OptionsExpand with EnterTemplate text:** * * @param   $param$ * @return   * @throws */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当输入 Abbreviation 所写内容"<code>**</code>"时，按下 Enter 就把<code>**</code> 转成 Template text 中的内容</p><p>被 <code>$$</code> 包围的变量需要点击 Edit vaiables 设置。</p><figure><img src="https://s2.loli.net/2022/04/23/SAtu63x8Xdofgc7.png" alt="自定义变量"><figcaption aria-hidden="true">自定义变量</figcaption></figure><p>选择 Define 勾选 Java，就可以定义此模板只有在编写 java文件才能使用。</p><figure><img src="https://s2.loli.net/2022/04/23/MnIXTgorbGyQhzP.png" alt="创建模板"><figcaption aria-hidden="true">创建模板</figcaption></figure><p>点击 apply 和 OK。</p><p>然后我又定义了一个方法模板，缩写词：psvt；设置好后 OK 返回。</p><figure><img src="https://s2.loli.net/2022/03/22/EpdhFjGQTIBCbMS.png" alt="psvt 模板"><figcaption aria-hidden="true">psvt 模板</figcaption></figure><p>在 java 文件输入 psvt 后按下 Tab 键，光标停在 <code>$VAR$</code>等我们输入；按下回车，光标到了 <code>$END$</code> 处。</p><figure><img src="https://s2.loli.net/2022/03/22/yTHUiwmGV1ocdez.png" alt="缩写"><figcaption aria-hidden="true">缩写</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/22/qXHSVBuJG4tQi8U.png" alt="生成模板"><figcaption aria-hidden="true">生成模板</figcaption></figure><h3 id="使用-javac-命令编译时出现的错误-编码-gbk-的不可映射字符">2.3.5使用 javac 命令编译时出现的"错误: 编码 GBK 的不可映射字符"</h3><p>内容如下：</p><ul><li>解决 GBK 乱码问题</li><li>普及编码格式知识</li></ul><p>本节片段提取：</p><blockquote><p>友情提示，先复制文本，转换后直接粘贴。目的是避免转换编码后造成中文乱码，又得一个个改。</p></blockquote><p>有 2 种方式解决：</p><p>1）文件/另存为副本，更改编码为 ANSI。（如果使用的是notepad++，就在上方的工具栏的编码，转成 ANSI 编码）</p><figure><img src="https://s2.loli.net/2022/03/22/w1hiP8XALOBranp.png" alt="使用 ANSI 编码"><figcaption aria-hidden="true">使用 ANSI 编码</figcaption></figure><p>2）指定使用的编码格式。（编码格式在文本编辑器的右下方）<code>-encoding UTF-8</code>是指定文件编码格式是 UTF-8。</p><figure><img src="https://s2.loli.net/2022/03/22/dWScbjuPqLGNnH6.png" alt="查看当前编码"><figcaption aria-hidden="true">查看当前编码</figcaption></figure><p>正文如下：</p><p>可能编译时由于代码（包括注释里面）中有中文，编译时说什么含有 GBK的不可映射字符，不让通过。我相信新手的第一道关就卡在这，有人就干脆不写中文了。</p><figure><img src="https://s2.loli.net/2022/04/23/JRu3cxwP6LN1rZW.png" alt="GBK 的不可映射字符"><figcaption aria-hidden="true">GBK 的不可映射字符</figcaption></figure><p><strong>为何报错</strong></p><p>计算机只认得二进制数，也就是 0 和1，存储和读取数据时都要使用二进制数表示。</p><p>0 和 1 可以有很多的组合，如 011、1001010等等。可以用它们表示不同的数据，字符编码就是人为定义的一套转换表，规定一系列文字与二进制的映射关系。</p><p>（这里未区分字符集与字符编码的概念）</p><p>有多种字符编码，比如 ASCII 码，一般是 8 位二进制表示一个字符，如字符'a' 对应 01100001，这个二进制码转为十进制是 96；</p><p>学过概率的知道，8 位数，每位是 0 或 1，最多可以表示 2 ^ 8 = 256个字符，应对 26 个英文字母绰绰有余。这 8 位称为 1个字节（byte），单个位称为 bit。</p><blockquote><p>2 ^ 8 即 2 的 8次方，只是为了方便表达。有的网站不支持上标、下标语法时，你会看到2^8^、2~8~，分别对应 2<sup>8</sup>、2<sub>8</sub>。</p></blockquote><p>ASCII是美国人定义的，没有考虑其它国家。但我们国家用的不是英文，有很多字符是ASCII 码没有的，1个字节也表示不了那么多的汉字，于是国人粗略规定了GB2312，使用 2 个字节（16位）表示一个汉字。</p><p>如在 GB2312 编码中 "中国" 对应的二进制数 11010110 11010000 1011100111111010，要是系统采用 ASCII码读取这段二进制，由于它们定义的字符的映射关系都不一样，ASCII编码也不可能有中文对应的二进制码，所以解码不可能正确，解析不出来就会乱码。</p><blockquote><p>这里二进制数每 8位隔开，只是方便你们观看，实际使用时还是合在一起。</p></blockquote><p>来，我们使用记事本试试看。此处文件编码为 ANSI，使用 ANSI编码读取文件，没有乱码，显示 “天下”。</p><blockquote><p>ANSI 代表系统默认编码方式，在中国是 GBK，放心 GBK 兼容 GB2312，使用GBK 可以解析 GB2312。</p><p>举个例子，如果 ASCII 中所有字符对应的二进制码，在 GBK中，对应关系也同样如此，就说明 GBK 兼容 ASCII 码。说人话就是 01100001 在ASCII 中表示 'a'，在 GBK 中也表示 'a'。那么使用 GBK 编码读取 ASCII文件没有问题，反过来则不一定，因为 GBK 还多了 ASCII 中没有的汉字。</p></blockquote><figure><img src="https://s2.loli.net/2022/03/22/JfDWbUXBpAVs9xt.png" alt="ANSI 编码"><figcaption aria-hidden="true">ANSI 编码</figcaption></figure><p>让我们把文件编码转成 ISO-8859-1，也使用此编码读取文件。</p><figure><img src="https://s2.loli.net/2022/03/22/QYTyXjtpLWVoeS2.png" alt="ISO-8859-1 编码"><figcaption aria-hidden="true">ISO-8859-1 编码</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/22/3kF2fSKUtN1wAup.png" alt="乱码"><figcaption aria-hidden="true">乱码</figcaption></figure><p>现在再看看，这不就乱码了吗？</p><p>所以<mark>解码和编码都要使用同一套字符编码规则</mark>，notapad++可以使用不同的编码方式解析，你测试哪些编码是兼容的，不会乱码。</p><blockquote><p>编码：字符 -&gt; 二进制码</p><p>解码：二进制码 -&gt; 字符</p><p>底层存储的实际是二进制码。</p></blockquote><p><strong>使用 javac 命令编译时，如果不指定 -encoding选项，一般默认采用操作系统的字符编码方式</strong>，我们是 GBK。</p><p>在编写代码时，文本编辑器的右下角会显示当前文件的编码格式。编译时，若与系统当前编码不一致，不是同一套字符编码规则，解析不出来，就会报错；以后讲char类型时还会深入，现在讲的很浅显，看不明白很正常，不是你的原因。（我移到扩充内容中了）</p><p><strong>两种方式解决</strong></p><ul><li><p>告知此文件的编码方式。 例：当前文件的编码格式是 UTF-8，文件是Hello.java，编译时添加 -encoding参数指定文件编码<code>javac Hello.java -encoding UTF-8</code></p></li><li><p>修改文件编码方式为 ANSI，文件另存时可以看到编码。（notepad++在工具栏/编码/转为...记得先全选复制，改编码后再粘贴，否则乱码没法撤回）</p></li><li><p>所有文件使用统一的编码方式，如 UTF-8，新建环境变量<code>JAVA_TOOL_OPTIONS</code>，值为<code>-Dfile.encoding=UTF-8</code>，不建议，以后使用 IDE 工具统一使用UTF-8 编码，不需要自己在外面配。</p></li><li><p>我不写中文了，不建议，你是中国人，要不是英文通不过编译，我还真想全部使用中文符号。</p></li></ul><h3 id="查看与修改系统编码">2.3.6 查看与修改系统编码</h3><p><strong>通过 java 代码查看</strong></p><p>执行以下代码查看系统默认编码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> encoding <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"file.encoding"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="https://s2.loli.net/2022/04/23/GCeZb6OtRisJN1x.png" alt="查看系统默认编码"><figcaption aria-hidden="true">查看系统默认编码</figcaption></figure><p><strong>通过 DOS 窗口查看</strong></p><p>打开 DOS 窗口（Windows + R，输入 cmd 回车），点击左上角图标/属性</p><figure><img src="https://s2.loli.net/2022/04/23/zcuRfbO3pvN59Ch.png" alt="当前代码页 936"><figcaption aria-hidden="true">当前代码页 936</figcaption></figure><p>看到了没有，我没有画圈哦。当前代码页是 936，对应简体中文编码GBK。</p><p><strong>代码页</strong>是字符集编码的别名，也称内码表，下面是代码页与编码的对应关系：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">代码页       国家(地区)或语言 437          美国 708          阿拉伯文(ASMO 708)720          阿拉伯文(DOS)850          多语言(拉丁文 I) 852          中欧(DOS) - 斯拉夫语(拉丁文 II) 855          西里尔文(俄语) 857          土耳其语 860          葡萄牙语 861          冰岛语 862          希伯来文(DOS)863          加拿大 - 法语 865          日耳曼语 866          俄语 - 西里尔文(DOS) 869          现代希腊语874          泰文(Windows)932          日文(Shift-JIS)936          中国 - 简体中文(GB2312)现在是 GBK 了，GBK 是在国家标准 GB2312 基础上扩容后兼容 GB2312 的标准。949          韩文950          繁体中文(Big5)1200         Unicode        1201         Unicode (Big-Endian)1250         中欧(Windows)1251         西里尔文(Windows)1252         西欧(Windows)1253         希腊文(Windows)1254         土耳其文(Windows)1255         希伯来文(Windows)1256         阿拉伯文(Windows)1257         波罗的海文(Windows)1258         越南文(Windows)20866        西里尔文(KOI8-R)21866        西里尔文(KOI8-U)28592        中欧(ISO)28593        拉丁文 3 (ISO)28594        波罗的海文(ISO)28595        西里尔文(ISO)28596        阿拉伯文(ISO)28597        希腊文(ISO)28598        希伯来文(ISO-Visual)38598        希伯来文(ISO-Logical)50000        用户定义的50001        自动选择50220        日文(JIS)50221        日文(JIS-允许一个字节的片假名)50222        日文(JIS-允许一个字节的片假名 - SO/SI)50225        韩文(ISO)50932        日文(自动选择)50949        韩文(自动选择)51932        日文(EUC)51949        韩文(EUC)52936        简体中文(HZ)65000        Unicode (UTF-7)65001        Unicode (UTF-8)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可通过 DOS 命令查看当前编码：<code>chcp</code>。</p><p>修改当前 DOS窗口的编码：<code>chcp 对应编码的代码页</code>，如<code>chcp 936</code>，当控制台不支持中文时，可以试试。（重新打开DOS 窗口时会失效，恢复原来默认编码）</p><p><strong>修改系统编码</strong></p><p>如果是 Windows10，打开设置（Windows +i），时间和语言/语言/管理语言设置/更改系统区域设置，</p><p>老版本的使用控制面板/时钟和区域/区域/管理/更改系统区域设置。</p><figure><img src="https://s2.loli.net/2022/04/23/vUxFNpnrDA7CeEW.png" alt="更改语言"><figcaption aria-hidden="true">更改语言</figcaption></figure><p>下面还有 beta 版（即测试版），使用 UTF-8编码提供全球语言支持；但有些地方莫名其妙的乱码，不建议尝试，还是 GBK靠谱。</p><p>作者：<a href="https://blog.csdn.net/gulang03">「已注销」</a>，内容：修改 cmd控制台默认代码页编码的几种方法【GBK、UTF-8】，<a href="https://blog.csdn.net/gulang03/article/details/81771343">https://blog.csdn.net/gulang03/article/details/81771343</a></p><h3 id="使用-api-文档">2.3.7 使用 API 文档</h3><p>解决了中文乱码后，来看看 rt.jar包中的类、方法、字段上的文档注释生成的 API 文档。</p><p>JDK17 API文档：<a href="https://docs.oracle.com/en/java/javase/17/docs/api/index.html">https://docs.oracle.com/en/java/javase/17/docs/api/index.html</a></p><p>JDK8 API文档：<a href="https://docs.oracle.com/javase/8/docs/api/">https://docs.oracle.com/javase/8/docs/api/</a></p><p>JDK8 API中文文档：<a href="https://www.matools.com/api/java8">https://www.matools.com/api/java8</a></p><p>就是记不住方法名怎么办，翻阅 API文档查看方法的作用，你得首先记住哪个类好像有这个方法。</p><p>Java 语言提供了大量可供使用的基础类，Oracle 为这些类提供了对应的 API文档，告诉开发者如何使用此类，以及方法。</p><p>通过包名 -&gt; 类名 -&gt; 方法这样的方式寻找。</p><p>以 JDK8 为例，哦，对了，将最上面的广告关掉。</p><p>如果不知道类在哪个包下，点击最上方的索引（INDEX）</p><p>如我要用 Math 类的求绝对值的方法，如果事先知道它在 java.lang下（第一横线处下翻），找到后点击java.lang，继续下翻（第二个横线处）；找到后点击Math，再看右边的页面，下翻；点击 abs方法，就可以看到此方法的详细说明。</p><figure><img src="https://s2.loli.net/2022/04/23/JxVEoXQOiagyBA3.png" alt="Math"><figcaption aria-hidden="true">Math</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/18/q6kK8btGr3hY1Zo.png" alt="abs"><figcaption aria-hidden="true">abs</figcaption></figure><p>打开 rt.jar（jre 的 lib 下） 也可以看到Math.class。（使如果你没有软件可以打开 zip，win-rar解压缩软件下载地址在资源地址中）</p><figure><img src="https://s2.loli.net/2022/03/18/bRJwDctCMSPzAlG.png" alt="rt.jar"><figcaption aria-hidden="true">rt.jar</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/18/trnWLXTMgcDpNoa.png" alt="lang"><figcaption aria-hidden="true">lang</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/18/HpP4ADMw72eigRd.png" alt="Math.class"><figcaption aria-hidden="true">Math.class</figcaption></figure><p>你说这是字节码文件，根本看不懂，要看源码上的文档注释。好吧，在 JDK安装目录下，打开 <code>src.zip\java\lang\Math.java</code>。</p><figure><img src="https://s2.loli.net/2022/03/18/TMUPwIgujQvV7cr.png" alt="Math.java"><figcaption aria-hidden="true">Math.java</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/18/IL5dWg2mvGiTSza.png" alt="文档注释"><figcaption aria-hidden="true">文档注释</figcaption></figure><p>以这种方式，的确没有 API文档访问方便不是吗？（养成在方法上写文档注释的好习惯，这样方便提取出来）</p><p>这是谷歌翻译：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">返回 {@code float} 值的绝对值。* 如果参数不是负数，则返回参数。* 如果参数是否定的，则返回参数的否定。* 特别案例：* &lt;ul&gt;&lt;li&gt;如果参数是正零或负零，则* 结果为正零。* &lt;li&gt;如果参数为无穷大，则结果为正无穷大。* &lt;li&gt;如果参数为 NaN，则结果为 NaN。&lt;/ul&gt;* 换句话说，结果与表达式的值相同：* &lt;p&gt;{@code Float.intBitsToFloat(0x7fffffff &amp; Float.floatToIntBits(a))}** @param a 要确定其绝对值的参数* @return 参数的绝对值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="x-总结回顾">2.x 总结回顾</h2><p><strong>编译与运行</strong></p><p>先编译成 .class 文件，后运行此类的 main 方法。</p><p>运行期类加载器（Class Loader）将 class 文件加载到 JVM 中，JVM启动解释器对 class 文件解释，生成的机器码在内存中，由操作系统执行。</p><p>class 文件是与平台无关的中间代码。下载对应平台的JVM，由它自带的解释器，将 class文件翻译成当前操作系统可以执行的机器码，做到一次编写，可以在不同的平台上运行。但JVM 不跨平台。</p><p>程序员可以命名的单词是标识符，如类名、方法名、变量名、接口名、常量名。</p><p><strong>命名规则</strong></p><ul><li>只能由数字、字母、_、$组成。</li><li>不能以数字开头。</li><li>不能以关键字作为标识符。</li></ul><p><strong>命名规范</strong></p><ul><li>类名、接口名首字母大写，之后每个单词首字母大写。</li><li>方法名、变量名首字母小写，之后每个单词首字母大写。</li></ul><p><strong>注释</strong></p><p>合理使用注释，解释代码含义，方便他人阅读。</p><ul><li>类和方法上的注释，使用文档注释。</li><li>类中、代码块中使用多行或单行注释，对难以理解的地方进行说明。</li><li>不同逻辑的代码之间空行隔开。</li></ul><p><strong>编码</strong></p><p>使用 UTF-8 格式编写源文件更通用。</p><h2 id="y-脑海练习">2.y 脑海练习</h2><p>2.1 为什么 Java 代码可以做到一次编译，到处运行？</p><p>2.2 一个源文件可以生成多个 class 文件吗？</p><p>2.3 Java 源文件定义的类名必须与文件名一致吗？</p>]]></content>
      
      
      <categories>
          
          <category> 1.1 语法入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1. JavaSE </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.1 JDK 下载及准备工作</title>
      <link href="/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.1-jdk-xia-zai-ji-zhun-bei-gong-zuo/"/>
      <url>/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.1-jdk-xia-zai-ji-zhun-bei-gong-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-jdk-下载及准备工作">第一章 JDK 下载及准备工作</h1><p>内容导视：</p><ul><li>Java 介绍</li><li>JDK 下载</li><li>编写代码前的准备</li><li>Typora 软件简单使用</li><li>常用的 DOS 命令</li><li>Jopin 使用</li><li>MarkText 使用</li></ul><h2 id="java-介绍">1.1 Java 介绍</h2><p>内容导视：</p><ul><li>Java 简介</li><li>Java 技术体系</li><li>前后端的工作内容</li><li>Java 语言特性</li><li>Java 用途</li></ul><p>看不懂就跳过，这里不是重头戏，说实话，挺无聊的，我也不是很懂，这根本不是初学者应该考虑的，直接跳过也没问题，但又不能不讲，否则感觉缺了点啥。其次我一直孤军奋战，没有评判体系，只能靠自己甄别好坏，难免有些遗漏。</p><p>但其实这也是一种好处；如果一切都是可以被量化的，如分数、金钱，人变成了数字化的商品，那么不是前几名的人，那种付出、比较后的失落与无力感；就彷佛看小说变成了只看评分前几名的一样，一切都在往上赶，时时刻刻都在提醒你所处的位置，被时代裹挟不得不拼命增加自己的评分与排名获得显露被青睐的机会；如此一来，这个混沌的、可以躲藏的空间显得极为重要，说起来好像是自欺欺人，就是不看一样。</p><h3 id="java-简介">1.1.1 Java 简介</h3><p>Java 最早是由 SUN 公司（已被 Oracle 收购）的 JamesGosling（詹姆斯·高斯林）在 1992 年开发的一种编程语言，最初被命名为Oak，目标是针对小型家电设备的嵌入式应用，结果市场没啥反响。谁料到互联网的崛起，让Oak 重新焕发了生机，于是 SUN 公司改造了 Oak，在 1995 年以 Java的名称正式发布，原因是 Oak 已经被人注册了，因此 SUN 注册了 Java这个商标。随着互联网的高速发展，Java 逐渐成为最重要的网络编程语言。</p><p>有兴趣查看以下文章，了解 Java 发展历史</p><ul><li>作者：<a href="https://home.cnblogs.com/u/jmcui/">JMCui</a>，<a href="https://www.cnblogs.com/jmcui/p/11796303.html">https://www.cnblogs.com/jmcui/p/11796303.html</a></li><li>作者：<a href="https://author.baidu.com/home?from=bjh_article&amp;app_id=1711489012880566">苗子说全栈</a>，<a href="https://baijiahao.baidu.com/s?id=1714823765201515049">https://baijiahao.baidu.com/s?id=1714823765201515049</a></li></ul><p>此外 JDK1.5 与 JDK5是一样的意思。因为比之前版本的变化大，以此作为区分，表示与众不同。就像美猴王自封齐天大圣，都是一个人(猴)。</p><p>此外还有 J2EE 、JavaEE，只是叫法不同，不必纠结。</p><table><thead><tr class="header"><th style="text-align: center;">正式发行名称</th><th style="text-align: center;">昵称</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">JDK 1.0.x</td><td style="text-align: center;">Java 1.0</td></tr><tr class="even"><td style="text-align: center;">JDK 1.1.x</td><td style="text-align: center;">Java 1.1</td></tr><tr class="odd"><td style="text-align: center;">Java 2 Platform，StandardEdition，v1.2</td><td style="text-align: center;">Java 2</td></tr><tr class="even"><td style="text-align: center;">Java 2 Platform，StandardEdition，v1.3</td><td style="text-align: center;">Java 3</td></tr><tr class="odd"><td style="text-align: center;">Java 2 Platform，StandardEdition，v1.4</td><td style="text-align: center;">Java 4</td></tr><tr class="even"><td style="text-align: center;">Java 2 Platform，StandardEdition，v5.0</td><td style="text-align: center;">Java 5</td></tr><tr class="odd"><td style="text-align: center;">Java Platform，Standard Edition 6</td><td style="text-align: center;">Java 6</td></tr><tr class="even"><td style="text-align: center;">Java Platform，Standard Edition 7</td><td style="text-align: center;">Java 7</td></tr><tr class="odd"><td style="text-align: center;">Java Platform，Standard Edition 8</td><td style="text-align: center;">Java 8</td></tr></tbody></table><h3 id="java-技术体系">1.1.2 Java 技术体系</h3><p>分成了三个技术体系</p><p>（以前被称为 J2SE、J2EE、J2ME）</p><p><strong>JavaSE（Java Standard Edition）</strong>：Java标准版，包含核心的类库，主要开发桌面应用（如 Windows下的应用程序）。允许您在桌面和服务器上开发和部署 Java 应用程序。JavaSE和组件技术提供了当今应用程序所需要的丰富的用户界面、性能、多功能性、可移植性和安全性，并为JavaEE 提供基础。</p><p><strong>JavaEE（Java Enterprise Edition）</strong>：Java企业版，为开发企业环境下的应用程序提供的一套解决方案，包括 Web网站后台开发等。该技术体系包含的技术：Servlet、JSP等。企业版本帮助开发和部署可移植、健壮、可伸缩且安全的服务端Java应用。JavaEE 是在 JavaSE 的基础上构建的提供 Web服务、组建模型、管理和通信 API。</p><p><strong>JavaME（Java Platform Micro Edition）</strong>：Java微型版，JavaSE 的瘦身版。主要做嵌入式开发。 JavaME是专门为资源受限的设备设计的，如为M2M、工业控制、智能电网基础设施、环境传感器和跟踪等的无线模块、手机、PDA、电视机顶盒和打印机上运行的应用程序提供一个健壮且灵活的环境。自从安卓系统出来后，JavaME 就用的比较少了。</p><p>JavaSE 是整个 Java 平台的核心，做 Java 后端先学 JavaSE。</p><h3 id="前后端的工作内容">1.1.3 前后端的工作内容</h3><p><strong>前端</strong></p><p>编写 html代码搭建一个框架展现网页内容，如图片、文字、视频...，打开浏览器的任意网页，按下F12 可以看到网页对应的 html 文件</p><figure><img src="https://s2.loli.net/2022/04/23/qTvujOhNMVG5tBI.png" alt="浏览器按下 F12 后展开的页面"><figcaption aria-hidden="true">浏览器按下 F12 后展开的页面</figcaption></figure><p>用 CSS 技术美化页面，指定 html 标签的位置、样式等；</p><p>用 JavaScript语言控制与用户的交互，比如网页弹窗、动态改变网页内容、验证登录信息、跳转页面等。</p><p>例：点击登录页面，输入用户名与密码，按下回车，会触发事件执行JavaScript 代码，给用户响应（登录失败或成功）。</p><p>可以说前端相当于前台，是可以看的见的内容。</p><p><strong>后端</strong></p><p>接收从前端页面或其他后端服务传递过来的请求，处理业务逻辑，对数据库中的数据增删改查CRUD。</p><p>给调用者一个响应，如把数据返回给调用者、操作是否失败、返回对应的 html代码等，用户是看不见的。</p><p>例：接收到前端传过来的用户名与密码，查询数据库中是否存在，若不存在返回用户不存在。前端接收到后，改变页面信息给用户提示。</p><p>不限于使用哪种编程语言，只要能把正确的数据返回给调用者即可。</p><p>要保证访问量很大时（同一时间内能够处理尽可能多的请求）而服务器不宕机、响应时间短不至于用户长时间等待、多个用户访问时保证数据的一致性等。（高可用、高并发、分布式、自动化）</p><h3 id="java-语言特性">1.1.4 Java 语言特性</h3><p>Java 是一门编程语言，特性如下：</p><p><strong>1、面向对象</strong></p><p>Java以类为结构组织代码，对对象、继承、封装、多态、接口、包等均有很好的支持。为了简单起见，Java只支持类之间的单继承，但是可以使用接口来实现多继承。使用 Java语言开发程序，需要采用面向对象的思想设计程序和编写代码。</p><p>如果不想使用此特性，Java 也可以写出面向过程的代码。</p><p><strong>2、平台无关性</strong></p><p>一次编写，到处运行（Write Once，Run any Where）。因此采用 Java语言编写的程序具有很好的可移植性，而保证这一点的正是 Java虚拟机。在引入虚拟机之后，编译后的 <mark>class文件可以在不同的平台上运行</mark>，不需要重新编译。</p><p><strong>3、简单性</strong></p><p>Java 语言的语法与 C 语言和 C++语言很相近，使得很多程序员学起来很容易。对 Java 来说，它舍弃了很多 C++中难以理解的特性，如操作符的重载和多继承等，而且 Java语言不使用指针，加入了垃圾回收机制，解决了程序员需要管理内存的问题，使编程变得更加简单。</p><p><strong>4、解释执行</strong></p><p>Java 程序在 Java平台运行时会被编译成字节码文件，字节码与所在平台无关，可以在有 Java环境的操作系统上运行。在运行文件时，Java的解释器对这些字节码进行解释执行，执行过程中需要加入的类在连接阶段被载入到运行环境中。</p><p>解释型的转换工具称为解释器，程序在运行时使用解释器。每翻译一句，就执行一句，效率低，但跨平台性能好。</p><p>编译型的转换工具称为编译器，事先把源代码交给编译器，它一下子全部翻译，得到编译后的代码，可以直接被机器执行。</p><p>例如 JavaScript 语言有编译型的转换工具，如 chrome 的 V8引擎，也有解释型的转换工具如 Netscape Navigator 的 JS 引擎。</p><p><strong>5、多线程</strong></p><p>Java 语言是多线程的，这也是 Java 语言的一大特性，它必须由 Thread类和它的子类来创建。Java支持多个线程同时执行，并提供多线程之间的同步机制。任何一个线程都有自己的run() 方法，要执行的方法就写在 run() 方法体内。</p><p><strong>6、分布式</strong></p><p>Java 语言支持 Internet 应用的开发，在 Java的基本应用编程接口中就有一个网络应用编程接口，它提供了网络应用编程的类库，包括URL、URLConnection、Socket 等。Java 的 RIM机制也是开发分布式应用的重要手段。</p><p><strong>7、健壮性</strong></p><p>Java 的强类型机制、异常处理、垃圾回收机制等都是 Java健壮性的重要保证。对指针的丢弃是 Java 的一大进步。另外，Java的异常机制也是健壮性的一大体现。</p><p><strong>8、高性能</strong></p><p>Java 的高性能主要是相对其他高级脚本语言来说的，随着 JIT（Just inTime）的发展，Java 的运行速度也越来越高。</p><p><strong>9、安全性</strong></p><p>Java 通常被用在网络环境中，为此，Java提供了一个安全机制以防止恶意代码的攻击。除了 Java语言具有许多的安全特性以外，Java还对通过网络下载的类增加一个安全防范机制，分配不同的名字空间以防替代本地的同名类，并包含安全管理机制。</p><h3 id="java-用途">1.1.5 Java 用途</h3><p><strong>1、Android 应用</strong></p><p>许多的 Android 应用都是由 Java 程序员开发者开发。虽然 Android运用了不同的 JVM 以及不同的封装方式，但是代码还是用 Java语言所编写。相当一部分的手机中都支持 Java游戏，这就使很多非编程人员都认识了 Java。</p><p><strong>2、在金融业应用的服务器程序</strong></p><p>Java在金融服务业的应用非常广泛，很多第三方交易系统、银行、金融机构都选择用Java 开发，因为相对而言，Java 较安全 。大型跨国投资银行用 Java来编写前台和后台的电子交易系统，结算和确认系统，数据处理项目以及其他项目。</p><p><strong>3、网站</strong></p><p>Java在电子商务领域以及网站开发领域占据了一定的席位。开发人员可以运用许多不同的框架来创建Web 项目，如 MyBatis、Spring 全家桶。</p><p><strong>4、嵌入式领域</strong></p><p>Java在嵌入式领域发展空间很大。是指各种小型设备上的应用，包括机顶盒、车载的大屏影音娱乐设备、POS机等。在这个平台上，只需 130KB 就能够使用 Java技术。（在智能卡或者传感器上）</p><p><strong>5、大数据技术</strong></p><p>Hadoop 以及其他大数据处理技术很多都是用 Java，例如 Apache 的基于 Java的 HBase 和 Accumulo 以及 ElasticSearchas。</p><p><strong>6、框架</strong></p><p>解决企业应用开发的复杂性，让开发更加方便。</p><p><strong>7、软件</strong></p><p>制作小游戏、开发工具 IDE 。</p><h2 id="jdk-下载">1.2 JDK 下载</h2><p>内容导视：</p><ul><li>JDK 与 JRE 的区别</li><li>JDK 下载与安装</li><li>如何卸载</li><li>如何禁止 JDK 检查更新</li></ul><p>即使编写了 Java 源代码，系统也无法直接执行，需要 JDK 提供编译和运行Java 程序的环境，将代码解释为系统可识别的机器码。</p><h3 id="jdk-与-jre-的区别">1.2.1 JDK 与 JRE 的区别</h3><p><strong>JRE（Java Runtime Enviroment）</strong>：是 <mark>Java的运行环境</mark>。面向 Java 程序的使用者，而不是开发者。</p><p>如果你仅下载并安装了 JRE，那么你的系统只能运行 Java 程序。JRE 是运行Java 程序所必需环境的集合。它包括 JVM（虚拟机）、Java 平台核心类库（如rt.jar）和支持文件。它不包含开发工具（编译器、调试器等）。</p><p><strong>JVM（Java Virtual Machine）</strong>：Java 虚拟机。是整个Java 实现跨平台的最核心的部分，能够<mark>运行以 Java语言编写的程序。</mark>其中的虚拟机屏蔽了底层运行平台的差别。</p><p><strong>JDK（Java Development Kit）</strong>：是 <mark>Java开发工具包</mark>，它提供了 Java 的开发环境（提供了编译器 javac.exe等工具，用于将 java 文件编译为 class 文件）和运行环境（提供了 JVM 和rt.jar 即 Runtime 辅助包，用于解析 class 文件使其得到运行）。</p><p>如果你下载并安装了 JDK，那么你不仅可以开发 Java程序，也同时拥有了运行 Java 程序的平台。JDK 是整个 Java 的核心，包括了JRE 和 开发工具 jar 包，如 tools.jar。</p><p><strong>核心类库</strong>：主要是开发经常使用的类库，避免重复造轮子。如java.lang 下的 String、包装类等，已经被编译成了 .class文件，需要时直接拿来用，不用自己重新写一份。</p><p>JDK &gt; JRE &gt; JVM</p><p>如果你只是想运行 Java 程序，就只安装 JRE 即可。</p><h3 id="jdk-下载与安装">1.2.2 JDK 下载与安装</h3><p>JDK 下载地址：<a href="https://www.oracle.com/java/technologies/downloads/">https://www.oracle.com/java/technologies/downloads/</a></p><p>有 JDK7、8、11，通常使用的是JDK8、11，因为它们是长期支持版本，一般的版本支持半年就不再显示。此时的你点开链接，说不定已经看不到JDK7 了。</p><figure><img src="https://s2.loli.net/2022/04/23/K7NTIMrtV8BWzH3.png" alt="不同版本有效期"><figcaption aria-hidden="true">不同版本有效期</figcaption></figure><p>LTS 代表长期支持的版本。</p><p>Oracle 产品支持的三个策略：<a href="https://blog.csdn.net/iteye_21199/article/details/82305640">https://blog.csdn.net/iteye_21199/article/details/82305640</a></p><p>版本的有效时间：<a href="https://www.oracle.com/java/technologies/java-se-support-roadmap.html">https://www.oracle.com/java/technologies/java-se-support-roadmap.html</a></p><p>JDK8 扩展支持到 2030 年，Oracle将每三年指定一个版本作为长期支持版本。</p><p><strong>查看自己电脑位数</strong></p><p>x86 是 32 位，x64 是 64 位。</p><p>打开文件资源管理器，右键此电脑属性查看系统类型是 64 位操作系统，还是32 位。</p><figure><img src="https://s2.loli.net/2022/04/23/J3ISzFERXyb5VvC.png" alt="系统类型"><figcaption aria-hidden="true">系统类型</figcaption></figure><p><strong>根据自己的系统、位数决定下哪个</strong></p><p>比如我的电脑是 windows 系统 64 位，我使用的是 JDK8，按图选。</p><figure><img src="https://s2.loli.net/2022/04/23/X79MWrfsvpUch8z.png" alt="JDK 下载地址"><figcaption aria-hidden="true">JDK 下载地址</figcaption></figure><figure><img src="https://s2.loli.net/2022/04/23/TzBiRGEIlNbhM95.jpg" alt="下载地址"><figcaption aria-hidden="true">下载地址</figcaption></figure><figure><img src="https://s2.loli.net/2022/04/23/4CIU72Lga8RzqvV.jpg" alt="下载地址"><figcaption aria-hidden="true">下载地址</figcaption></figure><p><strong>特别说明</strong></p><p>需要自己创建账户，若不想可在网上搜索 JDK8下载，或下载最新版本，此时是 JDK16，下载 zip 和 exe格式的都行。我将网盘链接放在了资源地址这章中，需要自取。</p><p><strong>安装</strong></p><p>如果下载的是 exe文件，直接双击，指定安装目录，一直下一步，就安装成功了；</p><p><img src="https://s2.loli.net/2022/04/23/tLz2j7aeiVskHnh.png" alt="安装界面"> <img src="https://s2.loli.net/2022/04/23/yWNGatjRwbnL841.png" alt="更改安装目录"></p><p>（安装后我又卸了，使用了 zip，所以地址前后不一致）</p><p>是 zip解压即可，点击解压后的文件夹，地址栏上显示的就是安装目录，要看到 bin和其它目录，如图：</p><p>认为安装目录是 D:\cqh_environment\Java 就错了。</p><figure><img src="https://s2.loli.net/2022/04/23/aCdcgU6QxFvOIkD.png" alt="JDK 的家"><figcaption aria-hidden="true">JDK 的家</figcaption></figure><p><strong>记住 JDK 的安装目录，配置环境变量要用</strong></p><p>安装好后，看看目录：</p><p>bin 目录存放命令，如常用的javac.exe、java.exe，用于编译，运行程序。</p><p>lib 存放着 jar 包，如 dt.jar 是运行环境类库，存放了 Swing组件；tools.jar 是工具类库，用来编译与运行 java 文件。</p><p>src.zip 存放着 Java 源代码压缩文件。</p><p>rt.jar 在 jre\lib 中。</p><p><strong>解释</strong></p><p>我们编写源代码使用的文件后缀为 .java，这种 .java 文件经过编译生成.class 文件，多个.class 打包放在 .jar 包中。</p><h3 id="卸载">1.2.3 卸载</h3><p>呃，这只是教你如何卸载，并不是现在让你卸载...</p><p>打开控制面板/卸载程序，找到 Java。</p><p>或者打开 Windows设置/应用/应用和功能，单击要删除的软件，会弹出卸载字样。</p><p>如果你不知道如何打开它们，请用百度搜索，如<code>如何打开 Windows 设置</code>；其实由很多问题都已经得到回答，没必要重复造轮子。学会使用搜索，对自学很有帮助。</p><p>卸载成功后，所有目录名带 Java、Sun、Oracle 的一律删掉，如：</p><p>删除安装 JDK 的目录、删除<code>C:\Program Files (x86)\Common Files</code> 和<code>C:\Program Files</code> 下的的 Java 和 Oracle目录、<code>C:\Users\用户名\AppData\LocalLow</code> 下的 Oracle 和 Sun目录、<code>C:\Users\用户名\AppData\Roaming\Sun</code>。</p><h3 id="禁止-jdk-检查更新">1.2.4 禁止 JDK 检查更新</h3><p>这是可选项，不是必须要做的，因为我觉得时不时弹出来像牛皮癣一样挺烦。</p><p>打开控制面板/程序/Java，取消勾选自动检查更新，不检查；</p><p>高级/应用程序安装/从不安装。</p><figure><img src="https://s2.loli.net/2022/04/23/rETIMBW29xaFncL.png" alt="Java 控制面板"><figcaption aria-hidden="true">Java 控制面板</figcaption></figure><h2 id="编写代码前的准备工作">1.3 编写代码前的准备工作</h2><p>如果你是什么都不懂的新手，请别慌着写代码，还有如下几件事要做：</p><p>内容导视：</p><ul><li>为何要写笔记</li><li>使用什么软件编写源代码</li><li>练习双手打字</li><li>Windows 10 系统常用的快捷键</li><li>给初学者的一点建议</li></ul><h3 id="为何要写笔记">1.3.1 为何要写笔记</h3><p>为了对抗遗忘，可以快速回顾、促进理解、加深记忆，将知识有条不紊地归类，提炼反思应用。</p><p>不建议使用纸质的笔记，记录麻烦，不方便携带，有老化被撕毁的风险，摘抄代码时不能Ctrl + C 快速复制粘贴。</p><p>推荐使用 Typora 软件、博客、等各大网站记录。</p><h3 id="编写源代码使用的记事本">1.3.2 编写源代码使用的记事本</h3><p>工欲善其事必先利其器，使用系统自带记事本编写程序，按下 Tab缩进一大节，逼得我每次使用 4个空格，回退也难；关键字没有颜色，不易于识别与查看。</p><p>下面介绍几个更好的工具，安装后，右键文件选择打开方式即可。</p><p><strong>EditPlus</strong></p><p>建议网上搜下汉化版的，下面是官方的收费的。</p><p>下载页面：<a href="https://www.editplus.com/download.html">https://www.editplus.com/download.html</a></p><figure><img src="https://s2.loli.net/2022/04/23/vLsiNpcyoReMr3C.png" alt="EditPlus 下载地址"><figcaption aria-hidden="true">EditPlus 下载地址</figcaption></figure><figure><img src="https://s2.loli.net/2022/04/23/tKSBio59jL2VlW6.png" alt="EditPuls 安装目录"><figcaption aria-hidden="true">EditPuls 安装目录</figcaption></figure><p>有 30 天的试用期，过后要购买许可证。</p><p><strong>Notepad++</strong></p><p>下载页面：<a href="https://notepad-plus.en.softonic.com/download">https://notepad-plus.en.softonic.com/download</a></p><p>Download 就是下载的意思。</p><figure><img src="https://s2.loli.net/2022/04/23/PBeG64RorkOqQy5.png" alt="Notepad++ 下载地址"><figcaption aria-hidden="true">Notepad++ 下载地址</figcaption></figure><p><strong>如何设置主题</strong></p><p>设置/语言格式设置/选择主题，此外还可以根据不同语言设置样式。</p><figure><img src="https://s2.loli.net/2022/03/14/DObj5S6BtvImslz.png" alt="设置主题"><figcaption aria-hidden="true">设置主题</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/14/Qm2T5wYeRt8qIyr.png" alt="更改背景色"><figcaption aria-hidden="true">更改背景色</figcaption></figure><p><strong>Sublime Text</strong></p><p>官网：<a href="https://www.sublimetext.com/">https://www.sublimetext.com/</a></p><p><strong>Visual Studio Code</strong></p><p>官网：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><p><strong>Atom</strong></p><p>官网：<a href="https://atom.io/">https://atom.io/</a></p><p>不能指定安装目录；这种是以项目的方式管理文件。</p><figure><img src="https://s2.loli.net/2022/03/15/CxX2S7MvOWa9n3k.png" alt="Atom"><figcaption aria-hidden="true">Atom</figcaption></figure><p>也可以搜索一下其他的文本编辑器，看哪款适合你。</p><p><strong>编写代码</strong></p><p>打开刚刚下好的软件，输入源代码，最后 Ctrl + S 保存，另存为First.java。但是现在还不到写代码的时候，下一章好吗？</p><figure><img src="https://s2.loli.net/2022/04/23/2HmXhyMRKYSWsgl.png" alt="Hello World 代码"><figcaption aria-hidden="true">Hello World 代码</figcaption></figure><h3 id="练习双手打字">1.3.3 练习双手打字</h3><p>一个指头敲字，一边看键盘，一边看输入的代码，很容易出差错。</p><p>既然选择了在电脑上打字，就要提高自己的指法速度，敲代码和写笔记才会快，两只手共同配合。</p><p>不用担心，我也这么走过来的，虽然一开始没有单只手指头快，但坚持下来，不看键盘，手势正确，打字速度会有明显的提升。</p><p>推荐使用金山打字通。</p><p>下载页面：<a href="http://www.51dzt.com/">http://www.51dzt.com/</a></p><p>从第一步，跟着图中手势位置慢慢打，差不多跟着<strong>敲一个星期</strong>，就基本实现盲打了。</p><p>页面上有金山打字通的下载，点击下载。</p><p>下载好后，双击执行 exe文件，安装界面会跳出是否安装其它软件，根据自己需要确认是否勾选。</p><figure><img src="https://s2.loli.net/2022/04/23/TgHX5FkKAOUWLES.png" alt="金山打字通安装界面"><figcaption aria-hidden="true">金山打字通安装界面</figcaption></figure><p>安装好后点击新手入门，练到不用看键盘，打字速度超过 30 ~ 60字/分钟差不多够用了。（只需练习英文部分即可）</p><h3 id="windows10-系统常用快捷">1.3.4 Windows10 系统常用快捷</h3><p>掌握常用的快捷键，能够极大地提升效率，节省时间。</p><p>如果是有触摸板的笔记本电脑。单击是鼠标左键，双击是鼠标右键。</p><p>请打开 windows 设置/设备/触摸板查看：（Windows + i 打开设置）</p><figure><img src="https://s2.loli.net/2022/04/23/gNIUnjek17ECZBa.png" alt="笔记本触摸板"><figcaption aria-hidden="true">笔记本触摸板</figcaption></figure><p>下面是我总结的常用几个快捷键。如 Ctrl +A，在电脑键盘上找到这两个键，同时按下去即可触发全选操作。</p><p>如果打不出中文，怀疑是按 Caps Lock 开启了大写或者连续按下 Shift启动了粘滞键，再次按下此键即可恢复。</p><p>提前说明：</p><p>Ctrl + + 指同时按下 Ctrl、+ 这个键，别看见两个加号就懵了。</p><p><strong>文本相关</strong></p><p>先选中文字，Windows 键是 Alt 左边的<img src="https://s2.loli.net/2022/04/23/LpYG5sWHX9MqZf4.png" alt="Windows 键">。</p><p>内容如下：</p><ul><li>常用的粘贴、选中、删除文字的快捷键</li><li>翻页、浏览文字的快捷键</li><li>切换输入法、中英转换</li></ul><table><thead><tr class="header"><th>操作</th><th>快捷键</th></tr></thead><tbody><tr class="odd"><td>跳过单词</td><td>Ctrl + 左右箭头，可配合 Shift 使用选中文字</td></tr><tr class="even"><td>选中文字</td><td>Shift + 箭头、Shift + Home/End/Pgup/Pgdnd</td></tr><tr class="odd"><td>复制</td><td>Ctrl + C</td></tr><tr class="even"><td>粘贴</td><td>Ctrl + V</td></tr><tr class="odd"><td>全选</td><td>Ctrl + A</td></tr><tr class="even"><td>撤销</td><td>Ctrl + Z</td></tr><tr class="odd"><td>查找</td><td>Ctrl + F</td></tr><tr class="even"><td>替换</td><td>Ctrl + H</td></tr><tr class="odd"><td>删除文字</td><td>Del、Backspace</td></tr><tr class="even"><td>上翻</td><td>Pgup Pause</td></tr><tr class="odd"><td>下翻</td><td>Pgdn Break</td></tr><tr class="even"><td>行首</td><td>Home</td></tr><tr class="odd"><td>行尾</td><td>End</td></tr><tr class="even"><td>页首</td><td>Ctrl + Home</td></tr><tr class="odd"><td>页尾</td><td>Ctrl + End</td></tr><tr class="even"><td>切换当前语言下的输入法</td><td>Shift + Ctrl</td></tr><tr class="odd"><td>切换输入法</td><td>Windows + 空格</td></tr><tr class="even"><td>中英文切换</td><td>Shift、Ctrl + 空格</td></tr><tr class="odd"><td>切换语言</td><td>Shift + Alt</td></tr></tbody></table><p><strong>热键相关</strong></p><p>若桌面崩了，使用快捷键打开任务管理器，运行新任务，输入 explorer后回车。</p><p>内容如下：</p><ul><li>创建文件、查看文件属性</li><li>切换窗口，窗口最大化、最小化</li><li>切换桌面，查看桌面</li><li>截屏</li><li>放大镜</li><li>快捷方式打开应用、资源管理器</li></ul><p>有的快捷键按下去时讲究先后顺序。</p><p>例：如 Alt + Tab ，先按住 Alt 键不要松，再按Tab，有先后顺序（同时按也行），自己试试就知道我在讲什么了。</p><p>← 指的是左箭头。</p><p>说实话我向来很反感背知识，随用即取就行。但是那面试题人人都背，你不看看，万一被难倒了怎么办？算了不考虑这些，下面这些快捷键你只看看经常使用的即可。</p><table><colgroup><col style="width: 38%"><col style="width: 61%"></colgroup><thead><tr class="header"><th>操作</th><th>快捷键</th></tr></thead><tbody><tr class="odd"><td>改变桌面图标大小</td><td>按住 Ctrl + 鼠标滑轮滚动、触摸板两指缩放</td></tr><tr class="even"><td>将文件放入回收站</td><td>Ctrl + D 、 Del</td></tr><tr class="odd"><td>永久删除文件</td><td>Shift + Del</td></tr><tr class="even"><td>创建文件夹</td><td>Alt + 2</td></tr><tr class="odd"><td>查看当前文件属性</td><td>Alt + 1</td></tr><tr class="even"><td>所有窗口最小化</td><td>Windows + D 、 Windows + M 、三指下滑</td></tr><tr class="odd"><td>所有窗口最小化又还原</td><td>双击 Windows + D 、三指下滑又上滑</td></tr><tr class="even"><td>当前窗口最小化</td><td>Windows + ↓</td></tr><tr class="odd"><td>当前窗口还原、最大化</td><td>Windows + ↑</td></tr><tr class="even"><td>查找文件</td><td>Alt +空格</td></tr><tr class="odd"><td>浏览器打开新的标签页</td><td>Ctrl + T</td></tr><tr class="even"><td>浏览器查看下载文件</td><td>Ctrl + J</td></tr><tr class="odd"><td>浏览器当前页面静音</td><td>Ctrl + M</td></tr><tr class="even"><td>浏览器切换页面</td><td>Ctrl + 数字、 Ctrl + Tab +（Shift）、 Ctrl + Pgup 和 Pgdn</td></tr><tr class="odd"><td>打开新的窗口</td><td>Ctrl + N</td></tr><tr class="even"><td>使当前窗口失去焦点，图层置于底下</td><td>Alt + Esc</td></tr><tr class="odd"><td>打开任务管理器</td><td>Ctrl + Shift + Esc</td></tr><tr class="even"><td>锁屏</td><td>Windows + L</td></tr><tr class="odd"><td>关闭文件</td><td>Ctrl + W</td></tr><tr class="even"><td>强制关闭文件</td><td>Alt + F4</td></tr><tr class="odd"><td>关机</td><td>Alt + F4</td></tr><tr class="even"><td>打开文件资源管理器</td><td>Windows + E</td></tr><tr class="odd"><td>将焦点定位到地址栏</td><td>Alt + D 、 F4</td></tr><tr class="even"><td>后退</td><td>Alt + ←、 Backspace</td></tr><tr class="odd"><td>前进</td><td>Alt + →</td></tr><tr class="even"><td>返回上一级</td><td>Alt + ↑</td></tr><tr class="odd"><td>在窗格、功能区域之间切换</td><td>F6</td></tr><tr class="even"><td>重命名</td><td>F2</td></tr><tr class="odd"><td>切换至下一个，配合 F2 有奇效</td><td>Tab</td></tr><tr class="even"><td>有些快捷键再加上此键，实现逆向选择</td><td>如 Shift + Tab</td></tr><tr class="odd"><td>即时切换应用</td><td>按住 Alt 不要松开单击 Tab 、三指左右滑动</td></tr><tr class="even"><td>来回切换引用</td><td>同时按下 Alt + Tab</td></tr><tr class="odd"><td>切换应用</td><td>Alt + Ctrl + Tab 松开，单击 Tab 选择应用后回车</td></tr><tr class="even"><td>刷新</td><td>F5 、 Ctrl + R 、 Ctrl + F5</td></tr><tr class="odd"><td>同一应用不同窗口切换</td><td>Ctrl + Tab</td></tr><tr class="even"><td>浏览器不同窗口切换</td><td>Ctrl + Pgup Pause 、 Ctrl + Pgdn Break</td></tr><tr class="odd"><td>创建新桌面</td><td>Ctrl + Windows + D</td></tr><tr class="even"><td>关闭新桌面</td><td>Ctrl + Windows + F4</td></tr><tr class="odd"><td>查看已有桌面</td><td>Windows + Tab （再按还原）、三指上滑（下滑还原）</td></tr><tr class="even"><td>切换桌面</td><td>Windows + Ctrl + 左右箭头</td></tr><tr class="odd"><td>两个应用分屏</td><td>Windows + ←、 Windows + →</td></tr><tr class="even"><td>放大缩小屏幕</td><td>Windows 加 +/-</td></tr><tr class="odd"><td>浏览器放大缩小</td><td>Ctrl 加 +/-</td></tr><tr class="even"><td>打开/关闭管理通知</td><td>Windows + A</td></tr><tr class="odd"><td>打开 Windows 设置</td><td>Windows + i</td></tr><tr class="even"><td>锁定、切换用户、注销、打开任务管理器</td><td>Ctrl + Alt + Del</td></tr></tbody></table><p><strong>截屏</strong></p><p>1）快捷键打开截全屏的工具</p><p><code>Windows + W</code></p><p>2）区域截屏</p><p><code>Windows + Shift + S</code></p><p>若点击了截图，照片会在<code>C:\Users\你的用户名\AppData\Local\Packages\Microsoft.ScreenSketch_8wekyb3d8bbwe\TempState</code>下保存。</p><p>3）截全屏</p><p><code>Windows + PrtScSysRq</code></p><p>PrtScSysRq 键在 F12 右边，保存的图片在<code>C:\Users\自己的用户名\Pictures\Screenshots</code> 下。</p><p><code>PrtScSysRq</code></p><p>打开画图工具，Ctrl + V 将截屏捕捉。</p><p>4）截屏，范围限制在当前工作页面（得到焦点的页面）</p><p>解释，比如你打开了 QQ，正在使用它聊天，按下了这个快捷键，只会截 QQ界面。</p><p><code>Windows + Alt + PytScSysRq</code></p><p>5）录屏，范围限制在当前工作页面</p><p><code>Windows + Alt + R</code></p><p>捕获的图片和视频在 <code>C:\Users\用户名\Videos\Captures</code>里。</p><p>6）游戏栏工具</p><p><code>Windows + G</code></p><p><strong>Alt</strong></p><p>打开软件，按一下 Alt，会有字符提示，并且将焦点定位到菜单栏，此时可按左右键切换功能区，上下（不行就Enter 回车）键打开功能区。</p><p>字符提示会显示出功能的快捷键，例：文件功能区会显示出 F ，代表只需要Alt + F就可以打开此功能，弹出的下拉列表一般也有字母提示，按下对应字母即可。（有时需同时按下Alt ）</p><p>总结： Alt + 划下划线的字母，可以快速打开菜单。</p><p><strong>快速启动任务栏上的软件</strong></p><p>你看看你的任务栏（屏幕的最下方），打开应用后可以右击任务栏上的应用图标，将其固定到任务栏，下次直接单击此图标就可以打开应用。或者Windows键 + 数字，比如</p><figure><img src="https://s2.loli.net/2022/04/23/eOHtJ3dNf7vWkKC.png" alt="Windows 10 系统的任务栏"><figcaption aria-hidden="true">Windows 10 系统的任务栏</figcaption></figure><p>浏览器在任务栏的第 1 个位置，只需 Windows + 1 就可以打开。或者Windows + T，左右箭头选择后回车。</p><h3 id="给初学者的一点建议">1.3.5 给初学者的一点建议</h3><p>我希望你能后来居上，分享你的经验让我开开眼界。</p><p>下面是本人经过大量时间总结的经验，但你可以不看，因为没有什么规则可以量身定制。</p><p><strong>1、约束好奇心，停止收藏资源</strong></p><p>我直接说，你是学到死都学不完的。</p><p>资源无穷尽也。不要看到什么都想学，什么都想买，一直在搜，知识太多，你学不过来的。你先在网上搜索，比如后端的整套知识点，按顺序来，一心一意，<strong>一套教程为主，有疑惑的再去别的地方比对</strong>。不要没事就搜索一大堆资料收藏，又不开始，资料一定要精简，那些看上去有用的知识但短期用不上的，直接取消收藏（也包括我）。等你到了这步，再找资源，别做松鼠。</p><p>关于难度高的，可以先跳过，记录下来，后面再补上，比如数据结构、JVM底层、多线程与高并发、GUI等等...别把初学时间浪费在这上面，这些东西都是唬人放弃的。</p><p>不要背代码，要掌握原理，方法可以到 API文档上查。之前基本都是概念上的东西，理解就好了，但学到集合、IO、常用类如String，只背方法名一定会消灭你学习的兴趣。</p><p>这东西是一回生二回熟，第一遍不要想着要弄的多明白，简单过一下即可。下次复习的时候，无师自通，我敢说人就是最强的智能机器人。</p><p>至于看视频还是阅读书籍，我感悟如下：</p><p>视频时间看完所需时间更长，但可以一步步来，如果章节内容划分合理，每个视频时长合适，学习者更轻松完成每个目标，掌握自己的进度。适合初学者。</p><p>书籍花费时间较少，但经常有断节之处，初学者搞不明白缺少哪一个环节，看着晦涩难懂的文字，翻不了几页就草草放弃，适合耐得住性子的人。</p><p><strong>2、管理好精力</strong></p><p>人一天能够利用的时间极其有限，所以要学会合理分配精力。学习并不是生活的全部，要参与家务，如果你整天扑到学习上，只会感动自己。随着精力的消耗，自控力的减弱，一定会在某天突然崩掉，开始变得什么都没有兴趣，行动力拉到最低，即使强迫在学，也只是枯坐原地，享受着左耳进右耳出的枯燥感。</p><p>早起别熬夜，每天一定留至少 30 分钟的时间午睡，为了第 2天的精神良好。学习时推荐使用番茄钟，每过半小时就休息一小会，合理分配精力。（休息时不要看电子产品与动脑筋，要适当远眺）</p><p><strong>3、学会分享</strong></p><p>不要闭门造车，要敢于发在各大网站上分享，Markdown语法我会在下节中讲到，你学会了，注册个号，把笔记直接复制粘贴，发在博客网上；不要觉得自己技术菜。理由如下：</p><ol type="1"><li><p>人人都有开始，你发出来了，别人才能纠正你的错误，避免成为井底之蛙。</p></li><li><p>你又开始自耗了，不停地在脑海天人交战，一顿脑补：会不会万一发出来被人嘲笑怎么办？...于是藏着掖着，生怕别人知道，出丑；事情还未做，就想一系列的后果，别人有多可恶。我觉得世上还是好心人多，当然不要被零星几个恶评就忽略了大多数支持你的人，这么大的林子总会有几个脑残。</p></li><li><p>百分之 99.9 的人根本刷不到你的文章，或者一下就 ×过去了，即使刷到了，那还有 9.9成人浏览刷的一下就关了，评论的那是少之又少，凤毛麟角。</p></li><li><p>对于四处搜索资源的人，是没有精力留下痕迹的，没有用的直接毙掉，有用的看完理解后也直接毙掉；这么快节奏的生活，没人关心你是谁，最多充当局外客。当你还在纠结别人的看法时，纠结要不要做时，别人根本记都不记得你。我们在网络时代那是十分渺小，沧海一粟，很快被淹没，就算有弄潮儿掀起了几朵浪花，也会很快平息，所以别再纠结丢不丢脸了。</p></li><li><p>帮助别人就是帮助自己。虽然这个地球少了谁都能转动，但我愿意相信天生我材必有用，自己的不可替代性。</p></li><li><p>你已经落后别人太多了，得到的都不是最新的知识；不要求自己跑的更快，但是也要有行动的勇气吧，就算有1000个人从众笑你、反对你，我也不会笑你，只会支持你，为你的敢于行动喝彩。</p></li><li><p>或者你担心教会了徒弟饿死了师傅，认为自己凭什么白白让别人分享自己的辛苦所得，让那些白嫖怪轻而易举获取到所有。</p><p>呃，我也不反对你，曾经的我认为那些动不动说要分享，文章标题、内容弄得很吸引人；结果在文章底部放了个二维码，说要关注才能获取验证码与资源，我一向嗤之以鼻，这不就是引流吗，能赚多少钱啊？但是现在觉得别人有权力这么做，没有人必须无偿满足你，因为用爱发电，得不到利益，很容易让人寒心。既然付不了金钱，就只能搭进时间和人脉，等价交换而已。</p><p>对于那些开源的人，要不是他们的分享，让我窥见一斑，那我现在应该不在家，而是进厂做流水线去了，是不会发文章的，或许抱怨这个世界不公平。所以再次感谢开源的人，感谢你们的无私奉献，你们就是一道光，照亮被淘汰看不见希望的我，至于我的信念就从此转变为萤火虫也可与日月争辉。（不禁想起了一句话：为众人抱薪者，不可使其冻毙于风雪；为大众谋福利者，不可使其孤军奋战；为自由开路者，不可使其困顿于荆棘）很抱歉我现在捉襟见肘，无法回馈你们。</p><p>说实话，现在当我使用手机、电脑、冰箱、自来水等一切产品时，都会惴惴不安，一是因为怕现在习惯了离不开了，但是不了解底层原理，要是他们以后技术垄断，坐地起价...；二是当我还在感叹新技术新发展新气象，日新月异，这些东西如此方便快捷，被制作被运送，傻瓜都能轻松使用。但是到底以牺牲了多少人的自由空暇为代价，令他们如同机械一般麻木，我们却理所当然，嘻嘻哈哈，嘲笑着都是因为不努力，教导下一辈不要学他们，要成为人上人...扪心自问，真的能够心安理得使用吗？平等或许只是伪命题。</p></li></ol><p><strong>4、承认自己的不完美</strong></p><p>人无完人，总有顾及不到，犯错的时候。想做就直接放手干，不要计划地那么周全，稍微一有变动，就放弃目标，想明天再做。是吧，别觉得只有从容不迫、不慌不忙、按部就班地才叫做事，而达不到自己的心理预期就不做了，大多数人都是计划赶不上变化，被搞得灰头土脸的。</p><p>人是一种很奇怪的生物，我把人称为石头，有 1 就有2。当难度设定太高，有一次累了没去执行，那么最后结局就是放弃。我就改变思路，将难度设定为合适、简单。还是如此，不管之前坚持了多少天，只要有一次意外，没做，结局还是放弃。</p><p>结论：没有外力时，一直滚动；有外力一碰，就停了；结论：维持当前状态，会被外力改变。</p><p>但是在滚动的过程中，会磨去棱角，那么下一次进入相同的环境，会很容易滚落下去，很难控制。所以每一次尝试，都是为下一次作铺垫，不要认为失败就是无用功。</p><p><strong>5、调整心态</strong>（找准目标）</p><p>如果你学这个只是为了找工作，那么你一定会很痛苦。为了以后不再工作而工作，为了以后享福而选择现在吃苦（为了不再吃苦而吃苦），为了将来而牺牲现在；这种矛盾的做法，并且大部分人实现不了财务自由，如果你只靠出卖自己的时间换来金钱的话。</p><p>你想得又得不到，或追赶不上前面的事物，你会处于十分焦虑的状态。你真想财务自由，那么就要垄断其他人的时间，给自己带来利益（用金钱换他们的时间，创造价值收入囊中），或者搭上顺风车。</p><p>但我不一样，我写这个，并不奢求得到回报，因为我写这个同时，我就很满足了。</p><p>但也不要担忧，如果企业家全都使用机器人或者雇很少的人，短时间的确能够让利润增加，因为减少了给员工那一项的支出；但是员工既是生产者也是消费者，如果他们没有时间买或者没有钱买，就算降低商品的价格，但为了有利润可赚，员工的工资也会降，那就更没有钱买，继续降低商品价格...如此反复，就倒闭了；所以他们是不会让穷人更穷的。</p><p>（我只是安慰你，这些玩意早被研究透了，说不定命运都被安排的明明白白）</p><p><strong>6、相信自己</strong></p><p>可你也与我有着同一样的感受，为什么这些大佬如此牛逼，而自己什么都看不懂，不能理解，沮丧睡不着觉。我觉得这不是你的问题，而是每个人的必经之路。希望你能够坚持下来，即使在人生最黑暗的时候也能与本心融为一体，认同自己，一起冲向光明；最后祝你学业有成，找个好饭碗。</p><p><strong>7、选择城市</strong></p><p>之前聊天时，问到了这个问题：去大城市还是小城市发展？然后又说小城市容不下灵魂、大城市容不下肉身。其实我都没有工作，村里人都知道我是游民，我给不了什么实质性的意见。</p><p>哈哈，没关系，任何一个选择都有得有失，你看看代价与风险是否自己能够承受：是接受安稳，被人看扁；还是避开喧嚣之地，舍命一拼，打下一片未来；就看你怎么选了。</p><p>说到底，被人欺，与老不老实无关，而是与实力相关；假如你不讨喜，没有什么朋友，与他人的联系几乎没有，有你没你一个样，未来也不可期；你无法变现自己的价值，别人凭什么要帮你，给你留一点蛋糕？另外一点，别人也无法以你为桥，认识更多有价值的人，那么纯粹是浪费时间。</p><p>当出现不是让所有人都满意的结果时，别人权衡利弊后觉得你很好欺负，得罪你的代价可以承受，你没有价值，削去你的利益，事卡着不给你办，或者祸水东引，反正你也掀不起大浪。</p><p>实力不够，人间处处是地狱。不想融入阻扰了别人利益，被排外，没有晋升的机会。你佯装融入，等你实力终于够了，你也已经同化成其中一员，将曾经的憋屈发泄，迫害如同当年的像你一样的人，十分地爽，开始心安理得，阻扰那些想要发声的人，觉得凭什么我受而你们不用受，心理不平衡，主动维护旧有秩序。</p><p><strong>8、没有绝对正确的理论</strong></p><p>给出一个貌似符合常理的结论，有人举出反例，然后结论被推翻，再重新给出符合此反例的新的结论，不停周而复始...</p><p>如果这个结论目前还未被推翻，就暂时当作正确的吧，不需要怀疑一切，那样会很累的；我的知识体系到处东拼西凑，别人说什么如果验证不出来，就分不清真假，只能暂时当成对的。</p><h2 id="typora-软件使用">1.4 Typora 软件使用</h2><p>简洁、功能强大、实时预览的 md 编辑器。</p><h3 id="下载与安装">1.4.1 下载与安装</h3><p>下载地址：<a href="https://www.typora.io">https://www.typora.io</a></p><p>往下翻，点击 Windows（我的是 Windows 系统 64 位），点击 DonwloadBeta（x64），就会自动下载；</p><figure><img src="https://s2.loli.net/2022/04/23/vgrTx8u7R2FOVUD.png" alt="Typora 下载"><figcaption aria-hidden="true">Typora 下载</figcaption></figure><figure><img src="https://s2.loli.net/2022/04/23/8UVisvOaqYZx9LT.png" alt="目前 Typora 网站已访问不了"><figcaption aria-hidden="true">目前 Typora 网站已访问不了</figcaption></figure><p>双击下载好的 .exe，</p><figure><img src="https://s2.loli.net/2022/04/23/wboODYk1vLh3tAd.png" alt="Typora 安装界面"><figcaption aria-hidden="true">Typora 安装界面</figcaption></figure><p>指定安装位置，</p><figure><img src="https://s2.loli.net/2022/04/23/BpMjPLrACKWfTkI.png" alt="让电脑上所有用户共享此应用"><figcaption aria-hidden="true">让电脑上所有用户共享此应用</figcaption></figure><p>下一步 next，</p><figure><img src="https://s2.loli.net/2022/04/23/T1LbQk3WpEg9OMK.png" alt="指定安装目录"><figcaption aria-hidden="true">指定安装目录</figcaption></figure><p>选中复选框代表创建桌面快捷方式。</p><h3 id="如何创建-markdown-文件">1.4.2 如何创建 Markdown 文件</h3><p>创建以 .md 结尾的文件，如test.md，鼠标右键新建/文本文档，双击打开发现怎么还是记事本？</p><figure><img src="https://s2.loli.net/2022/04/23/jCGgFhSmf9BOabP.png" alt="记事本"><figcaption aria-hidden="true">记事本</figcaption></figure><p>打开文件资源管理器，把文件扩展名和隐藏的项目打上对勾，就可以看到隐藏的后缀和文件夹如AppData；</p><figure><img src="https://s2.loli.net/2022/04/23/TfGSN18zxAJKLyl.png" alt="被隐藏的文件扩展名"><figcaption aria-hidden="true">被隐藏的文件扩展名</figcaption></figure><p>此时刚刚创建的文件显露真身，原来还是 txt 文件；右键重命名，把 .txt去掉，再双击点进去。</p><figure><img src="https://s2.loli.net/2022/04/23/MBOFWSqbRuc851T.png" alt="显示的文件扩展名 .txt"><figcaption aria-hidden="true">显示的文件扩展名 .txt</figcaption></figure><h3 id="常用的-markdown-语法">1.4.3 常用的 Markdown 语法</h3><p>此软件使用的是 Markdown语法，一种纯文本格式的轻量级标记语言。通过简单的标记语法,它可以使普通文本内容具有一定的格式。</p><p>md 语法的出现不是为了替代 html，而是更方便书写。如果让我写那么多的&lt;&gt;，不停思索如何嵌套，写一大堆长长的 css，我会疯掉的。</p><p>这款软件它可以你更加关注内容，而不是注意怎么摆弄格式。Word是边写边在上面的边栏调字体大小、颜色、格式，很不方便。</p><p>内容如下：</p><ul><li>字体格式：如标题、斜体、加粗</li><li>跳转链接：如超链接与图片</li><li>内容排列：如表格、有序无序列表、各种图表、分割线</li></ul><p><strong>标题</strong></p><p>一个 # + 空格，跟上标题内容即可。（Ctrl + 1是一级标题，以此类推）</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex"># 我是什么人## 我是第2种人<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一个 # 是一级标题，两个 # 是二级标题，依此类推，直到 6级标题。（越来越小）</p><p><strong>复选框</strong></p><p>一个减号 + 空格 + [ ] + 空格</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">- [ ] 锻炼<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul class="task-list"><li><input type="checkbox" disabled="">锻炼，可以点击就能打上对勾。</li></ul><p><strong>粗、斜、斜加粗等字体</strong></p><p>1、被两个星号包裹的字自动变粗（Ctrl + B）；</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">**我是粗**<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>我是粗</strong></p><p>2、被一个星号包裹的字是斜体（Ctrl + i）；</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">*我是斜*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>我是斜</em></p><p>3、被 3 个星号包裹的字是粗斜；</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">***粗斜体***<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><em>粗斜体</em></strong></p><p>4、Tab 上面有一个键，按住 Shift，再按住它，可以打出 ~。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">~~废弃~~<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><del>废弃</del></p><p><strong>引用</strong></p><p>大于号 + 空格 + 内容</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">&gt; 摘抄自大文豪张三的一句话<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>摘抄自大文豪张三的一句话</p></blockquote><p><strong>键盘风格</strong></p><p>被成对的 kbd 标签的内容。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">&lt;kbd&gt;ctrl&lt;/kbd&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><kbd>ctrl</kbd>+<kbd>c</kbd>是复制</p><p><strong>超链接和图片</strong></p><p>这些地址就是网址。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">![图片名](图片地址)[超链接名](超链接地址)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="http://www.baidu.com">百度</a>（右击打开链接或按住Ctrl，再单击此链接）</p><p><strong>表格</strong></p><p>Ctrl + T 快捷键创建表格，Ctrl + Enter 添加新行，Shift + Ctrl + Del删除一行。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">名称|性别|生日--|--|--赵三|男|1213.2.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr class="header"><th>名称</th><th>性别</th><th>生日</th></tr></thead><tbody><tr class="odd"><td>赵三</td><td>男</td><td>1213.2.1</td></tr></tbody></table><p><strong>代码</strong></p><p>单行使用 `，多行三个 `，指定代码语言：</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">`单行代码````java多行代码``````javascript//实际写法var foo = 'bar';```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>单行代码</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">多行代码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//实际写法var foo = 'bar';</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>列表</strong></p><p>1、无序列表</p><p>单个星号 + 空格 + 内容</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">* 语文* 数学* 英语<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>语文</li><li>数学</li><li>英语</li></ul><p>2、有序列表</p><p>数字. + 空格 + 内容</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">1. 起床2. 刷牙3. 吃饭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol type="1"><li>起床</li><li>刷牙</li><li>吃饭</li></ol><p>3、列表套列表</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">* 起床      * 睁开眼睛      * 我是沙福林* 刷牙<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>起床<ul><li>睁开眼睛</li><li>我是沙福林</li></ul></li><li>刷牙</li></ul><p><strong>大纲</strong></p><p>可以把标题列出来，即 # 后的内容。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">[TOC]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>分割线</strong></p><p>三个减号+回车（Enter）</p><hr><p>以下内容不需要了解，几乎不用，有很多网站不支持这种语法。</p><p><strong>甘特图</strong></p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">```mermaidgantt        dateFormat  YYYY-MM-DD        title 这是标题，上面是日期格式年月日        section 计划表        准备行李（已完成）               :done,    des1, 2014-01-06,2014-01-08        买机票（进行中）               :active,  des2, 2014-01-09, 3d        拍照（计划）               :         des3, after des2, 5d```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">gantt</span>        dateFormat  YYYY-MM-DD        title 这是标题，上面是日期格式年月日        section 计划表        准备行李（已完成）               <span class="token operator">:</span>done,    des1, 2014-01-06,2014-01-08        买机票（进行中）               <span class="token operator">:</span>active,  des2, 2014-01-09, 3d        拍照（计划）               <span class="token operator">:</span>         des3, after des2, 5d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>UML图表</strong></p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">```mermaidsequenceDiagram张三-&gt;&gt; 李四: 你好！李四, 最近怎么样?李四--&gt;&gt;王五: 你最近怎么样，王五？李四--x 张三: 我很好，谢谢!李四-x 王五: 我很好，谢谢!李四--&gt;&gt;张三: 打量着王五...张三-&gt;&gt;王五: 很好... 王五, 你怎么样?王五-&gt;&gt;张三: 不好```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">sequenceDiagram</span>张三<span class="token arrow operator">-&gt;&gt;</span> 李四<span class="token operator">:</span> 你好！李四, 最近怎么样?李四<span class="token arrow operator">--&gt;&gt;</span>王五<span class="token operator">:</span> 你最近怎么样，王五？李四<span class="token arrow operator">--x</span> 张三<span class="token operator">:</span> 我很好，谢谢!李四<span class="token arrow operator">-x</span> 王五<span class="token operator">:</span> 我很好，谢谢!李四<span class="token arrow operator">--&gt;&gt;</span>张三<span class="token operator">:</span> 打量着王五...张三<span class="token arrow operator">-&gt;&gt;</span>王五<span class="token operator">:</span> 很好... 王五, 你怎么样?王五<span class="token arrow operator">-&gt;&gt;</span>张三<span class="token operator">:</span> 不好<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>流程图</strong></p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">```mermaidgraph LRA[长方形] -- 链接 --&gt; B((圆))A --&gt; C(圆角长方形)B --&gt; D{菱形}C --&gt; D```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LRA<span class="token text string">[长方形]</span> <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span> <span class="token label property">链接</span> <span class="token arrow operator">--&gt;</span></span> B<span class="token text string">((圆))</span>A <span class="token arrow operator">--&gt;</span> C<span class="token text string">(圆角长方形)</span>B <span class="token arrow operator">--&gt;</span> D<span class="token text string">{菱形}</span>C <span class="token arrow operator">--&gt;</span> D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用的设置">1.4.4 常用的设置</h3><p>内容如下：</p><ul><li>常用的快捷键：如加粗、标题、表格等</li><li>更改风格：如字体颜色、样式，显示代码行号</li><li>将笔记导入导出</li><li>支持数学符号</li></ul><p>因为都是中文，只讲一点点，剩下的自己在菜单栏上研究吧。</p><p><strong>快捷键</strong></p><p>直接点击菜单栏，查看快捷方式，如点击视图、段落，上面显示了快捷方式更方便触发；或者按住Alt + O，即可打开格式：如 Ctrl + B 是加粗的快捷键，Ctrl + \是清除样式，Ctrl + T 是创建表格的快捷方式，Ctrl + /是查看源代码，Windows + 句号是表情符号、视图可以放大、缩小...</p><figure><img src="https://s2.loli.net/2022/04/23/xj4LVWfCd8GJhya.png" alt="常见的快捷键"><figcaption aria-hidden="true">常见的快捷键</figcaption></figure><p>段落/YAML Front Matter（前言），有些博客需要这些属性值获取信息。</p><p><strong>主题</strong></p><p>Alt + T 选择自己想要的主题。</p><p><strong>偏好设置</strong></p><p>Ctrl + ,</p><figure><img src="https://s2.loli.net/2022/04/23/7Azmlu26Iq1hRWU.png" alt="偏好设置"><figcaption aria-hidden="true">偏好设置</figcaption></figure><p>如通用的自动保存选上，每次修改自动保存，不用按下 Ctrl + S。</p><p>高级模式选中调试模式，关闭文件后重新打开，右键检查元素（或 Shift +F12），会发现此软件就是一个浏览器，（浏览器按住 F12键，会打开开发者模式，与这差不多）我们看到的笔记，实际是 md语法被解析后生成的 HTML 标签与 CSS 相配合展现的页面；现在你再看看 md语法到底有多方便了吧，这些标签要你自己写该多麻烦。</p><p><strong>代码块显示行号</strong></p><p>Markdown，将显示行号复选框勾选。</p><figure><img src="https://s2.loli.net/2022/04/23/brL3VMOp5lYkSTz.png" alt="代码块显示行号"><figcaption aria-hidden="true">代码块显示行号</figcaption></figure><pre class="line-numbers language-java" data-language="java"><code class="language-java">你看左边的<span class="token number">1</span>你看左边的<span class="token number">2</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>更换主题</strong></p><p>学了 CSS 后，再来。</p><figure><img src="https://s2.loli.net/2022/04/23/3RFCpSY2Zu4mhU9.png" alt="自定义主题"><figcaption aria-hidden="true">自定义主题</figcaption></figure><p>之前创建 md 文件时，给隐藏的项目了打上对勾，代表显示隐藏的项目。其中AppData 就是隐藏的项目，一般存放软件的配置文件。</p><p><code>C:\Users\你的用户名\AppData\Roaming\Typora\themes</code>下的几个 CSS 文件代表着不同的主题，如果不满意页面样式，可以修改对应主题CSS（记得留个备份）或自定义 CSS，重新打开笔记后，可以在主题中看到你的CSS，随便更换。</p><figure><img src="https://s2.loli.net/2022/04/23/U2VpxT7gjMSblfr.png" alt="选择主题"><figcaption aria-hidden="true">选择主题</figcaption></figure><p>补丁：蓝色背景下的 gif 动图字体会模糊，必须在纯色红或白色背景下，gif动图字体才会清晰，所以取消动图的使用。</p><figure><img src="https://s2.loli.net/2022/04/23/KgfDFMRZL8i4GbX.png" alt="不兼容 gif"><figcaption aria-hidden="true">不兼容 gif</figcaption></figure><p><strong>将笔记转成其他类型的文件</strong></p><figure><img src="https://s2.loli.net/2022/04/23/8CSAQgvRLEwdmna.png" alt="导出"><figcaption aria-hidden="true">导出</figcaption></figure><p>文件/导出，</p><p>PDF、HTML 等类型的都行，（without styles 是不带样式即没有 CSS修饰，自己试试就知道区别了)</p><p>或者打开浏览器，使用打印功能（Ctrl + P），无渲染与解析，很差劲。</p><p><strong>支持数学公式</strong></p><p>按下 <code>Ctrl + ,</code> 快捷键打开偏好设置/Markdown/Markdown扩展语法/勾选内联公式，再用 <code>$某字母$</code>显示常用的数学符号。（当内联公式过多，可以考虑使用<code>$$某字母$$</code>） </p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">$$\in$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p></p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.09ex" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewBox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g></g></g></svg></mjx-container></span></p><p>常用的的数学符号写法：</p><ul><li>作者：<a href="https://blog.csdn.net/happyday_d">DaneAI</a>，<a href="https://blog.csdn.net/happyday_d/article/details/83715440">https://blog.csdn.net/happyday_d/article/details/83715440</a></li><li>作者：<a href="https://blog.csdn.net/qq_38228254">韩湘</a>，<a href="https://blog.csdn.net/qq_38228254/article/details/78515800">https://blog.csdn.net/qq_38228254/article/details/78515800</a></li><li>作者：<a href="https://blog.csdn.net/weixin_43444930">白白旧维</a>，<a href="https://www.cnblogs.com/1024th/p/11623258.html">https://www.cnblogs.com/1024th/p/11623258.html</a></li><li>作者：<a href="https://home.cnblogs.com/u/1024th/">樱花赞</a>，<a href="https://blog.csdn.net/weixin_43444930/article/details/119791074">https://blog.csdn.net/weixin_43444930/article/details/119791074</a></li></ul><p><strong>恢复未保存的文件</strong></p><p>打开偏好设置，点击恢复未保存的草稿。</p><figure><img src="https://s2.loli.net/2022/03/14/GyEuv5d1MKLcHYa.png" alt="恢复未保存的草稿"><figcaption aria-hidden="true">恢复未保存的草稿</figcaption></figure><h3 id="官网打不开的原因">1.4.5 官网打不开的原因</h3><p>它升级到了 1.0 版本了！收费了。</p><p>不要惊讶，能够开源一定要有其它稳定的收入作为支撑；否则没钱，功能不会太强大，作者都快饿死了，当然没有功夫贡献自己的力量，进行频繁更新，跟上时代。</p><p>Typora 代理商：<a href="https://typoraio.cn/">https://typoraio.cn/</a></p><p>最后一个免费版，分享者：王炳明，<a href="https://wwe.lanzoui.com/i8PP3wzahrg">https://wwe.lanzoui.com/i8PP3wzahrg</a></p><p>其实从来都没有说过免费，之前只是 Beta测试版，类似于游戏中的公测吧，也不知道免费版什么时候就“关服”了。</p><p>作为一个即时渲染，所见即所得，按下 Ctrl + /就可以看源码，简洁实用，早已习惯，离不开它了。其它的软件花里胡哨，什么功能都往里面加，试图想代替其它同类型的软件，结果搞得不伦不类，十分臃肿。</p><p>像其它 md编辑器，大部分都是双栏丑丑的大屏幕，十分占空间，并且滚动内容时，左右视图不一致，还得分心同时看两边，真的是种折磨。应该让软件配合人，而不是让人记住软件的用法，主次关系要分清；真希望以后能够统一，有个规范，其它软件实现就可以了。</p><p>如果下载的是收费版，记得打开偏好设置/通用，将 Typora服务器使用国内服务器复选框勾选一下，怕连不上服务器，激活不了此软件。</p><h3 id="自动上传图片">1.4.6 自动上传图片</h3><p>你如果使用久了，经常在网上发布文章，一定会遇见这个问题。</p><p>把写好的 md文件，复制粘贴到博客园中。结果你发现图片加载不出来，一看地址，<code>C:\Users\自己的用户名\AppData\Roaming\Typora\typora-user-images\xxx</code>。</p><p>这才知道原来图片被保存到了本地中，也难怪网上读取不到。那么你发现了，将图片直接拖拽到博客园的编辑页面，会自动生成网络上的URL，可以在全网都能访问到。</p><p>但是时间长了，一张、一张拖拽也不是事啊。这时就需要图床替我们自动保存图片。下面介绍两种方式；</p><p><strong>命令行上传图片</strong></p><p>打开偏好设置/图像，</p><figure><img src="https://s2.loli.net/2022/03/14/FXS7oTtjIQefqsL.png" alt="上传图片"><figcaption aria-hidden="true">上传图片</figcaption></figure><p>意思是当本地图片被你拖进 md 文件中，会自动上传图片。</p><p>点击下载或更新，下好了后会出现打开配置文件按钮，点击弹出 JSON文件，将以下代码粘贴到这个文件中。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"picBed"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"uploader"</span><span class="token operator">:</span> <span class="token string">"smms"</span><span class="token punctuation">,</span><span class="token comment">//代表当前的默认上传图床为 SM.MS</span>    <span class="token property">"smms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"LFJLSJljlfaoFJOLAF"</span><span class="token comment">//这里面的token换成自己生成的token，一定要换</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"picgoPlugins"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//为插件预留</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个 token 如何填？</p><p>打开 SM.MS 图床：<a href="https://sm.ms/register">https://sm.ms/register</a></p><p>自己注册账号后，再登陆：<a href="https://sm.ms/login">https://sm.ms/login</a></p><p>点击 User/Dashboard/API Token，进入：<a href="https://sm.ms/home/apitoken">https://sm.ms/home/apitoken</a></p><p>点击 Generate Secret Token 按钮生成 token，将其填入 JSON 文件。</p><figure><img src="https://s2.loli.net/2022/04/23/waFKojW8vVTbPrX.png" alt="smms Token"><figcaption aria-hidden="true">smms Token</figcaption></figure><p>填完后，保存 JSON 文件。将图片拖拽 md 文件时，如有 Uploading字样，就成功了。</p><p>在 Pictures 可以管理或删除这些文件，可惜根本没法根据 URL找到图片，时间长了，定位删除图片还是不方便。</p><p>说实话我很担心，手贱全删了，导致 md文件图片全部失效，还是放在博客园中保险些，真可惜我的硬盘不能作为服务器。</p><p><strong>PicGo app 上传图片</strong></p><p>下载地址：<a href="https://github.com/Molunerfinn/PicGo/tags">https://github.com/Molunerfinn/PicGo/tags</a></p><p>选择一个版本点击，下翻，在 Assets 中选择 exe文件下载，安装后直接运行。</p><p>但无论怎么双击就是不会显示窗口，看看电脑右下角，点击蓝色图标：<img src="https://s2.loli.net/2022/04/09/Wk8ix9tfAbFEDZr.png" alt="Windows 系统想要运行需要双击右下角的蓝色图标"></p><p>图片上传区：图片上传 - SM.MS</p><p>图床设置/SM.MS，填入 Token 后确定，设为默认图床。</p><p>Typora 软件，偏好/图像，按图设置</p><figure><img src="https://s2.loli.net/2022/04/09/shrWV5Rcq7YQePC.png" alt="上传服务选择 PicGO app"><figcaption aria-hidden="true">上传服务选择 PicGO app</figcaption></figure><p>在 PicGo 的安装目录下有个 PicGo.exe，PicGo 路径就选择此 exe的绝对路径。</p><h2 id="常用的-dos-命令">1.5 常用的 DOS 命令</h2><p>内容导视：</p><ul><li><p>打开 DOS 窗口的几种方式</p></li><li><p>进入目录内：使用绝对路径与相对路径演示</p></li><li><p>常见的 DOS 命令</p></li></ul><p>写出来的 Java代码，需要在命令窗口中执行编译与运行命令，需要知道如何打开此黑窗口（DiskOperating System）。</p><h3 id="打开-dos-窗口的几种方式">1.5.1 打开 DOS 窗口的几种方式</h3><ol type="1"><li>屏幕最左下方，右击 <strong>Windows图标</strong>，点击 WindowsPowerShell，管理员权限更高，可以修改系统关键文件。</li><li>点击 Windows 图标，往下翻在所有程序中找到 Windows系统，<strong>点击命令提示符</strong>。（可以右键以管理员权限运行）</li><li><strong>Windows + R</strong> 输入 cmd回车。（<mark>最常用</mark>）</li><li>打开文件夹资源管理器，在地址栏输入 cmd回车。（<mark>其次常用</mark>）</li><li><strong>按住 Shift 别松，鼠标右击</strong>，在此处打开PowerShell（S）。</li></ol><h3 id="进入目录内使用绝对路径与相对路径演示">1.5.2进入目录内：使用绝对路径与相对路径演示</h3><blockquote><p>下面说的目录和文件夹是一个意思。 输入命令后按下回车才能执行，回车键是Enter。</p></blockquote><p>由于不是可视化界面，不能像之前一样，点到哪里就跳到哪个文件夹下，需要使用<strong>cd 命令</strong>，跳转到某路径下。</p><p>路径分为<mark>绝对路径</mark>和<mark>相对路径</mark>。</p><p>打开文件资源管理器（Windows +E），随便打开某盘下的文件夹，可以看到地址栏上的路径。假如以 D: 开头，D:称为盘符，显示的路径称为<strong>绝对路径</strong>，<code>D:\</code> 称为D 盘的根目录（最上一级，不能再上了）。</p><p><strong>绝对路径</strong>：从盘符开始的路径，能够完整的描述文件位置的路径就是绝对路径。（唯一确定资源位置）如路径 <code>D:\cqh_environment</code>，指向 D 盘下的<code>cqh_environment</code> 文件。</p><p>而<strong>相对路径</strong>，是以当前路径作为出发点的路径，比如进入当前路径的a 目录。</p><p>首先打开 DOS 窗口，切换盘符。</p><p>例：想要到 E 盘下，就输入 <code>E:</code> 后回车，输入<code>dir</code>回车查看当前路径下有那些子文件（没有就在该盘手动创建文件夹），使用<code>cd 文件夹名称</code> 进入此文件夹。</p><figure><img src="https://s2.loli.net/2022/04/23/lPRM3boTUG6IO85.png" alt="cd 命令"><figcaption aria-hidden="true">cd 命令</figcaption></figure><p>使用 <code>cd a</code> 时，单看这个a，鬼才知道这是哪个地方的文件夹，在哪里才能找到它，需要结合当前路径E:&nbsp;才能知道，原来是要到 E 盘下去找 a，那么这个 a 就是相对路径。</p><p>可以这么理解，我说北京市某某地址的小区，你马上理解了要在哪去找，这是绝对路径；但我说我家旁边的一家店，你必须先知道我家在哪，再根据我家的位置确定这家店的位置，这就是相对路径。</p><hr><p><code>..</code>：上级目录</p><p><code>.</code>：当前目录</p><p>现在回到上级目录，使用<code>cd ..</code>，现在演示一下绝对路径，<code>cd 绝对路径</code>，使用绝对路径时，必须是当前所在盘下的路径。</p><p>注意：<mark>路径必须存在</mark>，你需要把目录创建出来，才能使用 cd命令进去。</p><figure><img src="https://s2.loli.net/2022/04/23/uCz76JTDKiM1PYn.png" alt="返回上级目录"><figcaption aria-hidden="true">返回上级目录</figcaption></figure><p>如果使用相对路径，先切换到根目录，再执行<code>cd a\b\c\d</code>。</p><p>怎么回到根目录？使用 <code>cd E:\</code> 吗？或者<code>cd ..\..\..\..</code>?</p><p>还有一种简单的方式 <code>cd \</code> 即可</p><hr><p>一个 <code>cd ..</code> 是回到上级目录， <code>cd ..\..</code>是回到上上级目录。</p><hr><p>若文件名太长记不住，可以打出首字母，再按下 Tab键，也可上下键切换已经输入过的命令，或者你直接将文件拖入这个黑窗口，地址就出来了。</p><p>通过刚才的例子，发现跳转路径时，必须是当前盘下的路径，那么还不如使用相对路径，反正盘名写其它盘也没用。解决办法：加个参数/d 即可。</p><p>例：现在在 C 盘下，我要直接到 <code>E:\a\b\c\d</code>，输入<code>cd /d E:\a\b\c\d</code> 即可。</p><figure><img src="https://s2.loli.net/2022/04/23/PkW6SsAqno9XNGY.png" alt="更换盘目录"><figcaption aria-hidden="true">更换盘目录</figcaption></figure><h3 id="常用的-dos-命令-1">1.5.3 常用的 DOS 命令</h3><p>内容如下：</p><ul><li>进入目录、返回上级目录</li><li>打开常用的软件</li><li>清空屏幕</li><li>新建、删除文件</li><li>查看系统变量</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#切换盘符 C:</span><span class="token comment">#查看当前目录下的文件 dir</span><span class="token comment">#改变目录 cd /d C:\a\b\c</span><span class="token comment">#返回上一级 cd..</span><span class="token comment">#直接回到根目录 cd \</span><span class="token comment">#进入子目录 cd 文件夹名称</span><span class="token comment">#清空屏幕 cls</span><span class="token comment">#退出 exit</span><span class="token comment">#查看ip ipconfig</span><span class="token comment">#查看ip详细 ipconfig/all</span><span class="token comment">#打开软件</span><span class="token comment">#打开计算器 calc</span><span class="token comment">#打开绘图 mspaint</span><span class="token comment">#打开记事本 notepad</span><span class="token comment">#查看网络 ping www.baidu.com</span><span class="token comment">#网络诊断 ping www.baidu.com -t</span><span class="token comment">#终止 Ctrl + C</span><span class="token comment">#新建文件夹 md 文件夹名</span><span class="token comment">#新建文件 cd&gt;文件名.后缀</span><span class="token comment">#删除文件 del 文件名.后缀（可带*，*表示任意，小心别把所有东西删了）</span><span class="token comment">#删除文件夹 rd 文件夹名</span><span class="token comment">#打开文件 文件名.后缀</span><span class="token comment">#打包</span><span class="token comment">#把当前的路径下所有打包进a.jar</span>jar cvf a.jar <span class="token builtin class-name">.</span><span class="token comment">#把当前的路径下所有打包进b.war</span>jar cvf b.war <span class="token builtin class-name">.</span><span class="token comment">#可以使用绝对路径</span>jar cvf E:<span class="token punctuation">\</span>cqh<span class="token punctuation">\</span>b.war <span class="token builtin class-name">.</span><span class="token comment">#查看系统变量的值,如第一个是C:\Windows</span><span class="token builtin class-name">echo</span> %SystemRoot%<span class="token builtin class-name">echo</span> %ProgramFiles%<span class="token builtin class-name">echo</span> %Path%<span class="token comment">#咳咳，你打开环境变量（网上搜，下节也有），左边是变量，右边是值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="joplin-使用">1.6 Joplin 使用</h2><p>与其说是 Markdown编辑器，倒不如说它是一个同步小云盘、整理目录的大师，不与 Typora冲突。整个页面布局（左中上下）：目录树、笔记列表、笔记标题、笔记正文。</p><p>由于可以设置中文，只讲一点点。</p><p>菜单栏的 Tools/Options/General，右边的Language，下拉列表，选择中文（简体）。</p><p>Alt + ？打开对应的菜单栏：</p><hr><p>F：文件 E：编辑 V：视图 G：跳转 B：笔记笔记本 N：笔记 T：工具H：帮助</p><hr><p>Ctrl + Q：退出。</p><h3 id="下载地址">1.6.1 下载地址</h3><p>官网：<a href="https://joplinapp.org">https://joplinapp.org</a></p><p>github下载地址：<a href="https://github.com/laurent22/joplin/releases">https://github.com/laurent22/joplin/releases</a></p><p>往下翻，选择一个版本，点击 Assets 选择 exe 文件下载。</p><h3 id="常用设置">1.6.2 常用设置</h3><p><strong>导入 md 文件</strong></p><p>文件/导入，选择导入的是 Markdown文件还是目录。（不要选带文章前言的，导出时会自动在文章前面加标题、创建和修改日期、时间，即YAML Front matter）</p><p><strong>把文件同步到本地</strong></p><p>工具/选项，同步，同步目标设为 Filesystem，设置同步目录。（当然你也可以花钱存云）</p><p><strong>给同步目标上的备份文件加密</strong></p><p>工具/选项，加密，启动加密；这样的话，如果把同步文件上传到云端，也不怕别人偷看。</p><hr><p>如果删除了同步目标的文件，为了安全（故障保护默认开启），不会删除本地文件。</p><p>如果删除了本地文件，同步时间一到，同步目标的文件也会被删除。可以趁着这时间差，从同步目标导入数据到本地。</p><p>同步/显示高级选项，自己重新上传数据到同步目标或删除本地数据并从同步目标导入数据</p><hr><p>如果两个终端数据不一样（同时修改一个文件，为不同内容），会把冲突的文件移到新创建的"冲突"笔记本中，等你处理。</p><p><strong>使用外部 md 编辑器</strong></p><p>使用自己的 Markdown编辑器：工具/选项/通用选项，右边的文本编辑器命令，选一个能够打开 md文件的 exe 命令，如 Typora.exe。（你还记得此软件的安装目录吗？）</p><p>在 Joplin 上任意选一个笔记，按下 Ctrl +E，自动转用外部编辑器编写文件。</p><p><strong>自定义笔记本图标</strong></p><p>笔记本右击/编辑，图标/Select emoji，选一个表情。</p><p><strong>网页剪藏器</strong></p><p>知识太多了，短时间内是看不完的，如果收藏，也有链接失效的风险，需要将文章内容复制下来。</p><p>工具：Chrome 浏览器。</p><p>由于插件市场打不开，点击：<a href="https://www.extfans.com/">https://www.extfans.com/</a></p><p>搜索 Joplin WebClipper，需要关注公众号，获取验证码后下载。下载后解压，里面有个 crx文件，打开谷歌浏览器，地址栏输入：chrome://extensions/</p><p>把 crx 文件直接拖入此页面，添加扩展程序</p><figure><img src="https://s2.loli.net/2022/04/09/MwmN2VxK58cqhYL.png" alt="扩展程序"><figcaption aria-hidden="true">扩展程序</figcaption></figure><p>Joplin 软件，工具/选项，网页剪辑器，启动网页剪辑器。</p><p>使用：</p><figure><img src="https://s2.loli.net/2022/04/09/xqWK95JUHmfcnpX.png" alt="网页剪藏"><figcaption aria-hidden="true">网页剪藏</figcaption></figure><p>Clip simplified page：简化后的页面</p><p>Clip complete page：完整页面</p><p>In notebook：保存在哪个笔记本</p><p>Title：文件名</p><p><strong>同步到手机</strong></p><p>把自己电脑当作服务器，同步到手机，教程：<a href="https://lightzhan.xyz/index.php/2020/11/15/joplin-webdav/">https://lightzhan.xyz/index.php/2020/11/15/joplin-webdav/</a></p><p>作者：lightzhan，密码：h3mu，WebDAV 小秘：<a href="https://lightzhan.lanzoui.com/b015wjsri">https://lightzhan.lanzoui.com/b015wjsri</a></p><figure><img src="https://s2.loli.net/2022/04/09/iAvsBPugMqKSHLQ.png" alt="WebDAV 小秘"><figcaption aria-hidden="true">WebDAV 小秘</figcaption></figure><p>打开 DOS 窗口，输入 ipconfig 命令，IPv4地址对应的就是主机地址；用户名与密码自己设置。</p><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">无线局域网适配器 WLAN<span class="token punctuation">:</span>   连接特定的 DNS 后缀 . . . . . . . <span class="token punctuation">:</span>   本地链接 IPv6 地址. . . . . . . . <span class="token punctuation">:</span> fe10<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">209</span>   IPv4 地址 . . . . . . . . . . . . <span class="token punctuation">:</span> <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.1</span>   子网掩码  . . . . . . . . . . . . <span class="token punctuation">:</span> <span class="token number">289.2</span><span class="token number">.52</span><span class="token number">.2</span>   默认网关. . . . . . . . . . . . . <span class="token punctuation">:</span> fu81<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">22</span>l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>手机上自己搜索 Joplin app吧，因为谷歌你们可能访问不了，我总不能把如何翻墙写在这吧。</p><figure><img src="https://s2.loli.net/2022/04/09/TAvnR3yqb47tdPm.png" alt="手机同步配置"><figcaption aria-hidden="true">手机同步配置</figcaption></figure><figure><img src="https://s2.loli.net/2022/04/09/sInLw32WZVMJGi1.png" alt="输入 URL"><figcaption aria-hidden="true">输入 URL</figcaption></figure><p>WebDAV URL：http://主机地址:端口号</p><p>填入自己电脑上设置的用户名与密码，然后检查同步配置，如果显示“成功！同步配置看起来没问题。”就OK。</p><p>如果成功后依然没有开始同步，一直转圈，退出软件重新进入。</p><p><strong>扩展语法</strong></p><p>打开扩展语法，在工具/选项/Markdown，根据需要勾选，详细请看：<a href="https://lightzhan.xyz/index.php/2020/03/31/joplin-extension-usage/">https://lightzhan.xyz/index.php/2020/03/31/joplin-extension-usage/</a></p><p>如勾选启用 typographer支持，让我试下：使用<code>(c)</code>，©著作权所有人</p><h2 id="marktext-使用">1.7 MarkText 使用</h2><p>是 Typora 的同类型产品，开源免费，略微有些小 bug。</p><p>下载地址：<a href="https://marktext.app/">https://marktext.app/</a></p><p>有时候可能打不开，从 github 下载：<a href="https://github.com/marktext/marktext/tags">https://github.com/marktext/marktext/tags</a></p><p>选择版本后，Assets 下点击 exe 文件进行下载。</p><p>由于作者计划 v1.0.0以后支持其它语言（国际化），英语不好的，可以搜下汉化版。</p><p>如果 git 下载太慢：（慎用！！！）</p><p>作者：<a href="https://home.cnblogs.com/u/ziyue7575/">紫月java</a>，<a href="https://www.cnblogs.com/ziyue7575/p/14157952.html">https://www.cnblogs.com/ziyue7575/p/14157952.html</a></p><ul><li><p>安装用户脚本管理器：<a href="https://greasyfork.org/zh-CN/help/installing-user-scripts">https://greasyfork.org/zh-CN/help/installing-user-scripts</a></p></li><li><p>加速脚本：<a href="https://greasyfork.org/zh-CN/scripts/397419-fastgithub-%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AE-%E5%85%8B%E9%9A%86%E5%92%8C%E4%B8%8B%E8%BD%BD">https://greasyfork.org/zh-CN/scripts/397419-fastgithub-%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AE-%E5%85%8B%E9%9A%86%E5%92%8C%E4%B8%8B%E8%BD%BD</a></p><figure><img src="https://s2.loli.net/2022/04/09/Lfp5RcKoQEYuAy7.png" alt="添加新脚本"><figcaption aria-hidden="true">添加新脚本</figcaption></figure><p>将 js 文件拖入其中，刷新页面，效果如图：</p></li></ul><figure><img src="https://s2.loli.net/2022/04/10/vxqZDl7ebO6IKoL.png" alt="使用加速"><figcaption aria-hidden="true">使用加速</figcaption></figure><p>随便点击，开始下载吧。</p><p>英文 OK 的同学可以跳过以下内容...</p><hr><h3 id="编辑区域">1.7.1 编辑区域</h3><p><strong>查看源代码：Ctrl + E</strong></p><p><strong>整体布局</strong></p><figure><img src="https://s2.loli.net/2022/04/10/gkKYX3AGeqfNw28.png" alt="编辑区域"><figcaption aria-hidden="true">编辑区域</figcaption></figure><p>正上方是 md 文件的绝对路径；</p><p>左上角 A 是总字符个数；点击可以切换。</p><ul><li>Words：单词个数（一个汉字算一个单词）</li><li>Characters：可见字符个数</li><li>Paragraphs：段落个数</li></ul><p><strong>右键标签栏</strong></p><figure><img src="https://s2.loli.net/2022/04/10/4nlGS5CgtpUs3q1.png" alt="弹出的选项"><figcaption aria-hidden="true">弹出的选项</figcaption></figure><p>Close：关闭文件（未 Ctrl + S 保存会弹出提示）</p><p>Close others：关闭其它文件</p><p>Close saved tabs：关闭已保存的文件</p><p>Close all tabs：关闭所有文件</p><p>Rename：重命名文件</p><p>Copy path：复制文件的绝对路径</p><p>Show in folder：打开文件所在目录</p><p><strong>段落快捷操作</strong></p><p>当你每次移动光标时，当前段落对应的图标（最左边）就会显示，点击</p><figure><img src="https://s2.loli.net/2022/04/10/uodWe2zh1GfZsCQ.png" alt="段落快捷操作"><figcaption aria-hidden="true">段落快捷操作</figcaption></figure><p>Duplicate：向下复制当前段落</p><p>Turn Into：变成？</p><ul><li>Paragraph（Ctrl + 0）：段落</li><li>Header 1（Ctrl + 1）：h1 标题</li><li>Display Math（Alt + Ctrl + M）：内联公式块</li><li>HTML Block（Alt + Ctrl + J）：div 标签</li><li>Code Block（Alt + Ctrl + C）：代码块</li><li>Quote Block（Alt + Ctrl + Q）：引用</li><li>Order List（Alt + Ctrl + O）：有序列表</li><li>Bullet List（Alt + Ctrl + U）：无序列表</li><li>To-do List（Alt + Ctrl + X）：任务复选框</li></ul><p>New Paragraph：创建新的段落</p><p>Delete：删除当前段落</p><p><strong>选中文字</strong></p><figure><img src="https://s2.loli.net/2022/04/10/8gpyh2dRI3lqbVs.png" alt="格式变换"><figcaption aria-hidden="true">格式变换</figcaption></figure><p>从左至右依次是：粗（Ctrl + B）、斜（Ctrl + I）、下划线（Ctrl +U）、删除线（Ctrl + D）、高亮（Ctrl + H）、代码块（Ctrl +`）、内联公式（Ctrl + M）、超链接（Ctrl + L）、插入图片（Ctrl + Shift +I）、清除格式（Ctrl + Shift + R）</p><p><strong>插入表情</strong></p><p>Windows + 句号，或者 <code>:a:</code>，两个冒号跟一个字母</p><h3 id="偏好设置">1.7.2 偏好设置</h3><p>Ctrl + 逗号</p><p><strong>General</strong></p><p><strong>自动保存</strong></p><p>Auto Save：</p><ul><li>Automatically save document changes：更改时自动保存</li><li>Delay following document edit before automatically saving：延迟 ?ms后保存</li></ul><p><strong>更改菜单栏位置</strong></p><p>Window：</p><p>Title bar style：</p><ul><li>Custom：左上角</li><li>Native：正上方</li></ul><p><strong>Editor</strong></p><p><strong>字体样式</strong></p><p>Text editor settings：文本编辑设置</p><ul><li>Font size：字体大小</li><li>Line height：行距</li><li>Font family：字体样式</li><li>Maximum width of texteditor：编辑器最大宽度，单位有：ch、px、%，例：输入100px；输入错误会报红。</li></ul><p><strong>Markdown</strong></p><p><strong>支持上下标</strong></p><p>Markdown extensions：扩展语法</p><p>启用 Enable Pandoc-style superscript and subscript</p><ul><li><code>5^3^</code>：5<sup>3</sup></li><li><code>5~3~</code>：5<sub>3</sub></li></ul><p><strong>Spelling</strong></p><p>Enable spell checker：开启拼写检查</p><p>Default language for spell checker：检查器的默认语言</p><p><strong>Key Binding</strong></p><p><strong>更改操作的快捷键方式</strong></p><figure><img src="https://s2.loli.net/2022/04/10/4h3QWx2prdMOPen.png" alt="操作快捷方式"><figcaption aria-hidden="true">操作快捷方式</figcaption></figure><p>修改，重置，删除</p><p>每次修改后，需要翻到最下面保存</p><ul><li>Save：保存</li><li>Restore default key bindings：恢复默认快捷键</li></ul><h3 id="图片上传">1.7.3 图片上传</h3><p>偏好设置/Image,</p><figure><img src="https://s2.loli.net/2022/04/10/fsTA7yxPiUm632L.png" alt="图片上传"><figcaption aria-hidden="true">图片上传</figcaption></figure><p>Default action after an image is inserted from local folder orclipboard：插入图片后的操作（只支持 macOS 和 Windows 系统）</p><ul><li><p>Keep original location：保存在原位置</p></li><li><p>Copy image to designated relative assets or global localfolder：复制图片至指定位置（绝对或相对路径）</p></li><li><p>Upload image to cloud using selected uploader（must be configuredbelow）：上传至云端</p></li></ul><p>Global or relative image folder：指定图片保存的绝对路径</p><p>Prefer relative assets folder：...相对路径，开启后，图片会放在与 md文件的同级目录下</p><ul><li>Relative image folder name：目录名称，即图片会放在此目录下</li></ul><p>说一下历程吧。</p><p>之前不是使用 Typora 软件时下载了 <a href="https://github.com/Molunerfinn/PicGo/tags">PicGo app</a>嘛，但是提示检查不出来，说不存在；试着使用命令行方式吧（github方式将来会废弃），下拉列表切换为 Command line script，提示要安装PicGo-Core，于是先安装 <a href="https://nodejs.org/zh-cn/download/">Node.js</a>，打开 DOS窗口，输入 <code>npm install picgo -g</code>命令，安装位置：<code>C:\Users\自己的用户名\AppData\Roaming\npm\node_modules</code></p><p>在 <code>C:\Users\你的用户名\.picgo</code> 下创建了 config.json文件，复制了如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"picBed"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"uploader"</span><span class="token operator">:</span> <span class="token string">"smms"</span><span class="token punctuation">,</span> <span class="token comment">// 代表当前的默认上传图床为 SM.MS,</span>    <span class="token property">"smms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">""</span> <span class="token comment">// 从 https://sm.ms/home/apitoken 获取的 token</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"picgoPlugins"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 为插件预留</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PicGo-Core 指南：<a href="https://picgo.github.io/PicGo-Core-Doc/zh/guide/config.html#%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90">https://picgo.github.io/PicGo-Core-Doc/zh/guide/config.html#%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90</a></p><p>用法：<a href="https://github.com/PicGo/PicGo-Core">https://github.com/PicGo/PicGo-Core</a></p><p>如上传文件：<code>picgo upload 文件的绝对路径</code></p><p>于是学了一下 Shell脚本的语法，提示说输入的唯一参数是图片路径，要求输出图片的 url路径；于是上网搜，如何接收第一个参数、输出，分别是$1、echo；尝试过程中发现路径必须以 <code>/</code> 分隔，而不是<code>\</code>。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span><span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>picgo upload $1<span class="token variable">)</span></span><span class="token assign-left variable">img</span><span class="token operator">=</span><span class="token variable">${str<span class="token operator">#</span>*"<span class="token punctuation">[</span>PicGo SUCCESS<span class="token punctuation">]</span><span class="token operator">:</span> "}</span><span class="token builtin class-name">echo</span> <span class="token variable">$img</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试中发现运行不了，需要环境，接着下载了 <a href="https://git-scm.com/download/win">git</a>，打开 bash 窗口使用./xxx.sh 命令运行此文件。</p><p>正以为大功告成，可 MarkText 保存不了此 Shell脚本的绝对路径。没有办法，下载了 v0.16.3 版本覆盖安装，偏好设置里 Image下多了一项 <code>Image Uploader</code>，</p><figure><img src="https://s2.loli.net/2022/04/10/ElkeQWOj1GNShs5.png" alt="旧版本"><figcaption aria-hidden="true">旧版本</figcaption></figure><p>选择，点击 Set as default，默认图片上传至 sm.ms。</p><p>然后下载新版本，再覆盖安装一次，打开</p><figure><img src="https://s2.loli.net/2022/04/10/L78OKNSv3G1HzQb.png" alt="新版本"><figcaption aria-hidden="true">新版本</figcaption></figure><p>下拉框改为 Picgo 即可。</p><p>拖入图片到窗口时，必须拖到当前段落（会显示一条绿线），才会成功。</p><figure><img src="https://s2.loli.net/2022/04/10/CfUobvlHAt7B4kR.png" alt="如何上传图片"><figcaption aria-hidden="true">如何上传图片</figcaption></figure><p>点击此图片，可以修改图片（查看是否为网络 URL）以及位置。</p><blockquote><p>脚本：解释性语言，且是文本格式。</p></blockquote><h3 id="file">1.7.4 File</h3><p>英语不好，又没有安装汉化版的...下面是菜单栏的各项，先从 File开始：</p><p>New Tab（Ctrl + T）：新建文件</p><p>New Window（Ctrl + N）：生成新窗口</p><p>Open File（Ctrl + O）：打开文件（可以直接将 md 文件拖入此窗口）</p><p>Open Folder（Ctrl + Shift + O）：打开目录（显示目录下的 md文件、查找、显示文章中的标题）</p><p>Open Recent：打开最近文件</p><ul><li>Clear Recently Used：清空最近文件（只是清除记录）</li></ul><p>Save（Ctrl + S）：保存</p><p>Save As（Ctrl + Shift + S）：另存</p><p>Auto Save：退出文件前自动保存</p><p>Move To：将文件移动至...</p><p>Rename：重命名</p><p>Export：导出为</p><p>HTML</p><ul><li><p>Page：设置页面标题（title 标签里的文本）</p></li><li><p>Style</p><ul><li><p>Overwrite theme font settings：更改字体样式、大小、行距</p></li><li><p>Auto numbering headings：自动为 h1 以下级别的标题编号</p></li><li><p>Show front matter：显示前言</p></li></ul></li><li><p>Theme：选择主题</p></li><li><p>Table of Contents：目录列表</p></li></ul><p>PDF</p><ul><li><p>Page</p><ul><li><p>Page size：设置纸张大小</p></li><li><p>Landscape orientation：是否横向</p></li><li><p>Page margin：页边距（毫米）</p><ul><li><p>Top/Bottom：上下边距</p></li><li><p>Left/Right：左右边距</p></li></ul></li><li><p>Header &amp; Footer：页眉页脚</p><ul><li><p>Header type：页眉类型</p><ul><li><p>Single cell：单（中间）</p></li><li><p>None：无</p></li><li><p>Three cells：三（左中右）</p></li></ul></li><li><p>Customize style：定制风格</p><ul><li>Header and footer font size：页眉页脚字体大小</li></ul></li></ul></li></ul></li><li><p>Preferences（Ctrl + 逗号）：偏好设置</p></li><li><p>Close Tab（Ctrl + W）：关闭文件</p></li><li><p>Close Window（Ctrl + Shift + W）：关闭窗口</p></li><li><p>Quit（Ctrl + Q）：关闭所有窗口</p></li></ul><p>导出时新增主题：<a href="https://github.com/marktext/marktext/blob/develop/docs/EXPORT_THEMES.md">https://github.com/marktext/marktext/blob/develop/docs/EXPORT_THEMES.md</a></p><h3 id="edit">1.7.5 Edit</h3><p>Undo（Ctrl + Z）：撤销</p><p>Redo（Ctrl + Shift + Z）：反撤销</p><p>Cut（Ctrl + X）：剪切</p><p>Copy（Ctrl + C）：复制</p><p>Paste（Ctrl + V）：粘贴</p><p>Copy as Markdown（Ctrl + Shift + C）：以 Markdown 形式复制</p><p>Copy as HTML：以 HTML 标签形式复制</p><p>Paste as Plain Text（Ctrl + Shift + V）：纯文本粘贴</p><p>Select All（Ctrl + A）：选中所有</p><p>Duplicate（Alt + Ctrl + D）：向下复制一行</p><p>Create Paragraph（Ctrl + Shift + N）：创建新的段落</p><p>Delete Paragraph（Ctrl + Shift + D）：删除当前段落</p><p>Find（Ctrl + F）：查找</p><ul><li>Case Sensitive：区分大小写</li><li>Select whole word：选择整个单词，如查找 a，不会出现包含 a 的单词如puba，而是只有单独的 a。</li><li>Use query as RegEx：使用正则表达式</li><li>Find Next（F3）：往下找</li><li>Find Previous（Shift + F3）：往上找</li></ul><p>Replace（Ctrl + R）：替换所有、一个个替换</p><p>Find in Folder（Ctrl + Shift + F）：在目录下的文件中查找（首先得 OpenFolder 打开目录）</p><p>Line Ending：换行方式</p><ul><li><p>Carriage return and line feed（CRLF）：Windows 换行方式，即<code>\r\n</code></p></li><li><p>Line feed（LF）：Linux换行方式，即 <code>\n</code></p></li></ul><h3 id="paragraph">1.7.6 Paragraph</h3><p>Heading 1、2、...、6 为 H1、H2、...、H6 标题</p><p>Promote Heading（Ctrl + Shift + =、Ctrl + 加号）：提升标题等级</p><p>Demote Heading（Ctrl + -）：降低标题等级</p><p>Table（Ctrl + Shift + T）：创建表格</p><p>Code Fences（Ctrl + Shift + K）：代码块</p><p>Quote Block（Ctrl + Shift + Q）：引用</p><p>Math Block（Alt + Ctrl + N）：内联公式块</p><p>HTML Block（Alt + Ctrl + H）：HTML 标签</p><p>Ordered List（Ctrl + G）：有序列表</p><p>Bullet List（Ctrl + H）：无序列表</p><p>Task List（Alt + Ctrl + X）：复选框</p><p>Loose List Item（Alt + Ctrl + L）：增加列表之间的距离</p><p>Paragraph（Ctrl + Shift + 0）：段落</p><p>Horizontal Rule（Ctrl + Shift + U）：分隔线</p><p>Front Matter（Alt + Ctrl + Y）：前言</p><h3 id="format">1.7.7 Format</h3><p>Bold（Ctrl + B）：粗体</p><p>Italic（Ctrl + I）：斜体</p><p>Underline（Ctrl + U）：下划线</p><p>Superscript：上标</p><p>Subscript：下标</p><p>Highlight（Ctrl + Shift + H）: 黄色高亮</p><p>Inline Code（Ctrl + `）：单行代码块</p><p>Inline Math（Ctrl + Shift + M）：单行内联公式</p><p>Strikethrough（Ctrl + D）：删除线</p><p>Hyperlink（Ctrl + L）：超链接</p><p>Image（Ctrl + Shift + I）：图片链接</p><p>Clear Formatting（Ctrl + Shift + R）：清除格式</p><h3 id="window">1.7.8 Window</h3><p>Minimize（Ctrl + M）：窗口最小化</p><p>Always on Top：总是显示在最上层</p><p>Zoom In：放大</p><p>Zoom Out：缩小</p><p>Show in Full Screen（F11）：全屏显示</p><h3 id="view">1.7.9 View</h3><p>Command Palette（Ctrl + Shift + P）：查看操作的快捷方式</p><p>Source Code Mode（Ctrl + E）：查看源代码</p><p>Typewriter Mode（Ctrl + Shift +G）：打字机模式，保证光标在屏幕中间</p><p>Focus Mode（Ctrl + Shift + J）：焦点模式，只关注当前输入行</p><p>Show Sidebar（Ctrl + J）：显示侧边栏（目录树、查找、文章标题）</p><p>Show Tab Bar（Ctrl + Shift + B）：显示标签栏（md 文件名）</p><p>Toggle Table of Contents（Ctrl + K）：跳转至对应的 H标题位置（点击左边侧边栏显示的标题）</p><p>Reload Images（F5）：重新加载图片</p><h3 id="help">1.7.10 Help</h3><p>Quick Start：<a href="https://github.com/marktext/marktext/blob/master/docs/README.md">快速开始</a></p><p>Markdown Reference：<a href="https://github.com/marktext/marktext/blob/master/docs/MARKDOWN_SYNTAX.md">Markdown语法</a></p><p>Changelog：<a href="https://github.com/marktext/marktext/blob/master/.github/CHANGELOG.md">更新日志</a></p><p><a href="https://opencollective.com/marktext">Donate via OpenCollective</a>：赞助</p><p>Feedback via Twitter：反馈（使用推特）</p><p>Report Issue or Request Feature：<a href="https://github.com/marktext/marktext/issues">报告问题或请求功能</a></p><p>Website：<a href="https://marktext.app/">网站</a></p><p>Watch on GitHub：<a href="https://marktext.app/">查看 Github项目</a></p><p>Follow us on GitHub：<a href="https://github.com/Jocs">关注我们（GitHub）</a></p><p>Follow us on Twitter：关注我们（Twitter）</p><p>License：<a href="https://github.com/marktext/marktext/blob/master/LICENSE">许可证</a></p><p>Check for updates：检查更新</p><p>About MarkText：关于 MarkText</p><h2 id="x-总结回顾">1.x 总结回顾</h2><p>（不要惊讶怎么这么少，我说过别把大脑当成硬盘，记一个 cd命令就足够了，记得看完后休息一会，欲速则不达）</p><p><strong>Java 介绍与下载</strong></p><p>Java是最早由 SUN 公司的 James Gosling 开发的编程语言。</p><p>SUN 在 2009 年被 Oracle 收购；2014 年 3 月 19 日发布了 JDK8。</p><p><strong>常用的 DOS 命令</strong></p><p><code>cd 当前目录下的文件夹名</code> 进入目录</p><h2 id="y-脑海练习">1.y 脑海练习</h2><p>1.1 JDK 和 JRE 的区别？</p><p>1.2 什么是编程？</p><p>1.3 Swing 组件是什么？</p><p>1.4 JAR 包是什么？</p><p>1.5 软件与程序指的是什么？</p><p>1.6 什么是编译型语言和解释型语言？</p><p>1.7 Java 语言特性？</p><p>1.8 能说下 JavaSE、JavaEE、JavaME 吗？</p>]]></content>
      
      
      <categories>
          
          <category> 1.1 语法入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1. JavaSE </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1.0 说在前面的话</title>
      <link href="/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.0-shuo-zai-qian-mian-de-hua/"/>
      <url>/2022/06/05/1.javase/1.1-yu-fa-ru-men/1.1.0-shuo-zai-qian-mian-de-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="说在前面的话">说在前面的话</h1><h2 id="前言">前言</h2><figure><img src="https://s2.loli.net/2022/04/22/sXGKZ3PywET9Uzg.png" alt="记"><figcaption aria-hidden="true">记</figcaption></figure><h3 id="内容介绍">内容介绍</h3><p>介绍 JavaSE基础的基本语法知识，不会包含特别难以理解或更深层次的内容，通俗易懂。本人是实战派，看着大幅篇章晦涩的理论，但是没有多少实践证明的书籍就头疼；同时如果知识东一点、西一点，跳跃性太大，不成体系，也比较麻烦。</p><p>没办法智商不够，穷举来凑。缺点也很明显，一是浪费时间精力，二是容易得出过拟合的规律，碰运气罢了，拿来就用。</p><p><strong>前提</strong></p><p>本书的所有例子使用 JDK8 在 Windows10系统下完成；若你与我的不一致，快捷键、源码都有可能不同，但网上无偿资源十分的多，搜索了解不同之处即可。</p><p><strong>受众人群</strong></p><p>区别于教材，不会设问不答，而是十分详细，不会为读者留出思考和遐想的空间；目的只为节省时间，算是入门的自学读物吧。</p><p>主要让小白快速了解或回顾 JavaSE的基础语法知识，随看即用，无阅读门槛。</p><p><strong>主要内容</strong></p><p>本书前二十章，涵盖了如 Java基础语法、变量、运算符、流程控制语句、面向对象、常用类、集合、IO等基础部分；</p><p>另外把那些不常用的知识自成一章，移入<strong>扩充内容</strong>。</p><p>本书示范中，将可能使用到的软件、工具网址放入<strong>资源地址</strong>中。</p><p><strong>章节编排</strong></p><p>每章共有 3 级目录，名字尽量保持唯一性；</p><p>对于讲源码的部分，先抛出结论，自成一节，在它的下一个目录，粘贴全部源码，逐行分析。</p><p>每章的结尾会插入<strong>总结回顾</strong>与习题；习题的平均难度分级：脑海练习、实战演练、掀起波澜、头脑风暴、大脑宕机、空空如也。</p><p>习题出的不是很好，包含了我个人的私心，有些好不容易弄明白的道理，直接插入正文貌似不是很合适，但又舍不得丢弃，于是干脆作为题目了，希望不要嫌长。</p><p><strong>如何使用</strong></p><p>因为人的大脑很特别，会自动屏蔽掉日常普通、枯燥乏味的事情，目的是保持内存充足。它只记住比较特别的，其它的都会慢慢遗忘。</p><p>什么是比较特别的？</p><ul><li>重复，一直重复；重复到大脑认为这不该忘记，有道言：熟能生巧、勤能补拙、好记性不如烂笔头，还谈不上拼天赋包括努力。</li><li>新奇的、有趣的、充满致命危险的、富有挑战性的、特殊的；与自己基因特性相关，偏向哪方面，大脑对哪感兴趣，不用你重复多次，自然会记住。</li></ul><p>所以我加入了总结回顾，记录了这一章的重要内容，怕你看着看着就全忘了。放心，只有一点点，不会对你的大脑造成负担。看完后，记得休息一会。</p><p><strong>缺点</strong></p><p>因为我是自顶而下的方式学习，很难接触到底层方面的知识，我感觉隐藏地太深，虽然比较轻松，但总感觉不得劲，不是像语法那样可以直接触摸，如引用保存了实例的内存地址，new才是返回了对象的地址。</p><p>意思就是十分地浅，只能专注看得到的地方，自圆其说，偏偏还没法验证，冰山一角而已；我不知道科班是怎么教的，没有什么信息来源，孤家寡人啊；希望多多批评。</p><h3 id="更新内容">更新内容</h3><p><strong>第 3 版的更新内容</strong></p><p>新增 switch case 分支、补码、二进制转换、字符编码常识、值传递、String字符串常量池和 intern方法的解析、第三代日期类、UUID、正则表达式等一系列内容。</p><p>将双向链表移入 LinkedList 这节中。</p><p>取消了 b 标签的使用，因为无法在 CSDN中无法做到与博客园一样的显示。</p><p>取消了 img 标签的使用，因为在 CSDN 中无法显示图片。</p><p>取消了 gif 动图的使用，因为打印 pdf 文件后就是静图；</p><p>取消了超链接使用，统一使用网址代替。</p><p>发现每章的内容过多，将每章继续拆分为几个小节。</p><p>移除了强类型语言、进制转换、字符编码、原码补码等内容。</p><p><strong>第 2 版的更新内容</strong></p><p>将所有目录重新整合，改名，保证标题的唯一性，否则博客园可能跳转错误。</p><p>将 字符编码 部分内容移到 常用类 一章中；将 Eclipse移至扩充内容中；将下载与准备工作合二为一，修改 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="0.991ex" height="2.057ex" role="img" focusable="false" viewBox="0 -704 438 909"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D709" d="M268 632Q268 704 296 704Q314 704 314 687Q314 682 311 664T308 635T309 620V616H315Q342 619 360 619Q443 619 443 586Q439 548 358 546H344Q326 546 317 549T290 566Q257 550 226 505T195 405Q195 381 201 364T211 342T218 337Q266 347 298 347Q375 347 375 314Q374 297 359 288T327 277T280 275Q234 275 208 283L195 286Q149 260 119 214T88 130Q88 116 90 108Q101 79 129 63T229 20Q238 17 243 15Q337 -21 354 -33Q383 -53 383 -94Q383 -137 351 -171T273 -205Q240 -205 202 -190T158 -167Q156 -163 156 -159Q156 -151 161 -146T176 -140Q182 -140 189 -143Q232 -168 274 -168Q286 -168 292 -165Q313 -151 313 -129Q313 -112 301 -104T232 -75Q214 -68 204 -64Q198 -62 171 -52T136 -38T107 -24T78 -8T56 12T36 37T26 66T21 103Q21 149 55 206T145 301L154 307L148 313Q141 319 136 323T124 338T111 358T103 382T99 413Q99 471 143 524T259 602L271 607Q268 618 268 632Z"></path></g></g></g></svg></mjx-container></span> 符号的显示问题；用 ① 替换 1.避免格式乱码。</p><p>由于章节过多，这篇只得拆分成 20 章，否则浏览器加载不过来。</p><h3 id="其他说明">其他说明</h3><p><strong>跳转问题</strong></p><p>博客园有时会出毛病，在同一篇文章中，如果两个标题名相同，点击只会跳转到第一个同名标题；虽然已经开始在标题前面加1.1.0让标题名唯一，但是目前还未改完，请从点击如图展示的标题列表中跳转。（2022/03/1118:00）</p><figure><img src="https://img-blog.csdnimg.cn/977181edf02a42a9a8b5f1dc7458367c.png" alt="博客园已弃用"><figcaption aria-hidden="true">博客园已弃用</figcaption></figure><p><strong>封面制作</strong></p><p>封面是用 Win10 3D 画图制作的。</p><p><strong>爱好</strong></p><p>喜欢养草金、养草龟；看奥特曼，看优秀的国漫，如伍六七、凡人修仙传，可惜最近没时间了；喜欢听梁博的歌；欢迎交流。</p><h3 id="本记由来">本记由来</h3><p>本人就不是正儿八经的程序员，我也知道，像我这种野路子出身的程序员，从网上东拼西凑没有体系得来的知识，看法一定不全面，但我还是尽可能地收集知识，希望能够帮助到大家，你就当我童心未泯吧。</p><p>疫情大家都被困在家中，只能慌着想另谋出路，培训机构天天打广告，制图、CAD、编程、剪辑...，于是抱着试一试的心态，他们都说学 Java好找工作，正好我的工作也搞不下去了，丢失了所有自信，于是抱着试一试的心态，但我怎么感觉教人赚钱的人最赚钱？</p><p>当然我没去培训机构，而是在网上一篇篇的看文章，因为学习路线图挺多，你在知乎上随便搜下，就有一大群打广告，引流到自己的微信公众号；让我不禁感慨那些熟手竟然都混的这么艰难。</p><p>我越看，越觉得自己太滞后了，太脱节了。Java是上个世纪末出现的，我到现在才知道，仿佛我们这个地方的时间流速比发达城市慢了几千倍。我可能会想，如果要是早点知道就好了，也不至于大学期间抱着动力电池组、汽车检测与故障判断百无聊赖，只能在腾讯中寻求一点归属与认同感，创造属于自己的躲避空间，对，咎由自取罢了。</p><p>我现在才明白，并不是不知道自己到底喜欢什么，而是自己视野太窄，接触东西太少，别人也是如此，给不了贴合实际的建议，所以还是靠自己寻，但是又不能完全不听从别人建议，只希望别又浪费三年。</p><p>年龄越大越感觉似乎有一道屏障阻碍，天天在质问，为什么这个世界会这样，为什么我会这样？不幸是否是种污染源。</p><p>不，不对，自从初中后，身高和心智都基本陷入停滞，难有寸进，我估计早就有了老孩子的概念，只是被逼的装作成熟，本来触手可及的人们被分隔进两个世界，再无交集，也不知道为什么就有了这种局限性。希望趁着还清醒，不要佯装没事，融入集体，直到面具摘不下来。</p><p>每个人都是冷漠的看客，觉得自己门儿清，他人徒劳而已，分文不值；似乎出生来到这个世界的目的就是赎罪，疯狂地刺痛他人后再抱团取暖，亦或者重蹈覆辙使别人引以为鉴，成为经验条，我怀疑是否在没有我的世界里，家人亲戚生活也许会变得更好，我的存在似乎没有意义，反而是种拖累；好在，泪流干了也许就不会伤心了；</p><p>如果只有个体的死亡才能去除错误的思想模型重新回到正途，这个世界好也罢坏也罢，都将是一团迷雾再也无法知晓，但我不是谁的延续，不是用于优胜劣汰、杀鸡儆猴的工具，我不是身体不是思想，它们都会变，而是感知；可惜不能完全感知别人的思想，做到感同身受，体谅他人。</p><p>感觉自己就像困在茧中发育迟缓的儿童，后知后觉就像个傻子，时常想想说当时要是那么做那么说那么经历一些事情历练下重拾经验避开错误避免说话不过脑子再尝试一次再争取一把也许情况会好一些也许就赢了；</p><p>就像是一排纽扣，某个纽扣系错位，其它全都错位了。真担心，还没长起来，就gg了，我想躲在时间的缝隙之中，看到世间百态，琢磨出所有的、最好的、最完美的应对方法，再给我一点时间吧。我很明白，这终究是不可能的，如果你也能感同深受，我祝你早日挣脱束缚，突破自己的局限性。</p><p>由此推出，可能我习以为常的概念，但其他人却一无所知，看到线头也认不出来，自然也不会揪。说实话，要不是学Java 顺带接触了前端，我永远也不会知道浏览器页面背后隐藏的 HTML标签，或许误解为 Word 或者其它更高深的东西。</p><p>再想到大学时还是如高中般按部就班，呆呆地等老师讲，什么高等数学啊，没讲的就不知道要学，结果就讲到极限没讲了，直到毕业后才醒悟，可惜已经没有那么好的学习环境了，真傻。所以，我说非本科的，还是抽出时间干自己的事吧，只听老师讲没多大用处。</p><p>那些本科、985、211出来的，我不知道他们学校是否与社会脱节，还是不需要培训直接就能胜任工作；又或者那些高材生早就摸索出了属于自己的道路，只待毕业后就能大展身手；真是年轻有为啊。</p><p>当然如果不是，也不要妄自菲薄，至少你学习能力强，也聪明，打败了 50%的同龄人，多接触我们这样的人，不要被外界评价降低了自己的自信心，哪怕现在积累散去，也可以东山再起，别放弃，要加油！</p><p>第一名只有一个，如果不是第一名就认为这一切付出都毫无意义，剩下的千千万万个我不是更无地自容吗？不要总是与别人比，大家都很累，比自己就好了；</p><p>也不要觉得是对不起谁，你对不起的只有一个，那就是自己；所以请珍惜自己，请在乎自己吧，生命并不是毫无意义，你没有输，从来都没有；生命尚存，信念永恒。</p><p>对我而言，也许受眼界或目光局限，看不远，但我并不认为这是遗憾，种树的最好时期除了十年前就是现在。</p><p>所以我的目标压根就不是传授小白前沿知识，互联网信息这么发达，知识多得海了，但我并不认为这一定就是好事。如果我什么都不知道，或者被生活重压没得选背点债，估计早就被逼进入劳动密集型行业，进厂或跟师傅学门手艺，变得“成熟、世故”，将来再赚点钱，跟大哥一样娶个媳妇，生个孩子，与乡亲闲聊周围八卦，家里长家里短，简单快乐地平凡轮回一生；唉呀，真可惜，看到了不属于我的世界，丰富多彩的生活，但可望不可及，原本的世界不再感受到快乐，同时冒出无数的疑问没有答案，不被理解，你就说是矫情吧，真痛苦啊，不，我还是太幸福了，居然还有精力思考让我痛苦的事情。但总不能建议大家都破釜沉舟，初中就辍学，因为没得选择，以补齐工厂及其它岗位缺口。</p><p>聪明人也不需要，你自己就能找得到资源，没必要看下去了；当一个新概念传到我们那，可能都不知道被多少人玩烂了；可惜还是有很多知识晦涩难懂，相信还有一些普通人如同曾经的我一样，不成体系，没来得及上道，视野受限，四处碰壁，我活该就活该了，但踩过的坑没有必要再让人踩一遍吧，也没必要弄成“完美受害者”的样子，有什么批判都无所谓，争斗是动物的天性，反正现在闲着，再不写忘了就白给了。</p><p>说回我本人吧，我自认为我很坏，不受人待见，独来独往，像是与世界格格不入披着人皮的异类，缺点也是一大堆，对此我没有什么意见，木已成舟事已至此，已经定性，无法改变只能捏着鼻子认了，烂到家了，一把烂牌又打了个稀巴烂，这辈子就这样了，也不用奢求什么，还可以更坏吗？戏谑称自己为“行走的造粪机”。</p><p>挺不希望有人跟我一样，浪费生命，自责内疚，消耗最美的年华，人也就那样，很快一生就过去了，没什么时间，等着等着就没了。你强就趁着这个时候多积累一些没有坏处。</p><p>可现在技术如此成熟，获取某领域的知识简直不要太方便，个人的努力似乎变得如此廉价，我这个后辈还有必要写吗？可能只是我一厢情愿，每每看到曾经写过的话，说都是为了别人少走弯路而安慰自己这一切的付出都是值得的，自己不要回报有多高尚，感觉挺幼稚挺伪善的，人们都是明暗组合的复杂体，以自己的角度看世界发现周遭也不过如此，何况我也只是刚刚起步只能算是个搬运工；仔细想想，这世界没你没我照样能转，没啥了不起的，学不学这个，人生也就那个样，试图逆天改命也太好笑了，我现在只是在做我能够做的事情。</p><p>我所能做的就是坚持坚持再坚持，这是对我最好的安慰，否则这不是承认我之前所做的行为都是无意义的吗？由于认识到错误很痛苦，与自己的理念相冲突，所以需要找到一个能够将其合理化的外部理由为自己做辩护从而继续贬低或迫害其他人，维护自己的认知使其不动荡，比如都是因为某某...，否则世界观崩塌怀疑自己的认知，但是这样又会加剧其错误，直到认知根深蒂固无法自拔，然后成功欺骗了自己，离真理更远；或者认为反正就这样了，还不如破罐子破摔，这就是有了第一次，就很难停下来的原因，将错就错呗，这种惯性时常背离，永远都不要对人性抱有过高期待。</p><p>在不可质疑的分数与金钱的评判体系中，对于大多数“失败者”而言，将希望寄托在下一次、后代；可是哪有这么多下一次，每次都是当下。当一次又一次的打击熄灭了自信，下意识的逃避已成了惯性，自己彷佛就是衬托别人优秀的工具人，于是越发失望，之后的每一次都会重复过往悲剧。或者不停地抱怨、痛苦迷茫，却无力改变现状，反复地想如果当初，但是现在不能...说自己每天活在痛苦之中，内心煎熬，是为了向所有人展示自己都已经这样了，已经反省了，很痛苦...显得很可怜，也不知是真的为了寻求安慰，还是习惯性地装作受害者渴望同情，好将责任推卸给其它因素，然后拒绝所有援助，坐实可怜人的姿态，彷佛全世界都抛弃了你，呵呵；自己轻松了，好像改变了，但突然暴雷的模型又将你拉回原点，哇，还是老样子啊，直到所有人都心灰意冷，在矛盾与痛苦的纠结中，无尽的黑暗囚笼，轮回这可悲的命运。</p><p>对于大多数“成功者”而言，认为所有成就都是自己努力而应得的，与其他人无关，十分傲慢，而对社会毫无责任。但实际上，人生能够自己把控、预测的因素极少，绝大多数都是不确定的，境况各有不同，谁也不敢说努力就能够决定自己的命运，按计划如期进行。</p><p>如果不是走投无路，大量地搜罗资料，妄想改变命运的可能，谁会搜到此文呢？幸存者偏差罢了。哦，因为百度一搜，CSDN文章总在前面，可惜我可能文章取名太宽泛了，很难搜到。</p><p>这个学习时间太长了，还不容易上手，可能学不出什么名堂，做好心理准备吧。如果你很久以后才看到这篇文章，这本书介绍的内容、软件可能也会过时。（2021/07/1519:29）</p><p>我以前听说过一个段子，让我改编一下吧：老师在课堂上将 100%的知识讲出了 70%，同学们接收到了 40%，动笔自己试下，写出了 10%，隔天只剩 1% 了，剩下全靠编。</p><p>于是我这知识算是从网上来，经过遗忘、组装、变异后再回到网上去吧。</p><h3 id="帮助说明">帮助说明</h3><p>你帮助了我，我自然很乐意回馈你。但是请客，我不知道你是真心的感到开心，还是出于礼貌，很拘谨，不好意思拒绝，说不出口，又或者只是人的本性如此，不受控制地开心，而不是你的本心；这样猜来猜去的，很累。本人接人待物的经验几乎为0，没有眼力见，情商低，局促不安，怕出洋相不想去，也不乐意接受别人的帮助，因为我也不知道可以回馈你什么，避免让你寒心，所以故意错开没有交集，这样除了第一次略微有些不好受，但往后谁都不会受伤，双方都好；或者说习惯一人了。如果说我自立自强，任何事情都能做到无可挑剔，可以完全不依赖别人的帮助，那挺契合我的特质，但我做不到啊，完整地活到现在也算是个奇迹，不，应该是家人和钱的功劳吧。当然你可以教我做人，我的这具身体应该会乐意吧。</p><p>听说有人已经很有经验，练到能够自如控制身上每一处表情、细微的动作，针对不同性格的人，话术都是精心设计的，有模板，样式丰富，一套接着一套，似十分真诚，浑然天成，很讨喜，挑不出毛病，能与所有人都搞好关系，大事化了，挺羡慕的，不像我，一二三木头人，即使有了后代估计德行也是如此，因为我没有经验传授于他，只能又轮回一世。</p><p>你如果有什么难处，力所能及下，我会帮助你的。（不借钱，被人骗过，现在挺小气）</p><p>我听力不好，医生说是脑神经损伤，不可逆了（不可恢复）：听力的衰弱、接收频率的丢失、无法被解析，说人话就是你叫我，我听不见；听见了声音，不认为是人在喊我；知道你在喊我，但不知道你在讲什么，需要重复几次才能听懂，所以不喜与人交流，不喜欢悄悄话，声音太小了。</p><p>我的语言沟通能力方面不是很好，每当亲戚叫我多接触人，出去找个好工作，不要好高骛远；有时吧，我坐着又听不懂你们在讲什么，彷佛被按在椅子上不能离开，还不时的点头，后来干脆摆烂了，只埋头吃菜；我还是习惯独处，不需要耳朵，也可以对自己说话。实在不知道未来如何是好，蒙上自己的眼睛，不去想，就这么等着命运的大刀砍到脖子上。</p><p>由于不怎么接触人，时常感觉自己不近人情，只在家的附近活动，逢年过节不送礼，又不嘘寒问暖走个表面形式，生病也不带礼物看看，没有那些乐呵呵的人受欢迎，我自认为挺讨人嫌，不像个正常人，能够融入集体，至少我周围看不到第2个我这样的，我想想我要是主动示好，嬉皮笑脸地也许混个好人缘，关键时候有人帮我；我经常自拟为披着人皮的生物，似人，我时常怀疑自己存在的意义，不是个群居动物又能算是个什么东西。</p><p>哦，你如果想招聘我，想好这一点，我不适合与客户打交道的。希望不会因此找不到工作而饿死吧，否则在全中国也是独一份笑话。</p><p>我很早之前就听说过：不要试图改变他人，因为他人无法改变，要从自己身上找原因。每次出现问题，不用别人说，自己就开始把矛头指向自己。现在发现改变自己也很难，也不可能穿越到过去改变引导自己，比如学好英语，所以讨厌自己也没用啊！之前一直对自己耿耿于怀，发现只会让事情变得越来越糟，因为与最了解自己的自己对抗，这是一件多么愚蠢的事，它总能找到内心最柔弱处，给你致命一击。江山易改，本性难移，活该是孤独命啊，生命是有惯性的。</p><p>想着改变吧，于是什么人际关系、焦虑、摆烂、学生思维等视频就成了诱捕我们这类人最好的工具；唉，还用点明吗，侃侃而谈，互相折磨，大可不必。</p><p>终于发现这样不行了，不原谅自己，自己就会拖自己下水：反正就这样了，无法挽回，还不如破罐子破摔；自己给自己过多压力，整个人非但不能前进，反而会散去精气神；一直被动接收别人的观点，只会让我深陷地狱；践踏自己，就学不会尊重他人；</p><p>但我就是十分在意别人的看法，于是想着法子给自己洗脑：我凭什么要管别人的看法来折磨自己？我就这样坏、无耻啦，我就是有这么多不完美的地方，我不当人啦！咋滴？想着想着，破釜沉舟之下，于是学会了直面自己，拥抱自己，接纳自己，与自己和解；哪怕自己有太多的缺陷与不足，拥有这个身体已经值得了，没有必要追求过多，生和它一起，逝也和它一起，它才是最了解我的人，其它都是浮云，没有必要与它不愉快；对于我做的任何事情，我都不后悔。</p><p>于是担子自然就放下了一大半。它再差劲那也是我，不必撇清关系，并且它还是挺好用的，就是忘得快。</p><p>当然你如果说想同情我，那倒没有必要啊，我只是偶尔听不懂，大多数情况下还可以正常对话。不过还是要谢谢你的关心，祝你也开心吧，忘尘于世界，自在乐逍遥。</p><figure><img src="https://s2.loli.net/2022/03/19/aLTZbEQFgztYv1r.png" alt="英语语法"><figcaption aria-hidden="true">英语语法</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/19/4DAw5xCE782ruel.png" alt="动词"><figcaption aria-hidden="true">动词</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/19/OAh4mHqwvc3tWZT.png" alt="在 b 站买的公开课"><figcaption aria-hidden="true">在 b 站买的公开课</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/19/qGxYHuJlR94fsOE.png" alt="力学"><figcaption aria-hidden="true">力学</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/19/cLoymdH4ivtZXkl.png" alt="天文课"><figcaption aria-hidden="true">天文课</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/19/EB7HKsY129RhIUd.png" alt="数学分析"><figcaption aria-hidden="true">数学分析</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/19/QAvpn8x27zEYlsN.png" alt="定积分"><figcaption aria-hidden="true">定积分</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/19/FnYwlPG5TRycOKh.png" alt="泰勒公式"><figcaption aria-hidden="true">泰勒公式</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/19/8691OkoJsQac2Rd.png" alt="高等代数"><figcaption aria-hidden="true">高等代数</figcaption></figure><figure><img src="https://s2.loli.net/2022/03/19/yNRUzX62kfvisFE.png" alt="酉空间"><figcaption aria-hidden="true">酉空间</figcaption></figure><p>数学讲的还是挺简单的，于是买了几本书，发现老师明明在视频上讲的通俗易懂，由浅入深，但是编写的大学教材是真的劝退人，几千页啊，战线拉得太长了。并且那段时间在学Java，于是没再继续了，我只知道一点，不用的知识一定会忘记，所以现在干脆不学了，等用时再补。果然遗忘才是人类最大的法宝啊。</p><figure><img src="https://s2.loli.net/2022/03/19/J2CaKih1QIZf9EW.png" alt="高等代数指导书"><figcaption aria-hidden="true">高等代数指导书</figcaption></figure><h3 id="急需求职">急需求职</h3><p>天要下雨，人要吃饭；不管再怎么想，到了年龄，就算不结婚生子，但还是得找工作。</p><p>不讲什么本人勤奋热爱好学、吃苦耐劳这套老掉牙的事了，这玩意就是你情我愿，一拍即合，不行就拉倒，谁也没有必要低声下气，彷佛占了什么便宜，双向选择嘛。</p><p>招聘网站一个个看（不太信任，听说骗子挺多，还是需要线下跑来跑去，还可能被第三方公司外包，扯皮都没法扯，精力都耗没了），什么一面二面，还要花时间背没有用的题目，互相试探，装的很牛的样子，然后等通知；或者一个个线下到处漫无目的地找；除以上途径之外，我还想在各大网站上发布信息，希望能够找到合适的工作。</p><p>好吧，说实话，别看我好像挺拽的，其实我已经没有任何信心主动尝试了，质问还不够多吗？四肢不勤，五谷不分，无一技傍身，混的好惨啊，但敲代码挺幸福的，也没精力也不想干别的了。</p><p>若你想要了解我掌握的东西，那你看看我写的这个就行，也不会超出这个内容太多，忘了很正常，看看就捡起来了，我又不是电脑，没必要一直存储到脑海中，超时就丢掉。</p><p>要求：</p><ul><li><p>工作地址：离湖北越近越好。</p></li><li><p>工作内容：与电脑相关就很好，我不想丢失熟练度。</p></li><li><p>工作形式：公司、团队搭伙、工厂、私活、兼职、在家 ...都可以。</p></li><li><p>工作要求：</p><p>1）连续工作半小时 ~ 1小时，因为现在码字，眼睛不是很好，很干涩需要流泪才能缓解，需要休息 5分钟远眺；我常常使用番茄钟，提醒自己该休息了，以免精力不足，影响明天。</p><p>2）可以接受重复性劳动，时长不能超过 9小时；禁止夜班，没得商量。为了身体着想，说不定工资还不够看病呢。</p></li><li><p>公司气氛：不要勾心斗角、人人胡思乱想；不要官僚作风、气氛紧张；不喜团聚。</p></li><li><p>工资要求：实习期间工资 3000 以上。</p></li><li><p>个人缺点：</p><p>1）手笨，不会系绳子，只会打蝴蝶结与死结。</p><p>2）习惯沉默寡言，不会烘托气氛。</p><p>3）英语不好，我尝试过好多次了，暂时办不到，以后有时间再试试。</p></li><li><p>如果确定要为您办事了，我会在入职前将鱼放生，所以请不要耍我玩。</p></li><li><p>补充一条，禁止传销、坑蒙拐骗其他人、等其它犯法行为。</p></li></ul><p>你如果有意向，可以列出岗位的技术相关要求，若我有不熟悉的，我直接自学完了，再到你那来，给你干活去，这对我小菜一碟。</p><p>声明：天下没有不散的宴席，人都有分别的时候，好聚好散；请直接提出来，别耍阴谋，调来调去，或突然增大压力。</p><p><strong>本人联系方式</strong></p><p>不可以公开手机号，我怕销售天天打我电话，可以私聊我，在此期间应该一直在家附近寻找工作，我习惯被动，现在疫情这么严重，除非一锤定音，否则实在不想外地跑来跑去。</p><p>QQ：2675385031</p><p>微信号：cqhjava</p><p>邮箱：2675385031@qq.com</p><p>博客：<a href="https://ccqqhh.github.io">https://ccqqhh.github.io</a></p><p>（有人问，有工作就不错了，怎么还提这么高的要求？漫画附图：）</p><p>PS：这要求还算高？直接免费打工，用爱发电，饿死自己，让其他人引以为鉴，变得冷漠，好吗？</p><figure><img src="https://s2.loli.net/2022/03/20/YVyTqm79hRXfMHA.png" alt="金老师炒股破产引起的一系列悲剧"><figcaption aria-hidden="true">金老师炒股破产引起的一系列悲剧</figcaption></figure><p>当然我很清楚，能够看到这篇文章的，要么是小白急于寻找信息，要么是好奇，因为真正高手、HR搜也不可能搜这，也绝对不会看到这篇文章的。也不用掺杂其它情感，图一乐就好；我这啰里吧嗦的，这写了也是白写，所以没有寄托太多的希望；再说了，这毕竟不是专门的招聘网站。</p><p><strong>工作情况</strong></p><p>物业维修员：2019.10 ~ 2020.5</p><p>状态：待业中</p><p>说明：最近被催着找工作，能敲电脑就行；只是怕又头脑一热，选错了，又浪费3年；当然最主要的原因是还有一大堆的知识还没整合完，小鱼苗还未长大，需要天天收集活食，不太放心啊；对，你可以认为是一种逃避外界的借口，无所谓。多你这一句话，暂时还压不垮我。</p><p>妄想的工作分支：送餐员、流水线、文员、Java初级工程师、渔场、志愿员...</p><h3 id="致谢与勘误">致谢与勘误</h3><p><strong>致谢</strong></p><p>首先感谢父母给我一个好的身体，感谢母亲耐心的支持，感谢永远的 36岁，永远的 42 岁，永远的 12岁，那是少有的幸福时光。一点痛苦就可以掩埋无数的平淡时光。</p><p>其次感谢遇到的挫折与不堪，及时纠正我前进的方向。好吧我还是讨厌它，为什么我总要给自己的生活添堵呢？</p><p>最后感谢在网上无私奉献知识的大家，站在巨人的肩膀上能够看的更远；我是在家自学的，我能够想到的途径无非就是绘画、音乐、舞蹈、体育、进厂、销售，感觉还是电脑贫民些，不懂可以上网搜，就算是野生的也容易入门，可以说脑海中的知识体系都是网上博客园一篇篇的文章，一段段视频堆砌而成的，真的很感谢你们。生活在和平的中国，享受如此丰富的资源，挺幸运的，我会把文章知识来源链接放在参考文献中，但可能有遗漏，不能一一列出。</p><p><strong>这些在网上搜集的资料，如有侵权，烦请告知。</strong></p><p>编者：cqh<br>2022 年 3 月 4 日，于湖北安陆</p><p><strong>勘误</strong></p><p>笔者也只能算是新手，学识尚浅、水平有限，有些抽象、底层的东西以目前的功力无法一眼看破，找不到合适的方法去验证结论，只能是凭第一感觉得到具体的规律，所以也可能是想当然，看法比较片面。你就当成强行解释，笑一笑吧，对身体好。</p><p>部分解释可能不详细或不清楚（词不达意），如果你有更好、更通俗易懂的语言，欢迎留言指出。</p><p>在阅读文章时，请你时刻持有一种质疑的态度，这样既能帮助自己思考，也能发现我文章的不足之处，如果文章中有什么错漏的地方，还请不吝啬指教与批评，十分感谢！</p><p>若有帮助，会将你列入鸣谢名单中。</p><p><strong>书中源码地址</strong></p><p><a href="https://gitee.com/ccqqhh/JavaSE-grammar">https://gitee.com/ccqqhh/JavaSE-grammar</a></p><h2 id="自序">自序</h2><h3 id="第-3-版自序">第 3 版自序</h3><p>之前是想要找文献与资料，四处找不到；现在是资料漫天飞，四顾茫然；曾经的我反复横跳，浪费了很多时间与精力，干脆把自己所知整合起来，也是为了方便大家，不然忘没了就挺糟糕的。并且这期间，如果另有收获，会持续更新此书的内容。（学海无涯苦作舟啊）</p><p>本人专科毕业。我始终认为只有自己喜欢的才需要学，忽略了高中这不是专项发展，而是筛选人才；那么多的人，企业正好设置为本科门槛可以节省筛选时间；此外你通不过本科，企业难道不会怀疑你的学习能力有问题？既然是为了赚钱，那为什么不选更好的？人才多的去，谁稀罕你这一个。</p><p>我倒是没有什么后悔的，因为学历与钱对我而言不太重要，还比不上自身学会了写代码的那种喜悦，只是觉得大多数人经过18年的学习，每三年的转眼间淘汰了一半人，估计都流向工厂的流水线了，太浪费了。说好听点，成绩不太好的，进入技校，学习本领，直接对接企业，好好动手、做事，成为一线工人，读书好的进高校做理论好好做研究、理论，互相弥补。说难听点，我觉得不大现实，都下去了，还指望公平对待，齐头并进吗？至于指望未来进入技校后再努力，有这个本事，还至于掉下去吗？</p><p>还是不得不承认，学历高，见识的东西就更多，学习能力强，能够打下更坚实的地基，就算现在一无所有，也能东山再起。</p><p>我想起了，上半年看到的一句话：“我们的教育生产理想主义者，再由现实击碎他们的幻想，并将这种重塑称之为成长。每当我回顾我所接受的教育，我总感觉到被欺骗的愤怒，到现在还是无法释怀。”</p><p>一直笑着说大不了回家种田，但其实要是真的能够维持生活，没有人愿意背井离乡，出去打工的。我之前提到过滞后性，上一辈人因为这种滞后性，吃够了亏，于是只让我们专心学习，自己在外辛苦打工，进厂或在工地成为耗材，承受所有的风险，只为了子代不再重蹈覆辙，以为我们考上大学了以后就能赚很多钱，不用进厂或在工地遭殃了，终于可以享福了，却忽略了其它方面。</p><p>我们都以为学成了，考上了好大学，也许前途就顺了。但总还有一半人被淘汰了，比如我；父母还是抱有期望的，至少是个大学生啊！至少比我们强吧，结果期望越大，失望也就越大，到头来终究成空。</p><p>其实学校教的东西可用的很少，大多数就是纯粹应付考试。等上了大学后，被忽略的其它方面，弊处就开始显现；上一辈人突然觉得这么聪明的大学生，读了这么多年的书，这点生活常识都不懂？人际交往、生活常识、整理内务、洗衣做饭、修电脑啥都一团糟？你们在学校学了个啥？换我来吧！读书有啥用！废物！你们90 后当家了，这个社会要完蛋！</p><p>我不太在意，我知道他的局限性，他所在的小地方，也就只能看到我，误以为我就是大学生的缩影。但是网上有才有能力的人多了海了，否则你们找工作怎么这么难找。当然工厂、销售...等岗位还是挺需要人的，可惜我并不擅长，也就敲敲键盘喽。</p><p>我认为有这些高智商的人材们，尤其是特别努力勤奋的，社会只会越来越好，但是对自己的命运不是特别乐观，或许这是另一种形式的物竞天择吧，但是我真的很讨厌争、去比，所以每次都主动落在后面，能轮到我自然好，但如果资源提前光了，重新换个队伍排吧；如果没有自己的世界会变得更好，也不知道是开心呢还是寒心，既然不需要我，我也看不到身上有什么可以交换的利益帮助到别人，那还召唤我干嘛，激起好胜心，衬托别人的优秀嘛，又不是养蛊，难怪基因还能流传来下，呵呵。</p><p>我希望以后不会固步自封，局限自己的认知，觉得自己经历过这么多的事情，可以一言堂，狂妄地自以为看清了一切，断定周围人的秉性。因为经验有时效性，且与个人息息相关，在别人身上不一定适用。传递的观念如果别人不听后吃亏掉坑，我就在旁边暗笑，那样太可怕了，那说明我已经变质了，经验此时反而束缚住了我前进的脚步。</p><blockquote><p>警告自己的一句话：我知道人都会变，可是当你看到这曾经写下的这句话，如果觉得很幼稚可笑，算了，不想前进了，就说明你已经融化了。那么狠狠地抽自己，往死里抽，别让我瞧不起你，你欠我的。我现在拼死累活地，下决心，不是为了让现在的你心安理得的阻碍其他人的梦想，嘲讽其他人，也不是让你吃老本，坐吃山空，别以为这是理所当然，好好想想自己该做什么，还是在楼下打麻将与其他人夸天？</p></blockquote><p>小学时都想当什么科学家、医生、警察之类的，唉，现在想想简直就是做梦，能活着就不错了，哪有这个能力。</p><p>当初高中毕业，选专业，认为新能源汽车发展起来了，也可以保护环境啊，于是特别天真地就选了此专业。</p><p>当时实习时来的都是接插线、黑白班做饲料、卖挖掘机、开叉车...尤其看到要求男女不限，18~ 50，身体健康...沉默，我这时才明白自己早就已经 out了，到这来只是将噩耗延迟而已，其实刚进大学时觉得完了啊，时间一长，如同温水煮青蛙一般，渐渐习惯了自己的处境，不要觉得扎心就视若无睹，假装身边都是好事。</p><p>应该事先多看看东西扩展一下视野，或许可以认清自己，然后挣扎一下；不禁怀疑我到底这18年的生涯到底学了什么？混成这个样子？竟然不知道在简历添些什么东西，热情开朗？踏实能干？会求微积分？也不明白自己有什么优点，自己的价值在哪？凭什么让企业招聘我。再看看其它要求高的，不觉得我能够达到，别人说不定看不上，真是贱啊。</p><p>或许你看到很多视频教你如何夸大，人人都这样，你不变，就等同于落后了，但我做不来，主要是不想，或许再经历几次毒打，就可以沦为同类人了。</p><p>好吧，乌龟壳虽然保护了我不受伤害，但是一旦有朝一日，从壳中脱离，没有练成应对危机的本能，只能扑街。</p><p>因为 2020上半年考了一个电工证与驾驶证，友每天恨铁不成钢，即使之前有多不敢，导致错失了机会，所以这次一定不能放过！于是如同赶鸭子上架般慌着选择了工作，貌似能扯上一点关系的物业维修，正遭疫情，每天都是抄水电表，没积累可用的工作经验。解封辞职后，想回到心心念的家乡舔舐伤口，好好休息，可惜我周围一个人都没有，尽管一切都没变，但还是变了，心中没法容纳其它了，无论人还是热爱，空空的；时间长了，出门偶尔被指指点点，越发绝望，觉得谁都不需要我，我的意义在哪？实力弱，处处都是地狱。于是开始养起了鱼，获得了一种原来还有生物依赖我的踏实感，如果有兴趣养鱼可以看看：<a href="https://www.toutiao.com/article/7081637728160481792/">https://www.toutiao.com/article/7081637728160481792/</a></p><p>休息一个月后机缘巧合下知道了Java，于是到处搜罗学习资料，跟着网上的博客与视频一步步来，哎！觉得希望来了，这有什么难的。</p><p>那段时间，父亲和亲戚不再问读书成绩的事了，时常问我学了什么名堂，答：我学的这个集合很厉害，底层用多种数据结构存储数据，你看这个双向链...停停停，别跟我讲这个，我听不懂，这么有用，什么时候出去找事？可以赚多少钱？答：额...，没信心啊...</p><p>得，赶进度吧，花了5个多月的时间，数据结构与算法、MySQL、JDBC、HTML、CSS、JavaScript、Tomcat、Http协议、Servlet、JSP、AJAX、JQuery、Maven、MyBatis、SVN、Git、Spring、SpringMVC、Dubbo、Linux、SpringBoot、SpringCloud、Nginx、SpringSession、FastDFS、RabbitMQ、SpringSecurity、Shiro、Swagger、CRM项目...结果学完了，看着招聘信息罗列的一大堆，更没信心了，感觉白学了，只是语法而已。</p><p>期间为了方便翻阅和复习，加页码、加目录、记时间、正字复习、画星星、康奈尔...方法效果甚微。</p><figure><img src="https://img-blog.csdnimg.cn/1145392c9f5f49498ac28e37335a389f.png" alt="动力节点的 IDEA 如何安装"><figcaption aria-hidden="true">动力节点的 IDEA 如何安装</figcaption></figure><figure><img src="https://s2.loli.net/2022/04/23/6GFICf9tp4KxEmA.png" alt="韩顺平老师的数据结构与算法"><figcaption aria-hidden="true">韩顺平老师的数据结构与算法</figcaption></figure><figure><img src="https://s2.loli.net/2022/04/23/Rpg7jdAvW3o2CL6.png" alt="杜聚宾老师的 JavaScript"><figcaption aria-hidden="true">杜聚宾老师的 JavaScript</figcaption></figure><figure><img src="https://s2.loli.net/2022/04/23/IasLWx185YHdc2h.png" alt="杜老师的 Servlet"><figcaption aria-hidden="true">杜老师的 Servlet</figcaption></figure><figure><img src="https://s2.loli.net/2022/04/23/oT4uKgbdaOyFnit.png" alt="Spring"><figcaption aria-hidden="true">Spring</figcaption></figure><p>所以以我为反例，别用纸质笔记，很不方便的。</p><p>（之前有人问我，5个月怎么这么慢？其实我之前太贪心了，还想学数学、英语、物理...）</p><p>也不是没有人劝我，江山易改本性难移，固定的思维就像茅坑里的石头难以改变。每次听到劝导，又开始神经发作，万一呢？你到底怕什么呢？谁会吃了你？这是否已经成了本能？我想不通，也说不清了...</p><p>我的理智告诉我，我只是害怕未知，本能拒绝去尝试，害怕再次失败，又被人侮辱与嘲笑，尤其是年龄大了，没有试错机会了，只能尽力维持现状，一旦没有了父母的支撑，把我投入到大海中，要么四肢扑腾，学会游泳，要么淹死。说到底，我还是有很好的父母，坚实的后盾，实在太幸福了，所以才令人感到如此悲哀。再结合到三和大神、26岁成人被饿死之类的，我能理解亲戚他们的想法。算了，不说了，混成这个小孩模样，也是没谁了，希望能在饿死之前，主动寻求改变吧。没想到还真自证了自己初中时的想法，讽刺啊。</p><p>觉得学的也差不多了，开始看招聘，清一色的本科以上要求，这还玩个毛啊。再从网上看看题目，倒是不难，但想流利的说出，还是要背；语文、英语对我还是有点难，由于耳朵问题，只习惯看字幕，真不想把时间花在这无用的试探之上。说到底，我的信心一直被摧残，没被培养起来，一做事就放下手头的事跑过来看我，指指点点，说这不行那不行，不停地被否定，最后直接推开替换了我，一说话就被认为是借口，为什么别人行而我不行？对啊，我也纳闷这到底是为什么。所以畏手畏脚，一想到工作就躲避，哎呀都是我不行的，干不了，主动失去信心，下贱自己。那么别人看到这个样子，没有一点正能量，只会让现状越来越坏，犹如囚笼之兽。现在回想起来，这本来就不难，小事一桩！为什么非要挫折教育呢？？？究竟经历过什么事才会认为这是正确的做法？是不是我视野窄了，看不到背后的良苦用心？</p><p>得到一个规律：不犯错，必败事；如果小时候文文静静，逆来顺受，畏手畏脚，被框在自以为的规矩下，不敢尝试，看上去很听话很乖；但年纪大了，躲得了一时，躲不了一世，没有小错带来的经验，将来必定踩坑，成为平庸的人；这虽然不是必然发生的，但是概率很大，常在河边走总有一次会湿鞋嘛。小时犯错相比大时犯错，周围人包容度更高，所以建议小时多尝试。</p><p>受限于学历，所以我降低了要求，不得非要与代码搭边，随便啊，别进工厂黑白班、天天12小时，我还不想猝死。你们如果有什么好的渠道，智联、前程、脉脉...欢迎交流啊！</p><p>回顾，自己表面掌握了什么高大上的框架，但框架用起来很简单的，底层屏蔽了繁琐细节的具体实现，从配置多个XML 文件到约定大于配置直接启动，增删改查就增几个注解，改下 SQL语句，越学越简单，只是要背注解、方法名、操作步骤...才发现我其实也就是只会调下API，太浅显了，一遇到稍微深层次的问题就扑街。忘了代码就在网上搜索复制粘贴，这不就是搬砖吗？我学到这之后就没学了，就是觉得太浅了，简直把我当做硬盘在用。这些方法名，记流程有个鬼用，时代一换，又得重新开始。</p><p>我觉得是基础没打好，也许是哪里走错，之前学的不够系统，又把 JavaSE内容看了一遍，尚硅谷、动力节点、狂神说...，收获不是很大。</p><p>终于下定决心，这 Java内容之多，之繁杂，总得有人要整理一下节省小白的时间，稍微扑腾一下吧；为了帮助和我一样的人，避免踏入同一个坑，开始本书的第1 版制作：</p><figure><img src="https://s2.loli.net/2022/04/23/sMVWgjUqenT5rpS.png" alt="2021 春节时折腾的 JavaSE 笔记"><figcaption aria-hidden="true">2021 春节时折腾的 JavaSE笔记</figcaption></figure><figure><img src="https://s2.loli.net/2022/04/23/stpw46jfTRd8IEC.png" alt="前端"><figcaption aria-hidden="true">前端</figcaption></figure><figure><img src="https://s2.loli.net/2022/04/23/qkaVbGeh2vx9YRy.png" alt="MySQL 数据库"><figcaption aria-hidden="true">MySQL 数据库</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/3f434ba185a84387861657f6e5e1bd86.png" alt="MyBatis"><figcaption aria-hidden="true">MyBatis</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/b27e374baf484b4885c2fc1f2f688188.png" alt="架构的发展历史"><figcaption aria-hidden="true">架构的发展历史</figcaption></figure><p>结果写了一大半才发现公众号、视频、文章，甚至有专门的网站引流宣传赚赏金，一大堆人都已经做过了；得，反正也不缺我，我写不写也都无所谓，又丧气了，干什么都比别人落后一步，更何况我的知识来源于此，我特么地又把它搬回去，真是闲得慌。</p><p>唉，我平常喜欢在小路上慢悠悠地走，轻松自在，没想到变成了赛道，真可惜。</p><p>（当然现在知识忘得差不多了）</p><p>当时正是过年，前前后后忙了几个月。又被打击了一顿，说我在家里游手好闲、不学无术，不务正业，试过辩解，被认为只晓得找借口，是废物一个，在村里都不好意思说，不敢走亲戚，抬不起头，对外统一口径是我好高骛远，只晓得在家里玩，那么我也就没有什么可以说的呢，我不明白这是在激励我还是在保护我呢；每当别人问起我的年龄时，是否还在上学，总是感到脸上一阵青一阵白十分羞愧，无力感萦绕在心头阴魂不散。此时负标终于超过负荷，被最后一根稻草压倒，期间强行振作，努力维护日常作息，又被说年轻人还是没有被锻炼到，还是要多给点压力锻炼下，否则太脆弱了，心理承受能力太差，连这点打击就把你压垮了，去做销售扭转下性格就好了，挺适合的。终于压不住内心的痛苦崩溃了，开始自暴自弃，为什么所有的评价都认为只有我这么废？算了吧，说的对啊，我的确没用，还学什么啊，都卖了吧，我实在太脆弱了不堪一击，整个人又坏又蠢，估计就连小学的我就瞧不起现在的自己，不搞了，自闭中；眼泪不能流，声音不能出，打碎牙齿往肚子里呜咽...男人！男人嘛，男人！你这么大个人，怎么还跟小儿一样，好意思吗？没希望了，一生已经毁了。</p><p>但是过了一段日子后，越看越觉得这个笔记不对劲，写的这么粗略，这是给自己看的吧？新手能够看得懂吗？强行驱动自己，做事必须有头有尾，还是续了一根弦。在此期间，我明白了既然寻求人这种生物的认同十分地困难，那么还不如把精力放在代码、鱼、自然身上。有人说自然与这些生物有灵性，我不否认，可是它们的灵性如果达到了人的高度，假如我散步去了另一个地方、今天没有喂鱼...它们会不会在心里扯着喉咙喊：“为什么不到我这玩！为什么今天不喂我！！”那我该是什么表情？是不是比与人打交道更累？</p><p>当时又看了韩顺平老师的课程，他总结的学习方法很不错，先 demo再写注意事项。然后由此编写了第 2 版：</p><p>初入门时 JDK 安的是 15，（应该是 8，做第一版教程时才应该把 8删了，重新下了15）当我重新准备下载时，发现页面找不到了，这才知道长期支持版本是什么东东。</p><p>好吧，为了回顾当初下载软件时遇见的问题，场景重现，方便截屏，狠心格式化了电脑，把之前的Node.js、Linux、MySQL、Navicat、Maven仓库、Tomcat等一切全部删了，直到现在都还没下载回来。之前放入 GitHub仓库的代码，比如数据结构，被我认为代码写的太垃圾了，直接清空了。（现在就没有参照了，真是白给）</p><p>只剩下 FastDFS、RabbitMQ、SpringSession 的 demo 了。</p><p>好，没关系，大不了重新开始。</p><p>花了好几个月，废了很大心血，删了改，改了删，半夜突然醒来，打开电脑就只为修改一句话，信心满满，没有多少评论，想着是不是网络上资源太多，唾手可得，根本就不缺我一人的努力，此时突然觉得我都没有找到工作，所学知识之浅，路之狭窄已到头，还敢斗胆发文章，也不称称自己的斤两，这不是误人子弟吗，于是把之前的所有博客都删了，秉持了不尝试就不会失败的鸵鸟原则。</p><p>我现在想明白了，去追赶那些前言技术，学习语法，如何使用，只会流于表面，疲于奔命；干脆放弃掉，重新开始。我觉得就连Java语法，也变得不太重要，毕竟只是背别人定义的规则，还是表面；但是要写程序，没有办法，于是就有了语法入门篇。</p><p>根据纸质资料和粗略的第 1 版，以及网上的博客资料，拼拼凑凑得来了第 3版，至此只完成到集合部分。并且我还是不满意，决定抽出时间，继续重置。</p><p>现在又要看最开始的老版笔记重新写一遍，做事有始有终，不能轻言放弃，爬也要爬到终点！没有什么是不可能的（Nothingisimpossible），即使这份感情被背叛过千百次。还好现在没工作，否则抽不出时间写。由于删了之前的博客，有很多都是后来在最初版的基础上修修补补地，可能有很多疏漏、没来得及添加的、知识变异了的，恳请大家提出宝贵的批评和建议，以便改正。学习路线就按韩老师的来，先demo 再声明课堂注意、出题目，按部就班的点还是挺不错的。</p><p>2022.3.11</p><h3 id="第-2-版自序">第 2 版自序</h3><p>接受现实，痛定思痛，干脆抽出时间，整理曾经写过的纸质笔记与博客，为尚未踏出校门的同学节省一点时间。</p><p>有的地方根本没必要学，直接复制粘贴看看 API就行，没啥技术含量的。对于那些性格内向的人，心里有很多内容与墨水，但嘴里吐不出话的人，我特别能够理解你的苦衷，珍惜校招吧，避免毕业就是失业的尴尬局面。</p><p>有些人的确很聪明，在这里我不想扯勤奋与努力，以前也讲过，这只是表象，何况对于有些人也真的很难，考虑到通用性，内容稍微细一点，不要嫌我啰嗦。</p><p>我已经很知足了，阳光、空气、可以动的四肢、能计算 1 + 1的大脑，没用什么遗憾了。对我而言，健康远比时间、金钱、技术重要。不对，这该死的技术，这抵挡不住的魅力啊！！！</p><p>真的好怀念魔兽，如果阿尔萨斯王子没走屠杀线一定会有美好的结局吧。</p><p>2021.7.4</p><h3 id="第-1-版自序">第 1 版自序</h3><p>最近学习了 MarkDown语法与五笔打字，打算把纸质笔记整理成书，帮助大家。</p><p>经过一段时间的摸索中，得出了以下结论，希望对新手有帮助。</p><p><strong>1、删除无效的软件</strong>（打造合适的环境）</p><p>比如一直让你刷刷刷，停不下来的。因为你每次刷，都在期待下一个视频对你有用，但很大的可能只是满足了你的多巴胺分泌。</p><p>上瘾后不要责怪自己，想办法清醒后把这些触手可及的东西，不管是卸载、还是关闭推送、扔在角落...尽一切可能不要让它来打扰你；如果你是因为没有事情，好无聊，看这些来打发时间，那就找一些其他事情吧，如散步、健身、看书什么都可以...</p><p>这种大量占用时间碎片，令人上瘾的软件，可以说是一种毒瘤，我想不通为什么要研发它，钱真的很重要，但也不至于这样吧。</p><p>我说过人就是个石头，现在看看销售营销等一些手段玩弄心理，越发坚定这个想法；我们能做的只不过是别让那些外力推动自己。</p><p><strong>2、工作与学习之间的平衡</strong></p><p>公司都是重复性劳动，没有实际上的经验提升，还要担心上级领导的试探，同事的打压，构建话术。下标后自学也只能学习1、2个小时，并且还不包括动手尝试的环节，能够学到手的知识十分浅显。等学完，天都换了。</p><p>并且公司本质上是私人组织的、有了好点子想变现、以盈利为目的的结构；你想想你要是老板，谁不行直接替换掉，反正人才多的是，为何还要等你慢慢成长，真以为自己是潜力股吗。</p><p>但是辞职也不可取，长时间在家，没有了生活来源；走在路上还要被婆婆们嬉笑。</p><p>此外亲戚们都不会理解，最亲的人也会骂你不中用，你给他也讲不明白，还会被觉得十分可怜。一开始还可以打哈哈，说自己已经毕业了，在学习编程；但之后呢？这条漫长的学习之路，不同于进厂教教就能直接上手。</p><p>我想提醒你，你是否也感觉大学的课完全没必要上，但我们也许还如同高中一样，按部就班，讲什么就听什么，那么到了毕业就等于失业，你应该抽空把自己的爱好发扬光大。如果等到上班再学，其他人会怎么想？</p><p>结论：<strong>请好好珍惜大学的时光，那是唯一适合自学的时候</strong>。否则你要承担额外的精神压力，扛不住人就废了。</p><p><strong>3、适当约束自己的好奇心</strong></p><p>不要看到什么都想学，什么都想买，一直在搜，知识太多，你学不过来的。你先在网上搜索，比如后端的整套知识点，按顺序来，一心一意，一套教程为主，有疑惑的再去别的地方比对。不要没事就搜索一大堆资料收藏，又不开始，资料一定要精简，那些看上去有用的知识但短期用不上的，直接取消收藏。等你到了这步，再找资源，别做松鼠。</p><p>关于难度高的，可以先跳过，记录下来，后面再补上，比如数据结构、JVM底层、多线程与高并发、GUI 等等...别把初学时间浪费在这上面。</p><p>不要背代码，要掌握原理，方法可以到 API文档上查。之前基本都是概念上的东西，理解就好了，但学到集合、IO、常用类如String，只背方法名一定会消灭你学习的兴趣。</p><p>如果学习资料抛出一大堆让人心痒痒的新名词，操作不讲规则与原理，没有容易理解的例子，只是像背或粘贴似的敲打代码以及一大堆的命令控制流程，那么我劝你趁早跳过，用时再翻阅。</p><p><strong>4、管理好精力</strong></p><p>并不是一直在同一个地方枯坐，工作效率才会高。</p><p>要合理分配精力，因为精力是有限的。学习并不是生活的全部，如果你整天扑到学习上，只会感动自己。随着精力的消耗，自控力的减弱，一定会在某天突然崩掉，开始变得什么都没有兴趣，行动力拉到最低，即使强迫在学，也只是枯坐原地，享受着左耳进右耳出的枯燥感。</p><p>早起别熬夜，每天一定留至少 30 分钟的时间午睡。（为了第 2天的精神良好）学习时推荐使用番茄钟，每过半小时就休息一小会，合理分配精力。（休息时不要看电子产品与动脑筋，要适当远眺）</p><p><strong>5、学好英语</strong></p><p>没什么说的，英语真的很通用很重要，为了阅读懂优质的国外资料。看着机翻的我太拉跨的，简直是哑巴英语。学不会也没关系，就算关了一扇窗，把开这扇窗的力量用到别的地方去，一定不会浪费的。</p><p><strong>6、必学的知识点</strong></p><p>从大多招聘岗位的要求取出交集：</p><p>IO、集合、JVM、多线程、Spring、SpringBoot、SpringMVC、MyBatis、Dubbo、SpringCloud、JavaScript、Vue、MySQL与 Oracle 取其一、SQL调优、Redis、Tomcat、Nginx、Docker、Zookeeper、RabbitMQ、Kafka、Linux、HTTP与 TCP / IP 协议、Socker、Maven、Git、AJAX、ElasticSearch</p><p>剩下的知识，应聘意中岗位时再选择性补全。</p><p><strong>7、选择书籍还是视频</strong></p><p>视频时间看完所需时间更长，但可以一步步来，如果章节内容划分合理，每个视频时常合适，学习者更轻松完成每个目标，掌握自己的进度。适合初学者。</p><p>书籍花费时间较少，但经常有断节之处，初学者搞不明白缺少哪一个环节，看着晦涩难懂的文字，翻不了几页就草草放弃，适合耐得住性子的人。</p><p><strong>8、不要过分追求完美（承认自己的不足之处）</strong></p><p>想做就直接放手干，不要计划的那么周全，稍微一有变动，就放弃目标，想明天再做。是吧，别觉得只有从容不迫、不慌不忙、按部就班地才叫做事，而达不到自己的心理预期就不做了，大多数人都是计划赶不上变化，被搞得灰头土脸的。</p><p>另外人都是有惯性的，如果设置了太高的目标难度，只要有一天没坚持下来或不想做了，那么最终结果一定是放弃。</p><p>这不禁让我怀疑，以前对生命的定义。我本来以为生命是一种奇迹，我感到自豪，超脱于物质之上；比如从下坡推一个石头，它只会毫无疑问的滚落下去，而我们可以做出反应。</p><p>但经过太多的事后，我发现生命的本质与死物没有太大区别；生命就像是一台精密的操作仪器，如同电脑、机器人，只不过比它们先进点。</p><p>接收输入做出反应，将应对方式与最终结果存储；等下一次事件再发生时，可以不断优化脑海中存储的应对危机的方法，达成自我学习的本领。</p><p><strong>9、学会分享</strong></p><p>不要闭门造车，要发在各大网站上分享，Markdown语法如果你都会了，直接发在博客网上。不要觉得自己技术菜。</p><p>第一，人人都有开始，你发出来了，别人才能纠正你的错误，避免成为井底之蛙。</p><p>第二，你又开始自耗了，不停地在脑海天人交战，一顿脑补：会不会万一发出来被人嘲笑怎么办？...于是藏着掖着，生怕别人知道，出丑，事情还未做，就想一系列的后果，别人有多可恶。我觉得世上还是好心人多，当然不要被零星几个恶评就忽略了大多数支持你的人。</p><p>第三，百分之 99.9 的人根本刷不到你的文章，或者一下就 ×过去了，即使刷到了，那还有 9.9成人浏览刷的一下就关了，评论的那是少之又少，凤毛麟角。如果帮助不到他，谁还关心你是谁，最多充当局外客感到可笑。当你还在纠结别人的看法时，纠结要不要做时，别人根本记都不记得你。我们在网络时代那是十分渺小，沧海一粟，很快被淹没，就算有弄潮儿掀起了几朵浪花，也会很快平息，所以别再纠结丢不丢脸了。</p><p><strong>10、关于努力与勤奋</strong></p><p>有人经常说，要自律，要吃苦，要努力，才能成功，你看看这些成功人士都是这样...努力才能得到一切，才能成功。但我抛出一个结论：努力与吃苦，并不能成功，也不能改变命运。</p><p>他们忽略了一个东西，自律、吃苦等只是个表面行动展现出来的结果，并不是成功的原因。比如你打王者，技术很菜，但是你就想升段位，不用别人提醒，开了一把有一把，一直连跪，日夜颠倒，身体早就向你警告了，这种违反本能的行为真够自律的。不打一定不会上王者，打了无数盘由于技术太菜，也不一定能上王者。</p><p>另外无论是游戏、还是学习，多了总会令人厌烦，这不是真心喜欢，大多数人并不喜欢打游戏，这只是无声的对抗与放纵罢了。</p><p>如果你真心地想要完成某个目标，你不会觉得这是折磨的。再次声明，不是自律、努力才会成功，<strong>它们实际是想到达成目标，而自发控制自己身体机能活动的行为。</strong></p><p>所以努力只是达成目标的一种手段；由于基因与环境很难改变，于是性格也几乎定型，形成了独有的接人待物的一套行为模式，感兴趣并为之付出汗水的也就那么几件，还要承受不理解；</p><p>之所以说“努力改变命运”这种只是安慰、激励自己的空话，是因为至少要给一点希望，好被利用，而不是自暴自弃，十分绝望，没有向上的动力；如果让“唉，都是自己不够聪明，天赋不好，于是就不努力了，让子代好好搞吧（甚至认为改变不了，都不要后代了）”的观点占了主流，那么原本有希望改变的人也会受到负面影响；</p><p>所以人们不太乐意听“唉呀，只是你天赋好”之类的话，无法改变的事实对其他人是沉重的打击。这就是不要将过错、天赋归咎于自身，而是归因于经验水平不足，认为只要努力就还有希望进步。</p><p>我之前都说过部分人根本就谈不上拼努力与天赋，正常学习不放弃就OK，没有必要与头部的那群神仙比；刷熟练度而已，当然在没有专家指点迷津的情况下，自己总结出的经验（甚至还没有，只是靠肌肉记忆）很可能不完善，很快就会达到瓶颈，再无寸进，这时就比拼天分与悟性了，但不管怎么说总比从来都不碰强。</p><p>“努力才能成功”这种原意激励人给以力量，逐渐成了合法霸凌其他人的手段，潜台词被恶意解读成“不成功就是你还不够努力”、“不成功就是你在假努力、无效努力”、“什么比不过人，就说你还不够努力”，偏偏还难以反驳，一说就是找借口，只能怀疑自己；得，由此观点诞生了一个又一个诱捕器，看着似乎有道理，其实空空如也。</p><p>自从这句话变味后，努力似乎慢慢变得廉价，成为人最基本的底线。</p><p>那么我换一种说法：“知识就是力量”。</p><p>友情提醒：全身心很耗精力，记得番茄钟打断此状态（半小时），休息的时间眺望远方，不要看电视、玩智能设备，否则越来越累。</p><p><strong>11、学完要多久？</strong></p><p>如果你不复习，不怎么练，只看视频的话，最多半年。能够记住多少看命。</p><p>正常一年半（每天 8 小时以上不间断）</p><p><strong>12、是不是很难？</strong></p><p>相比越到后面越抽象，一环扣一环的数学，Java其实还算好，小白也能调用方法完成工作，理解一下就行，屏蔽了底层如何实现的繁琐细节，看看API 即可拿来用。</p><p>至于为什么一看就会，一敲就废？是不是我没有天赋？</p><p>说实话，这些东西不会就跳过，以后再补，只要学会调用方法，看看 API就行。还没有达到拼天赋的地步，努力也无需拼，努力只是外表展现的结果，而不是因，若你感觉自己很努力了，很痛苦，就像我之前说的这样，你想想哪里出现了问题，是不是真的不感兴趣，居然会觉得要强逼自己，努力才会成功？想着人只有逼逼自己才行？</p><p>话说回来，不会不是真的完全不会，而是你看时觉得很正常，但一到做时脑海中缺少一些关键片段，甚至连思绪的头都没有，无法串联成珠，往往出错，其他人只不过是由于过往经历（熟能生巧）或者下自然地就补齐了这个漏洞。</p><p>没必要担心，如果你接触它的时间过长，会弥补的。不用特意寻找解决它的办法，多看看就行。（把同一个知识点学三遍差不多就熟了）</p><p>此外我觉得人略微笨些，是好事，意味着你能够帮助这世界绝大多数人，不会出现理所当然，而一些人却不能理解的事，知道哪里有槛，知道一些人哪里有误区。只要你走通了，其他人就能走通。</p><p>花自己的时间，让更多人节省了时间，值。努力活完短短的一生，将所得成果留给后代分享，人类真的是很了不起呢。</p><p>2021.2.11</p><h3 id="第-0-版自序">第 0 版自序</h3><p>今天是网上学习 Java的第一天，自学，根据学习路线图一篇篇在网上搜来的知识。</p><p>本人才疏学浅，感悟还不够深，只能根据些许痕迹揣摩出背后道理。主要是臆想成分居多,如果有什么不对的地方,还请各位大师指点,大家一起共同进步。</p><p>另外希望把已建立的认知体系撕开一个口，推倒。<strong>包容，承认自己的失败</strong>，不要斗气就认这个死理，大不了掌握其它方法重头再来。</p><p>2020.6.13</p>]]></content>
      
      
      <categories>
          
          <category> 1.1 语法入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1. JavaSE </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
